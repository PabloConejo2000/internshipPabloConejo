/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmy_app"] = self["webpackChunkmy_app"] || []).push([["vendors-assets_my-app_js-rewritten-packages_ember-data_adapter_85bda234_node_modules_ember-da-04bcb3"],{

/***/ "../../css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[0]!./app.css":
/*!***************************************************************************************************************************************!*\
  !*** ../../css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[0]!./app.css ***!
  \***************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../css-loader/dist/runtime/api.js */ \"../../css-loader/dist/runtime/api.js\");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*\\n! tailwindcss v3.4.3 | MIT License | https://tailwindcss.com\\n*//*\\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\\n*/\\n\\n*,\\n::before,\\n::after {\\n  box-sizing: border-box; /* 1 */\\n  border-width: 0; /* 2 */\\n  border-style: solid; /* 2 */\\n  border-color: #e5e7eb; /* 2 */\\n}\\n\\n::before,\\n::after {\\n  --tw-content: '';\\n}\\n\\n/*\\n1. Use a consistent sensible line-height in all browsers.\\n2. Prevent adjustments of font size after orientation changes in iOS.\\n3. Use a more readable tab size.\\n4. Use the user's configured `sans` font-family by default.\\n5. Use the user's configured `sans` font-feature-settings by default.\\n6. Use the user's configured `sans` font-variation-settings by default.\\n7. Disable tap highlights on iOS\\n*/\\n\\nhtml,\\n:host {\\n  line-height: 1.5; /* 1 */\\n  -webkit-text-size-adjust: 100%; /* 2 */\\n  -moz-tab-size: 4; /* 3 */\\n  -o-tab-size: 4;\\n     tab-size: 4; /* 3 */\\n  font-family: ui-sans-serif, system-ui, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\", \\\"Noto Color Emoji\\\"; /* 4 */\\n  font-feature-settings: normal; /* 5 */\\n  font-variation-settings: normal; /* 6 */\\n  -webkit-tap-highlight-color: transparent; /* 7 */\\n}\\n\\n/*\\n1. Remove the margin in all browsers.\\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\\n*/\\n\\nbody {\\n  margin: 0; /* 1 */\\n  line-height: inherit; /* 2 */\\n}\\n\\n/*\\n1. Add the correct height in Firefox.\\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\\n3. Ensure horizontal rules are visible by default.\\n*/\\n\\nhr {\\n  height: 0; /* 1 */\\n  color: inherit; /* 2 */\\n  border-top-width: 1px; /* 3 */\\n}\\n\\n/*\\nAdd the correct text decoration in Chrome, Edge, and Safari.\\n*/\\n\\nabbr:where([title]) {\\n  -webkit-text-decoration: underline dotted;\\n          text-decoration: underline dotted;\\n}\\n\\n/*\\nRemove the default font size and weight for headings.\\n*/\\n\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6 {\\n  font-size: inherit;\\n  font-weight: inherit;\\n}\\n\\n/*\\nReset links to optimize for opt-in styling instead of opt-out.\\n*/\\n\\na {\\n  color: inherit;\\n  text-decoration: inherit;\\n}\\n\\n/*\\nAdd the correct font weight in Edge and Safari.\\n*/\\n\\nb,\\nstrong {\\n  font-weight: bolder;\\n}\\n\\n/*\\n1. Use the user's configured `mono` font-family by default.\\n2. Use the user's configured `mono` font-feature-settings by default.\\n3. Use the user's configured `mono` font-variation-settings by default.\\n4. Correct the odd `em` font sizing in all browsers.\\n*/\\n\\ncode,\\nkbd,\\nsamp,\\npre {\\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \\\"Liberation Mono\\\", \\\"Courier New\\\", monospace; /* 1 */\\n  font-feature-settings: normal; /* 2 */\\n  font-variation-settings: normal; /* 3 */\\n  font-size: 1em; /* 4 */\\n}\\n\\n/*\\nAdd the correct font size in all browsers.\\n*/\\n\\nsmall {\\n  font-size: 80%;\\n}\\n\\n/*\\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\\n*/\\n\\nsub,\\nsup {\\n  font-size: 75%;\\n  line-height: 0;\\n  position: relative;\\n  vertical-align: baseline;\\n}\\n\\nsub {\\n  bottom: -0.25em;\\n}\\n\\nsup {\\n  top: -0.5em;\\n}\\n\\n/*\\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\\n3. Remove gaps between table borders by default.\\n*/\\n\\ntable {\\n  text-indent: 0; /* 1 */\\n  border-color: inherit; /* 2 */\\n  border-collapse: collapse; /* 3 */\\n}\\n\\n/*\\n1. Change the font styles in all browsers.\\n2. Remove the margin in Firefox and Safari.\\n3. Remove default padding in all browsers.\\n*/\\n\\nbutton,\\ninput,\\noptgroup,\\nselect,\\ntextarea {\\n  font-family: inherit; /* 1 */\\n  font-feature-settings: inherit; /* 1 */\\n  font-variation-settings: inherit; /* 1 */\\n  font-size: 100%; /* 1 */\\n  font-weight: inherit; /* 1 */\\n  line-height: inherit; /* 1 */\\n  letter-spacing: inherit; /* 1 */\\n  color: inherit; /* 1 */\\n  margin: 0; /* 2 */\\n  padding: 0; /* 3 */\\n}\\n\\n/*\\nRemove the inheritance of text transform in Edge and Firefox.\\n*/\\n\\nbutton,\\nselect {\\n  text-transform: none;\\n}\\n\\n/*\\n1. Correct the inability to style clickable types in iOS and Safari.\\n2. Remove default button styles.\\n*/\\n\\nbutton,\\ninput:where([type='button']),\\ninput:where([type='reset']),\\ninput:where([type='submit']) {\\n  -webkit-appearance: button; /* 1 */\\n  background-color: transparent; /* 2 */\\n  background-image: none; /* 2 */\\n}\\n\\n/*\\nUse the modern Firefox focus style for all focusable elements.\\n*/\\n\\n:-moz-focusring {\\n  outline: auto;\\n}\\n\\n/*\\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\\n*/\\n\\n:-moz-ui-invalid {\\n  box-shadow: none;\\n}\\n\\n/*\\nAdd the correct vertical alignment in Chrome and Firefox.\\n*/\\n\\nprogress {\\n  vertical-align: baseline;\\n}\\n\\n/*\\nCorrect the cursor style of increment and decrement buttons in Safari.\\n*/\\n\\n::-webkit-inner-spin-button,\\n::-webkit-outer-spin-button {\\n  height: auto;\\n}\\n\\n/*\\n1. Correct the odd appearance in Chrome and Safari.\\n2. Correct the outline style in Safari.\\n*/\\n\\n[type='search'] {\\n  -webkit-appearance: textfield; /* 1 */\\n  outline-offset: -2px; /* 2 */\\n}\\n\\n/*\\nRemove the inner padding in Chrome and Safari on macOS.\\n*/\\n\\n::-webkit-search-decoration {\\n  -webkit-appearance: none;\\n}\\n\\n/*\\n1. Correct the inability to style clickable types in iOS and Safari.\\n2. Change font properties to `inherit` in Safari.\\n*/\\n\\n::-webkit-file-upload-button {\\n  -webkit-appearance: button; /* 1 */\\n  font: inherit; /* 2 */\\n}\\n\\n/*\\nAdd the correct display in Chrome and Safari.\\n*/\\n\\nsummary {\\n  display: list-item;\\n}\\n\\n/*\\nRemoves the default spacing and border for appropriate elements.\\n*/\\n\\nblockquote,\\ndl,\\ndd,\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6,\\nhr,\\nfigure,\\np,\\npre {\\n  margin: 0;\\n}\\n\\nfieldset {\\n  margin: 0;\\n  padding: 0;\\n}\\n\\nlegend {\\n  padding: 0;\\n}\\n\\nol,\\nul,\\nmenu {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n/*\\nReset default styling for dialogs.\\n*/\\ndialog {\\n  padding: 0;\\n}\\n\\n/*\\nPrevent resizing textareas horizontally by default.\\n*/\\n\\ntextarea {\\n  resize: vertical;\\n}\\n\\n/*\\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\\n2. Set the default placeholder color to the user's configured gray 400 color.\\n*/\\n\\ninput::-moz-placeholder, textarea::-moz-placeholder {\\n  opacity: 1; /* 1 */\\n  color: #9ca3af; /* 2 */\\n}\\n\\ninput::placeholder,\\ntextarea::placeholder {\\n  opacity: 1; /* 1 */\\n  color: #9ca3af; /* 2 */\\n}\\n\\n/*\\nSet the default cursor for buttons.\\n*/\\n\\nbutton,\\n[role=\\\"button\\\"] {\\n  cursor: pointer;\\n}\\n\\n/*\\nMake sure disabled buttons don't get the pointer cursor.\\n*/\\n:disabled {\\n  cursor: default;\\n}\\n\\n/*\\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\\n   This can trigger a poorly considered lint error in some tools but is included by design.\\n*/\\n\\nimg,\\nsvg,\\nvideo,\\ncanvas,\\naudio,\\niframe,\\nembed,\\nobject {\\n  display: block; /* 1 */\\n  vertical-align: middle; /* 2 */\\n}\\n\\n/*\\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\\n*/\\n\\nimg,\\nvideo {\\n  max-width: 100%;\\n  height: auto;\\n}\\n\\n/* Make elements with the HTML hidden attribute stay hidden by default */\\n[hidden] {\\n  display: none;\\n}\\n\\n*, ::before, ::after {\\n  --tw-border-spacing-x: 0;\\n  --tw-border-spacing-y: 0;\\n  --tw-translate-x: 0;\\n  --tw-translate-y: 0;\\n  --tw-rotate: 0;\\n  --tw-skew-x: 0;\\n  --tw-skew-y: 0;\\n  --tw-scale-x: 1;\\n  --tw-scale-y: 1;\\n  --tw-pan-x:  ;\\n  --tw-pan-y:  ;\\n  --tw-pinch-zoom:  ;\\n  --tw-scroll-snap-strictness: proximity;\\n  --tw-gradient-from-position:  ;\\n  --tw-gradient-via-position:  ;\\n  --tw-gradient-to-position:  ;\\n  --tw-ordinal:  ;\\n  --tw-slashed-zero:  ;\\n  --tw-numeric-figure:  ;\\n  --tw-numeric-spacing:  ;\\n  --tw-numeric-fraction:  ;\\n  --tw-ring-inset:  ;\\n  --tw-ring-offset-width: 0px;\\n  --tw-ring-offset-color: #fff;\\n  --tw-ring-color: rgb(59 130 246 / 0.5);\\n  --tw-ring-offset-shadow: 0 0 #0000;\\n  --tw-ring-shadow: 0 0 #0000;\\n  --tw-shadow: 0 0 #0000;\\n  --tw-shadow-colored: 0 0 #0000;\\n  --tw-blur:  ;\\n  --tw-brightness:  ;\\n  --tw-contrast:  ;\\n  --tw-grayscale:  ;\\n  --tw-hue-rotate:  ;\\n  --tw-invert:  ;\\n  --tw-saturate:  ;\\n  --tw-sepia:  ;\\n  --tw-drop-shadow:  ;\\n  --tw-backdrop-blur:  ;\\n  --tw-backdrop-brightness:  ;\\n  --tw-backdrop-contrast:  ;\\n  --tw-backdrop-grayscale:  ;\\n  --tw-backdrop-hue-rotate:  ;\\n  --tw-backdrop-invert:  ;\\n  --tw-backdrop-opacity:  ;\\n  --tw-backdrop-saturate:  ;\\n  --tw-backdrop-sepia:  ;\\n  --tw-contain-size:  ;\\n  --tw-contain-layout:  ;\\n  --tw-contain-paint:  ;\\n  --tw-contain-style:  ;\\n}\\n\\n::backdrop {\\n  --tw-border-spacing-x: 0;\\n  --tw-border-spacing-y: 0;\\n  --tw-translate-x: 0;\\n  --tw-translate-y: 0;\\n  --tw-rotate: 0;\\n  --tw-skew-x: 0;\\n  --tw-skew-y: 0;\\n  --tw-scale-x: 1;\\n  --tw-scale-y: 1;\\n  --tw-pan-x:  ;\\n  --tw-pan-y:  ;\\n  --tw-pinch-zoom:  ;\\n  --tw-scroll-snap-strictness: proximity;\\n  --tw-gradient-from-position:  ;\\n  --tw-gradient-via-position:  ;\\n  --tw-gradient-to-position:  ;\\n  --tw-ordinal:  ;\\n  --tw-slashed-zero:  ;\\n  --tw-numeric-figure:  ;\\n  --tw-numeric-spacing:  ;\\n  --tw-numeric-fraction:  ;\\n  --tw-ring-inset:  ;\\n  --tw-ring-offset-width: 0px;\\n  --tw-ring-offset-color: #fff;\\n  --tw-ring-color: rgb(59 130 246 / 0.5);\\n  --tw-ring-offset-shadow: 0 0 #0000;\\n  --tw-ring-shadow: 0 0 #0000;\\n  --tw-shadow: 0 0 #0000;\\n  --tw-shadow-colored: 0 0 #0000;\\n  --tw-blur:  ;\\n  --tw-brightness:  ;\\n  --tw-contrast:  ;\\n  --tw-grayscale:  ;\\n  --tw-hue-rotate:  ;\\n  --tw-invert:  ;\\n  --tw-saturate:  ;\\n  --tw-sepia:  ;\\n  --tw-drop-shadow:  ;\\n  --tw-backdrop-blur:  ;\\n  --tw-backdrop-brightness:  ;\\n  --tw-backdrop-contrast:  ;\\n  --tw-backdrop-grayscale:  ;\\n  --tw-backdrop-hue-rotate:  ;\\n  --tw-backdrop-invert:  ;\\n  --tw-backdrop-opacity:  ;\\n  --tw-backdrop-saturate:  ;\\n  --tw-backdrop-sepia:  ;\\n  --tw-contain-size:  ;\\n  --tw-contain-layout:  ;\\n  --tw-contain-paint:  ;\\n  --tw-contain-style:  ;\\n}\\n.-ml-56 {\\n  margin-left: -14rem;\\n}\\n.mb-12 {\\n  margin-bottom: 3rem;\\n}\\n.mb-16 {\\n  margin-bottom: 4rem;\\n}\\n.mb-2 {\\n  margin-bottom: 0.5rem;\\n}\\n.mb-4 {\\n  margin-bottom: 1rem;\\n}\\n.mb-6 {\\n  margin-bottom: 1.5rem;\\n}\\n.mb-8 {\\n  margin-bottom: 2rem;\\n}\\n.ml-10 {\\n  margin-left: 2.5rem;\\n}\\n.ml-2 {\\n  margin-left: 0.5rem;\\n}\\n.ml-4 {\\n  margin-left: 1rem;\\n}\\n.ml-8 {\\n  margin-left: 2rem;\\n}\\n.mt-4 {\\n  margin-top: 1rem;\\n}\\n.mt-9 {\\n  margin-top: 2.25rem;\\n}\\n.block {\\n  display: block;\\n}\\n.flex {\\n  display: flex;\\n}\\n.grid {\\n  display: grid;\\n}\\n.w-48 {\\n  width: 12rem;\\n}\\n.w-full {\\n  width: 100%;\\n}\\n.grid-cols-2 {\\n  grid-template-columns: repeat(2, minmax(0, 1fr));\\n}\\n.grid-cols-3 {\\n  grid-template-columns: repeat(3, minmax(0, 1fr));\\n}\\n.place-content-center {\\n  place-content: center;\\n}\\n.content-center {\\n  align-content: center;\\n}\\n.items-center {\\n  align-items: center;\\n}\\n.items-stretch {\\n  align-items: stretch;\\n}\\n.justify-center {\\n  justify-content: center;\\n}\\n.rounded {\\n  border-radius: 0.25rem;\\n}\\n.rounded-xl {\\n  border-radius: 0.75rem;\\n}\\n.border {\\n  border-width: 1px;\\n}\\n.border-blue-700 {\\n  --tw-border-opacity: 1;\\n  border-color: rgb(29 78 216 / var(--tw-border-opacity));\\n}\\n.border-gray-300 {\\n  --tw-border-opacity: 1;\\n  border-color: rgb(209 213 219 / var(--tw-border-opacity));\\n}\\n.bg-blue-600 {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(37 99 235 / var(--tw-bg-opacity));\\n}\\n.bg-orange-rental {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(228 104 85 / var(--tw-bg-opacity));\\n}\\n.bg-welcome {\\n  background-color: #f6f6f6;;\\n}\\n.object-cover {\\n  -o-object-fit: cover;\\n     object-fit: cover;\\n}\\n.p-16 {\\n  padding: 4rem;\\n}\\n.p-4 {\\n  padding: 1rem;\\n}\\n.px-4 {\\n  padding-left: 1rem;\\n  padding-right: 1rem;\\n}\\n.py-2 {\\n  padding-top: 0.5rem;\\n  padding-bottom: 0.5rem;\\n}\\n.pb-2 {\\n  padding-bottom: 0.5rem;\\n}\\n.pl-64 {\\n  padding-left: 16rem;\\n}\\n.pr-64 {\\n  padding-right: 16rem;\\n}\\n.pt-0 {\\n  padding-top: 0px;\\n}\\n.text-center {\\n  text-align: center;\\n}\\n.text-2xl {\\n  font-size: 1.5rem;\\n  line-height: 2rem;\\n}\\n.text-4xl {\\n  font-size: 2.25rem;\\n  line-height: 2.5rem;\\n}\\n.text-5xl {\\n  font-size: 3rem;\\n  line-height: 1;\\n}\\n.text-rental-custom {\\n  font-size: 1.8rem;\\n}\\n.text-xl {\\n  font-size: 1.25rem;\\n  line-height: 1.75rem;\\n}\\n.font-bold {\\n  font-weight: 700;\\n}\\n.font-light {\\n  font-weight: 300;\\n}\\n.font-thin {\\n  font-weight: 100;\\n}\\n.italic {\\n  font-style: italic;\\n}\\n.text-blue-500 {\\n  --tw-text-opacity: 1;\\n  color: rgb(59 130 246 / var(--tw-text-opacity));\\n}\\n.text-blue-600 {\\n  --tw-text-opacity: 1;\\n  color: rgb(37 99 235 / var(--tw-text-opacity));\\n}\\n.text-gray-900 {\\n  --tw-text-opacity: 1;\\n  color: rgb(17 24 39 / var(--tw-text-opacity));\\n}\\n.text-white {\\n  --tw-text-opacity: 1;\\n  color: rgb(255 255 255 / var(--tw-text-opacity));\\n}\\n.filter {\\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\\n}\\n.hover\\\\:bg-blue-200:hover {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(191 219 254 / var(--tw-bg-opacity));\\n}\\n.hover\\\\:bg-blue-700:hover {\\n  --tw-bg-opacity: 1;\\n  background-color: rgb(29 78 216 / var(--tw-bg-opacity));\\n}\\n\\n\\n\\n\", \"\"]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://my-app/./app.css?../../css-loader/dist/cjs.js??ruleSet%5B1%5D.rules%5B2%5D.use%5B1%5D!../../postcss-loader/dist/cjs.js??ruleSet%5B1%5D.rules%5B3%5D.use%5B0%5D");

/***/ }),

/***/ "../../css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[0]!../../ember-welcome-page/dist/components/welcome-page.css":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ../../css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[0]!../../ember-welcome-page/dist/components/welcome-page.css ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ \"../../css-loader/dist/runtime/api.js\");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body {\\n  color: rgb(28, 30, 36);\\n  background: rgb(244, 246, 248);\\n  font-family: \\\"Inter var\\\",\\\"Inter web\\\",-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji;\\n  font-size: 18px;\\n  font-weight: 200;\\n  line-height: 1.5;\\n  margin: 0 auto;\\n  padding: 0;\\n}\\n#ember-welcome-page-id-selector {\\n  height: 100vh;\\n  padding: 2em;\\n}\\n#ember-welcome-page-id-selector img {\\n  max-width: 100%;\\n}\\n#ember-welcome-page-id-selector p {\\n  font-size: 1.25em;\\n  margin: 0 0 .75em;\\n}\\n#ember-welcome-page-id-selector h1 {\\n  font-size: 2.5em;\\n  font-weight: 200;\\n  line-height: 1.2;\\n  margin-top: 0;\\n}\\n#ember-welcome-page-id-selector a:link,\\n#ember-welcome-page-id-selector a:visited {\\n  color:rgb(255, 92, 68);\\n}\\n#ember-welcome-page-id-selector a:hover,\\n#ember-welcome-page-id-selector a:active {\\n  color: rgb(255, 92, 68);\\n}\\n#ember-welcome-page-id-selector .tomster {\\n  flex: 2;\\n}\\n#ember-welcome-page-id-selector .welcome {\\n  flex: 3;\\n}\\n#ember-welcome-page-id-selector .columns {\\n  display: flex;\\n  margin: 0 auto;\\n  max-width: 960px;\\n}\\n#ember-welcome-page-id-selector .welcome > ul > li {\\n  padding-bottom: 0.5em;\\n  font-size: 1.1em;\\n}\\n#ember-welcome-page-id-selector .welcome > ul > li > a {\\n  font-weight: bold;\\n}\\n#ember-welcome-page-id-selector .postscript {\\n  color: rgb(28, 30, 36);\\n  background: rgb(244, 246, 248);\\n  font-style: italic;\\n  line-height: 2;\\n  margin: 0 auto;\\n  max-width: 960px;\\n  padding-top: 3em;\\n  text-align: center;\\n}\\n#ember-welcome-page-id-selector .postscript code {\\n  color: rgb(244, 246, 248);\\n  border-radius: 3px;\\n  background-color: rgb(28, 30, 36);\\n  display: inline-block;\\n  font-family: Menlo, Courier, monospace;\\n  font-size: 0.9em;\\n  margin: 0 0.1em;\\n  padding: 0 0.5em;\\n}\\n@media (max-width: 700px) {\\n  #ember-welcome-page-id-selector {\\n    padding: 1em;\\n  }\\n  #ember-welcome-page-id-selector .columns {\\n    flex-direction: column;\\n  }\\n  #ember-welcome-page-id-selector .tomster img {\\n    display: block;\\n    margin: auto;\\n    width: 50%;\\n  }\\n  #ember-welcome-page-id-selector h2 {\\n    text-align: center;\\n  }\\n}\\n@media (max-width: 400px) {\\n  #ember-welcome-page-id-selector .tomster img {\\n    width: 60%;\\n  }\\n  #ember-welcome-page-id-selector .welcome,\\n  #ember-welcome-page-id-selector .tomster {\\n    float: none;\\n    margin: auto;\\n    width: 100%;\\n  }\\n}\\n\", \"\"]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://my-app/../../ember-welcome-page/dist/components/welcome-page.css?../../css-loader/dist/cjs.js??ruleSet%5B1%5D.rules%5B2%5D.use%5B1%5D!../../postcss-loader/dist/cjs.js??ruleSet%5B1%5D.rules%5B3%5D.use%5B0%5D");

/***/ }),

/***/ "./app.css":
/*!*****************!*\
  !*** ./app.css ***!
  \*****************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_ruleSet_1_rules_2_use_1_postcss_loader_dist_cjs_js_ruleSet_1_rules_3_use_0_app_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[0]!./app.css */ \"../../css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[0]!./app.css\");\n\n            \n\nvar options = {\"injectType\":\"styleTag\"};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_ruleSet_1_rules_2_use_1_postcss_loader_dist_cjs_js_ruleSet_1_rules_3_use_0_app_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_ruleSet_1_rules_2_use_1_postcss_loader_dist_cjs_js_ruleSet_1_rules_3_use_0_app_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"].locals || {});\n\n//# sourceURL=webpack://my-app/./app.css?");

/***/ }),

/***/ "../../ember-welcome-page/dist/components/welcome-page.css":
/*!*****************************************************************!*\
  !*** ../../ember-welcome-page/dist/components/welcome-page.css ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_ruleSet_1_rules_2_use_1_postcss_loader_dist_cjs_js_ruleSet_1_rules_3_use_0_welcome_page_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../../postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[0]!./welcome-page.css */ \"../../css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[0]!../../ember-welcome-page/dist/components/welcome-page.css\");\n\n            \n\nvar options = {\"injectType\":\"styleTag\"};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_ruleSet_1_rules_2_use_1_postcss_loader_dist_cjs_js_ruleSet_1_rules_3_use_0_welcome_page_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_ruleSet_1_rules_2_use_1_postcss_loader_dist_cjs_js_ruleSet_1_rules_3_use_0_welcome_page_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"].locals || {});\n\n//# sourceURL=webpack://my-app/../../ember-welcome-page/dist/components/welcome-page.css?");

/***/ }),

/***/ "../../style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!*******************************************************************!*\
  !*** ../../style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : 0;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://my-app/../../style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./components/buttons/share/template.hbs":
/*!***********************************************!*\
  !*** ./components/buttons/share/template.hbs ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__.createTemplateFactory)(\n/*\n  <a ...attributes {{!para acceder a los atributos}} href={{this.shareURL}} target=\"_blank\"\n  rel=\"external nofollow noopener noreferrer\">\n  {{yield}}\n</a>\n*/\n{\n  \"id\": \"221HMSqC\",\n  \"block\": \"[[[11,3],[17,1],[16,6,[30,0,[\\\"shareURL\\\"]]],[24,\\\"target\\\",\\\"_blank\\\"],[24,\\\"rel\\\",\\\"external nofollow noopener noreferrer\\\"],[12],[1,\\\"\\\\n  \\\"],[18,2,null],[1,\\\"\\\\n\\\"],[13]],[\\\"&attrs\\\",\\\"&default\\\"],false,[\\\"a\\\",\\\"yield\\\"]]\",\n  \"moduleName\": \"my-app/components/buttons/share/template.hbs\",\n  \"isStrictMode\": false\n}));\n\n//# sourceURL=webpack://my-app/./components/buttons/share/template.hbs?");

/***/ }),

/***/ "./components/dog/template.hbs":
/*!*************************************!*\
  !*** ./components/dog/template.hbs ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__.createTemplateFactory)(\n/*\n  <div class=\"place-content-center \">\n    <div>\n        <h2 class=\"mb-2 text-center text-2xl\">If you press the following button u will get a random dog</h2>\n    </div>\n    <div class=\"mb-2  flex items-center justify-center \">\n        {{! aquí cuando le damos click llamamos a la funcion updateDogState pasandole el parametro dog}}\n        <button class=\" bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700\n            rounded  \" {{on \"click\" (fn this.updateDogState 'dog' )}}>Get a random dog image</button>\n\n    </div>\n    <div>\n        <h2 class=\"mb-2 text-center text-2xl\">If you press the followinf button u will get a boxer dog</h2>\n    </div>\n    <div class=\"mb-2  flex items-center justify-center \">\n        {{!En este hacemos lo mismo que arriba pero pasandole el parametro boxer}}\n        <button class=\" bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700\n            rounded  \" {{on \"click\" (fn this.updateDogState 'boxer' )}}>Change to boxer</button>\n    </div>\n    <div class=\" mb-2 flex items-center justify-center \">\n        {{! Se muestra la imagen \"dogImage\" cuando se renderiza el componente gracias a la funcion getRandomDog}}\n        <img class=\"w-50 h-50 \" src={{this.dogImage}} alt='Random Dog' {{did-insert this.getRandomDog}} {{did-update\n            this.updateDog this.dogImageUpdated}}>\n\n    </div>\n\n    <div class=\" mb-2 flex items-center justify-center \">\n\n\n\n\n    </div>\n\n\n\n\n</div>\n*/\n{\n  \"id\": \"SZJO6f/H\",\n  \"block\": \"[[[10,0],[14,0,\\\"place-content-center \\\"],[12],[1,\\\"\\\\n    \\\"],[10,0],[12],[1,\\\"\\\\n        \\\"],[10,\\\"h2\\\"],[14,0,\\\"mb-2 text-center text-2xl\\\"],[12],[1,\\\"If you press the following button u will get a random dog\\\"],[13],[1,\\\"\\\\n    \\\"],[13],[1,\\\"\\\\n    \\\"],[10,0],[14,0,\\\"mb-2  flex items-center justify-center \\\"],[12],[1,\\\"\\\\n\\\"],[1,\\\"        \\\"],[11,\\\"button\\\"],[24,0,\\\" bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700\\\\n            rounded  \\\"],[4,[38,3],[\\\"click\\\",[28,[37,4],[[30,0,[\\\"updateDogState\\\"]],\\\"dog\\\"],null]],null],[12],[1,\\\"Get a random dog image\\\"],[13],[1,\\\"\\\\n\\\\n    \\\"],[13],[1,\\\"\\\\n    \\\"],[10,0],[12],[1,\\\"\\\\n        \\\"],[10,\\\"h2\\\"],[14,0,\\\"mb-2 text-center text-2xl\\\"],[12],[1,\\\"If you press the followinf button u will get a boxer dog\\\"],[13],[1,\\\"\\\\n    \\\"],[13],[1,\\\"\\\\n    \\\"],[10,0],[14,0,\\\"mb-2  flex items-center justify-center \\\"],[12],[1,\\\"\\\\n\\\"],[1,\\\"        \\\"],[11,\\\"button\\\"],[24,0,\\\" bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700\\\\n            rounded  \\\"],[4,[38,3],[\\\"click\\\",[28,[37,4],[[30,0,[\\\"updateDogState\\\"]],\\\"boxer\\\"],null]],null],[12],[1,\\\"Change to boxer\\\"],[13],[1,\\\"\\\\n    \\\"],[13],[1,\\\"\\\\n    \\\"],[10,0],[14,0,\\\" mb-2 flex items-center justify-center \\\"],[12],[1,\\\"\\\\n\\\"],[1,\\\"        \\\"],[11,\\\"img\\\"],[24,0,\\\"w-50 h-50 \\\"],[16,\\\"src\\\",[30,0,[\\\"dogImage\\\"]]],[24,\\\"alt\\\",\\\"Random Dog\\\"],[4,[38,6],[[30,0,[\\\"getRandomDog\\\"]]],null],[4,[38,7],[[30,0,[\\\"updateDog\\\"]],[30,0,[\\\"dogImageUpdated\\\"]]],null],[12],[13],[1,\\\"\\\\n\\\\n    \\\"],[13],[1,\\\"\\\\n\\\\n    \\\"],[10,0],[14,0,\\\" mb-2 flex items-center justify-center \\\"],[12],[1,\\\"\\\\n\\\\n\\\\n\\\\n\\\\n    \\\"],[13],[1,\\\"\\\\n\\\\n\\\\n\\\\n\\\\n\\\"],[13]],[],false,[\\\"div\\\",\\\"h2\\\",\\\"button\\\",\\\"on\\\",\\\"fn\\\",\\\"img\\\",\\\"did-insert\\\",\\\"did-update\\\"]]\",\n  \"moduleName\": \"my-app/components/dog/template.hbs\",\n  \"isStrictMode\": false\n}));\n\n//# sourceURL=webpack://my-app/./components/dog/template.hbs?");

/***/ }),

/***/ "./components/header/template.hbs":
/*!****************************************!*\
  !*** ./components/header/template.hbs ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__.createTemplateFactory)(\n/*\n  <div class=\"bg-welcome p-16\">\n  <div></div>\n  {{yield}}\n</div>\n*/\n{\n  \"id\": \"JKlzsX1t\",\n  \"block\": \"[[[10,0],[14,0,\\\"bg-welcome p-16\\\"],[12],[1,\\\"\\\\n  \\\"],[10,0],[12],[13],[1,\\\"\\\\n  \\\"],[18,1,null],[1,\\\"\\\\n\\\"],[13]],[\\\"&default\\\"],false,[\\\"div\\\",\\\"yield\\\"]]\",\n  \"moduleName\": \"my-app/components/header/template.hbs\",\n  \"isStrictMode\": false\n}));\n\n//# sourceURL=webpack://my-app/./components/header/template.hbs?");

/***/ }),

/***/ "./components/navbar/template.hbs":
/*!****************************************!*\
  !*** ./components/navbar/template.hbs ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__.createTemplateFactory)(\n/*\n  <nav class=\"bg-orange-rental flex items-center  \">\n  <LinkTo @route=\"index\" class=\"menu-index pt- 2 pb-2\">\n    <h1 class=\" ml-2 text-white text-rental-custom italic \">SuperRentals</h1>\n  </LinkTo>\n  <div class=\"pt-0 pr-21 items-stretch ... ml-8 \">\n    <LinkTo class=\"ml-10 text-white\" @route=\"about\">\n      About\n    </LinkTo>\n    <LinkTo class=\" ml-4 text-white\" @route=\"contact\">\n      Contact\n    </LinkTo>\n    <LinkTo class=\" ml-4 text-white\" @route=\"dog\">\n      Dog API </LinkTo>\n  </div>\n</nav>\n*/\n{\n  \"id\": \"qbUWGFTn\",\n  \"block\": \"[[[10,\\\"nav\\\"],[14,0,\\\"bg-orange-rental flex items-center  \\\"],[12],[1,\\\"\\\\n  \\\"],[8,[39,1],[[24,0,\\\"menu-index pt- 2 pb-2\\\"]],[[\\\"@route\\\"],[\\\"index\\\"]],[[\\\"default\\\"],[[[[1,\\\"\\\\n    \\\"],[10,\\\"h1\\\"],[14,0,\\\" ml-2 text-white text-rental-custom italic \\\"],[12],[1,\\\"SuperRentals\\\"],[13],[1,\\\"\\\\n  \\\"]],[]]]]],[1,\\\"\\\\n  \\\"],[10,0],[14,0,\\\"pt-0 pr-21 items-stretch ... ml-8 \\\"],[12],[1,\\\"\\\\n    \\\"],[8,[39,1],[[24,0,\\\"ml-10 text-white\\\"]],[[\\\"@route\\\"],[\\\"about\\\"]],[[\\\"default\\\"],[[[[1,\\\"\\\\n      About\\\\n    \\\"]],[]]]]],[1,\\\"\\\\n    \\\"],[8,[39,1],[[24,0,\\\" ml-4 text-white\\\"]],[[\\\"@route\\\"],[\\\"contact\\\"]],[[\\\"default\\\"],[[[[1,\\\"\\\\n      Contact\\\\n    \\\"]],[]]]]],[1,\\\"\\\\n    \\\"],[8,[39,1],[[24,0,\\\" ml-4 text-white\\\"]],[[\\\"@route\\\"],[\\\"dog\\\"]],[[\\\"default\\\"],[[[[1,\\\"\\\\n      Dog API \\\"]],[]]]]],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n\\\"],[13]],[],false,[\\\"nav\\\",\\\"link-to\\\",\\\"h1\\\",\\\"div\\\"]]\",\n  \"moduleName\": \"my-app/components/navbar/template.hbs\",\n  \"isStrictMode\": false\n}));\n\n//# sourceURL=webpack://my-app/./components/navbar/template.hbs?");

/***/ }),

/***/ "./components/rental/detailed/template.hbs":
/*!*************************************************!*\
  !*** ./components/rental/detailed/template.hbs ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__.createTemplateFactory)(\n/*\n  <Header>\n  <h2 class=\"text-5xl\">{{@rental.title}}</h2>\n  <div class=\"mb-6\">\n    <p>Nice find! This looks like a nice place to stay near {{@rental.city}}.</p>\n  </div>\n  {{!creando el boton al cual le paso los datos que cojo de la propia pagina para que me cree solo el tweet}}\n  <Buttons::Share class=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700 rounded\"\n    @text=\"Check out {{@rental.title}} on Super Rentals!\" @hashtags=\"vacation,travel,authentic,blessed,superrentals\"\n    @via=\"emberjs\">\n    Share on Twitter\n  </Buttons::Share>\n</Header>\n\n{{#if this.isSmall}}\n\n<div class=\"mb-16\">\n  <div class=\"p-16  \">\n    <div class=\"grid grid-cols-2\">\n      <div class=\"content-center\">\n        <Rental::Images::Detailed src={{@rental.image}} @toggleImage={{this.toggleImage}} @isSmall={{this.isSmall}}\n          alt=\"A picture of {{@rental.title}}\" />\n      </div>\n      <div class=\"ml-10\">\n        <div>\n          <div class=\"mb-4\">\n            <h3 class=\"text-5xl  \">\n              <LinkTo @route=\"rental\" @model={{@rental}}> About{{!----}}\n                {{@rental.title}}{{!----}}\n              </LinkTo>\n            </h3>\n          </div>\n          <div class=\"grid mb-4\">\n            <div class=\"mb-8\">\n              <span>Owner:</span> <span class=\"font-thin\">{{@rental.owner}}</span>\n            </div>\n            <div class=\"mb-8 \">\n              <span>Type:</span> <span class=\"font-thin\">{{@rental.type}}</span>\n\n            </div>\n            <div class=\"mb-8\">\n              <span>Location:</span> <span class=\"font-thin\">{{@rental.city}}</span>\n\n            </div>\n            <div class=\"mb-8\">\n              <span>Number of bedrooms:</span> <span class=\"font-thin\">{{@rental.bedrooms}}</span>\n            </div>\n          </div>\n\n\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n{{else}}\n<div class=\"bg-welcome mb-16 flex justify-center ...\">\n  <div class=\"p-16  \">\n\n    <div class=\"mb-12\">\n      {{!Le pasoel alias de @toggleimage con la funcion \"toggleImage\" y le paso la variable\n      isSmall}}\n      <Rental::Images::Detailed src={{@rental.image}} @toggleImage={{this.toggleImage}} @isSmall={{this.isSmall}}\n        alt=\"A picture of {{@rental.title}}\" />\n    </div>\n    <div class=\" ml-10 \">\n      <div>\n        <div class=\"mb-4\">\n          <h3 class=\"text-5xl  \">\n            <LinkTo @route=\"rental\" @model={{@rental}}> About{{!----}}\n              {{@rental.title}}{{!----}}\n            </LinkTo>\n          </h3>\n        </div>\n        <div class=\"grid mb-4\">\n          <div class=\"mb-8\">\n            <span>Owner:</span> <span class=\"font-thin\">{{@rental.owner}}</span>\n          </div>\n          <div class=\"mb-8 \">\n            <span>Type:</span> <span class=\"font-thin\">{{@rental.type}}</span>\n\n          </div>\n          <div class=\"mb-8\">\n            <span>Location:</span> <span class=\"font-thin\">{{@rental.city}}</span>\n\n          </div>\n          <div class=\"mb-8\">\n            <span>Number of bedrooms:</span> <span class=\"font-thin\">{{@rental.bedrooms}}</span>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n\n\n</div>\n{{/if}}\n*/\n{\n  \"id\": \"En9Ch5w0\",\n  \"block\": \"[[[8,[39,0],null,null,[[\\\"default\\\"],[[[[1,\\\"\\\\n  \\\"],[10,\\\"h2\\\"],[14,0,\\\"text-5xl\\\"],[12],[1,[30,1,[\\\"title\\\"]]],[13],[1,\\\"\\\\n  \\\"],[10,0],[14,0,\\\"mb-6\\\"],[12],[1,\\\"\\\\n    \\\"],[10,2],[12],[1,\\\"Nice find! This looks like a nice place to stay near \\\"],[1,[30,1,[\\\"city\\\"]]],[1,\\\".\\\"],[13],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n\\\"],[1,\\\"  \\\"],[8,[39,4],[[24,0,\\\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700 rounded\\\"]],[[\\\"@text\\\",\\\"@hashtags\\\",\\\"@via\\\"],[[29,[\\\"Check out \\\",[30,1,[\\\"title\\\"]],\\\" on Super Rentals!\\\"]],\\\"vacation,travel,authentic,blessed,superrentals\\\",\\\"emberjs\\\"]],[[\\\"default\\\"],[[[[1,\\\"\\\\n    Share on Twitter\\\\n  \\\"]],[]]]]],[1,\\\"\\\\n\\\"]],[]]]]],[1,\\\"\\\\n\\\\n\\\"],[41,[30,0,[\\\"isSmall\\\"]],[[[1,\\\"\\\\n\\\"],[10,0],[14,0,\\\"mb-16\\\"],[12],[1,\\\"\\\\n  \\\"],[10,0],[14,0,\\\"p-16  \\\"],[12],[1,\\\"\\\\n    \\\"],[10,0],[14,0,\\\"grid grid-cols-2\\\"],[12],[1,\\\"\\\\n      \\\"],[10,0],[14,0,\\\"content-center\\\"],[12],[1,\\\"\\\\n        \\\"],[8,[39,6],[[16,\\\"src\\\",[30,1,[\\\"image\\\"]]],[16,\\\"alt\\\",[29,[\\\"A picture of \\\",[30,1,[\\\"title\\\"]]]]]],[[\\\"@toggleImage\\\",\\\"@isSmall\\\"],[[30,0,[\\\"toggleImage\\\"]],[30,0,[\\\"isSmall\\\"]]]],null],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n      \\\"],[10,0],[14,0,\\\"ml-10\\\"],[12],[1,\\\"\\\\n        \\\"],[10,0],[12],[1,\\\"\\\\n          \\\"],[10,0],[14,0,\\\"mb-4\\\"],[12],[1,\\\"\\\\n            \\\"],[10,\\\"h3\\\"],[14,0,\\\"text-5xl  \\\"],[12],[1,\\\"\\\\n              \\\"],[8,[39,8],null,[[\\\"@route\\\",\\\"@model\\\"],[\\\"rental\\\",[30,1]]],[[\\\"default\\\"],[[[[1,\\\" About\\\"],[1,\\\"\\\\n                \\\"],[1,[30,1,[\\\"title\\\"]]],[1,\\\"\\\\n              \\\"]],[]]]]],[1,\\\"\\\\n            \\\"],[13],[1,\\\"\\\\n          \\\"],[13],[1,\\\"\\\\n          \\\"],[10,0],[14,0,\\\"grid mb-4\\\"],[12],[1,\\\"\\\\n            \\\"],[10,0],[14,0,\\\"mb-8\\\"],[12],[1,\\\"\\\\n              \\\"],[10,1],[12],[1,\\\"Owner:\\\"],[13],[1,\\\" \\\"],[10,1],[14,0,\\\"font-thin\\\"],[12],[1,[30,1,[\\\"owner\\\"]]],[13],[1,\\\"\\\\n            \\\"],[13],[1,\\\"\\\\n            \\\"],[10,0],[14,0,\\\"mb-8 \\\"],[12],[1,\\\"\\\\n              \\\"],[10,1],[12],[1,\\\"Type:\\\"],[13],[1,\\\" \\\"],[10,1],[14,0,\\\"font-thin\\\"],[12],[1,[30,1,[\\\"type\\\"]]],[13],[1,\\\"\\\\n\\\\n            \\\"],[13],[1,\\\"\\\\n            \\\"],[10,0],[14,0,\\\"mb-8\\\"],[12],[1,\\\"\\\\n              \\\"],[10,1],[12],[1,\\\"Location:\\\"],[13],[1,\\\" \\\"],[10,1],[14,0,\\\"font-thin\\\"],[12],[1,[30,1,[\\\"city\\\"]]],[13],[1,\\\"\\\\n\\\\n            \\\"],[13],[1,\\\"\\\\n            \\\"],[10,0],[14,0,\\\"mb-8\\\"],[12],[1,\\\"\\\\n              \\\"],[10,1],[12],[1,\\\"Number of bedrooms:\\\"],[13],[1,\\\" \\\"],[10,1],[14,0,\\\"font-thin\\\"],[12],[1,[30,1,[\\\"bedrooms\\\"]]],[13],[1,\\\"\\\\n            \\\"],[13],[1,\\\"\\\\n          \\\"],[13],[1,\\\"\\\\n\\\\n\\\\n        \\\"],[13],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n    \\\"],[13],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n\\\"],[13],[1,\\\"\\\\n\\\"]],[]],[[[10,0],[14,0,\\\"bg-welcome mb-16 flex justify-center ...\\\"],[12],[1,\\\"\\\\n  \\\"],[10,0],[14,0,\\\"p-16  \\\"],[12],[1,\\\"\\\\n\\\\n    \\\"],[10,0],[14,0,\\\"mb-12\\\"],[12],[1,\\\"\\\\n\\\"],[1,\\\"      \\\"],[8,[39,6],[[16,\\\"src\\\",[30,1,[\\\"image\\\"]]],[16,\\\"alt\\\",[29,[\\\"A picture of \\\",[30,1,[\\\"title\\\"]]]]]],[[\\\"@toggleImage\\\",\\\"@isSmall\\\"],[[30,0,[\\\"toggleImage\\\"]],[30,0,[\\\"isSmall\\\"]]]],null],[1,\\\"\\\\n    \\\"],[13],[1,\\\"\\\\n    \\\"],[10,0],[14,0,\\\" ml-10 \\\"],[12],[1,\\\"\\\\n      \\\"],[10,0],[12],[1,\\\"\\\\n        \\\"],[10,0],[14,0,\\\"mb-4\\\"],[12],[1,\\\"\\\\n          \\\"],[10,\\\"h3\\\"],[14,0,\\\"text-5xl  \\\"],[12],[1,\\\"\\\\n            \\\"],[8,[39,8],null,[[\\\"@route\\\",\\\"@model\\\"],[\\\"rental\\\",[30,1]]],[[\\\"default\\\"],[[[[1,\\\" About\\\"],[1,\\\"\\\\n              \\\"],[1,[30,1,[\\\"title\\\"]]],[1,\\\"\\\\n            \\\"]],[]]]]],[1,\\\"\\\\n          \\\"],[13],[1,\\\"\\\\n        \\\"],[13],[1,\\\"\\\\n        \\\"],[10,0],[14,0,\\\"grid mb-4\\\"],[12],[1,\\\"\\\\n          \\\"],[10,0],[14,0,\\\"mb-8\\\"],[12],[1,\\\"\\\\n            \\\"],[10,1],[12],[1,\\\"Owner:\\\"],[13],[1,\\\" \\\"],[10,1],[14,0,\\\"font-thin\\\"],[12],[1,[30,1,[\\\"owner\\\"]]],[13],[1,\\\"\\\\n          \\\"],[13],[1,\\\"\\\\n          \\\"],[10,0],[14,0,\\\"mb-8 \\\"],[12],[1,\\\"\\\\n            \\\"],[10,1],[12],[1,\\\"Type:\\\"],[13],[1,\\\" \\\"],[10,1],[14,0,\\\"font-thin\\\"],[12],[1,[30,1,[\\\"type\\\"]]],[13],[1,\\\"\\\\n\\\\n          \\\"],[13],[1,\\\"\\\\n          \\\"],[10,0],[14,0,\\\"mb-8\\\"],[12],[1,\\\"\\\\n            \\\"],[10,1],[12],[1,\\\"Location:\\\"],[13],[1,\\\" \\\"],[10,1],[14,0,\\\"font-thin\\\"],[12],[1,[30,1,[\\\"city\\\"]]],[13],[1,\\\"\\\\n\\\\n          \\\"],[13],[1,\\\"\\\\n          \\\"],[10,0],[14,0,\\\"mb-8\\\"],[12],[1,\\\"\\\\n            \\\"],[10,1],[12],[1,\\\"Number of bedrooms:\\\"],[13],[1,\\\" \\\"],[10,1],[14,0,\\\"font-thin\\\"],[12],[1,[30,1,[\\\"bedrooms\\\"]]],[13],[1,\\\"\\\\n          \\\"],[13],[1,\\\"\\\\n        \\\"],[13],[1,\\\"\\\\n\\\\n      \\\"],[13],[1,\\\"\\\\n    \\\"],[13],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n\\\\n\\\\n\\\"],[13],[1,\\\"\\\\n\\\"]],[]]]],[\\\"@rental\\\"],false,[\\\"header\\\",\\\"h2\\\",\\\"div\\\",\\\"p\\\",\\\"buttons/share\\\",\\\"if\\\",\\\"rental/images/detailed\\\",\\\"h3\\\",\\\"link-to\\\",\\\"span\\\"]]\",\n  \"moduleName\": \"my-app/components/rental/detailed/template.hbs\",\n  \"isStrictMode\": false\n}));\n\n//# sourceURL=webpack://my-app/./components/rental/detailed/template.hbs?");

/***/ }),

/***/ "./components/rental/images/detailed/template.hbs":
/*!********************************************************!*\
  !*** ./components/rental/images/detailed/template.hbs ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__.createTemplateFactory)(\n/*\n  <div>\n  <button type=\"button\" class=\"hover:bg-blue-200 rounded-xl {{if @isSmall \" rounded-xl mb-2 object-cover h-38 w-50 ...\"\n    }}\" {{on \"click\" this.toggleSize}}>\n    <img class=\" rounded-xl \" ...attributes>\n    <small class=\"text-blue-500\">View {{if @isSmall \"larger\" \"smaller\"}}\n\n    </small>\n  </button>\n</div>\n*/\n{\n  \"id\": \"kD5VRi/5\",\n  \"block\": \"[[[10,0],[12],[1,\\\"\\\\n  \\\"],[11,\\\"button\\\"],[16,0,[29,[\\\"hover:bg-blue-200 rounded-xl \\\",[52,[30,1],\\\" rounded-xl mb-2 object-cover h-38 w-50 ...\\\"]]]],[24,4,\\\"button\\\"],[4,[38,3],[\\\"click\\\",[30,0,[\\\"toggleSize\\\"]]],null],[12],[1,\\\"\\\\n    \\\"],[11,\\\"img\\\"],[24,0,\\\" rounded-xl \\\"],[17,2],[12],[13],[1,\\\"\\\\n    \\\"],[10,\\\"small\\\"],[14,0,\\\"text-blue-500\\\"],[12],[1,\\\"View \\\"],[1,[52,[30,1],\\\"larger\\\",\\\"smaller\\\"]],[1,\\\"\\\\n\\\\n    \\\"],[13],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n\\\"],[13]],[\\\"@isSmall\\\",\\\"&attrs\\\"],false,[\\\"div\\\",\\\"button\\\",\\\"if\\\",\\\"on\\\",\\\"img\\\",\\\"small\\\"]]\",\n  \"moduleName\": \"my-app/components/rental/images/detailed/template.hbs\",\n  \"isStrictMode\": false\n}));\n\n//# sourceURL=webpack://my-app/./components/rental/images/detailed/template.hbs?");

/***/ }),

/***/ "./components/rental/images/index/template.hbs":
/*!*****************************************************!*\
  !*** ./components/rental/images/index/template.hbs ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__.createTemplateFactory)(\n/*\n  <div>\n  <button type=\"button\" class=\"hover:bg-blue-200 rounded-xl {{if @isSmall \" rounded-xl mb-2 object-cover h-38 w-48 ...\"\n    }}\" {{on \"click\" this.toggleSize}}>\n    <img class=\" rounded-xl \" ...attributes>\n    <small class=\"text-blue-500\">View {{if @isSmall \"larger\" \"smaller\"}}\n\n    </small>\n  </button>\n</div>\n*/\n{\n  \"id\": \"NZGr6V98\",\n  \"block\": \"[[[10,0],[12],[1,\\\"\\\\n  \\\"],[11,\\\"button\\\"],[16,0,[29,[\\\"hover:bg-blue-200 rounded-xl \\\",[52,[30,1],\\\" rounded-xl mb-2 object-cover h-38 w-48 ...\\\"]]]],[24,4,\\\"button\\\"],[4,[38,3],[\\\"click\\\",[30,0,[\\\"toggleSize\\\"]]],null],[12],[1,\\\"\\\\n    \\\"],[11,\\\"img\\\"],[24,0,\\\" rounded-xl \\\"],[17,2],[12],[13],[1,\\\"\\\\n    \\\"],[10,\\\"small\\\"],[14,0,\\\"text-blue-500\\\"],[12],[1,\\\"View \\\"],[1,[52,[30,1],\\\"larger\\\",\\\"smaller\\\"]],[1,\\\"\\\\n\\\\n    \\\"],[13],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n\\\"],[13]],[\\\"@isSmall\\\",\\\"&attrs\\\"],false,[\\\"div\\\",\\\"button\\\",\\\"if\\\",\\\"on\\\",\\\"img\\\",\\\"small\\\"]]\",\n  \"moduleName\": \"my-app/components/rental/images/index/template.hbs\",\n  \"isStrictMode\": false\n}));\n\n//# sourceURL=webpack://my-app/./components/rental/images/index/template.hbs?");

/***/ }),

/***/ "./components/rental/index/template.hbs":
/*!**********************************************!*\
  !*** ./components/rental/index/template.hbs ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__.createTemplateFactory)(\n/*\n  {{#if this.isSmall}}\n\n<div class=\"bg-welcome mb-16\">\n  <div class=\"p-16  \">\n    <div class=\"grid grid-cols-3\">\n      <div class=\"content-center\">\n        <Rental::Images::Index src={{@rental.image}} @toggleImage={{this.toggleImage}} @isSmall={{this.isSmall}}\n          alt=\"A picture of {{@rental.title}}\" />\n      </div>\n      <div class=\" -ml-56\">\n        <div>\n          <div class=\"mb-4\">\n            <h3 class=\"text-xl text-blue-600\">\n              <LinkTo @route=\"rental\" @model={{@rental}}> {{!----}}\n                {{@rental.title}}{{!----}}\n              </LinkTo>\n            </h3>\n          </div>\n          <div class=\"grid grid-cols-2 \">\n            <div class=\"mb-16\">\n              <span>Owner:</span> <span class=\"font-thin\">{{@rental.owner}}</span>\n            </div>\n            <div>\n              <span>Type:</span> <span class=\"font-thin\">{{@rental.type}}</span>\n\n            </div>\n          </div>\n          <div class=\"grid grid-cols-2 \">\n            <div>\n              <span>Location:</span> <span class=\"font-thin\">{{@rental.city}}</span>\n\n            </div>\n            <div>\n              <span>Number of bedrooms:</span> <span class=\"font-thin\">{{@rental.bedrooms}}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n{{else}}\n<div class=\"bg-welcome mb-16 flex justify-center ...\">\n  <div class=\"p-16  \">\n\n    <div class=\"mb-12\">\n      {{!Le pasoel alias de @toggleimage con la funcion \"toggleImage\" y le paso la variable\n      isSmall}}\n      <Rental::Images::Index src={{@rental.image}} @toggleImage={{this.toggleImage}} @isSmall={{this.isSmall}}\n        alt=\"A picture of {{@rental.title}}\" />\n    </div>\n    <div>\n\n      <div class=\"mb-4 \">\n        <h3 class=\"text-xl mb-4\">\n          <LinkTo @route=\"rental\" @model={{@rental}}> {{!----}}\n            {{@rental.title}}{{!----}}\n          </LinkTo>\n        </h3>\n\n        <div class=\"grid grid-cols-2 \">\n          <div class=\"mb-16\">\n            <span>Owner:</span> <span class=\"font-thin\">{{@rental.owner}}</span>\n          </div>\n          <div>\n            <span>Typeeee:</span> <span class=\"font-thin\">{{@rental.type}}</span>\n          </div>\n        </div>\n\n\n        <div class=\"grid grid-cols-2 \">\n          <div>\n            <span>Location:</span> <span class=\"font-thin\">{{@rental.city}}</span>\n          </div>\n          <div>\n\n\n            <span>Number of bedrooms:</span> <span class=\"font-thin\">{{@rental.bedrooms}}</span>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</div>\n{{/if}}\n*/\n{\n  \"id\": \"1U/qS4zC\",\n  \"block\": \"[[[41,[30,0,[\\\"isSmall\\\"]],[[[1,\\\"\\\\n\\\"],[10,0],[14,0,\\\"bg-welcome mb-16\\\"],[12],[1,\\\"\\\\n  \\\"],[10,0],[14,0,\\\"p-16  \\\"],[12],[1,\\\"\\\\n    \\\"],[10,0],[14,0,\\\"grid grid-cols-3\\\"],[12],[1,\\\"\\\\n      \\\"],[10,0],[14,0,\\\"content-center\\\"],[12],[1,\\\"\\\\n        \\\"],[8,[39,2],[[16,\\\"src\\\",[30,1,[\\\"image\\\"]]],[16,\\\"alt\\\",[29,[\\\"A picture of \\\",[30,1,[\\\"title\\\"]]]]]],[[\\\"@toggleImage\\\",\\\"@isSmall\\\"],[[30,0,[\\\"toggleImage\\\"]],[30,0,[\\\"isSmall\\\"]]]],null],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n      \\\"],[10,0],[14,0,\\\" -ml-56\\\"],[12],[1,\\\"\\\\n        \\\"],[10,0],[12],[1,\\\"\\\\n          \\\"],[10,0],[14,0,\\\"mb-4\\\"],[12],[1,\\\"\\\\n            \\\"],[10,\\\"h3\\\"],[14,0,\\\"text-xl text-blue-600\\\"],[12],[1,\\\"\\\\n              \\\"],[8,[39,4],null,[[\\\"@route\\\",\\\"@model\\\"],[\\\"rental\\\",[30,1]]],[[\\\"default\\\"],[[[[1,\\\" \\\"],[1,\\\"\\\\n                \\\"],[1,[30,1,[\\\"title\\\"]]],[1,\\\"\\\\n              \\\"]],[]]]]],[1,\\\"\\\\n            \\\"],[13],[1,\\\"\\\\n          \\\"],[13],[1,\\\"\\\\n          \\\"],[10,0],[14,0,\\\"grid grid-cols-2 \\\"],[12],[1,\\\"\\\\n            \\\"],[10,0],[14,0,\\\"mb-16\\\"],[12],[1,\\\"\\\\n              \\\"],[10,1],[12],[1,\\\"Owner:\\\"],[13],[1,\\\" \\\"],[10,1],[14,0,\\\"font-thin\\\"],[12],[1,[30,1,[\\\"owner\\\"]]],[13],[1,\\\"\\\\n            \\\"],[13],[1,\\\"\\\\n            \\\"],[10,0],[12],[1,\\\"\\\\n              \\\"],[10,1],[12],[1,\\\"Type:\\\"],[13],[1,\\\" \\\"],[10,1],[14,0,\\\"font-thin\\\"],[12],[1,[30,1,[\\\"type\\\"]]],[13],[1,\\\"\\\\n\\\\n            \\\"],[13],[1,\\\"\\\\n          \\\"],[13],[1,\\\"\\\\n          \\\"],[10,0],[14,0,\\\"grid grid-cols-2 \\\"],[12],[1,\\\"\\\\n            \\\"],[10,0],[12],[1,\\\"\\\\n              \\\"],[10,1],[12],[1,\\\"Location:\\\"],[13],[1,\\\" \\\"],[10,1],[14,0,\\\"font-thin\\\"],[12],[1,[30,1,[\\\"city\\\"]]],[13],[1,\\\"\\\\n\\\\n            \\\"],[13],[1,\\\"\\\\n            \\\"],[10,0],[12],[1,\\\"\\\\n              \\\"],[10,1],[12],[1,\\\"Number of bedrooms:\\\"],[13],[1,\\\" \\\"],[10,1],[14,0,\\\"font-thin\\\"],[12],[1,[30,1,[\\\"bedrooms\\\"]]],[13],[1,\\\"\\\\n            \\\"],[13],[1,\\\"\\\\n          \\\"],[13],[1,\\\"\\\\n        \\\"],[13],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n    \\\"],[13],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n\\\"],[13],[1,\\\"\\\\n\\\"]],[]],[[[10,0],[14,0,\\\"bg-welcome mb-16 flex justify-center ...\\\"],[12],[1,\\\"\\\\n  \\\"],[10,0],[14,0,\\\"p-16  \\\"],[12],[1,\\\"\\\\n\\\\n    \\\"],[10,0],[14,0,\\\"mb-12\\\"],[12],[1,\\\"\\\\n\\\"],[1,\\\"      \\\"],[8,[39,2],[[16,\\\"src\\\",[30,1,[\\\"image\\\"]]],[16,\\\"alt\\\",[29,[\\\"A picture of \\\",[30,1,[\\\"title\\\"]]]]]],[[\\\"@toggleImage\\\",\\\"@isSmall\\\"],[[30,0,[\\\"toggleImage\\\"]],[30,0,[\\\"isSmall\\\"]]]],null],[1,\\\"\\\\n    \\\"],[13],[1,\\\"\\\\n    \\\"],[10,0],[12],[1,\\\"\\\\n\\\\n      \\\"],[10,0],[14,0,\\\"mb-4 \\\"],[12],[1,\\\"\\\\n        \\\"],[10,\\\"h3\\\"],[14,0,\\\"text-xl mb-4\\\"],[12],[1,\\\"\\\\n          \\\"],[8,[39,4],null,[[\\\"@route\\\",\\\"@model\\\"],[\\\"rental\\\",[30,1]]],[[\\\"default\\\"],[[[[1,\\\" \\\"],[1,\\\"\\\\n            \\\"],[1,[30,1,[\\\"title\\\"]]],[1,\\\"\\\\n          \\\"]],[]]]]],[1,\\\"\\\\n        \\\"],[13],[1,\\\"\\\\n\\\\n        \\\"],[10,0],[14,0,\\\"grid grid-cols-2 \\\"],[12],[1,\\\"\\\\n          \\\"],[10,0],[14,0,\\\"mb-16\\\"],[12],[1,\\\"\\\\n            \\\"],[10,1],[12],[1,\\\"Owner:\\\"],[13],[1,\\\" \\\"],[10,1],[14,0,\\\"font-thin\\\"],[12],[1,[30,1,[\\\"owner\\\"]]],[13],[1,\\\"\\\\n          \\\"],[13],[1,\\\"\\\\n          \\\"],[10,0],[12],[1,\\\"\\\\n            \\\"],[10,1],[12],[1,\\\"Typeeee:\\\"],[13],[1,\\\" \\\"],[10,1],[14,0,\\\"font-thin\\\"],[12],[1,[30,1,[\\\"type\\\"]]],[13],[1,\\\"\\\\n          \\\"],[13],[1,\\\"\\\\n        \\\"],[13],[1,\\\"\\\\n\\\\n\\\\n        \\\"],[10,0],[14,0,\\\"grid grid-cols-2 \\\"],[12],[1,\\\"\\\\n          \\\"],[10,0],[12],[1,\\\"\\\\n            \\\"],[10,1],[12],[1,\\\"Location:\\\"],[13],[1,\\\" \\\"],[10,1],[14,0,\\\"font-thin\\\"],[12],[1,[30,1,[\\\"city\\\"]]],[13],[1,\\\"\\\\n          \\\"],[13],[1,\\\"\\\\n          \\\"],[10,0],[12],[1,\\\"\\\\n\\\\n\\\\n            \\\"],[10,1],[12],[1,\\\"Number of bedrooms:\\\"],[13],[1,\\\" \\\"],[10,1],[14,0,\\\"font-thin\\\"],[12],[1,[30,1,[\\\"bedrooms\\\"]]],[13],[1,\\\"\\\\n          \\\"],[13],[1,\\\"\\\\n        \\\"],[13],[1,\\\"\\\\n\\\\n      \\\"],[13],[1,\\\"\\\\n    \\\"],[13],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n\\\"],[13],[1,\\\"\\\\n\\\"]],[]]]],[\\\"@rental\\\"],false,[\\\"if\\\",\\\"div\\\",\\\"rental/images/index\\\",\\\"h3\\\",\\\"link-to\\\",\\\"span\\\"]]\",\n  \"moduleName\": \"my-app/components/rental/index/template.hbs\",\n  \"isStrictMode\": false\n}));\n\n//# sourceURL=webpack://my-app/./components/rental/index/template.hbs?");

/***/ }),

/***/ "./components/search/filter/template.hbs":
/*!***********************************************!*\
  !*** ./components/search/filter/template.hbs ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__.createTemplateFactory)(\n/*\n  {{yield this.results}} \n*/\n{\n  \"id\": \"Pc2mqDOz\",\n  \"block\": \"[[[18,1,[[30,0,[\\\"results\\\"]]]],[1,\\\" \\\"]],[\\\"&default\\\"],false,[\\\"yield\\\"]]\",\n  \"moduleName\": \"my-app/components/search/filter/template.hbs\",\n  \"isStrictMode\": false\n}));\n\n//# sourceURL=webpack://my-app/./components/search/filter/template.hbs?");

/***/ }),

/***/ "./components/search/searcher/template.hbs":
/*!*************************************************!*\
  !*** ./components/search/searcher/template.hbs ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__.createTemplateFactory)(\n/*\n  <div class=\"rentals\">\n\n  <div class=\"mt-4 mb-8 flex items-center justify-center\">\n    <span class=\"font-light text-4xl\">Where would you like to stay?</span>\n  </div>\n  <div class=\" mb-4 pr-64 pl-64 flex items-center justify-center\">\n    <Input class=\"block w-full p-4 text-gray-900 border border-gray-300 border-black-500\" @value={{this.query}} />\n  </div>\n\n  <ul>\n    <Search::filter @rentals={{@rentals}} @query={{this.query}} as |results|>\n\n      {{#each results as |rental|}}\n\n      <li>\n        <Rental::Index @rental={{rental}} />\n      </li>\n\n      {{/each}}\n\n    </Search::filter>\n  </ul>\n</div>\n*/\n{\n  \"id\": \"jcptou1h\",\n  \"block\": \"[[[10,0],[14,0,\\\"rentals\\\"],[12],[1,\\\"\\\\n\\\\n  \\\"],[10,0],[14,0,\\\"mt-4 mb-8 flex items-center justify-center\\\"],[12],[1,\\\"\\\\n    \\\"],[10,1],[14,0,\\\"font-light text-4xl\\\"],[12],[1,\\\"Where would you like to stay?\\\"],[13],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n  \\\"],[10,0],[14,0,\\\" mb-4 pr-64 pl-64 flex items-center justify-center\\\"],[12],[1,\\\"\\\\n    \\\"],[8,[39,2],[[24,0,\\\"block w-full p-4 text-gray-900 border border-gray-300 border-black-500\\\"]],[[\\\"@value\\\"],[[30,0,[\\\"query\\\"]]]],null],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n\\\\n  \\\"],[10,\\\"ul\\\"],[12],[1,\\\"\\\\n    \\\"],[8,[39,4],null,[[\\\"@rentals\\\",\\\"@query\\\"],[[30,1],[30,0,[\\\"query\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n\\\\n\\\"],[42,[28,[37,6],[[28,[37,6],[[30,2]],null]],null],null,[[[1,\\\"\\\\n      \\\"],[10,\\\"li\\\"],[12],[1,\\\"\\\\n        \\\"],[8,[39,8],null,[[\\\"@rental\\\"],[[30,3]]],null],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n\\\\n\\\"]],[3]],null],[1,\\\"\\\\n    \\\"]],[2]]]]],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n\\\"],[13]],[\\\"@rentals\\\",\\\"results\\\",\\\"rental\\\"],false,[\\\"div\\\",\\\"span\\\",\\\"input\\\",\\\"ul\\\",\\\"search/filter\\\",\\\"each\\\",\\\"-track-array\\\",\\\"li\\\",\\\"rental/index\\\"]]\",\n  \"moduleName\": \"my-app/components/search/searcher/template.hbs\",\n  \"isStrictMode\": false\n}));\n\n//# sourceURL=webpack://my-app/./components/search/searcher/template.hbs?");

/***/ }),

/***/ "./templates/about.hbs":
/*!*****************************!*\
  !*** ./templates/about.hbs ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__.createTemplateFactory)(\n/*\n  <Header>\n  <h2 class=\"text-5xl\">About Super Rentals</h2>\n  <p>\n    The Super Rentals website is a delightful project created to explore Ember.\n    By building a property rental site, we can simultaneously imagine traveling\n    AND building Ember applications.\n  </p>\n  <div class=\"mt-9\">\n    <LinkTo class=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700 rounded\"\n      @route=\"contact\">Contact Us</LinkTo>\n  </div>\n</Header>\n*/\n{\n  \"id\": \"BdK9Qzkw\",\n  \"block\": \"[[[8,[39,0],null,null,[[\\\"default\\\"],[[[[1,\\\"\\\\n  \\\"],[10,\\\"h2\\\"],[14,0,\\\"text-5xl\\\"],[12],[1,\\\"About Super Rentals\\\"],[13],[1,\\\"\\\\n  \\\"],[10,2],[12],[1,\\\"\\\\n    The Super Rentals website is a delightful project created to explore Ember.\\\\n    By building a property rental site, we can simultaneously imagine traveling\\\\n    AND building Ember applications.\\\\n  \\\"],[13],[1,\\\"\\\\n  \\\"],[10,0],[14,0,\\\"mt-9\\\"],[12],[1,\\\"\\\\n    \\\"],[8,[39,4],[[24,0,\\\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700 rounded\\\"]],[[\\\"@route\\\"],[\\\"contact\\\"]],[[\\\"default\\\"],[[[[1,\\\"Contact Us\\\"]],[]]]]],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n\\\"]],[]]]]]],[],false,[\\\"header\\\",\\\"h2\\\",\\\"p\\\",\\\"div\\\",\\\"link-to\\\"]]\",\n  \"moduleName\": \"my-app/templates/about.hbs\",\n  \"isStrictMode\": false\n}));\n\n//# sourceURL=webpack://my-app/./templates/about.hbs?");

/***/ }),

/***/ "./templates/application.hbs":
/*!***********************************!*\
  !*** ./templates/application.hbs ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__.createTemplateFactory)(\n/*\n  <div>\n  <Navbar />\n  <div>\n    {{outlet}}\n  </div>\n</div>\n*/\n{\n  \"id\": \"pGeL1GQo\",\n  \"block\": \"[[[10,0],[12],[1,\\\"\\\\n  \\\"],[8,[39,1],null,null,null],[1,\\\"\\\\n  \\\"],[10,0],[12],[1,\\\"\\\\n    \\\"],[46,[28,[37,3],null,null],null,null,null],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n\\\"],[13]],[],false,[\\\"div\\\",\\\"navbar\\\",\\\"component\\\",\\\"-outlet\\\"]]\",\n  \"moduleName\": \"my-app/templates/application.hbs\",\n  \"isStrictMode\": false\n}));\n\n//# sourceURL=webpack://my-app/./templates/application.hbs?");

/***/ }),

/***/ "./templates/contact.hbs":
/*!*******************************!*\
  !*** ./templates/contact.hbs ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__.createTemplateFactory)(\n/*\n  <Header>\n  <h2 class=\"text-5xl\">Contact Us</h2>\n  <p>\n    Super Rentals Representatives would love to help you<br>\n    choose a destination or answer any questions you may have.\n  </p>\n  <address>\n    <div class=\"mt-9\">\n      <p class=\"font-thin\"> Super Rentals HQ</p>\n      <p class=\"font-thin\">\n        1212 Test Address Avenue<br>\n        Testington, OR 97233\n      </p>\n      <div class=\"mt-9\">\n        <a class=\"text-blue-600\" href=\"tel:503.555.1212\">+1 (503) 555-1212</a><br>\n        <a class=\"text-blue-600\" href=\"mailto:superrentalsrep@emberjs.com\">superrentalsrep@emberjs.com</a>\n      </div>\n    </div>\n  </address>\n  <div class=\"mt-9\">\n    <LinkTo class=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700 rounded\"\n      @route=\"about\">About</LinkTo>\n  </div>\n</Header>\n*/\n{\n  \"id\": \"sMOh6xep\",\n  \"block\": \"[[[8,[39,0],null,null,[[\\\"default\\\"],[[[[1,\\\"\\\\n  \\\"],[10,\\\"h2\\\"],[14,0,\\\"text-5xl\\\"],[12],[1,\\\"Contact Us\\\"],[13],[1,\\\"\\\\n  \\\"],[10,2],[12],[1,\\\"\\\\n    Super Rentals Representatives would love to help you\\\"],[10,\\\"br\\\"],[12],[13],[1,\\\"\\\\n    choose a destination or answer any questions you may have.\\\\n  \\\"],[13],[1,\\\"\\\\n  \\\"],[10,\\\"address\\\"],[12],[1,\\\"\\\\n    \\\"],[10,0],[14,0,\\\"mt-9\\\"],[12],[1,\\\"\\\\n      \\\"],[10,2],[14,0,\\\"font-thin\\\"],[12],[1,\\\" Super Rentals HQ\\\"],[13],[1,\\\"\\\\n      \\\"],[10,2],[14,0,\\\"font-thin\\\"],[12],[1,\\\"\\\\n        1212 Test Address Avenue\\\"],[10,\\\"br\\\"],[12],[13],[1,\\\"\\\\n        Testington, OR 97233\\\\n      \\\"],[13],[1,\\\"\\\\n      \\\"],[10,0],[14,0,\\\"mt-9\\\"],[12],[1,\\\"\\\\n        \\\"],[10,3],[14,0,\\\"text-blue-600\\\"],[14,6,\\\"tel:503.555.1212\\\"],[12],[1,\\\"+1 (503) 555-1212\\\"],[13],[10,\\\"br\\\"],[12],[13],[1,\\\"\\\\n        \\\"],[10,3],[14,0,\\\"text-blue-600\\\"],[14,6,\\\"mailto:superrentalsrep@emberjs.com\\\"],[12],[1,\\\"superrentalsrep@emberjs.com\\\"],[13],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n    \\\"],[13],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n  \\\"],[10,0],[14,0,\\\"mt-9\\\"],[12],[1,\\\"\\\\n    \\\"],[8,[39,7],[[24,0,\\\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700 rounded\\\"]],[[\\\"@route\\\"],[\\\"about\\\"]],[[\\\"default\\\"],[[[[1,\\\"About\\\"]],[]]]]],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n\\\"]],[]]]]]],[],false,[\\\"header\\\",\\\"h2\\\",\\\"p\\\",\\\"br\\\",\\\"address\\\",\\\"div\\\",\\\"a\\\",\\\"link-to\\\"]]\",\n  \"moduleName\": \"my-app/templates/contact.hbs\",\n  \"isStrictMode\": false\n}));\n\n//# sourceURL=webpack://my-app/./templates/contact.hbs?");

/***/ }),

/***/ "./templates/dog.hbs":
/*!***************************!*\
  !*** ./templates/dog.hbs ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__.createTemplateFactory)(\n/*\n  <Dog></Dog>\n*/\n{\n  \"id\": \"hQOMHcEe\",\n  \"block\": \"[[[8,[39,0],null,null,[[\\\"default\\\"],[[[],[]]]]]],[],false,[\\\"dog\\\"]]\",\n  \"moduleName\": \"my-app/templates/dog.hbs\",\n  \"isStrictMode\": false\n}));\n\n//# sourceURL=webpack://my-app/./templates/dog.hbs?");

/***/ }),

/***/ "./templates/index.hbs":
/*!*****************************!*\
  !*** ./templates/index.hbs ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__.createTemplateFactory)(\n/*\n  <Header>\n  <h2 class=\"text-5xl\">Welcome to Super Rentals!</h2>\n  <p>We hope you find exactly what you're looking for in a place to stay.</p>\n  <div class=\"mt-9\">\n    <LinkTo class=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700 rounded button\"\n      @route=\"about\">About Us</LinkTo>\n\n  </div>\n</Header>\n\n\n<Search::Searcher @rentals={{@model}} />\n*/\n{\n  \"id\": \"jANIbFpH\",\n  \"block\": \"[[[8,[39,0],null,null,[[\\\"default\\\"],[[[[1,\\\"\\\\n  \\\"],[10,\\\"h2\\\"],[14,0,\\\"text-5xl\\\"],[12],[1,\\\"Welcome to Super Rentals!\\\"],[13],[1,\\\"\\\\n  \\\"],[10,2],[12],[1,\\\"We hope you find exactly what you're looking for in a place to stay.\\\"],[13],[1,\\\"\\\\n  \\\"],[10,0],[14,0,\\\"mt-9\\\"],[12],[1,\\\"\\\\n    \\\"],[8,[39,4],[[24,0,\\\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700 rounded button\\\"]],[[\\\"@route\\\"],[\\\"about\\\"]],[[\\\"default\\\"],[[[[1,\\\"About Us\\\"]],[]]]]],[1,\\\"\\\\n\\\\n  \\\"],[13],[1,\\\"\\\\n\\\"]],[]]]]],[1,\\\"\\\\n\\\\n\\\\n\\\"],[8,[39,5],null,[[\\\"@rentals\\\"],[[30,1]]],null]],[\\\"@model\\\"],false,[\\\"header\\\",\\\"h2\\\",\\\"p\\\",\\\"div\\\",\\\"link-to\\\",\\\"search/searcher\\\"]]\",\n  \"moduleName\": \"my-app/templates/index.hbs\",\n  \"isStrictMode\": false\n}));\n\n//# sourceURL=webpack://my-app/./templates/index.hbs?");

/***/ }),

/***/ "./templates/rental.hbs":
/*!******************************!*\
  !*** ./templates/rental.hbs ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_0__.createTemplateFactory)(\n/*\n  <Rental::Detailed @rental={{@model}} />\n*/\n{\n  \"id\": \"Erwg8sZq\",\n  \"block\": \"[[[8,[39,0],null,[[\\\"@rental\\\"],[[30,1]]],null]],[\\\"@model\\\"],false,[\\\"rental/detailed\\\"]]\",\n  \"moduleName\": \"my-app/templates/rental.hbs\",\n  \"isStrictMode\": false\n}));\n\n//# sourceURL=webpack://my-app/./templates/rental.hbs?");

/***/ }),

/***/ "./adapters/application.js":
/*!*********************************!*\
  !*** ./adapters/application.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ApplicationAdapter)\n/* harmony export */ });\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/defineProperty.js */ \"../../@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _ember_data_adapter_json_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/adapter/json-api */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/json-api.js\");\n\n\nclass ApplicationAdapter extends _ember_data_adapter_json_api__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n  constructor(...args) {\n    super(...args);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"namespace\", 'api');\n  }\n  buildURL(...args) {\n    return `${super.buildURL(...args)}.json`;\n  }\n}\n\n//# sourceURL=webpack://my-app/./adapters/application.js?");

/***/ }),

/***/ "./app.js":
/*!****************!*\
  !*** ./app.js ***!
  \****************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ App)\n/* harmony export */ });\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/defineProperty.js */ \"../../@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/application */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fapplication&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_application__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var ember_resolver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ember-resolver */ \"../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/index.js\");\n/* harmony import */ var ember_load_initializers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ember-load-initializers */ \"../rewritten-packages/ember-load-initializers.f6066884/node_modules/ember-load-initializers/index.js\");\n/* harmony import */ var my_app_config_environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! my-app/config/environment */ \"./config/environment.js\");\n/* harmony import */ var my_app_app_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! my-app/app.css */ \"./app.css\");\n\n\n\n\n\n\nclass App extends (_ember_application__WEBPACK_IMPORTED_MODULE_1___default()) {\n  constructor(...args) {\n    super(...args);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"modulePrefix\", my_app_config_environment__WEBPACK_IMPORTED_MODULE_4__[\"default\"].modulePrefix);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"podModulePrefix\", my_app_config_environment__WEBPACK_IMPORTED_MODULE_4__[\"default\"].podModulePrefix);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"Resolver\", ember_resolver__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n  }\n}\n(0,ember_load_initializers__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(App, my_app_config_environment__WEBPACK_IMPORTED_MODULE_4__[\"default\"].modulePrefix);\n\n//# sourceURL=webpack://my-app/./app.js?");

/***/ }),

/***/ "./assets/my-app.js":
/*!**************************!*\
  !*** ./assets/my-app.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../@embroider/macros/src/addon/es-compat2 */ \"../../@embroider/macros/src/addon/es-compat2.js\");\n/* harmony import */ var _embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../@embroider/macros/src/addon/runtime */ \"../../@embroider/macros/src/addon/runtime.js\");\n\n\nlet w = window;\nlet d = w.define;\n(0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! ./-embroider-implicit-modules.js */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial%2Fnode_modules%2F.embroider%2Frewritten-app%2F-embroider-implicit-modules.js&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\"));\nd(\"my-app/adapters/application\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/adapters/application.js */ \"./adapters/application.js\"));\n});\nd(\"my-app/app\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/app.js */ \"./app.js\"));\n});\nd(\"my-app/config/environment\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/config/environment.js */ \"./config/environment.js\"));\n});\nd(\"my-app/models/rental\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/models/rental.ts */ \"./models/rental.ts\"));\n});\nd(\"my-app/router\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/router.ts */ \"./router.ts\"));\n});\nd(\"my-app/serializers/application\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/serializers/application.js */ \"./serializers/application.js\"));\n});\nd(\"my-app/services/page-title\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/services/page-title.js */ \"../../ember-page-title/dist/_app_/services/page-title.js\"));\n});\nd(\"my-app/component-managers/glimmer\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/component-managers/glimmer.js */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/_app_/component-managers/glimmer.js\"));\n});\nd(\"my-app/initializers/app-version\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/initializers/app-version.js */ \"../rewritten-packages/ember-cli-app-version.15f7f965/node_modules/ember-cli-app-version/_app_/initializers/app-version.js\"));\n});\nd(\"my-app/data-adapter\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/data-adapter.js */ \"../rewritten-packages/@ember-data/debug.cbe3cfb1/node_modules/@ember-data/debug/_app_/data-adapter.js\"));\n});\nd(\"my-app/initializers/ember-data\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/initializers/ember-data.js */ \"../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/initializers/ember-data.js\"));\n});\nd(\"my-app/services/store\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/services/store.js */ \"../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/services/store.js\"));\n});\nd(\"my-app/transforms/boolean\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/transforms/boolean.js */ \"../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/transforms/boolean.js\"));\n});\nd(\"my-app/transforms/date\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/transforms/date.js */ \"../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/transforms/date.js\"));\n});\nd(\"my-app/transforms/number\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/transforms/number.js */ \"../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/transforms/number.js\"));\n});\nd(\"my-app/transforms/string\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/transforms/string.js */ \"../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/transforms/string.js\"));\n});\nd(\"my-app/container-debug-adapter\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/container-debug-adapter.js */ \"../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/_app_/container-debug-adapter.js\"));\n});\nd(\"my-app/components/buttons/share/component\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/buttons/share/component.ts */ \"./components/buttons/share/component.ts\"));\n});\nd(\"my-app/components/buttons/share/template\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/buttons/share/template.hbs */ \"./components/buttons/share/template.hbs\"));\n});\nd(\"my-app/components/dog/component\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/dog/component.ts */ \"./components/dog/component.ts\"));\n});\nd(\"my-app/components/dog/template\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/dog/template.hbs */ \"./components/dog/template.hbs\"));\n});\nd(\"my-app/components/header/template\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/header/template.hbs */ \"./components/header/template.hbs\"));\n});\nd(\"my-app/components/navbar/template\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/navbar/template.hbs */ \"./components/navbar/template.hbs\"));\n});\nd(\"my-app/components/rental/detailed/component\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/rental/detailed/component.ts */ \"./components/rental/detailed/component.ts\"));\n});\nd(\"my-app/components/rental/detailed/template\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/rental/detailed/template.hbs */ \"./components/rental/detailed/template.hbs\"));\n});\nd(\"my-app/components/rental/images/detailed/component\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/rental/images/detailed/component.ts */ \"./components/rental/images/detailed/component.ts\"));\n});\nd(\"my-app/components/rental/images/detailed/template\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/rental/images/detailed/template.hbs */ \"./components/rental/images/detailed/template.hbs\"));\n});\nd(\"my-app/components/rental/images/index/component\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/rental/images/index/component.ts */ \"./components/rental/images/index/component.ts\"));\n});\nd(\"my-app/components/rental/images/index/template\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/rental/images/index/template.hbs */ \"./components/rental/images/index/template.hbs\"));\n});\nd(\"my-app/components/rental/index/component\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/rental/index/component.ts */ \"./components/rental/index/component.ts\"));\n});\nd(\"my-app/components/rental/index/template\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/rental/index/template.hbs */ \"./components/rental/index/template.hbs\"));\n});\nd(\"my-app/components/search/filter/component\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/search/filter/component.ts */ \"./components/search/filter/component.ts\"));\n});\nd(\"my-app/components/search/filter/template\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/search/filter/template.hbs */ \"./components/search/filter/template.hbs\"));\n});\nd(\"my-app/components/search/searcher/component\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/search/searcher/component.ts */ \"./components/search/searcher/component.ts\"));\n});\nd(\"my-app/components/search/searcher/template\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/search/searcher/template.hbs */ \"./components/search/searcher/template.hbs\"));\n});\nd(\"my-app/components/welcome-page\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/components/welcome-page.js */ \"../../ember-welcome-page/dist/_app_/components/welcome-page.js\"));\n});\nd(\"my-app/helpers/page-title\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/helpers/page-title.js */ \"../../ember-page-title/dist/_app_/helpers/page-title.js\"));\n});\nd(\"my-app/helpers/app-version\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/helpers/app-version.js */ \"../rewritten-packages/ember-cli-app-version.15f7f965/node_modules/ember-cli-app-version/_app_/helpers/app-version.js\"));\n});\nd(\"my-app/helpers/pluralize\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/helpers/pluralize.js */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/_app_/helpers/pluralize.js\"));\n});\nd(\"my-app/helpers/singularize\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/helpers/singularize.js */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/_app_/helpers/singularize.js\"));\n});\nd(\"my-app/modifiers/did-insert\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/modifiers/did-insert.js */ \"../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/_app_/modifiers/did-insert.js\"));\n});\nd(\"my-app/modifiers/did-update\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/modifiers/did-update.js */ \"../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/_app_/modifiers/did-update.js\"));\n});\nd(\"my-app/modifiers/will-destroy\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/modifiers/will-destroy.js */ \"../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/_app_/modifiers/will-destroy.js\"));\n});\nd(\"my-app/templates/index\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/templates/index.hbs */ \"./templates/index.hbs\"));\n});\nd(\"my-app/routes/index\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/routes/index.ts */ \"./routes/index.ts\"));\n});\nd(\"my-app/templates/rental\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/templates/rental.hbs */ \"./templates/rental.hbs\"));\n});\nd(\"my-app/routes/rental\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/routes/rental.ts */ \"./routes/rental.ts\"));\n});\nd(\"my-app/templates/about\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/templates/about.hbs */ \"./templates/about.hbs\"));\n});\nd(\"my-app/templates/application\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/templates/application.hbs */ \"./templates/application.hbs\"));\n});\nd(\"my-app/templates/contact\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/templates/contact.hbs */ \"./templates/contact.hbs\"));\n});\nd(\"my-app/templates/dog\", function () {\n  return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/templates/dog.hbs */ \"./templates/dog.hbs\"));\n});\nif ((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_1__.macroCondition)((0,_embroider_macros_src_addon_runtime__WEBPACK_IMPORTED_MODULE_1__.getGlobalConfig)().fastboot?.isRunning)) {\n  d(\"my-app/instance-initializers/setup-fetch\", function () {\n    return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! my-app/instance-initializers/setup-fetch.js */ \"../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/_fastboot_/instance-initializers/setup-fetch.js\"));\n  });\n}\nif (!runningTests) {\n  (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(__webpack_require__(/*! ../app */ \"./app.js\")).default.create({\n    \"name\": \"my-app\",\n    \"version\": \"0.0.0+fa944a0e\"\n  });\n}\n\n//# sourceURL=webpack://my-app/./assets/my-app.js?");

/***/ }),

/***/ "./components/buttons/share/component.ts":
/*!***********************************************!*\
  !*** ./components/buttons/share/component.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ShareComponent)\n/* harmony export */ });\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/initializerDefineProperty.js */ \"../../@babel/runtime/helpers/esm/initializerDefineProperty.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/defineProperty.js */ \"../../@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js */ \"../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerWarningHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/initializerWarningHelper.js */ \"../../@babel/runtime/helpers/esm/initializerWarningHelper.js\");\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember/service */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fservice&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ember_service__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _glimmer_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @glimmer/component */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/index.js\");\n\n\n\n\nvar _class, _descriptor;\n\n\nconst TWEET_INTENT = 'https://twitter.com/intent/tweet';\nlet ShareComponent = (_class = class ShareComponent extends _glimmer_component__WEBPACK_IMPORTED_MODULE_5__[\"default\"] {\n  constructor(...args) {\n    super(...args);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"router\", _descriptor, this);\n  }\n  get currentURL() {\n    //I cant ommit the warning\n    return new URL(this.router?.currentURL, window.location.origin);\n  }\n  get shareURL() {\n    let url = new URL(TWEET_INTENT);\n    url.searchParams.set('url', this.currentURL.toString());\n    if (this.args.text) {\n      url.searchParams.set('text', this.args.text);\n    }\n    if (this.args.hashtags) {\n      url.searchParams.set('hashtags', this.args.hashtags.toString());\n    }\n    if (this.args.via) {\n      url.searchParams.set('via', this.args.via);\n    }\n    return url;\n  }\n}, (_descriptor = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"router\", [_ember_service__WEBPACK_IMPORTED_MODULE_4__.service], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class);\n\n\n//# sourceURL=webpack://my-app/./components/buttons/share/component.ts?");

/***/ }),

/***/ "./components/dog/component.ts":
/*!*************************************!*\
  !*** ./components/dog/component.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DogComponent),\n/* harmony export */   modifier: () => (/* reexport safe */ _ember_render_modifiers_modifiers_did_insert__WEBPACK_IMPORTED_MODULE_6__.modifier)\n/* harmony export */ });\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/initializerDefineProperty.js */ \"../../@babel/runtime/helpers/esm/initializerDefineProperty.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/defineProperty.js */ \"../../@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js */ \"../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerWarningHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/initializerWarningHelper.js */ \"../../@babel/runtime/helpers/esm/initializerWarningHelper.js\");\n/* harmony import */ var _glimmer_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @glimmer/component */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/index.js\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ember/object */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_ember_object__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _ember_render_modifiers_modifiers_did_insert__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ember/render-modifiers/modifiers/did-insert */ \"../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/modifiers/did-insert.js\");\n/* harmony import */ var _glimmer_tracking__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @glimmer/tracking */ \"../rewritten-packages/@glimmer/tracking.481d7669/node_modules/@glimmer/tracking/index.js\");\n\n\n\n\nvar _class, _descriptor, _descriptor2;\n\n\n\n\nlet DogComponent = (_class = class DogComponent extends _glimmer_component__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n  constructor(...args) {\n    super(...args);\n    //esta es la variable que tiene que ser tracked la cual se utiliza para guardar la url que va a imprimir la imagen dentro de img\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"dogImage\", _descriptor, this);\n    //esta es lo mismo pero lo que hace es guardar la imagen del perro updateada es decir cuando se combierte a boxer\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"dogImageState\", _descriptor2, this);\n  }\n  //esta función sirve para hacer un fetch en el endpoint guardar la respuesta en data y asignarle a \"dogImage\" lo que hay en el atributo \"message\" del json\n  async getRandomDog() {\n    try {\n      const response = await fetch(' https://dog.ceo/api/breeds/image/random');\n      const data = await response.json();\n      this.dogImage = data.message;\n    } catch (error) {\n      //si sale mal salta error\n      console.error('The image couldnt be found', error);\n    }\n  }\n  //lo mismo que arriba pero con otro endpoint\n  async changeBreedToBoxer() {\n    try {\n      const response = await fetch('https://dog.ceo/api/breed/boxer/images/random');\n      const data = await response.json();\n      this.dogImage = data.message;\n    } catch (error) {\n      console.error('The image couldnt be found', error);\n    }\n  }\n\n  // actualización de estado, SIEMPRE TIENE DOS PARAMETROS\n  //el primero parametro de la función es un element de tipo\n  // \"HTMLImageElement\" y el segundo es un Array deString\n  //segun tenga un estado y otro llamo a la funcion de random o a la de boxer\n  async updateDog(element, dogImageState) {\n    if (this.dogImageState === 'dog') {\n      await this.getRandomDog();\n    } else if (this.dogImageState === 'boxer') {\n      await this.changeBreedToBoxer();\n    }\n  }\n\n  //esta funcion es muy simple solo hace que el estado de la variable cambie para luego poder llamar\n  updateDogState(dog, event) {\n    //debugger\n    this.dogImageState = dog;\n  }\n}, (_descriptor = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"dogImage\", [_glimmer_tracking__WEBPACK_IMPORTED_MODULE_7__.tracked], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor2 = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"dogImageState\", [_glimmer_tracking__WEBPACK_IMPORTED_MODULE_7__.tracked], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"getRandomDog\", [_ember_object__WEBPACK_IMPORTED_MODULE_5__.action], Object.getOwnPropertyDescriptor(_class.prototype, \"getRandomDog\"), _class.prototype), (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"changeBreedToBoxer\", [_ember_object__WEBPACK_IMPORTED_MODULE_5__.action], Object.getOwnPropertyDescriptor(_class.prototype, \"changeBreedToBoxer\"), _class.prototype), (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"updateDog\", [_ember_object__WEBPACK_IMPORTED_MODULE_5__.action], Object.getOwnPropertyDescriptor(_class.prototype, \"updateDog\"), _class.prototype), (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"updateDogState\", [_ember_object__WEBPACK_IMPORTED_MODULE_5__.action], Object.getOwnPropertyDescriptor(_class.prototype, \"updateDogState\"), _class.prototype)), _class);\n\n/*!\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\nimport { modifier } from '@ember/render-modifiers';\nimport { set } from '@ember/object'\n\ninterface DogComponentArgs {\n\n\n}\nexport default class DogComponent extends Component<DogComponentArgs> {\n\n    declare dogImage: string;\n\n    @action\n    async getRandomDog() {\n        try {\n            const response = await fetch(' https://dog.ceo/api/breeds/image/random');\n            const data = await response.json();\n            set(this, 'dogImage', data.message);\n        } catch (error) {\n            console.error('The image couldnt be found', error)\n        }\n    }\n    @action\n    changeBreedToBoxer() {\n        this.dogImage = 'https://dog.ceo/api/breed/boxer/images/random';\n\n    }\n\n\n\n}\n\n*/\n\n//# sourceURL=webpack://my-app/./components/dog/component.ts?");

/***/ }),

/***/ "./components/rental/detailed/component.ts":
/*!*************************************************!*\
  !*** ./components/rental/detailed/component.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DetailedComponent)\n/* harmony export */ });\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/initializerDefineProperty.js */ \"../../@babel/runtime/helpers/esm/initializerDefineProperty.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/defineProperty.js */ \"../../@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js */ \"../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerWarningHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/initializerWarningHelper.js */ \"../../@babel/runtime/helpers/esm/initializerWarningHelper.js\");\n/* harmony import */ var _glimmer_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @glimmer/component */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/index.js\");\n/* harmony import */ var _glimmer_tracking__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @glimmer/tracking */ \"../rewritten-packages/@glimmer/tracking.481d7669/node_modules/@glimmer/tracking/index.js\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ember/object */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_ember_object__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\nvar _class, _descriptor, _descriptor2;\n\n\n\nlet DetailedComponent = (_class = class DetailedComponent extends _glimmer_component__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n  constructor(...args) {\n    super(...args);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"query\", _descriptor, this);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"isSmall\", _descriptor2, this);\n  }\n  toggleImage() {\n    this.isSmall = !this.isSmall;\n  }\n}, (_descriptor = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"query\", [_glimmer_tracking__WEBPACK_IMPORTED_MODULE_5__.tracked], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor2 = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"isSmall\", [_glimmer_tracking__WEBPACK_IMPORTED_MODULE_5__.tracked], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return true;\n  }\n}), (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"toggleImage\", [_ember_object__WEBPACK_IMPORTED_MODULE_6__.action], Object.getOwnPropertyDescriptor(_class.prototype, \"toggleImage\"), _class.prototype)), _class);\n\n\n//# sourceURL=webpack://my-app/./components/rental/detailed/component.ts?");

/***/ }),

/***/ "./components/rental/images/detailed/component.ts":
/*!********************************************************!*\
  !*** ./components/rental/images/detailed/component.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DetailedComponent)\n/* harmony export */ });\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js */ \"../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\");\n/* harmony import */ var _glimmer_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/component */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/index.js\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/object */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_object__WEBPACK_IMPORTED_MODULE_2__);\n\nvar _class;\n\n//EXPORTANDO DECORDAORES\n\n\n//interface RentalImageComponentArgs {\n//toggleImage:(a:string ,b:number) => void;\n//variable: string;\n//toggleImage: () => void\n//}\nlet DetailedComponent = (_class = class DetailedComponent extends _glimmer_component__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n  toggleSize() {\n    this.args.toggleImage();\n  }\n}, ((0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_class.prototype, \"toggleSize\", [_ember_object__WEBPACK_IMPORTED_MODULE_2__.action], Object.getOwnPropertyDescriptor(_class.prototype, \"toggleSize\"), _class.prototype)), _class);\n\n\n//# sourceURL=webpack://my-app/./components/rental/images/detailed/component.ts?");

/***/ }),

/***/ "./components/rental/images/index/component.ts":
/*!*****************************************************!*\
  !*** ./components/rental/images/index/component.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IndexComponent)\n/* harmony export */ });\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js */ \"../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\");\n/* harmony import */ var _glimmer_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/component */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/index.js\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/object */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_object__WEBPACK_IMPORTED_MODULE_2__);\n\nvar _class;\n\n//EXPORTANDO DECORDAORES\n\nlet IndexComponent = (_class = class IndexComponent extends _glimmer_component__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n  toggleSize() {\n    this.args.toggleImage();\n  }\n}, ((0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_class.prototype, \"toggleSize\", [_ember_object__WEBPACK_IMPORTED_MODULE_2__.action], Object.getOwnPropertyDescriptor(_class.prototype, \"toggleSize\"), _class.prototype)), _class);\n\n\n//# sourceURL=webpack://my-app/./components/rental/images/index/component.ts?");

/***/ }),

/***/ "./components/rental/index/component.ts":
/*!**********************************************!*\
  !*** ./components/rental/index/component.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IndexComponent)\n/* harmony export */ });\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/initializerDefineProperty.js */ \"../../@babel/runtime/helpers/esm/initializerDefineProperty.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/defineProperty.js */ \"../../@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js */ \"../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerWarningHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/initializerWarningHelper.js */ \"../../@babel/runtime/helpers/esm/initializerWarningHelper.js\");\n/* harmony import */ var _glimmer_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @glimmer/component */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/index.js\");\n/* harmony import */ var _glimmer_tracking__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @glimmer/tracking */ \"../rewritten-packages/@glimmer/tracking.481d7669/node_modules/@glimmer/tracking/index.js\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ember/object */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_ember_object__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\nvar _class, _descriptor, _descriptor2;\n\n\n\nlet IndexComponent = (_class = class IndexComponent extends _glimmer_component__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n  constructor(...args) {\n    super(...args);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"query\", _descriptor, this);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"isSmall\", _descriptor2, this);\n  }\n  toggleImage() {\n    this.isSmall = !this.isSmall;\n  }\n}, (_descriptor = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"query\", [_glimmer_tracking__WEBPACK_IMPORTED_MODULE_5__.tracked], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor2 = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"isSmall\", [_glimmer_tracking__WEBPACK_IMPORTED_MODULE_5__.tracked], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return true;\n  }\n}), (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"toggleImage\", [_ember_object__WEBPACK_IMPORTED_MODULE_6__.action], Object.getOwnPropertyDescriptor(_class.prototype, \"toggleImage\"), _class.prototype)), _class);\n\n\n//# sourceURL=webpack://my-app/./components/rental/index/component.ts?");

/***/ }),

/***/ "./components/search/filter/component.ts":
/*!***********************************************!*\
  !*** ./components/search/filter/component.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FilterComponent)\n/* harmony export */ });\n/* harmony import */ var _glimmer_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/component */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/index.js\");\n\nclass FilterComponent extends _glimmer_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  get results() {\n    let {\n      query\n    } = this.args;\n    let rentals = this.args.rentals;\n    if (query) {\n      rentals = rentals.filter(rental => rental.title.toLowerCase().includes(query.toLowerCase()));\n    }\n    return rentals;\n  }\n}\n\n//# sourceURL=webpack://my-app/./components/search/filter/component.ts?");

/***/ }),

/***/ "./components/search/searcher/component.ts":
/*!*************************************************!*\
  !*** ./components/search/searcher/component.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SearcherComponent)\n/* harmony export */ });\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/initializerDefineProperty.js */ \"../../@babel/runtime/helpers/esm/initializerDefineProperty.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/defineProperty.js */ \"../../@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js */ \"../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerWarningHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/initializerWarningHelper.js */ \"../../@babel/runtime/helpers/esm/initializerWarningHelper.js\");\n/* harmony import */ var _glimmer_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @glimmer/component */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/index.js\");\n/* harmony import */ var _glimmer_tracking__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @glimmer/tracking */ \"../rewritten-packages/@glimmer/tracking.481d7669/node_modules/@glimmer/tracking/index.js\");\n\n\n\n\nvar _class, _descriptor;\n\n\nlet SearcherComponent = (_class = class SearcherComponent extends _glimmer_component__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n  constructor(...args) {\n    super(...args);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"query\", _descriptor, this);\n  }\n}, (_descriptor = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"query\", [_glimmer_tracking__WEBPACK_IMPORTED_MODULE_5__.tracked], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n})), _class);\n\n\n//# sourceURL=webpack://my-app/./components/search/searcher/component.ts?");

/***/ }),

/***/ "./config/environment.js":
/*!*******************************!*\
  !*** ./config/environment.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((function () {\n  var prefix = 'my-app';\n  try {\n    var metaName = prefix + '/config/environment';\n    var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n    var config = JSON.parse(decodeURIComponent(rawConfig));\n    var exports = {\n      'default': config\n    };\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    return exports;\n  } catch (err) {\n    throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n  }\n})().default);\n\n//# sourceURL=webpack://my-app/./config/environment.js?");

/***/ }),

/***/ "./models/rental.ts":
/*!**************************!*\
  !*** ./models/rental.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RentalModel)\n/* harmony export */ });\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/initializerDefineProperty.js */ \"../../@babel/runtime/helpers/esm/initializerDefineProperty.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/defineProperty.js */ \"../../@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js */ \"../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerWarningHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/initializerWarningHelper.js */ \"../../@babel/runtime/helpers/esm/initializerWarningHelper.js\");\n/* harmony import */ var _ember_data_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember-data/model */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/index.js\");\n\n\n\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;\n\nconst COMMUNITY_CATEGORIES = ['Condo', 'Townhouse', 'Apartment'];\nlet RentalModel = (_class = class RentalModel extends _ember_data_model__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n  constructor(...args) {\n    super(...args);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"title\", _descriptor, this);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"owner\", _descriptor2, this);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"city\", _descriptor3, this);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"location\", _descriptor4, this);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"category\", _descriptor5, this);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"image\", _descriptor6, this);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"bedrooms\", _descriptor7, this);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"description\", _descriptor8, this);\n  }\n  get type() {\n    if (COMMUNITY_CATEGORIES.includes(this.category)) {\n      return 'Community';\n    } else {\n      return 'Standalone';\n    }\n  }\n}, (_descriptor = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"title\", [_ember_data_model__WEBPACK_IMPORTED_MODULE_4__.attr], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"owner\", [_ember_data_model__WEBPACK_IMPORTED_MODULE_4__.attr], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"city\", [_ember_data_model__WEBPACK_IMPORTED_MODULE_4__.attr], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"location\", [_ember_data_model__WEBPACK_IMPORTED_MODULE_4__.attr], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"category\", [_ember_data_model__WEBPACK_IMPORTED_MODULE_4__.attr], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"image\", [_ember_data_model__WEBPACK_IMPORTED_MODULE_4__.attr], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor7 = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"bedrooms\", [_ember_data_model__WEBPACK_IMPORTED_MODULE_4__.attr], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor8 = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"description\", [_ember_data_model__WEBPACK_IMPORTED_MODULE_4__.attr], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class);\n\n\n//# sourceURL=webpack://my-app/./models/rental.ts?");

/***/ }),

/***/ "./router.ts":
/*!*******************!*\
  !*** ./router.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Router)\n/* harmony export */ });\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/defineProperty.js */ \"../../@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _ember_routing_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/routing/router */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Frouting%2Frouter&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_routing_router__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_routing_router__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var my_app_config_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! my-app/config/environment */ \"./config/environment.js\");\n\n\n\nclass Router extends (_ember_routing_router__WEBPACK_IMPORTED_MODULE_1___default()) {\n  constructor(...args) {\n    super(...args);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"location\", my_app_config_environment__WEBPACK_IMPORTED_MODULE_2__[\"default\"].locationType);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"rootURL\", my_app_config_environment__WEBPACK_IMPORTED_MODULE_2__[\"default\"].rootURL);\n  }\n}\nRouter.map(function () {\n  this.route('about');\n  this.route('contact', {\n    path: '/getting-in-touch'\n  });\n  this.route('rental', {\n    path: '/rentals/:rental_id'\n  }); //para acceder a cada uno en particular(rental id para poder acceder a cada uno)\n  this.route('dog');\n});\n\n//# sourceURL=webpack://my-app/./router.ts?");

/***/ }),

/***/ "./routes/index.ts":
/*!*************************!*\
  !*** ./routes/index.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IndexRoute)\n/* harmony export */ });\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/initializerDefineProperty.js */ \"../../@babel/runtime/helpers/esm/initializerDefineProperty.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/defineProperty.js */ \"../../@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js */ \"../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerWarningHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/initializerWarningHelper.js */ \"../../@babel/runtime/helpers/esm/initializerWarningHelper.js\");\n/* harmony import */ var _ember_routing_route__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember/routing/route */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Frouting%2Froute&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_routing_route__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ember_routing_route__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ember/service */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fservice&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_ember_service__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\nvar _class, _descriptor;\n\n\nlet IndexRoute = (_class = class IndexRoute extends (_ember_routing_route__WEBPACK_IMPORTED_MODULE_4___default()) {\n  constructor(...args) {\n    super(...args);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"store\", _descriptor, this);\n  }\n  async model() {\n    return this.store.findAll('rental');\n  }\n}, (_descriptor = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"store\", [_ember_service__WEBPACK_IMPORTED_MODULE_5__.inject], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class);\n\n\n//# sourceURL=webpack://my-app/./routes/index.ts?");

/***/ }),

/***/ "./routes/rental.ts":
/*!**************************!*\
  !*** ./routes/rental.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RentalRoute)\n/* harmony export */ });\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/initializerDefineProperty.js */ \"../../@babel/runtime/helpers/esm/initializerDefineProperty.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/defineProperty.js */ \"../../@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js */ \"../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\");\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerWarningHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/initializerWarningHelper.js */ \"../../@babel/runtime/helpers/esm/initializerWarningHelper.js\");\n/* harmony import */ var _ember_routing_route__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember/routing/route */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Frouting%2Froute&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_routing_route__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ember_routing_route__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ember/service */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fservice&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_ember_service__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\nvar _class, _descriptor;\n\n\nlet RentalRoute = (_class = class RentalRoute extends (_ember_routing_route__WEBPACK_IMPORTED_MODULE_4___default()) {\n  constructor(...args) {\n    super(...args);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_initializerDefineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"store\", _descriptor, this);\n  }\n  async model(params) {\n    return this.store.findRecord('rental', params.rental_id);\n  }\n}, (_descriptor = (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_class.prototype, \"store\", [_ember_service__WEBPACK_IMPORTED_MODULE_5__.inject], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class);\n\n\n//# sourceURL=webpack://my-app/./routes/rental.ts?");

/***/ }),

/***/ "./serializers/application.js":
/*!************************************!*\
  !*** ./serializers/application.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ApplicationSerializer)\n/* harmony export */ });\n/* harmony import */ var _ember_data_serializer_json_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember-data/serializer/json-api */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/json-api.js\");\n\nclass ApplicationSerializer extends _ember_data_serializer_json_api__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {}\n\n//# sourceURL=webpack://my-app/./serializers/application.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/-private.js":
/*!*******************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/-private.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BuildURLMixin: () => (/* reexport safe */ _build_url_mixin_AgfAmsW___WEBPACK_IMPORTED_MODULE_1__.B),\n/* harmony export */   determineBodyPromise: () => (/* reexport safe */ _serialize_into_hash_2lQbHRKN__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   fetch: () => (/* reexport safe */ _serialize_into_hash_2lQbHRKN__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   parseResponseHeaders: () => (/* reexport safe */ _serialize_into_hash_2lQbHRKN__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   serializeIntoHash: () => (/* reexport safe */ _serialize_into_hash_2lQbHRKN__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   serializeQueryParams: () => (/* reexport safe */ _serialize_into_hash_2lQbHRKN__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   setupFastboot: () => (/* reexport safe */ _serialize_into_hash_2lQbHRKN__WEBPACK_IMPORTED_MODULE_0__.a)\n/* harmony export */ });\n/* harmony import */ var _serialize_into_hash_2lQbHRKN__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serialize-into-hash-2lQbHRKN */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/serialize-into-hash-2lQbHRKN.js\");\n/* harmony import */ var _build_url_mixin_AgfAmsW___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./build-url-mixin-AgfAmsW- */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/build-url-mixin-AgfAmsW-.js\");\n\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/-private.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/build-url-mixin-AgfAmsW-.js":
/*!***********************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/build-url-mixin-AgfAmsW-.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: () => (/* binding */ BuildURLMixin)\n/* harmony export */ });\n/* harmony import */ var _ember_object_mixin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/object/mixin */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject%2Fmixin&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object_mixin__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_object_mixin__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/string */ \"../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/index.js\");\n/* harmony import */ var ember_inflector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ember-inflector */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/index.js\");\n\n\n\n\n/**\n  @module @ember-data/adapter\n*/\n\n/*\n The structure of this file is such because typing Mixins is hard. Here we've structured it in\n such a way as to maximize the type information that a consumer can utilize. There are simpler\n ways to type a mixin but we would not be able to provide the nice overload signature for buildURL\n*/\n// the interface must fully declare the function signatures that the individual functions\n// will also declare. If instead we try to keep them in sync by doing something like\n// `interface BuildURLMixin { buildURL: typeof buildURL }`\n// then an extending class overwriting one of the methods will break because typescript\n// thinks it is a switch from an instance prop (that is a method) to an instance method.\n\n// prevents the final constructed object from needing to add\n// host and namespace which are provided by the final consuming\n// class to the prototype which can result in overwrite errors\n\n/**\n  ## Using BuildURLMixin\n\n  To use URL building, include the mixin when extending an adapter, and call `buildURL` where needed.\n  The default behaviour is designed for RESTAdapter.\n\n  ### Example\n\n  ```javascript\n  import Adapter, { BuildURLMixin } from '@ember-data/adapter';\n\n  export default class ApplicationAdapter extends Adapter.extend(BuildURLMixin) {\n    findRecord(store, type, id, snapshot) {\n      var url = this.buildURL(type.modelName, id, snapshot, 'findRecord');\n      return this.ajax(url, 'GET');\n    }\n  }\n  ```\n\n  ### Attributes\n\n  The `host` and `namespace` attributes will be used if defined, and are optional.\n\n  @class BuildURLMixin\n  @public\n*/\n/**\n    Builds a URL for a given type and optional ID.\n\n    By default, it pluralizes the type's name (for example, 'post'\n    becomes 'posts' and 'person' becomes 'people'). To override the\n    pluralization see [pathForType](./pathForType?anchor=pathForType).\n\n    If an ID is specified, it adds the ID to the path generated\n    for the type, separated by a `/`.\n\n    When called by `RESTAdapter.findMany()` the `id` and `snapshot` parameters\n    will be arrays of ids and snapshots.\n\n    @method buildURL\n    @public\n    @param {String} modelName\n    @param {(String|Array|Object)} id single id or array of ids or query\n    @param {(Snapshot|SnapshotRecordArray)} snapshot single snapshot or array of snapshots\n    @param {String} requestType\n    @param {Object} query object of query parameters to send for query requests.\n    @return {String} url\n  */\n\nfunction buildURL(modelName, id, snapshot, requestType, query) {\n  /*\n      Switch statements in typescript don't currently narrow even when the function is implemented\n      with overloads.\n       We still extract this to stand alone so that we can provide nice overloads for calling signatures,\n      but we will still require all of this casting (or a ridiculous number of assertsthat narrow it down\n      for us).\n  */\n  switch (requestType) {\n    case 'findRecord':\n      return this.urlForFindRecord(id, modelName, snapshot);\n    case 'findAll':\n      return this.urlForFindAll(modelName, snapshot);\n    case 'query':\n      return this.urlForQuery(query || {}, modelName);\n    case 'queryRecord':\n      return this.urlForQueryRecord(query || {}, modelName);\n    case 'findMany':\n      return this.urlForFindMany(id, modelName, snapshot);\n    case 'findHasMany':\n      return this.urlForFindHasMany(id, modelName, snapshot);\n    case 'findBelongsTo':\n      return this.urlForFindBelongsTo(id, modelName, snapshot);\n    case 'createRecord':\n      return this.urlForCreateRecord(modelName, snapshot);\n    case 'updateRecord':\n      return this.urlForUpdateRecord(id, modelName, snapshot);\n    case 'deleteRecord':\n      return this.urlForDeleteRecord(id, modelName, snapshot);\n    default:\n      // this is the 'never' case but someone may call `buildURL` manually so\n      // we try to do something for them.\n      return this._buildURL(modelName, id);\n  }\n}\n\n/**\n    @method _buildURL\n    @private\n    @param {String} modelName\n    @param {String} id\n    @return {String} url\n  */\nfunction _buildURL(modelName, id) {\n  let path;\n  const url = [];\n  const {\n    host\n  } = this;\n  const prefix = this.urlPrefix();\n  if (modelName) {\n    path = this.pathForType(modelName);\n    if (path) {\n      url.push(path);\n    }\n  }\n  if (id) {\n    url.push(encodeURIComponent(id));\n  }\n  if (prefix) {\n    url.unshift(prefix);\n  }\n  let urlString = url.join('/');\n  if (!host && urlString && urlString.charAt(0) !== '/') {\n    urlString = '/' + urlString;\n  }\n  return urlString;\n}\n\n/**\n   Builds a URL for a `store.findRecord(type, id)` call.\n\n   Example:\n\n   ```app/adapters/user.js\n   import JSONAPIAdapter from '@ember-data/adapter/json-api';\n\n   export default class ApplicationAdapter extends JSONAPIAdapter {\n     urlForFindRecord(id, modelName, snapshot) {\n       let baseUrl = this.buildURL(modelName, id, snapshot);\n       return `${baseUrl}/users/${snapshot.adapterOptions.user_id}/playlists/${id}`;\n     }\n   }\n   ```\n\n   @method urlForFindRecord\n   @public\n   @param {String} id\n   @param {String} modelName\n   @param {Snapshot} snapshot\n   @return {String} url\n\n   */\nfunction urlForFindRecord(id, modelName, snapshot) {\n  return this._buildURL(modelName, id);\n}\n\n/**\n   Builds a URL for a `store.findAll(type)` call.\n\n   Example:\n\n   ```app/adapters/comment.js\n   import JSONAPIAdapter from '@ember-data/adapter/json-api';\n\n   export default class ApplicationAdapter extends JSONAPIAdapter {\n     urlForFindAll(modelName, snapshot) {\n       let baseUrl = this.buildURL(modelName);\n       return `${baseUrl}/data/comments.json`;\n     }\n   }\n   ```\n\n   @method urlForFindAll\n    @public\n   @param {String} modelName\n   @param {SnapshotRecordArray} snapshot\n   @return {String} url\n   */\nfunction urlForFindAll(modelName, snapshots) {\n  return this._buildURL(modelName);\n}\n\n/**\n   Builds a URL for a `store.query(type, query)` call.\n\n   Example:\n\n   ```app/adapters/application.js\n   import RESTAdapter from '@ember-data/adapter/rest';\n\n   export default class ApplicationAdapter extends RESTAdapter {\n     host = 'https://api.github.com';\n     urlForQuery (query, modelName) {\n       switch(modelName) {\n         case 'repo':\n           return `https://api.github.com/orgs/${query.orgId}/repos`;\n         default:\n           return super.urlForQuery(...arguments);\n       }\n     }\n   }\n   ```\n\n   @method urlForQuery\n    @public\n   @param {Object} query\n   @param {String} modelName\n   @return {String} url\n   */\nfunction urlForQuery(query, modelName) {\n  return this._buildURL(modelName);\n}\n\n/**\n   Builds a URL for a `store.queryRecord(type, query)` call.\n\n   Example:\n\n   ```app/adapters/application.js\n   import RESTAdapter from '@ember-data/adapter/rest';\n\n   export default class ApplicationAdapter extends RESTAdapter {\n     urlForQueryRecord({ slug }, modelName) {\n       let baseUrl = this.buildURL();\n       return `${baseUrl}/${encodeURIComponent(slug)}`;\n     }\n   }\n   ```\n\n   @method urlForQueryRecord\n    @public\n   @param {Object} query\n   @param {String} modelName\n   @return {String} url\n   */\nfunction urlForQueryRecord(query, modelName) {\n  return this._buildURL(modelName);\n}\n\n/**\n   Builds a URL for coalescing multiple `store.findRecord(type, id)`\n   records into 1 request when the adapter's `coalesceFindRequests`\n   property is `true`.\n\n   Example:\n\n   ```app/adapters/application.js\n   import RESTAdapter from '@ember-data/adapter/rest';\n\n   export default class ApplicationAdapter extends RESTAdapter {\n     urlForFindMany(ids, modelName) {\n       let baseUrl = this.buildURL();\n       return `${baseUrl}/coalesce`;\n     }\n   }\n   ```\n\n   @method urlForFindMany\n    @public\n   @param {Array} ids\n   @param {String} modelName\n   @param {Array} snapshots\n   @return {String} url\n   */\nfunction urlForFindMany(ids, modelName, snapshots) {\n  return this._buildURL(modelName);\n}\n\n/**\n   Builds a URL for fetching an async `hasMany` relationship when a URL\n   is not provided by the server.\n\n   Example:\n\n   ```app/adapters/application.js\n   import JSONAPIAdapter from '@ember-data/adapter/json-api';\n\n   export default class ApplicationAdapter extends JSONAPIAdapter {\n     urlForFindHasMany(id, modelName, snapshot) {\n       let baseUrl = this.buildURL(modelName, id);\n       return `${baseUrl}/relationships`;\n     }\n   }\n   ```\n\n   @method urlForFindHasMany\n    @public\n   @param {String} id\n   @param {String} modelName\n   @param {Snapshot} snapshot\n   @return {String} url\n   */\nfunction urlForFindHasMany(id, modelName, snapshot) {\n  return this._buildURL(modelName, id);\n}\n\n/**\n   Builds a URL for fetching an async `belongsTo` relationship when a url\n   is not provided by the server.\n\n   Example:\n\n   ```app/adapters/application.js\n   import JSONAPIAdapter from '@ember-data/adapter/json-api';\n\n   export default class ApplicationAdapter extends JSONAPIAdapter {\n     urlForFindBelongsTo(id, modelName, snapshot) {\n       let baseUrl = this.buildURL(modelName, id);\n       return `${baseUrl}/relationships`;\n     }\n   }\n   ```\n\n   @method urlForFindBelongsTo\n    @public\n   @param {String} id\n   @param {String} modelName\n   @param {Snapshot} snapshot\n   @return {String} url\n   */\nfunction urlForFindBelongsTo(id, modelName, snapshot) {\n  return this._buildURL(modelName, id);\n}\n\n/**\n   Builds a URL for a `record.save()` call when the record was created\n   locally using `store.createRecord()`.\n\n   Example:\n\n   ```app/adapters/application.js\n   import RESTAdapter from '@ember-data/adapter/rest';\n\n   export default class ApplicationAdapter extends RESTAdapter {\n     urlForCreateRecord(modelName, snapshot) {\n       return super.urlForCreateRecord(...arguments) + '/new';\n     }\n   }\n   ```\n\n   @method urlForCreateRecord\n    @public\n   @param {String} modelName\n   @param {Snapshot} snapshot\n   @return {String} url\n   */\nfunction urlForCreateRecord(modelName, snapshot) {\n  return this._buildURL(modelName);\n}\n\n/**\n   Builds a URL for a `record.save()` call when the record has been updated locally.\n\n   Example:\n\n   ```app/adapters/application.js\n   import RESTAdapter from '@ember-data/adapter/rest';\n\n   export default class ApplicationAdapter extends RESTAdapter {\n     urlForUpdateRecord(id, modelName, snapshot) {\n       return `/${id}/feed?access_token=${snapshot.adapterOptions.token}`;\n     }\n   }\n   ```\n\n   @method urlForUpdateRecord\n    @public\n   @param {String} id\n   @param {String} modelName\n   @param {Snapshot} snapshot\n   @return {String} url\n   */\nfunction urlForUpdateRecord(id, modelName, snapshot) {\n  return this._buildURL(modelName, id);\n}\n\n/**\n   Builds a URL for a `record.save()` call when the record has been deleted locally.\n\n   Example:\n\n   ```app/adapters/application.js\n   import RESTAdapter from '@ember-data/adapter/rest';\n\n   export default class ApplicationAdapter extends RESTAdapter {\n     urlForDeleteRecord(id, modelName, snapshot) {\n       return super.urlForDeleteRecord(...arguments) + '/destroy';\n     }\n   }\n   ```\n\n   @method urlForDeleteRecord\n    @public\n   @param {String} id\n   @param {String} modelName\n   @param {Snapshot} snapshot\n   @return {String} url\n   */\nfunction urlForDeleteRecord(id, modelName, snapshot) {\n  return this._buildURL(modelName, id);\n}\n\n/**\n    @method urlPrefix\n    @private\n    @param {String} path\n    @param {String} parentURL\n    @return {String} urlPrefix\n  */\nfunction urlPrefix(path, parentURL) {\n  const {\n    namespace\n  } = this;\n  let {\n    host\n  } = this;\n  if (!host || host === '/') {\n    host = '';\n  }\n  if (path) {\n    // Protocol relative url\n    if (/^\\/\\//.test(path) || /http(s)?:\\/\\//.test(path)) {\n      // Do nothing, the full host is already included.\n      return path;\n\n      // Absolute path\n    } else if (path.charAt(0) === '/') {\n      return `${host}${path}`;\n      // Relative path\n    } else {\n      return `${parentURL}/${path}`;\n    }\n  }\n\n  // No path provided\n  const url = [];\n  if (host) {\n    url.push(host);\n  }\n  if (namespace) {\n    url.push(namespace);\n  }\n  return url.join('/');\n}\n\n/**\n    Determines the pathname for a given type.\n\n    By default, it pluralizes the type's name (for example,\n    'post' becomes 'posts' and 'person' becomes 'people').\n\n    ### Pathname customization\n\n    For example, if you have an object `LineItem` with an\n    endpoint of `/line_items/`.\n\n    ```app/adapters/application.js\n    import RESTAdapter from '@ember-data/adapter/rest';\n    import { decamelize, pluralize } from '<app-name>/utils/string-utils';\n\n    export default class ApplicationAdapter extends RESTAdapter {\n      pathForType(modelName) {\n        var decamelized = decamelize(modelName);\n        return pluralize(decamelized);\n      }\n    }\n    ```\n\n    @method pathForType\n    @public\n    @param {String} modelName\n    @return {String} path\n  **/\nfunction pathForType(modelName) {\n  const camelized = (0,_ember_string__WEBPACK_IMPORTED_MODULE_1__.camelize)(modelName);\n  return (0,ember_inflector__WEBPACK_IMPORTED_MODULE_2__.pluralize)(camelized);\n}\n\n// we build it this way vs casting to BuildURLMixin so that any\n// changes to the interface surface as errors here.\nconst mixinProps = {\n  buildURL,\n  _buildURL,\n  urlForFindRecord,\n  urlForFindAll,\n  urlForQueryRecord,\n  urlForQuery,\n  urlForFindMany,\n  urlForFindHasMany,\n  urlForFindBelongsTo,\n  urlForCreateRecord,\n  urlForDeleteRecord,\n  urlForUpdateRecord,\n  urlPrefix,\n  pathForType\n};\nvar BuildURLMixin = _ember_object_mixin__WEBPACK_IMPORTED_MODULE_0___default().create(mixinProps);\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/build-url-mixin-AgfAmsW-.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/error.js":
/*!****************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/error.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError),\n/* harmony export */   ConflictError: () => (/* binding */ ConflictError),\n/* harmony export */   ForbiddenError: () => (/* binding */ ForbiddenError),\n/* harmony export */   InvalidError: () => (/* binding */ InvalidError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   ServerError: () => (/* binding */ ServerError),\n/* harmony export */   TimeoutError: () => (/* binding */ TimeoutError),\n/* harmony export */   UnauthorizedError: () => (/* binding */ UnauthorizedError),\n/* harmony export */   \"default\": () => (/* binding */ AdapterError)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/**\n  @module @ember-data/adapter/error\n */\n\n/**\n  ## Overview\n\n  <blockquote style=\"margin: 1em; padding: .1em 1em .1em 1em; border-left: solid 1em #E34C32; background: #e0e0e0;\">\n  <p>\n    ⚠️ <strong>This is LEGACY documentation</strong> for a feature that is no longer encouraged to be used.\n    If starting a new app or thinking of implementing a new adapter, consider writing a\n    <a href=\"/ember-data/release/classes/%3CInterface%3E%20Handler\">Handler</a> instead to be used with the <a href=\"https://github.com/emberjs/data/tree/main/packages/request#readme\">RequestManager</a>\n  </p>\n  </blockquote>\n\n  An `AdapterError` is used by an adapter to signal that an error occurred\n  during a request to an external API. It indicates a generic error, and\n  subclasses are used to indicate specific error states.\n\n  To create a custom error to signal a specific error state in communicating\n  with an external API, extend the `AdapterError`. For example, if the\n  external API exclusively used HTTP `503 Service Unavailable` to indicate\n  it was closed for maintenance:\n\n  ```app/adapters/maintenance-error.js\n  import AdapterError from '@ember-data/adapter/error';\n\n  export default AdapterError.extend({ message: \"Down for maintenance.\" });\n  ```\n\n  This error would then be returned by an adapter's `handleResponse` method:\n\n  ```app/adapters/application.js\n  import JSONAPIAdapter from '@ember-data/adapter/json-api';\n  import MaintenanceError from './maintenance-error';\n\n  export default class ApplicationAdapter extends JSONAPIAdapter {\n    handleResponse(status) {\n      if (503 === status) {\n        return new MaintenanceError();\n      }\n\n      return super.handleResponse(...arguments);\n    }\n  }\n  ```\n\n  And can then be detected in an application and used to send the user to an\n  `under-maintenance` route:\n\n  ```app/routes/application.js\n  import Route from '@ember/routing/route';\n  import MaintenanceError from '../adapters/maintenance-error';\n\n  export default class ApplicationRoute extends Route {\n    actions: {\n      error(error, transition) {\n        if (error instanceof MaintenanceError) {\n          this.transitionTo('under-maintenance');\n          return;\n        }\n\n        // ...other error handling logic\n      }\n    }\n  }\n  ```\n\n  @main @ember-data/adapter/error\n  @class AdapterError\n  @public\n*/\nfunction AdapterError(errors, message = 'Adapter operation failed') {\n  this.isAdapterError = true;\n  const error = Error.call(this, message);\n  if (error) {\n    this.stack = error.stack;\n    this.description = error.description;\n    this.fileName = error.fileName;\n    this.lineNumber = error.lineNumber;\n    this.message = error.message;\n    this.name = error.name;\n    this.number = error.number;\n  }\n  this.errors = errors || [{\n    title: 'Adapter Error',\n    detail: message\n  }];\n}\nfunction extendFn(ErrorClass) {\n  return function ({\n    message: defaultMessage\n  } = {}) {\n    return extend(ErrorClass, defaultMessage);\n  };\n}\nfunction extend(ParentErrorClass, defaultMessage) {\n  const ErrorClass = function (errors, message) {\n    ( true && !(Array.isArray(errors || [])) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('`AdapterError` expects json-api formatted errors array.', Array.isArray(errors || [])));\n    ParentErrorClass.call(this, errors, message || defaultMessage);\n  };\n  ErrorClass.prototype = Object.create(ParentErrorClass.prototype);\n  ErrorClass.extend = extendFn(ErrorClass);\n  return ErrorClass;\n}\nAdapterError.prototype = Object.create(Error.prototype);\nAdapterError.prototype.code = 'AdapterError';\nAdapterError.extend = extendFn(AdapterError);\n\n/**\n  A `InvalidError` is used by an adapter to signal the external API\n  was unable to process a request because the content was not\n  semantically correct or meaningful per the API. Usually, this means a\n  record failed some form of server-side validation. When a promise\n  from an adapter is rejected with a `InvalidError` the record will\n  transition to the `invalid` state and the errors will be set to the\n  `errors` property on the record.\n\n  For Ember Data to correctly map errors to their corresponding\n  properties on the model, Ember Data expects each error to be\n  a valid JSON-API error object with a `source/pointer` that matches\n  the property name. For example, if you had a Post model that\n  looked like this.\n\n  ```app/models/post.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @attr('string') title;\n    @attr('string') content;\n  }\n  ```\n\n  To show an error from the server related to the `title` and\n  `content` properties your adapter could return a promise that\n  rejects with a `InvalidError` object that looks like this:\n\n  ```app/adapters/post.js\n  import RSVP from 'RSVP';\n  import RESTAdapter from '@ember-data/adapter/rest';\n  import { InvalidError } from '@ember-data/adapter/error';\n\n  export default class ApplicationAdapter extends RESTAdapter {\n    updateRecord() {\n      // Fictional adapter that always rejects\n      return RSVP.reject(new InvalidError([\n        {\n          detail: 'Must be unique',\n          source: { pointer: '/data/attributes/title' }\n        },\n        {\n          detail: 'Must not be blank',\n          source: { pointer: '/data/attributes/content'}\n        }\n      ]));\n    }\n  }\n  ```\n\n  Your backend may use different property names for your records the\n  store will attempt to extract and normalize the errors using the\n  serializer's `extractErrors` method before the errors get added to\n  the model. As a result, it is safe for the `InvalidError` to\n  wrap the error payload unaltered.\n\n  @class InvalidError\n  @public\n  @extends AdapterError\n*/\n// TODO @deprecate extractError documentation\nconst InvalidError = extend(AdapterError, 'The adapter rejected the commit because it was invalid');\nInvalidError.prototype.code = 'InvalidError';\n\n/**\n  A `TimeoutError` is used by an adapter to signal that a request\n  to the external API has timed out. I.e. no response was received from\n  the external API within an allowed time period.\n\n  An example use case would be to warn the user to check their internet\n  connection if an adapter operation has timed out:\n\n  ```app/routes/application.js\n  import Route from '@ember/routing/route';\n  import { TimeoutError } from '@ember-data/adapter/error';\n  import { action } from '@ember/object';\n\n  export default class ApplicationRoute extends Route {\n    @action\n    error(error, transition) {\n      if (error instanceof TimeoutError) {\n        // alert the user\n        alert('Are you still connected to the Internet?');\n        return;\n      }\n\n      // ...other error handling logic\n    }\n  }\n  ```\n\n  @class TimeoutError\n  @public\n  @extends AdapterError\n*/\nconst TimeoutError = extend(AdapterError, 'The adapter operation timed out');\nTimeoutError.prototype.code = 'TimeoutError';\n\n/**\n  A `AbortError` is used by an adapter to signal that a request to\n  the external API was aborted. For example, this can occur if the user\n  navigates away from the current page after a request to the external API\n  has been initiated but before a response has been received.\n\n  @class AbortError\n  @public\n  @extends AdapterError\n*/\nconst AbortError = extend(AdapterError, 'The adapter operation was aborted');\nAbortError.prototype.code = 'AbortError';\n\n/**\n  A `UnauthorizedError` equates to a HTTP `401 Unauthorized` response\n  status. It is used by an adapter to signal that a request to the external\n  API was rejected because authorization is required and has failed or has not\n  yet been provided.\n\n  An example use case would be to redirect the user to a login route if a\n  request is unauthorized:\n\n  ```app/routes/application.js\n  import Route from '@ember/routing/route';\n  import { UnauthorizedError } from '@ember-data/adapter/error';\n  import { action } from '@ember/object';\n\n  export default class ApplicationRoute extends Route {\n    @action\n    error(error, transition) {\n      if (error instanceof UnauthorizedError) {\n        // go to the login route\n        this.transitionTo('login');\n        return;\n      }\n\n      // ...other error handling logic\n    }\n  }\n  ```\n\n  @class UnauthorizedError\n  @public\n  @extends AdapterError\n*/\nconst UnauthorizedError = extend(AdapterError, 'The adapter operation is unauthorized');\nUnauthorizedError.prototype.code = 'UnauthorizedError';\n\n/**\n  A `ForbiddenError` equates to a HTTP `403 Forbidden` response status.\n  It is used by an adapter to signal that a request to the external API was\n  valid but the server is refusing to respond to it. If authorization was\n  provided and is valid, then the authenticated user does not have the\n  necessary permissions for the request.\n\n  @class ForbiddenError\n  @public\n  @extends AdapterError\n*/\nconst ForbiddenError = extend(AdapterError, 'The adapter operation is forbidden');\nForbiddenError.prototype.code = 'ForbiddenError';\n\n/**\n  A `NotFoundError` equates to a HTTP `404 Not Found` response status.\n  It is used by an adapter to signal that a request to the external API\n  was rejected because the resource could not be found on the API.\n\n  An example use case would be to detect if the user has entered a route\n  for a specific model that does not exist. For example:\n\n  ```app/routes/post.js\n  import Route from '@ember/routing/route';\n  import { NotFoundError } from '@ember-data/adapter/error';\n  import { inject as service } from '@ember/service';\n  import { action } from '@ember/object';\n\n  export default class PostRoute extends Route {\n    @service store;\n    model(params) {\n      return this.store.findRecord('post', params.post_id);\n    }\n    @action\n    error(error, transition) {\n      if (error instanceof NotFoundError) {\n        // redirect to a list of all posts instead\n        this.transitionTo('posts');\n      } else {\n        // otherwise let the error bubble\n        return true;\n      }\n    }\n  }\n  ```\n\n  @class NotFoundError\n  @public\n  @extends AdapterError\n*/\nconst NotFoundError = extend(AdapterError, 'The adapter could not find the resource');\nNotFoundError.prototype.code = 'NotFoundError';\n\n/**\n  A `ConflictError` equates to a HTTP `409 Conflict` response status.\n  It is used by an adapter to indicate that the request could not be processed\n  because of a conflict in the request. An example scenario would be when\n  creating a record with a client-generated ID but that ID is already known\n  to the external API.\n\n  @class ConflictError\n  @public\n  @extends AdapterError\n*/\nconst ConflictError = extend(AdapterError, 'The adapter operation failed due to a conflict');\nConflictError.prototype.code = 'ConflictError';\n\n/**\n  A `ServerError` equates to a HTTP `500 Internal Server Error` response\n  status. It is used by the adapter to indicate that a request has failed\n  because of an error in the external API.\n\n  @class ServerError\n  @public\n  @extends AdapterError\n*/\nconst ServerError = extend(AdapterError, 'The adapter operation failed due to a server error');\nServerError.prototype.code = 'ServerError';\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/error.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/index-4RESM7Oz.js":
/*!*************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/index-4RESM7Oz.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ Adapter),\n/* harmony export */   _: () => (/* binding */ _applyDecoratedDescriptor)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/object */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_object__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/service */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fservice&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_service__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nfunction _initializerDefineProperty(target, property, descriptor, context) {\n  if (!descriptor) return;\n  Object.defineProperty(target, property, {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable,\n    writable: descriptor.writable,\n    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0\n  });\n}\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object.keys(descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object.defineProperty(target, property, desc);\n    desc = null;\n  }\n  return desc;\n}\nvar _class, _descriptor;\n/**\n  An adapter is an object that receives requests from a store and\n  translates them into the appropriate action to take against your\n  persistence layer. The persistence layer is usually an HTTP API but\n  may be anything, such as the browser's local storage. Typically the\n  adapter is not invoked directly instead its functionality is accessed\n  through the `store`.\n\n  > ⚠️ CAUTION you likely want the docs for [<Interface> Adapter](/ember-data/release/classes/%3CInterface%3E%20Adapter)\n  > as extending this abstract class is unnecessary.\n\n  ### Creating an Adapter\n\n  Create a new subclass of `Adapter` in the `app/adapters` folder:\n\n  ```app/adapters/application.js\n  import Adapter from '@ember-data/adapter';\n\n  export default Adapter.extend({\n    // ...your code here\n  });\n  ```\n\n  Model-specific adapters can be created by putting your adapter\n  class in an `app/adapters/` + `model-name` + `.js` file of the application.\n\n  ```app/adapters/post.js\n  import Adapter from '@ember-data/adapter';\n\n  export default Adapter.extend({\n    // ...Post-specific adapter code goes here\n  });\n  ```\n\n  `Adapter` is an abstract base class that you should override in your\n  application to customize it for your backend. The minimum set of methods\n  that you should implement is:\n\n    * `findRecord()`\n    * `createRecord()`\n    * `updateRecord()`\n    * `deleteRecord()`\n    * `findAll()`\n    * `query()`\n\n  To improve the network performance of your application, you can optimize\n  your adapter by overriding these lower-level methods:\n\n    * `findMany()`\n\n\n  For an example of the implementation, see `RESTAdapter`, the\n  included REST adapter.\n\n  @class Adapter\n  @public\n  @extends Ember.EmberObject\n*/\nlet Adapter = (_class = class Adapter extends (_ember_object__WEBPACK_IMPORTED_MODULE_1___default()) {\n  constructor(...args) {\n    super(...args);\n    _initializerDefineProperty(this, \"store\", _descriptor, this);\n  }\n  /**\n    The `findRecord()` method is invoked when the store is asked for a record that\n    has not previously been loaded. In response to `findRecord()` being called, you\n    should query your persistence layer for a record with the given ID. The `findRecord`\n    method should return a promise that will resolve to a JavaScript object that will be\n    normalized by the serializer.\n     Here is an example of the `findRecord` implementation:\n     ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n    import RSVP from 'RSVP';\n    import $ from 'jquery';\n     export default class ApplicationAdapter extends Adapter {\n      findRecord(store, type, id, snapshot) {\n        return new RSVP.Promise(function(resolve, reject) {\n          $.getJSON(`/${type.modelName}/${id}`).then(function(data) {\n            resolve(data);\n          }, function(jqXHR) {\n            reject(jqXHR);\n          });\n        });\n      }\n    }\n    ```\n     @method findRecord\n    @param {Store} store\n    @param {Model} type\n    @param {String} id\n    @param {Snapshot} snapshot\n    @return {Promise} promise\n    @public\n  */\n  // @ts-expect-error\n  findRecord(store, type, id, snapshot) {\n    {\n      throw new Error('You subclassed the Adapter class but missing a findRecord override');\n    }\n  }\n\n  /**\n    The `findAll()` method is used to retrieve all records for a given type.\n     Example\n     ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n    import RSVP from 'RSVP';\n    import $ from 'jquery';\n     export default class ApplicationAdapter extends Adapter {\n      findAll(store, type) {\n        return new RSVP.Promise(function(resolve, reject) {\n          $.getJSON(`/${type.modelName}`).then(function(data) {\n            resolve(data);\n          }, function(jqXHR) {\n            reject(jqXHR);\n          });\n        });\n      }\n    }\n    ```\n     @method findAll\n    @param {Store} store\n    @param {Model} type\n    @param {null} neverSet a value is never provided to this argument\n    @param {SnapshotRecordArray} snapshotRecordArray\n    @return {Promise} promise\n    @public\n  */\n  findAll(store, type, neverSet, snapshotRecordArray) {\n    {\n      throw new Error('You subclassed the Adapter class but missing a findAll override');\n    }\n  }\n\n  /**\n    This method is called when you call `query` on the store.\n     Example\n     ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n    import RSVP from 'RSVP';\n    import $ from 'jquery';\n     export default class ApplicationAdapter extends Adapter {\n      query(store, type, query) {\n        return new RSVP.Promise(function(resolve, reject) {\n          $.getJSON(`/${type.modelName}`, query).then(function(data) {\n            resolve(data);\n          }, function(jqXHR) {\n            reject(jqXHR);\n          });\n        });\n      }\n    }\n    ```\n     @method query\n    @param {Store} store\n    @param {Model} type\n    @param {Object} query\n    @param {Collection} recordArray\n    @param {Object} adapterOptions\n    @return {Promise} promise\n    @public\n  */\n  // @ts-expect-error\n  query(store, type, query) {\n    {\n      throw new Error('You subclassed the Adapter class but missing a query override');\n    }\n  }\n\n  /**\n    The `queryRecord()` method is invoked when the store is asked for a single\n    record through a query object.\n     In response to `queryRecord()` being called, you should always fetch fresh\n    data. Once found, you can asynchronously call the store's `push()` method\n    to push the record into the store.\n     Here is an example `queryRecord` implementation:\n     Example\n     ```app/adapters/application.js\n    import Adapter, { BuildURLMixin } from '@ember-data/adapter';\n    import RSVP from 'RSVP';\n    import $ from 'jquery';\n     export default class ApplicationAdapter extends Adapter.extend(BuildURLMixin) {\n      queryRecord(store, type, query) {\n        return new RSVP.Promise(function(resolve, reject) {\n          $.getJSON(`/${type.modelName}`, query).then(function(data) {\n            resolve(data);\n          }, function(jqXHR) {\n            reject(jqXHR);\n          });\n        });\n      }\n    }\n    ```\n     @method queryRecord\n    @param {Store} store\n    @param {subclass of Model} type\n    @param {Object} query\n    @param {Object} adapterOptions\n    @return {Promise} promise\n    @public\n  */\n  // @ts-expect-error\n  queryRecord(store, type, query, adapterOptions) {\n    {\n      throw new Error('You subclassed the Adapter class but missing a queryRecord override');\n    }\n  }\n\n  /**\n    If the globally unique IDs for your records should be generated on the client,\n    implement the `generateIdForRecord()` method. This method will be invoked\n    each time you create a new record, and the value returned from it will be\n    assigned to the record's `primaryKey`.\n     Most traditional REST-like HTTP APIs will not use this method. Instead, the ID\n    of the record will be set by the server, and your adapter will update the store\n    with the new ID when it calls `didCreateRecord()`. Only implement this method if\n    you intend to generate record IDs on the client-side.\n     The `generateIdForRecord()` method will be invoked with the requesting store as\n    the first parameter and the newly created record as the second parameter:\n     ```javascript\n    import Adapter from '@ember-data/adapter';\n    import { v4 } from 'uuid';\n     export default class ApplicationAdapter extends Adapter {\n      generateIdForRecord(store, type, inputProperties) {\n        return v4();\n      }\n    }\n    ```\n     @method generateIdForRecord\n    @param {Store} store\n    @param {Model} type   the Model class of the record\n    @param {Object} inputProperties a hash of properties to set on the\n      newly created record.\n    @return {(String|Number)} id\n    @public\n  */\n\n  /**\n    Proxies to the serializer's `serialize` method.\n     Example\n     ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n     export default class ApplicationAdapter extends Adapter {\n      createRecord(store, type, snapshot) {\n        let data = this.serialize(snapshot, { includeId: true });\n        let url = `/${type.modelName}`;\n         // ...\n      }\n    }\n    ```\n     @method serialize\n    @param {Snapshot} snapshot\n    @param {Object}   options\n    @return {Object} serialized snapshot\n    @public\n  */\n  serialize(snapshot, options) {\n    const serialized = snapshot.serialize(options);\n    ( true && !(serialized && typeof serialized === 'object') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Your adapter's serialize method must return an object, but it returned ${typeof serialized}`, serialized && typeof serialized === 'object'));\n    return serialized;\n  }\n\n  /**\n    Implement this method in a subclass to handle the creation of\n    new records.\n     Serializes the record and sends it to the server.\n     Example\n     ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n    import RSVP from 'RSVP';\n    import $ from 'jquery';\n     export default class ApplicationAdapter extends Adapter {\n      createRecord(store, type, snapshot) {\n        let data = this.serialize(snapshot, { includeId: true });\n         return new RSVP.Promise(function (resolve, reject) {\n          $.ajax({\n            type: 'POST',\n            url: `/${type.modelName}`,\n            dataType: 'json',\n            data: data\n          }).then(function (data) {\n            resolve(data);\n          }, function (jqXHR) {\n            jqXHR.then = null; // tame jQuery's ill mannered promises\n            reject(jqXHR);\n          });\n        });\n      }\n    }\n    ```\n     @method createRecord\n    @param {Store} store\n    @param {Model} type   the Model class of the record\n    @param {Snapshot} snapshot\n    @return {Promise} promise\n    @public\n  */\n  // @ts-expect-error\n  createRecord(store, type, snapshot) {\n    {\n      throw new Error('You subclassed the Adapter class but missing a createRecord override');\n    }\n  }\n\n  /**\n    Implement this method in a subclass to handle the updating of\n    a record.\n     Serializes the record update and sends it to the server.\n     The updateRecord method is expected to return a promise that will\n    resolve with the serialized record. This allows the backend to\n    inform the Ember Data store the current state of this record after\n    the update. If it is not possible to return a serialized record\n    the updateRecord promise can also resolve with `undefined` and the\n    Ember Data store will assume all of the updates were successfully\n    applied on the backend.\n     Example\n     ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n    import RSVP from 'RSVP';\n    import $ from 'jquery';\n     export default class ApplicationAdapter extends Adapter {\n      updateRecord(store, type, snapshot) {\n        let data = this.serialize(snapshot, { includeId: true });\n        let id = snapshot.id;\n         return new RSVP.Promise(function(resolve, reject) {\n          $.ajax({\n            type: 'PUT',\n            url: `/${type.modelName}/${id}`,\n            dataType: 'json',\n            data: data\n          }).then(function(data) {\n            resolve(data);\n          }, function(jqXHR) {\n            jqXHR.then = null; // tame jQuery's ill mannered promises\n            reject(jqXHR);\n          });\n        });\n      }\n    }\n    ```\n     @method updateRecord\n    @param {Store} store\n    @param {Model} type   the Model class of the record\n    @param {Snapshot} snapshot\n    @return {Promise} promise\n    @public\n  */\n  // @ts-expect-error\n  updateRecord(store, type, snapshot) {\n    {\n      throw new Error('You subclassed the Adapter class but missing a updateRecord override');\n    }\n  }\n\n  /**\n    Implement this method in a subclass to handle the deletion of\n    a record.\n     Sends a delete request for the record to the server.\n     Example\n     ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n    import RSVP from 'RSVP';\n    import $ from 'jquery';\n     export default class ApplicationAdapter extends Adapter {\n      deleteRecord(store, type, snapshot) {\n        let data = this.serialize(snapshot, { includeId: true });\n        let id = snapshot.id;\n         return new RSVP.Promise(function(resolve, reject) {\n          $.ajax({\n            type: 'DELETE',\n            url: `/${type.modelName}/${id}`,\n            dataType: 'json',\n            data: data\n          }).then(function(data) {\n            resolve(data)\n          }, function(jqXHR) {\n            jqXHR.then = null; // tame jQuery's ill mannered promises\n            reject(jqXHR);\n          });\n        });\n      }\n    }\n    ```\n     @method deleteRecord\n    @param {Store} store\n    @param {Model} type   the Model class of the record\n    @param {Snapshot} snapshot\n    @return {Promise} promise\n    @public\n  */\n  // @ts-expect-error\n  deleteRecord(store, type, snapshot) {\n    {\n      throw new Error('You subclassed the Adapter class but missing a deleteRecord override');\n    }\n  }\n\n  /**\n    By default the store will try to coalesce all `findRecord` calls within the same runloop\n    into as few requests as possible by calling groupRecordsForFindMany and passing it into a findMany call.\n    You can opt out of this behaviour by either not implementing the findMany hook or by setting\n    coalesceFindRequests to false.\n     @property coalesceFindRequests\n    @public\n    @type {boolean}\n  */\n  get coalesceFindRequests() {\n    const coalesceFindRequests = this._coalesceFindRequests;\n    if (typeof coalesceFindRequests === 'boolean') {\n      return coalesceFindRequests;\n    }\n    return this._coalesceFindRequests = true;\n  }\n  set coalesceFindRequests(value) {\n    this._coalesceFindRequests = value;\n  }\n\n  /**\n    The store will call `findMany` instead of multiple `findRecord`\n    requests to find multiple records at once if coalesceFindRequests\n    is true.\n     ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n    import RSVP from 'RSVP';\n    import $ from 'jquery';\n     export default class ApplicationAdapter extends Adapter {\n      findMany(store, type, ids, snapshots) {\n        return new RSVP.Promise(function(resolve, reject) {\n          $.ajax({\n            type: 'GET',\n            url: `/${type.modelName}/`,\n            dataType: 'json',\n            data: { filter: { id: ids.join(',') } }\n          }).then(function(data) {\n            resolve(data);\n          }, function(jqXHR) {\n            jqXHR.then = null; // tame jQuery's ill mannered promises\n            reject(jqXHR);\n          });\n        });\n      }\n    }\n    ```\n     @method findMany\n    @param {Store} store\n    @param {Model} type   the Model class of the records\n    @param {Array}    ids\n    @param {Array} snapshots\n    @return {Promise} promise\n    @public\n  */\n\n  /**\n    Organize records into groups, each of which is to be passed to separate\n    calls to `findMany`.\n     For example, if your API has nested URLs that depend on the parent, you will\n    want to group records by their parent.\n     The default implementation returns the records as a single group.\n     @method groupRecordsForFindMany\n    @public\n    @param {Store} store\n    @param {Array} snapshots\n    @return {Array}  an array of arrays of records, each of which is to be\n                      loaded separately by `findMany`.\n  */\n  groupRecordsForFindMany(store, snapshots) {\n    return [snapshots];\n  }\n\n  /**\n    This method is used by the store to determine if the store should\n    reload a record from the adapter when a record is requested by\n    `store.findRecord`.\n     If this method returns `true`, the store will re-fetch a record from\n    the adapter. If this method returns `false`, the store will resolve\n    immediately using the cached record.\n     For example, if you are building an events ticketing system, in which users\n    can only reserve tickets for 20 minutes at a time, and want to ensure that\n    in each route you have data that is no more than 20 minutes old you could\n    write:\n     ```javascript\n    shouldReloadRecord(store, ticketSnapshot) {\n      let lastAccessedAt = ticketSnapshot.attr('lastAccessedAt');\n      let timeDiff = moment().diff(lastAccessedAt, 'minutes');\n       if (timeDiff > 20) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    ```\n     This method would ensure that whenever you do `store.findRecord('ticket',\n    id)` you will always get a ticket that is no more than 20 minutes old. In\n    case the cached version is more than 20 minutes old, `findRecord` will not\n    resolve until you fetched the latest version.\n     By default this hook returns `false`, as most UIs should not block user\n    interactions while waiting on data update.\n     Note that, with default settings, `shouldBackgroundReloadRecord` will always\n    re-fetch the records in the background even if `shouldReloadRecord` returns\n    `false`. You can override `shouldBackgroundReloadRecord` if this does not\n    suit your use case.\n     @since 1.13.0\n    @method shouldReloadRecord\n    @param {Store} store\n    @param {Snapshot} snapshot\n    @return {Boolean}\n    @public\n  */\n  shouldReloadRecord(store, snapshot) {\n    return false;\n  }\n\n  /**\n    This method is used by the store to determine if the store should\n    reload all records from the adapter when records are requested by\n    `store.findAll`.\n     If this method returns `true`, the store will re-fetch all records from\n    the adapter. If this method returns `false`, the store will resolve\n    immediately using the cached records.\n     For example, if you are building an events ticketing system, in which users\n    can only reserve tickets for 20 minutes at a time, and want to ensure that\n    in each route you have data that is no more than 20 minutes old you could\n    write:\n     ```javascript\n    shouldReloadAll(store, snapshotArray) {\n      let snapshots = snapshotArray.snapshots();\n       return snapshots.any((ticketSnapshot) => {\n        let lastAccessedAt = ticketSnapshot.attr('lastAccessedAt');\n        let timeDiff = moment().diff(lastAccessedAt, 'minutes');\n         if (timeDiff > 20) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n    }\n    ```\n     This method would ensure that whenever you do `store.findAll('ticket')` you\n    will always get a list of tickets that are no more than 20 minutes old. In\n    case a cached version is more than 20 minutes old, `findAll` will not\n    resolve until you fetched the latest versions.\n     By default, this method returns `true` if the passed `snapshotRecordArray`\n    is empty (meaning that there are no records locally available yet),\n    otherwise, it returns `false`.\n     Note that, with default settings, `shouldBackgroundReloadAll` will always\n    re-fetch all the records in the background even if `shouldReloadAll` returns\n    `false`. You can override `shouldBackgroundReloadAll` if this does not suit\n    your use case.\n     @since 1.13.0\n    @method shouldReloadAll\n    @param {Store} store\n    @param {SnapshotRecordArray} snapshotRecordArray\n    @return {Boolean}\n    @public\n  */\n  shouldReloadAll(store, snapshotRecordArray) {\n    return !snapshotRecordArray.length;\n  }\n\n  /**\n    This method is used by the store to determine if the store should\n    reload a record after the `store.findRecord` method resolves a\n    cached record.\n     This method is *only* checked by the store when the store is\n    returning a cached record.\n     If this method returns `true` the store will re-fetch a record from\n    the adapter.\n     For example, if you do not want to fetch complex data over a mobile\n    connection, or if the network is down, you can implement\n    `shouldBackgroundReloadRecord` as follows:\n     ```javascript\n    shouldBackgroundReloadRecord(store, snapshot) {\n      let { downlink, effectiveType } = navigator.connection;\n       return downlink > 0 && effectiveType === '4g';\n    }\n    ```\n     By default, this hook returns `true` so the data for the record is updated\n    in the background.\n     @since 1.13.0\n    @method shouldBackgroundReloadRecord\n    @param {Store} store\n    @param {Snapshot} snapshot\n    @return {Boolean}\n    @public\n  */\n  shouldBackgroundReloadRecord(store, snapshot) {\n    return true;\n  }\n\n  /**\n    This method is used by the store to determine if the store should\n    reload a record array after the `store.findAll` method resolves\n    with a cached record array.\n     This method is *only* checked by the store when the store is\n    returning a cached record array.\n     If this method returns `true` the store will re-fetch all records\n    from the adapter.\n     For example, if you do not want to fetch complex data over a mobile\n    connection, or if the network is down, you can implement\n    `shouldBackgroundReloadAll` as follows:\n     ```javascript\n    shouldBackgroundReloadAll(store, snapshotArray) {\n      let { downlink, effectiveType } = navigator.connection;\n       return downlink > 0 && effectiveType === '4g';\n    }\n    ```\n     By default this method returns `true`, indicating that a background reload\n    should always be triggered.\n     @since 1.13.0\n    @method shouldBackgroundReloadAll\n    @param {Store} store\n    @param {SnapshotRecordArray} snapshotRecordArray\n    @return {Boolean}\n    @public\n  */\n  shouldBackgroundReloadAll(store, snapshotRecordArray) {\n    return true;\n  }\n}, _descriptor = _applyDecoratedDescriptor(_class.prototype, \"store\", [_ember_service__WEBPACK_IMPORTED_MODULE_2__.inject], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class);\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/index-4RESM7Oz.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/index.js":
/*!****************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/index.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BuildURLMixin: () => (/* reexport safe */ _build_url_mixin_AgfAmsW___WEBPACK_IMPORTED_MODULE_1__.B),\n/* harmony export */   \"default\": () => (/* reexport safe */ _index_4RESM7Oz__WEBPACK_IMPORTED_MODULE_0__.A)\n/* harmony export */ });\n/* harmony import */ var _index_4RESM7Oz__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-4RESM7Oz */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/index-4RESM7Oz.js\");\n/* harmony import */ var _build_url_mixin_AgfAmsW___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./build-url-mixin-AgfAmsW- */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/build-url-mixin-AgfAmsW-.js\");\n\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/index.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/json-api.js":
/*!*******************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/json-api.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ JSONAPIAdapter)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/string */ \"../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/index.js\");\n/* harmony import */ var ember_inflector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ember-inflector */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/index.js\");\n/* harmony import */ var _serialize_into_hash_2lQbHRKN__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./serialize-into-hash-2lQbHRKN */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/serialize-into-hash-2lQbHRKN.js\");\n/* harmony import */ var _rest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rest */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/rest.js\");\n\n\n\n\n\n\n/**\n  @module @ember-data/adapter/json-api\n */\n\n/**\n  ## Overview\n\n  <blockquote style=\"margin: 1em; padding: .1em 1em .1em 1em; border-left: solid 1em #E34C32; background: #e0e0e0;\">\n  <p>\n    ⚠️ <strong>This is LEGACY documentation</strong> for a feature that is no longer encouraged to be used.\n    If starting a new app or thinking of implementing a new adapter, consider writing a\n    <a href=\"/ember-data/release/classes/%3CInterface%3E%20Handler\">Handler</a> instead to be used with the <a href=\"https://github.com/emberjs/data/tree/main/packages/request#readme\">RequestManager</a>\n  </p>\n  </blockquote>\n\n  The `JSONAPIAdapter` is an adapter whichtransforms the store's\n  requests into HTTP requests that follow the [JSON API format](http://jsonapi.org/format/).\n\n  ## JSON API Conventions\n\n  The JSONAPIAdapter uses JSON API conventions for building the URL\n  for a record and selecting the HTTP verb to use with a request. The\n  actions you can take on a record map onto the following URLs in the\n  JSON API adapter:\n\n<table>\n  <tr>\n    <th>\n      Action\n    </th>\n    <th>\n      HTTP Verb\n    </th>\n    <th>\n      URL\n    </th>\n  </tr>\n  <tr>\n    <th>\n      `store.findRecord('post', 123)`\n    </th>\n    <td>\n      GET\n    </td>\n    <td>\n      /posts/123\n    </td>\n  </tr>\n  <tr>\n    <th>\n      `store.findAll('post')`\n    </th>\n    <td>\n      GET\n    </td>\n    <td>\n      /posts\n    </td>\n  </tr>\n  <tr>\n    <th>\n      Update `postRecord.save()`\n    </th>\n    <td>\n      PATCH\n    </td>\n    <td>\n      /posts/123\n    </td>\n  </tr>\n  <tr>\n    <th>\n      Create `store.createRecord('post').save()`\n    </th>\n    <td>\n      POST\n    </td>\n    <td>\n      /posts\n    </td>\n  </tr>\n  <tr>\n    <th>\n      Delete `postRecord.destroyRecord()`\n    </th>\n    <td>\n      DELETE\n    </td>\n    <td>\n      /posts/123\n    </td>\n  </tr>\n</table>\n\n  ## Success and failure\n\n  The JSONAPIAdapter will consider a success any response with a\n  status code of the 2xx family (\"Success\"), as well as 304 (\"Not\n  Modified\"). Any other status code will be considered a failure.\n\n  On success, the request promise will be resolved with the full\n  response payload.\n\n  Failed responses with status code 422 (\"Unprocessable Entity\") will\n  be considered \"invalid\". The response will be discarded, except for\n  the `errors` key. The request promise will be rejected with a\n  `InvalidError`. This error object will encapsulate the saved\n  `errors` value.\n\n  Any other status codes will be treated as an adapter error. The\n  request promise will be rejected, similarly to the invalid case,\n  but with an instance of `AdapterError` instead.\n\n  ### Endpoint path customization\n\n  Endpoint paths can be prefixed with a `namespace` by setting the\n  namespace property on the adapter:\n\n  ```app/adapters/application.js\n  import JSONAPIAdapter from '@ember-data/adapter/json-api';\n\n  export default class ApplicationAdapter extends JSONAPIAdapter {\n    namespace = 'api/1';\n  }\n  ```\n  Requests for the `person` model would now target `/api/1/people/1`.\n\n  ### Host customization\n\n  An adapter can target other hosts by setting the `host` property.\n\n  ```app/adapters/application.js\n  import JSONAPIAdapter from '@ember-data/adapter/json-api';\n\n  export default class ApplicationAdapter extends JSONAPIAdapter {\n    host = 'https://api.example.com';\n  }\n  ```\n\n  Requests for the `person` model would now target\n  `https://api.example.com/people/1`.\n\n  @since 1.13.0\n  @class JSONAPIAdapter\n  @main @ember-data/adapter/json-api\n  @public\n  @constructor\n  @extends RESTAdapter\n*/\nclass JSONAPIAdapter extends _rest__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n  constructor(...args) {\n    super(...args);\n    this._defaultContentType = 'application/vnd.api+json';\n  }\n  /**\n    @method ajaxOptions\n    @private\n    @param {String} url\n    @param {String} type The request type GET, POST, PUT, DELETE etc.\n    @param {Object} options\n    @return {Object}\n  */\n  ajaxOptions(url, type, options = {}) {\n    const hash = super.ajaxOptions(url, type, options);\n    const headers = hash.headers = hash.headers || {};\n    headers['Accept'] = headers['Accept'] || 'application/vnd.api+json';\n    return hash;\n  }\n\n  /**\n    By default the JSONAPIAdapter will send each find request coming from a `store.find`\n    or from accessing a relationship separately to the server. If your server supports passing\n    ids as a query string, you can set coalesceFindRequests to true to coalesce all find requests\n    within a single runloop.\n     For example, if you have an initial payload of:\n     ```javascript\n    {\n      data: {\n        id: 1,\n        type: 'post',\n        relationship: {\n          comments: {\n            data: [\n              { id: 1, type: 'comment' },\n              { id: 2, type: 'comment' }\n            ]\n          }\n        }\n      }\n    }\n    ```\n     By default calling `post.comments` will trigger the following requests(assuming the\n    comments haven't been loaded before):\n     ```\n    GET /comments/1\n    GET /comments/2\n    ```\n     If you set coalesceFindRequests to `true` it will instead trigger the following request:\n     ```\n    GET /comments?filter[id]=1,2\n    ```\n     Setting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`\n    relationships accessed within the same runloop. If you set `coalesceFindRequests: true`\n     ```javascript\n    store.findRecord('comment', 1);\n    store.findRecord('comment', 2);\n    ```\n     will also send a request to: `GET /comments?filter[id]=1,2`\n     Note: Requests coalescing rely on URL building strategy. So if you override `buildURL` in your app\n    `groupRecordsForFindMany` more likely should be overridden as well in order for coalescing to work.\n     @property coalesceFindRequests\n    @public\n    @type {boolean}\n  */\n  get coalesceFindRequests() {\n    const coalesceFindRequests = this._coalesceFindRequests;\n    if (typeof coalesceFindRequests === 'boolean') {\n      return coalesceFindRequests;\n    }\n    return this._coalesceFindRequests = false;\n  }\n  set coalesceFindRequests(value) {\n    this._coalesceFindRequests = value;\n  }\n  findMany(store, type, ids, snapshots) {\n    const url = this.buildURL(type.modelName, ids, snapshots, 'findMany');\n    return this.ajax(url, 'GET', {\n      data: {\n        filter: {\n          id: ids.join(',')\n        }\n      }\n    });\n  }\n  pathForType(modelName) {\n    const dasherized = (0,_ember_string__WEBPACK_IMPORTED_MODULE_1__.dasherize)(modelName);\n    return (0,ember_inflector__WEBPACK_IMPORTED_MODULE_2__.pluralize)(dasherized);\n  }\n  updateRecord(store, schema, snapshot) {\n    const data = (0,_serialize_into_hash_2lQbHRKN__WEBPACK_IMPORTED_MODULE_3__.b)(store, schema, snapshot);\n    const type = snapshot.modelName;\n    const id = snapshot.id;\n    ( true && !(typeof id === 'string' && id.length > 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Attempted to update the ${type} record, but the record has no id`, typeof id === 'string' && id.length > 0));\n    const url = this.buildURL(type, id, snapshot, 'updateRecord');\n    return this.ajax(url, 'PATCH', {\n      data: data\n    });\n  }\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/json-api.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/rest.js":
/*!***************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/rest.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RESTAdapter),\n/* harmony export */   fetchOptions: () => (/* binding */ fetchOptions)\n/* harmony export */ });\n/* harmony import */ var _index_4RESM7Oz__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-4RESM7Oz */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/index-4RESM7Oz.js\");\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/application */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fapplication&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_application__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember/object */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ember_object__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _serialize_into_hash_2lQbHRKN__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./serialize-into-hash-2lQbHRKN */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/serialize-into-hash-2lQbHRKN.js\");\n/* harmony import */ var _build_url_mixin_AgfAmsW___WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./build-url-mixin-AgfAmsW- */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/build-url-mixin-AgfAmsW-.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./error */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/error.js\");\n\n\n\n\n\n\n\nvar _dec, _class;\n/**\n * <blockquote style=\"margin: 1em; padding: .1em 1em .1em 1em; border-left: solid 1em #E34C32; background: #e0e0e0;\">\n  <p>\n    ⚠️ <strong>This is LEGACY documentation</strong> for a feature that is no longer encouraged to be used.\n    If starting a new app or thinking of implementing a new adapter, consider writing a\n    <a href=\"/ember-data/release/classes/%3CInterface%3E%20Handler\">Handler</a> instead to be used with the <a href=\"https://github.com/emberjs/data/tree/main/packages/request#readme\">RequestManager</a>\n  </p>\n  </blockquote>\n\n  The REST adapter allows your store to communicate with an HTTP server by\n  transmitting JSON via XHR.\n\n  This adapter is designed around the idea that the JSON exchanged with\n  the server should be conventional. It builds URLs in a manner that follows\n  the structure of most common REST-style web services.\n\n  ## Success and failure\n\n  The REST adapter will consider a success any response with a status code\n  of the 2xx family (\"Success\"), as well as 304 (\"Not Modified\"). Any other\n  status code will be considered a failure.\n\n  On success, the request promise will be resolved with the full response\n  payload.\n\n  Failed responses with status code 422 (\"Unprocessable Entity\") will be\n  considered \"invalid\". The response will be discarded, except for the\n  `errors` key. The request promise will be rejected with a `InvalidError`.\n  This error object will encapsulate the saved `errors` value.\n\n  Any other status codes will be treated as an \"adapter error\". The request\n  promise will be rejected, similarly to the \"invalid\" case, but with\n  an instance of `AdapterError` instead.\n\n  ## JSON Structure\n\n  The REST adapter expects the JSON returned from your server to follow\n  these conventions.\n\n  ### Object Root\n\n  The JSON payload should be an object that contains the record inside a\n  root property. For example, in response to a `GET` request for\n  `/posts/1`, the JSON should look like this:\n\n  ```js\n  {\n    \"posts\": {\n      \"id\": 1,\n      \"title\": \"I'm Running to Reform the W3C\",\n      \"author\": \"Yehuda Katz\"\n    }\n  }\n  ```\n\n  Similarly, in response to a `GET` request for `/posts`, the JSON should\n  look like this:\n\n  ```js\n  {\n    \"posts\": [\n      {\n        \"id\": 1,\n        \"title\": \"I'm Running to Reform the W3C\",\n        \"author\": \"Yehuda Katz\"\n      },\n      {\n        \"id\": 2,\n        \"title\": \"Rails is omakase\",\n        \"author\": \"D2H\"\n      }\n    ]\n  }\n  ```\n\n  Note that the object root can be pluralized for both a single-object response\n  and an array response: the REST adapter is not strict on this. Further, if the\n  HTTP server responds to a `GET` request to `/posts/1` (e.g. the response to a\n  `findRecord` query) with more than one object in the array, Ember Data will\n  only display the object with the matching ID.\n\n  ### Conventional Names\n\n  Attribute names in your JSON payload should be the camelCased versions of\n  the attributes in your Ember.js models.\n\n  For example, if you have a `Person` model:\n\n  ```app/models/person.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default Model.extend({\n    firstName: attr('string'),\n    lastName: attr('string'),\n    occupation: attr('string')\n  });\n  ```\n\n  The JSON returned should look like this:\n\n  ```js\n  {\n    \"people\": {\n      \"id\": 5,\n      \"firstName\": \"Zaphod\",\n      \"lastName\": \"Beeblebrox\",\n      \"occupation\": \"President\"\n    }\n  }\n  ```\n\n  #### Relationships\n\n  Relationships are usually represented by ids to the record in the\n  relationship. The related records can then be sideloaded in the\n  response under a key for the type.\n\n  ```js\n  {\n    \"posts\": {\n      \"id\": 5,\n      \"title\": \"I'm Running to Reform the W3C\",\n      \"author\": \"Yehuda Katz\",\n      \"comments\": [1, 2]\n    },\n    \"comments\": [{\n      \"id\": 1,\n      \"author\": \"User 1\",\n      \"message\": \"First!\",\n    }, {\n      \"id\": 2,\n      \"author\": \"User 2\",\n      \"message\": \"Good Luck!\",\n    }]\n  }\n  ```\n\n  If the records in the relationship are not known when the response\n  is serialized it's also possible to represent the relationship as a\n  URL using the `links` key in the response. Ember Data will fetch\n  this URL to resolve the relationship when it is accessed for the\n  first time.\n\n  ```js\n  {\n    \"posts\": {\n      \"id\": 5,\n      \"title\": \"I'm Running to Reform the W3C\",\n      \"author\": \"Yehuda Katz\",\n      \"links\": {\n        \"comments\": \"/posts/5/comments\"\n      }\n    }\n  }\n  ```\n\n  ### Errors\n\n  If a response is considered a failure, the JSON payload is expected to include\n  a top-level key `errors`, detailing any specific issues. For example:\n\n  ```js\n  {\n    \"errors\": {\n      \"msg\": \"Something went wrong\"\n    }\n  }\n  ```\n\n  This adapter does not make any assumptions as to the format of the `errors`\n  object. It will simply be passed along as is, wrapped in an instance\n  of `InvalidError` or `AdapterError`. The serializer can interpret it\n  afterwards.\n\n  ## Customization\n\n  ### Endpoint path customization\n\n  Endpoint paths can be prefixed with a `namespace` by setting the namespace\n  property on the adapter:\n\n  ```app/adapters/application.js\n  import RESTAdapter from '@ember-data/adapter/rest';\n\n  export default class ApplicationAdapter extends RESTAdapter {\n    namespace = 'api/1';\n  }\n  ```\n  Requests for the `Person` model would now target `/api/1/people/1`.\n\n  ### Host customization\n\n  An adapter can target other hosts by setting the `host` property.\n\n  ```app/adapters/application.js\n  import RESTAdapter from '@ember-data/adapter/rest';\n\n  export default class ApplicationAdapter extends RESTAdapter {\n    host = 'https://api.example.com';\n  }\n  ```\n\n  ### Headers customization\n\n  Some APIs require HTTP headers, e.g. to provide an API key. Arbitrary\n  headers can be set as key/value pairs on the `RESTAdapter`'s `headers`\n  object and Ember Data will send them along with each ajax request.\n\n\n  ```app/adapters/application.js\n  import RESTAdapter from '@ember-data/adapter/rest';\n  import { computed } from '@ember/object';\n\n  export default class ApplicationAdapter extends RESTAdapter {\n    headers: computed(function() {\n      return {\n        'API_KEY': 'secret key',\n        'ANOTHER_HEADER': 'Some header value'\n      };\n    }\n  }\n  ```\n\n  `headers` can also be used as a computed property to support dynamic\n  headers. In the example below, the `session` object has been\n  injected into an adapter by Ember's container.\n\n  ```app/adapters/application.js\n  import RESTAdapter from '@ember-data/adapter/rest';\n  import { computed } from '@ember/object';\n\n  export default class ApplicationAdapter extends RESTAdapter {\n    headers: computed('session.authToken', function() {\n      return {\n        'API_KEY': this.session.authToken,\n        'ANOTHER_HEADER': 'Some header value'\n      };\n    })\n  }\n  ```\n\n  In some cases, your dynamic headers may require data from some\n  object outside of Ember's observer system (for example\n  `document.cookie`). You can use the\n  [volatile](/api/classes/Ember.ComputedProperty.html?anchor=volatile)\n  function to set the property into a non-cached mode causing the headers to\n  be recomputed with every request.\n\n  ```app/adapters/application.js\n  import RESTAdapter from '@ember-data/adapter/rest';\n  import { computed } from '@ember/object';\n\n  export default class ApplicationAdapter extends RESTAdapter {\n    headers: computed(function() {\n      return {\n        'API_KEY': document.cookie.match(/apiKey\\=([^;]*)/)['1'],\n        'ANOTHER_HEADER': 'Some header value'\n      };\n    }).volatile()\n  }\n  ```\n\n  @class RESTAdapter\n  @main @ember-data/adapter/rest\n  @public\n  @constructor\n  @extends Adapter\n  @uses BuildURLMixin\n*/\nlet RESTAdapter = (_dec = (0,_ember_object__WEBPACK_IMPORTED_MODULE_3__.computed)(), (_class = class RESTAdapter extends _index_4RESM7Oz__WEBPACK_IMPORTED_MODULE_0__.A.extend(_build_url_mixin_AgfAmsW___WEBPACK_IMPORTED_MODULE_5__.B) {\n  constructor(...args) {\n    super(...args);\n    /**\n      This property allows ajax to still be used instead when `false`.\n       @property useFetch\n      @type {Boolean}\n      @default true\n      @public\n    */\n    this.useFetch = true;\n    this._defaultContentType = 'application/json; charset=utf-8';\n    // http://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers\n    this.maxURLLength = 2048;\n  }\n  get fastboot() {\n    // Avoid computed property override deprecation in fastboot as suggested by:\n    // https://deprecations.emberjs.com/v3.x/#toc_computed-property-override\n    const fastboot = this._fastboot;\n    if (fastboot) {\n      return fastboot;\n    }\n    return this._fastboot = (0,_ember_application__WEBPACK_IMPORTED_MODULE_1__.getOwner)(this).lookup('service:fastboot');\n  }\n  set fastboot(value) {\n    this._fastboot = value;\n  }\n\n  /**\n    By default, the RESTAdapter will send the query params sorted alphabetically to the\n    server.\n     For example:\n     ```js\n    store.query('posts', { sort: 'price', category: 'pets' });\n    ```\n     will generate a requests like this `/posts?category=pets&sort=price`, even if the\n    parameters were specified in a different order.\n     That way the generated URL will be deterministic and that simplifies caching mechanisms\n    in the backend.\n     Setting `sortQueryParams` to a falsey value will respect the original order.\n     In case you want to sort the query parameters with a different criteria, set\n    `sortQueryParams` to your custom sort function.\n     ```app/adapters/application.js\n    import RESTAdapter from '@ember-data/adapter/rest';\n     export default class ApplicationAdapter extends RESTAdapter {\n      sortQueryParams(params) {\n        let sortedKeys = Object.keys(params).sort().reverse();\n        let len = sortedKeys.length, newParams = {};\n         for (let i = 0; i < len; i++) {\n          newParams[sortedKeys[i]] = params[sortedKeys[i]];\n        }\n         return newParams;\n      }\n    }\n    ```\n     @method sortQueryParams\n    @param {Object} obj\n    @return {Object}\n    @public\n  */\n  sortQueryParams(obj) {\n    const keys = Object.keys(obj);\n    const len = keys.length;\n    if (len < 2) {\n      return obj;\n    }\n    const newQueryParams = {};\n    const sortedKeys = keys.sort();\n    for (let i = 0; i < len; i++) {\n      newQueryParams[sortedKeys[i]] = obj[sortedKeys[i]];\n    }\n    return newQueryParams;\n  }\n\n  /**\n    By default the RESTAdapter will send each find request coming from a `store.find`\n    or from accessing a relationship separately to the server. If your server supports passing\n    ids as a query string, you can set coalesceFindRequests to true to coalesce all find requests\n    within a single runloop.\n     For example, if you have an initial payload of:\n     ```javascript\n    {\n      post: {\n        id: 1,\n        comments: [1, 2]\n      }\n    }\n    ```\n     By default calling `post.comments` will trigger the following requests(assuming the\n    comments haven't been loaded before):\n     ```\n    GET /comments/1\n    GET /comments/2\n    ```\n     If you set coalesceFindRequests to `true` it will instead trigger the following request:\n     ```\n    GET /comments?ids[]=1&ids[]=2\n    ```\n     Setting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`\n    relationships accessed within the same runloop. If you set `coalesceFindRequests: true`\n     ```javascript\n    store.findRecord('comment', 1);\n    store.findRecord('comment', 2);\n    ```\n     will also send a request to: `GET /comments?ids[]=1&ids[]=2`\n     Note: Requests coalescing rely on URL building strategy. So if you override `buildURL` in your app\n    `groupRecordsForFindMany` more likely should be overridden as well in order for coalescing to work.\n     @property coalesceFindRequests\n    @public\n    @type {boolean}\n  */\n  get coalesceFindRequests() {\n    const coalesceFindRequests = this._coalesceFindRequests;\n    if (typeof coalesceFindRequests === 'boolean') {\n      return coalesceFindRequests;\n    }\n    return this._coalesceFindRequests = false;\n  }\n  set coalesceFindRequests(value) {\n    this._coalesceFindRequests = value;\n  }\n\n  /**\n    Endpoint paths can be prefixed with a `namespace` by setting the namespace\n    property on the adapter:\n     ```app/adapters/application.js\n    import RESTAdapter from '@ember-data/adapter/rest';\n     export default class ApplicationAdapter extends RESTAdapter {\n      namespace = 'api/1';\n    }\n    ```\n     Requests for the `Post` model would now target `/api/1/post/`.\n     @property namespace\n    @public\n    @type {String}\n  */\n\n  /**\n    An adapter can target other hosts by setting the `host` property.\n     ```app/adapters/application.js\n    import RESTAdapter from '@ember-data/adapter/rest';\n     export default class ApplicationAdapter extends RESTAdapter {\n      host = 'https://api.example.com';\n    }\n    ```\n     Requests for the `Post` model would now target `https://api.example.com/post/`.\n     @property host\n    @public\n    @type {String}\n  */\n\n  /**\n    Some APIs require HTTP headers, e.g. to provide an API\n    key. Arbitrary headers can be set as key/value pairs on the\n    `RESTAdapter`'s `headers` object and Ember Data will send them\n    along with each ajax request. For dynamic headers see [headers\n    customization](/ember-data/release/classes/RESTAdapter).\n     ```app/adapters/application.js\n    import RESTAdapter from '@ember-data/adapter/rest';\n    import { computed } from '@ember/object';\n     export default class ApplicationAdapter extends RESTAdapter {\n      headers: computed(function() {\n        return {\n          'API_KEY': 'secret key',\n          'ANOTHER_HEADER': 'Some header value'\n        };\n      })\n    }\n    ```\n     @property headers\n    @public\n    @type {Object}\n   */\n\n  /**\n    Called by the store in order to fetch the JSON for a given\n    type and ID.\n     The `findRecord` method makes an Ajax request to a URL computed by\n    `buildURL`, and returns a promise for the resulting payload.\n     This method performs an HTTP `GET` request with the id provided as part of the query string.\n     @since 1.13.0\n    @method findRecord\n    @public\n    @param {Store} store\n    @param {Model} type\n    @param {String} id\n    @param {Snapshot} snapshot\n    @return {Promise} promise\n  */\n  findRecord(store, type, id, snapshot) {\n    const url = this.buildURL(type.modelName, id, snapshot, 'findRecord');\n    const query = this.buildQuery(snapshot);\n    return this.ajax(url, 'GET', {\n      data: query\n    });\n  }\n\n  /**\n    Called by the store in order to fetch a JSON array for all\n    of the records for a given type.\n     The `findAll` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\n    promise for the resulting payload.\n     @method findAll\n    @public\n    @param {Store} store\n    @param {Model} type\n    @param {undefined} neverSet a value is never provided to this argument\n    @param {SnapshotRecordArray} snapshotRecordArray\n    @return {Promise} promise\n  */\n  findAll(store, type, sinceToken, snapshotRecordArray) {\n    const query = this.buildQuery(snapshotRecordArray);\n    const url = this.buildURL(type.modelName, null, snapshotRecordArray, 'findAll');\n    if (sinceToken) {\n      query.since = sinceToken;\n    }\n    return this.ajax(url, 'GET', {\n      data: query\n    });\n  }\n\n  /**\n    Called by the store in order to fetch a JSON array for\n    the records that match a particular query.\n     The `query` method makes an Ajax (HTTP GET) request to a URL\n    computed by `buildURL`, and returns a promise for the resulting\n    payload.\n     The `query` argument is a simple JavaScript object that will be passed directly\n    to the server as parameters.\n     @method query\n    @public\n    @param {Store} store\n    @param {Model} type\n    @param {Object} query\n    @param {Collection} recordArray\n    @param {Object} adapterOptions\n    @return {Promise} promise\n  */\n  query(store, type, query) {\n    const url = this.buildURL(type.modelName, null, null, 'query', query);\n    if (this.sortQueryParams) {\n      query = this.sortQueryParams(query);\n    }\n    return this.ajax(url, 'GET', {\n      data: query\n    });\n  }\n\n  /**\n    Called by the store in order to fetch a JSON object for\n    the record that matches a particular query.\n     The `queryRecord` method makes an Ajax (HTTP GET) request to a URL\n    computed by `buildURL`, and returns a promise for the resulting\n    payload.\n     The `query` argument is a simple JavaScript object that will be passed directly\n    to the server as parameters.\n     @since 1.13.0\n    @method queryRecord\n    @public\n    @param {Store} store\n    @param {Model} type\n    @param {Object} query\n    @param {Object} adapterOptions\n    @return {Promise} promise\n  */\n  queryRecord(store, type, query, adapterOptions) {\n    const url = this.buildURL(type.modelName, null, null, 'queryRecord', query);\n    if (this.sortQueryParams) {\n      query = this.sortQueryParams(query);\n    }\n    return this.ajax(url, 'GET', {\n      data: query\n    });\n  }\n\n  /**\n    Called by the store in order to fetch several records together if `coalesceFindRequests` is true\n     For example, if the original payload looks like:\n     ```js\n    {\n      \"id\": 1,\n      \"title\": \"Rails is omakase\",\n      \"comments\": [ 1, 2, 3 ]\n    }\n    ```\n     The IDs will be passed as a URL-encoded Array of IDs, in this form:\n     ```\n    ids[]=1&ids[]=2&ids[]=3\n    ```\n     Many servers, such as Rails and PHP, will automatically convert this URL-encoded array\n    into an Array for you on the server-side. If you want to encode the\n    IDs, differently, just override this (one-line) method.\n     The `findMany` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\n    promise for the resulting payload.\n     @method findMany\n    @public\n    @param {Store} store\n    @param {Model} type\n    @param {Array} ids\n    @param {Array} snapshots\n    @return {Promise} promise\n  */\n  findMany(store, type, ids, snapshots) {\n    const url = this.buildURL(type.modelName, ids, snapshots, 'findMany');\n    return this.ajax(url, 'GET', {\n      data: {\n        ids: ids\n      }\n    });\n  }\n\n  /**\n    Called by the store in order to fetch a JSON array for\n    the unloaded records in a has-many relationship that were originally\n    specified as a URL (inside of `links`).\n     For example, if your original payload looks like this:\n     ```js\n    {\n      \"post\": {\n        \"id\": 1,\n        \"title\": \"Rails is omakase\",\n        \"links\": { \"comments\": \"/posts/1/comments\" }\n      }\n    }\n    ```\n     This method will be called with the parent record and `/posts/1/comments`.\n     The `findHasMany` method will make an Ajax (HTTP GET) request to the originally specified URL.\n     The format of your `links` value will influence the final request URL via the `urlPrefix` method:\n     * Links beginning with `//`, `http://`, `https://`, will be used as is, with no further manipulation.\n     * Links beginning with a single `/` will have the current adapter's `host` value prepended to it.\n     * Links with no beginning `/` will have a parentURL prepended to it, via the current adapter's `buildURL`.\n     @method findHasMany\n    @public\n    @param {Store} store\n    @param {Snapshot} snapshot\n    @param {String} url\n    @param {Object} relationship meta object describing the relationship\n    @return {Promise} promise\n  */\n  findHasMany(store, snapshot, url, relationship) {\n    const id = snapshot.id;\n    const type = snapshot.modelName;\n    ( true && !(typeof id === 'string' && id.length > 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.assert)(`Attempted to fetch the hasMany relationship for ${type}, but the record has no id`, typeof id === 'string' && id.length > 0));\n    url = this.urlPrefix(url, this.buildURL(type, id, snapshot, 'findHasMany'));\n    return this.ajax(url, 'GET');\n  }\n\n  /**\n    Called by the store in order to fetch the JSON for the unloaded record in a\n    belongs-to relationship that was originally specified as a URL (inside of\n    `links`).\n     For example, if your original payload looks like this:\n     ```js\n    {\n      \"person\": {\n        \"id\": 1,\n        \"name\": \"Tom Dale\",\n        \"links\": { \"group\": \"/people/1/group\" }\n      }\n    }\n    ```\n     This method will be called with the parent record and `/people/1/group`.\n     The `findBelongsTo` method will make an Ajax (HTTP GET) request to the originally specified URL.\n     The format of your `links` value will influence the final request URL via the `urlPrefix` method:\n     * Links beginning with `//`, `http://`, `https://`, will be used as is, with no further manipulation.\n     * Links beginning with a single `/` will have the current adapter's `host` value prepended to it.\n     * Links with no beginning `/` will have a parentURL prepended to it, via the current adapter's `buildURL`.\n     @method findBelongsTo\n    @public\n    @param {Store} store\n    @param {Snapshot} snapshot\n    @param {String} url\n    @param {Object} relationship meta object describing the relationship\n    @return {Promise} promise\n  */\n  findBelongsTo(store, snapshot, url, relationship) {\n    const id = snapshot.id;\n    const type = snapshot.modelName;\n    ( true && !(typeof id === 'string' && id.length > 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.assert)(`Attempted to fetch the belongsTo relationship for ${type}, but the record has no id`, typeof id === 'string' && id.length > 0));\n    url = this.urlPrefix(url, this.buildURL(type, id, snapshot, 'findBelongsTo'));\n    return this.ajax(url, 'GET');\n  }\n\n  /**\n    Called by the store when a newly created record is\n    saved via the `save` method on a model record instance.\n     The `createRecord` method serializes the record and makes an Ajax (HTTP POST) request\n    to a URL computed by `buildURL`.\n     See `serialize` for information on how to customize the serialized form\n    of a record.\n     @method createRecord\n    @public\n    @param {Store} store\n    @param {Model} type\n    @param {Snapshot} snapshot\n    @return {Promise} promise\n  */\n  createRecord(store, type, snapshot) {\n    const url = this.buildURL(type.modelName, null, snapshot, 'createRecord');\n    const data = (0,_serialize_into_hash_2lQbHRKN__WEBPACK_IMPORTED_MODULE_4__.b)(store, type, snapshot);\n    return this.ajax(url, 'POST', {\n      data\n    });\n  }\n\n  /**\n    Called by the store when an existing record is saved\n    via the `save` method on a model record instance.\n     The `updateRecord` method serializes the record and makes an Ajax (HTTP PUT) request\n    to a URL computed by `buildURL`.\n     See `serialize` for information on how to customize the serialized form\n    of a record.\n     @method updateRecord\n    @public\n    @param {Store} store\n    @param {Model} schema\n    @param {Snapshot} snapshot\n    @return {Promise} promise\n  */\n  updateRecord(store, schema, snapshot) {\n    const data = (0,_serialize_into_hash_2lQbHRKN__WEBPACK_IMPORTED_MODULE_4__.b)(store, schema, snapshot, {});\n    const type = snapshot.modelName;\n    const id = snapshot.id;\n    ( true && !(typeof id === 'string' && id.length > 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.assert)(`Attempted to update the ${type} record, but the record has no id`, typeof id === 'string' && id.length > 0));\n    const url = this.buildURL(type, id, snapshot, 'updateRecord');\n    return this.ajax(url, 'PUT', {\n      data\n    });\n  }\n\n  /**\n    Called by the store when a record is deleted.\n     The `deleteRecord` method  makes an Ajax (HTTP DELETE) request to a URL computed by `buildURL`.\n     @method deleteRecord\n    @public\n    @param {Store} store\n    @param {Model} type\n    @param {Snapshot} snapshot\n    @return {Promise} promise\n  */\n  deleteRecord(store, schema, snapshot) {\n    const type = snapshot.modelName;\n    const id = snapshot.id;\n    ( true && !(typeof id === 'string' && id.length > 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.assert)(`Attempted to delete the ${type} record, but the record has no id`, typeof id === 'string' && id.length > 0));\n    return this.ajax(this.buildURL(type, id, snapshot, 'deleteRecord'), 'DELETE');\n  }\n  _stripIDFromURL(store, snapshot) {\n    const type = snapshot.modelName;\n    const id = snapshot.id;\n    ( true && !(typeof id === 'string' && id.length > 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.assert)(`Attempted to strip the url from the ${type} record for coalescing, but the record has no id`, typeof id === 'string' && id.length > 0));\n    const url = this.buildURL(type, id, snapshot);\n    const expandedURL = url.split('/');\n    // Case when the url is of the format ...something/:id\n    // We are decodeURIComponent-ing the lastSegment because if it represents\n    // the id, it has been encodeURIComponent-ified within `buildURL`. If we\n    // don't do this, then records with id having special characters are not\n    // coalesced correctly (see GH #4190 for the reported bug)\n    const lastSegment = expandedURL[expandedURL.length - 1];\n    if (decodeURIComponent(lastSegment) === id) {\n      expandedURL[expandedURL.length - 1] = '';\n    } else if (id && endsWith(lastSegment, '?id=' + id)) {\n      //Case when the url is of the format ...something?id=:id\n      expandedURL[expandedURL.length - 1] = lastSegment.substring(0, lastSegment.length - id.length - 1);\n    }\n    return expandedURL.join('/');\n  }\n  /**\n    Organize records into groups, each of which is to be passed to separate\n    calls to `findMany`.\n     This implementation groups together records that have the same base URL but\n    differing ids. For example `/comments/1` and `/comments/2` will be grouped together\n    because we know findMany can coalesce them together as `/comments?ids[]=1&ids[]=2`\n     It also supports urls where ids are passed as a query param, such as `/comments?id=1`\n    but not those where there is more than 1 query param such as `/comments?id=2&name=David`\n    Currently only the query param of `id` is supported. If you need to support others, please\n    override this or the `_stripIDFromURL` method.\n     It does not group records that have differing base urls, such as for example: `/posts/1/comments/2`\n    and `/posts/2/comments/3`\n     @method groupRecordsForFindMany\n    @public\n    @param {Store} store\n    @param {Array} snapshots\n    @return {Array}  an array of arrays of records, each of which is to be\n                      loaded separately by `findMany`.\n  */\n  groupRecordsForFindMany(store, snapshots) {\n    const groups = new Map();\n    const maxURLLength = this.maxURLLength;\n    snapshots.forEach(snapshot => {\n      const baseUrl = this._stripIDFromURL(store, snapshot);\n      if (!groups.has(baseUrl)) {\n        groups.set(baseUrl, []);\n      }\n      groups.get(baseUrl).push(snapshot);\n    });\n    const groupsArray = [];\n    groups.forEach((group, key) => {\n      const paramNameLength = '&ids%5B%5D='.length;\n      const splitGroups = splitGroupToFitInUrl(store, this, group, maxURLLength, paramNameLength);\n      splitGroups.forEach(splitGroup => groupsArray.push(splitGroup));\n    });\n    return groupsArray;\n  }\n\n  /**\n    Takes an ajax response, and returns the json payload or an error.\n     By default this hook just returns the json payload passed to it.\n    You might want to override it in two cases:\n     1. Your API might return useful results in the response headers.\n    Response headers are passed in as the second argument.\n     2. Your API might return errors as successful responses with status code\n    200 and an Errors text or object. You can return a `InvalidError` or a\n    `AdapterError` (or a sub class) from this hook and it will automatically\n    reject the promise and put your record into the invalid or error state.\n     Returning a `InvalidError` from this method will cause the\n    record to transition into the `invalid` state and make the\n    `errors` object available on the record. When returning an\n    `InvalidError` the store will attempt to normalize the error data\n    returned from the server using the serializer's `extractErrors`\n    method.\n     @since 1.13.0\n    @method handleResponse\n    @public\n    @param  {Number} status\n    @param  {Object} headers\n    @param  {Object} payload\n    @param  {Object} requestData - the original request information\n    @return {Object | AdapterError} response\n  */\n  handleResponse(status, headers, payload, requestData) {\n    if (this.isSuccess(status, headers, payload)) {\n      return payload;\n    } else if (this.isInvalid(status, headers, payload)) {\n      return new _error__WEBPACK_IMPORTED_MODULE_6__.InvalidError(typeof payload === 'object' && 'errors' in payload ? payload.errors : undefined);\n    }\n    const errors = this.normalizeErrorResponse(status, headers, payload);\n    const detailedMessage = this.generatedDetailedMessage(status, headers, payload, requestData);\n    switch (status) {\n      case 401:\n        return new _error__WEBPACK_IMPORTED_MODULE_6__.UnauthorizedError(errors, detailedMessage);\n      case 403:\n        return new _error__WEBPACK_IMPORTED_MODULE_6__.ForbiddenError(errors, detailedMessage);\n      case 404:\n        return new _error__WEBPACK_IMPORTED_MODULE_6__.NotFoundError(errors, detailedMessage);\n      case 409:\n        return new _error__WEBPACK_IMPORTED_MODULE_6__.ConflictError(errors, detailedMessage);\n      default:\n        if (status >= 500) {\n          return new _error__WEBPACK_IMPORTED_MODULE_6__.ServerError(errors, detailedMessage);\n        }\n    }\n    return new _error__WEBPACK_IMPORTED_MODULE_6__[\"default\"](errors, detailedMessage);\n  }\n\n  /**\n    Default `handleResponse` implementation uses this hook to decide if the\n    response is a success.\n     @since 1.13.0\n    @method isSuccess\n    @public\n    @param  {Number} status\n    @param  {Object} headers\n    @param  {Object} payload\n    @return {Boolean}\n  */\n  isSuccess(status, _headers, _payload) {\n    return status >= 200 && status < 300 || status === 304;\n  }\n\n  /**\n    Default `handleResponse` implementation uses this hook to decide if the\n    response is an invalid error.\n     @since 1.13.0\n    @method isInvalid\n    @public\n    @param  {Number} status\n    @param  {Object} headers\n    @param  {Object} payload\n    @return {Boolean}\n  */\n  isInvalid(status, _headers, _payload) {\n    return status === 422;\n  }\n\n  /**\n    Takes a URL, an HTTP method and a hash of data, and makes an\n    HTTP request.\n     When the server responds with a payload, Ember Data will call into `extractSingle`\n    or `extractArray` (depending on whether the original query was for one record or\n    many records).\n     By default, `ajax` method has the following behavior:\n     * It sets the response `dataType` to `\"json\"`\n    * If the HTTP method is not `\"GET\"`, it sets the `Content-Type` to be\n      `application/json; charset=utf-8`\n    * If the HTTP method is not `\"GET\"`, it stringifies the data passed in. The\n      data is the serialized record in the case of a save.\n    * Registers success and failure handlers.\n     @method ajax\n    @private\n    @param {String} url\n    @param {String} type The request type GET, POST, PUT, DELETE etc.\n    @param {Object} options\n    @return {Promise} promise\n  */\n  async ajax(url, type, options = {}) {\n    const requestData = {\n      url: url,\n      method: type\n    };\n    if (this.useFetch) {\n      // @ts-expect-error poorly typed\n      const hash = this.ajaxOptions(url, type, options);\n      const response = await this._fetchRequest(hash);\n      const payload = await (0,_serialize_into_hash_2lQbHRKN__WEBPACK_IMPORTED_MODULE_4__.d)(response, requestData);\n      if (response.ok && !(payload instanceof Error)) {\n        return fetchSuccessHandler(this, payload, response, requestData);\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-throw-literal\n        throw fetchErrorHandler(this, payload, response, null, requestData);\n      }\n    } else {\n      return execjQAjax(this, requestData, options);\n    }\n  }\n\n  /**\n    @method _ajaxRequest\n    @private\n    @param {Object} options jQuery ajax options to be used for the ajax request\n  */\n  _ajaxRequest(options) {\n    ( true && !(typeof jQuery !== 'undefined') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.assert)('You must install jQuery globally when `useFetch` is false', typeof jQuery !== 'undefined'));\n    void jQuery.ajax(options);\n  }\n  _fetchRequest(options) {\n    const fetchFunction = (0,_serialize_into_hash_2lQbHRKN__WEBPACK_IMPORTED_MODULE_4__.g)();\n    return fetchFunction(options.url, options);\n  }\n  _ajax(options) {\n    if (this.useFetch) {\n      void this._fetchRequest(options);\n    } else {\n      this._ajaxRequest(options);\n    }\n  }\n\n  /**\n    @method ajaxOptions\n    @private\n    @param {String} url\n    @param {String} type The request type GET, POST, PUT, DELETE etc.\n    @param {Object} options\n    @return {Object}\n  */\n  ajaxOptions(url, method, options) {\n    let reqOptions = Object.assign({\n      url,\n      method,\n      type: method\n    }, options);\n    if (this.headers !== undefined) {\n      // @ts-expect-error poorly typed\n      reqOptions.headers = {\n        ...this.headers,\n        ...reqOptions.headers\n      };\n    } else if (!options.headers) {\n      reqOptions.headers = {};\n    }\n\n    // @ts-expect-error poorly typed\n    const contentType = reqOptions.contentType || this._defaultContentType;\n    if (this.useFetch) {\n      // @ts-expect-error poorly typed\n      if (reqOptions.data && reqOptions.type !== 'GET' && reqOptions.headers) {\n        if (!reqOptions.headers['Content-Type'] && !reqOptions.headers['content-type']) {\n          reqOptions.headers['content-type'] = contentType;\n        }\n      }\n      // @ts-expect-error poorly typed\n      reqOptions = fetchOptions(reqOptions);\n    } else {\n      // GET requests without a body should not have a content-type header\n      // and may be unexpected by a server\n      // @ts-expect-error poorly typed\n      if (reqOptions.data && reqOptions.type !== 'GET') {\n        // @ts-expect-error poorly typed\n        reqOptions = {\n          ...reqOptions,\n          contentType\n        };\n      }\n      // @ts-expect-error poorly typed\n      reqOptions = ajaxOptions(reqOptions, this);\n    }\n    reqOptions.url = this._ajaxURL(reqOptions.url);\n    return reqOptions;\n  }\n  _ajaxURL(url) {\n    if (this.fastboot?.isFastBoot) {\n      const httpRegex = /^https?:\\/\\//;\n      const protocolRelativeRegex = /^\\/\\//;\n      const protocol = this.fastboot.request.protocol;\n      const host = this.fastboot.request.host;\n      if (protocolRelativeRegex.test(url)) {\n        return `${protocol}${url}`;\n      } else if (!httpRegex.test(url)) {\n        try {\n          return `${protocol}//${host}${url}`;\n        } catch (fbError) {\n          throw new Error('You are using Ember Data with no host defined in your adapter. This will attempt to use the host of the FastBoot request, which is not configured for the current host of this request. Please set the hostWhitelist property for in your environment.js. FastBoot Error: ' + fbError.message);\n        }\n      }\n    }\n    return url;\n  }\n\n  /**\n    @method parseErrorResponse\n    @private\n    @param {String} responseText\n    @return {Object}\n  */\n  parseErrorResponse(responseText) {\n    let json = responseText;\n    try {\n      json = JSON.parse(responseText);\n    } catch (e) {\n      // ignored\n    }\n    return json;\n  }\n\n  /**\n    @method normalizeErrorResponse\n    @private\n    @param  {Number} status\n    @param  {Object} headers\n    @param  {Object} payload\n    @return {Array} errors payload\n  */\n  normalizeErrorResponse(status, _headers, payload) {\n    if (payload && typeof payload === 'object' && 'errors' in payload && Array.isArray(payload.errors)) {\n      return payload.errors;\n    } else {\n      return [{\n        status: `${status}`,\n        // Set to a string per the JSON API spec: https://jsonapi.org/format/#errors\n        title: 'The backend responded with an error',\n        // Detail is intended to be a string, but backends be non-compliant.\n        // stringifying gives the user a more friendly error in this situation, whereas\n        // they'd instead receive [object Object].\n        // JSON.stringify will convert *anything* to a string without erroring.\n        detail: typeof payload === 'string' ? payload : JSON.stringify(payload)\n      }];\n    }\n  }\n\n  /**\n    Generates a detailed (\"friendly\") error message, with plenty\n    of information for debugging (good luck!)\n     @method generatedDetailedMessage\n    @private\n    @param  {Number} status\n    @param  {Object} headers\n    @param  {Object} payload\n    @param  {Object} requestData\n    @return {String} detailed error message\n  */\n  generatedDetailedMessage(status, headers, payload, requestData) {\n    let shortenedPayload;\n    const payloadContentType = headers['content-type'] || 'Empty Content-Type';\n    if (payloadContentType === 'text/html' && typeof payload === 'string' && payload.length > 250) {\n      shortenedPayload = '[Omitted Lengthy HTML]';\n    } else if (typeof payload === 'object' && payload !== null) {\n      shortenedPayload = JSON.stringify(payload, null, 2);\n    } else {\n      shortenedPayload = payload;\n    }\n    const requestDescription = requestData.method + ' ' + requestData.url;\n    const payloadDescription = 'Payload (' + payloadContentType + ')';\n    return ['Ember Data Request ' + requestDescription + ' returned a ' + status, payloadDescription, shortenedPayload].join('\\n');\n  }\n\n  /**\n    Used by `findAll` and `findRecord` to build the query's `data` hash\n    supplied to the ajax method.\n     @method buildQuery\n    @since 2.5.0\n    @public\n    @param  {Snapshot} snapshot\n    @return {Object}\n  */\n  buildQuery(snapshot) {\n    const query = {};\n    if (snapshot) {\n      const {\n        include\n      } = snapshot;\n      if (include) {\n        query.include = include;\n      }\n    }\n    return query;\n  }\n}, (0,_index_4RESM7Oz__WEBPACK_IMPORTED_MODULE_0__._)(_class.prototype, \"fastboot\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \"fastboot\"), _class.prototype), _class));\nfunction ajaxSuccess(adapter, payload, requestData, responseData) {\n  let response;\n  try {\n    response = adapter.handleResponse(responseData.status, responseData.headers, payload, requestData);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n  if (response && response.isAdapterError) {\n    return Promise.reject(response);\n  } else {\n    return response;\n  }\n}\nfunction ajaxError(adapter, payload, requestData, responseData) {\n  let error;\n  if (responseData.errorThrown instanceof Error && payload !== '') {\n    error = responseData.errorThrown;\n  } else if (responseData.textStatus === 'timeout') {\n    error = new _error__WEBPACK_IMPORTED_MODULE_6__.TimeoutError();\n  } else if (responseData.textStatus === 'abort' || responseData.status === 0) {\n    error = handleAbort(requestData, responseData);\n  } else {\n    try {\n      error = adapter.handleResponse(responseData.status, responseData.headers, payload || responseData.errorThrown, requestData);\n    } catch (e) {\n      error = e;\n    }\n  }\n  return error;\n}\n\n// Adapter abort error to include any relevent info, e.g. request/response:\nfunction handleAbort(requestData, responseData) {\n  const {\n    method,\n    url,\n    errorThrown\n  } = requestData;\n  const {\n    status\n  } = responseData;\n  const msg = `Request failed: ${method} ${url} ${String(errorThrown ?? '')}`;\n  const errors = [{\n    title: 'Adapter Error',\n    detail: msg.trim(),\n    status\n  }];\n  return new _error__WEBPACK_IMPORTED_MODULE_6__.AbortError(errors);\n}\n\n//From http://stackoverflow.com/questions/280634/endswith-in-javascript\nfunction endsWith(string, suffix) {\n  if (typeof String.prototype.endsWith !== 'function') {\n    return string.includes(suffix, string.length - suffix.length);\n  } else {\n    return string.endsWith(suffix);\n  }\n}\nfunction fetchSuccessHandler(adapter, payload, response, requestData) {\n  const responseData = fetchResponseData(response);\n  return ajaxSuccess(adapter, payload, requestData, responseData);\n}\nfunction fetchErrorHandler(adapter, payload, response, errorThrown, requestData) {\n  const responseData = fetchResponseData(response);\n  if (responseData.status === 200 && payload instanceof Error) {\n    responseData.errorThrown = payload;\n    // @ts-expect-error poorly typed\n    payload = responseData.errorThrown.payload;\n  } else {\n    responseData.errorThrown = errorThrown;\n    if (typeof payload === 'string') {\n      payload = adapter.parseErrorResponse(payload);\n    }\n  }\n  return ajaxError(adapter, payload, requestData, responseData);\n}\nfunction ajaxSuccessHandler(adapter, payload, jqXHR, requestData) {\n  const responseData = ajaxResponseData(jqXHR);\n  return ajaxSuccess(adapter, payload, requestData, responseData);\n}\nfunction ajaxErrorHandler(adapter, jqXHR, errorThrown, requestData) {\n  const responseData = ajaxResponseData(jqXHR);\n  responseData.errorThrown = errorThrown;\n  const payload = adapter.parseErrorResponse(jqXHR.responseText);\n  {\n    const message = `The server returned an empty string for ${requestData.method} ${requestData.url}, which cannot be parsed into a valid JSON. Return either null or {}.`;\n    const validJSONString = !(responseData.textStatus === 'parsererror' && payload === '');\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.warn)(message, validJSONString, {\n      id: 'ds.adapter.returned-empty-string-as-JSON'\n    }));\n  }\n  return ajaxError(adapter, payload, requestData, responseData);\n}\nfunction fetchResponseData(response) {\n  return {\n    status: response.status,\n    textStatus: response.statusText,\n    headers: headersToObject(response.headers)\n  };\n}\nfunction ajaxResponseData(jqXHR) {\n  return {\n    status: jqXHR.status,\n    textStatus: jqXHR.statusText,\n    headers: (0,_serialize_into_hash_2lQbHRKN__WEBPACK_IMPORTED_MODULE_4__.p)(jqXHR.getAllResponseHeaders())\n  };\n}\nfunction headersToObject(headers) {\n  const headersObject = {};\n  if (headers) {\n    headers.forEach((value, key) => headersObject[key] = value);\n  }\n  return headersObject;\n}\n\n/**\n * Helper function that translates the options passed to `jQuery.ajax` into a format that `fetch` expects.\n *\n * @method fetchOptions\n * @for @ember-data/adapter/rest\n * @param {Object} _options\n * @param {Adapter} adapter\n * @private\n * @return {Object}\n */\nfunction fetchOptions(options, adapter) {\n  options.credentials = options.credentials || 'same-origin';\n  if (options.data) {\n    // GET and HEAD requests can't have a `body`\n    if (options.method === 'GET' || options.method === 'HEAD') {\n      // If no options are passed, Ember Data sets `data` to an empty object, which we test for.\n      if (Object.keys(options.data).length && options.url) {\n        // Test if there are already query params in the url (mimics jQuey.ajax).\n        const queryParamDelimiter = options.url.includes('?') ? '&' : '?';\n        options.url += `${queryParamDelimiter}${(0,_serialize_into_hash_2lQbHRKN__WEBPACK_IMPORTED_MODULE_4__.s)(options.data)}`;\n      }\n    } else {\n      // NOTE: a request's body cannot be an object, so we stringify it if it is.\n      // JSON.stringify removes keys with values of `undefined` (mimics jQuery.ajax).\n      // If the data is not a POJO (it's a String, FormData, etc), we just set it.\n      // If the data is a string, we assume it's a stringified object.\n\n      /* We check for Objects this way because we want the logic inside the consequent to run\n       * if `options.data` is a POJO, not if it is a data structure whose `typeof` returns \"object\"\n       * when it's not (Array, FormData, etc). The reason we don't use `options.data.constructor`\n       * to check is in case `data` is an object with no prototype (e.g. created with null).\n       */\n      if (Object.prototype.toString.call(options.data) === '[object Object]') {\n        options.body = JSON.stringify(options.data);\n      } else {\n        // @ts-expect-error poorly typed\n        options.body = options.data;\n      }\n    }\n  }\n  return options;\n}\nfunction ajaxOptions(options, adapter) {\n  options.dataType = 'json';\n  options.context = adapter;\n  if (options.data && options.type !== 'GET') {\n    options.data = JSON.stringify(options.data);\n  }\n  options.beforeSend = function (xhr) {\n    if (options.headers) {\n      Object.keys(options.headers).forEach(key => {\n        const headerValue = options.headers && options.headers[key];\n        const isString = value => typeof value === 'string';\n        if (isString(headerValue)) {\n          xhr.setRequestHeader(key, headerValue);\n        }\n      });\n    }\n  };\n  return options;\n}\nfunction execjQAjax(adapter, requestData, options) {\n  const hash = adapter.ajaxOptions(requestData.url, requestData.method, options);\n  return new Promise((resolve, reject) => {\n    hash.success = function (payload, textStatus, jqXHR) {\n      const response = ajaxSuccessHandler(adapter, payload, jqXHR, requestData);\n      resolve(response);\n    };\n    hash.error = function (jqXHR, textStatus, errorThrown) {\n      const error = ajaxErrorHandler(adapter, jqXHR, errorThrown, requestData);\n      reject(error);\n    };\n    adapter._ajax(hash);\n  });\n}\nfunction splitGroupToFitInUrl(store, adapter, group, maxURLLength, paramNameLength) {\n  let idsSize = 0;\n  const baseUrl = adapter._stripIDFromURL(store, group[0]);\n  const splitGroups = [[]];\n  group.forEach(snapshot => {\n    const additionalLength = encodeURIComponent(snapshot.id).length + paramNameLength;\n    if (baseUrl.length + idsSize + additionalLength >= maxURLLength) {\n      idsSize = 0;\n      splitGroups.push([]);\n    }\n    idsSize += additionalLength;\n    const lastGroupIndex = splitGroups.length - 1;\n    splitGroups[lastGroupIndex].push(snapshot);\n  });\n  return splitGroups;\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/rest.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/serialize-into-hash-2lQbHRKN.js":
/*!***************************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/serialize-into-hash-2lQbHRKN.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ setupFastboot),\n/* harmony export */   b: () => (/* binding */ serializeIntoHash),\n/* harmony export */   d: () => (/* binding */ determineBodyPromise),\n/* harmony export */   g: () => (/* binding */ getFetchFunction),\n/* harmony export */   p: () => (/* binding */ parseResponseHeaders),\n/* harmony export */   s: () => (/* binding */ serializeQueryParams)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_legacy_compat_private__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/legacy-compat/-private */ \"../rewritten-packages/@ember-data/legacy-compat.e84b6420/node_modules/@ember-data/legacy-compat/-private.js\");\n\n\nconst newline = /\\r?\\n/;\nfunction parseResponseHeaders(headersString) {\n  const headers = Object.create(null);\n  if (!headersString) {\n    return headers;\n  }\n  const headerPairs = headersString.split(newline);\n  for (let i = 0; i < headerPairs.length; i++) {\n    const header = headerPairs[i];\n    let j = 0;\n    let foundSep = false;\n    for (; j < header.length; j++) {\n      if (header.charCodeAt(j) === 58 /* ':' */) {\n        foundSep = true;\n        break;\n      }\n    }\n    if (foundSep === false) {\n      continue;\n    }\n    const field = header.substring(0, j).trim();\n    const value = header.substring(j + 1, header.length).trim();\n    if (value) {\n      const lowerCasedField = field.toLowerCase();\n      headers[lowerCasedField] = value;\n      headers[field] = value;\n    }\n  }\n  return headers;\n}\n\n/**\n * A utility function that returns a promise that resolves\n * even when the source promise rejects.\n *\n * @internal\n */\nfunction continueOnReject(promise) {\n  return Promise.resolve(promise).catch(e => e);\n}\n\n/*\n * Function that always attempts to parse the response as json, and if an error is thrown,\n * returns `undefined` if the response is successful and has a status code of 204 (No Content),\n * or 205 (Reset Content) or if the request method was 'HEAD', and the plain payload otherwise.\n */\nfunction _determineContent(response, requestData, payload) {\n  let ret = payload;\n  let error = null;\n  if (!response.ok) {\n    return payload;\n  }\n  const status = response.status;\n  const payloadIsEmpty = payload === '' || payload === null;\n  const statusIndicatesEmptyResponse = status === 204 || status === 205 || requestData.method === 'HEAD';\n  {\n    if (payloadIsEmpty && !statusIndicatesEmptyResponse) {\n      const message = `The server returned an empty string for ${requestData.method} ${requestData.url}, which cannot be parsed into a valid JSON. Return either null or {}.`;\n      if (payload === '') {\n        ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(message, {\n          id: 'ds.adapter.returned-empty-string-as-JSON'\n        }));\n      }\n    }\n  }\n  if (response.ok && (statusIndicatesEmptyResponse || payloadIsEmpty)) {\n    return;\n  }\n  try {\n    ret = JSON.parse(payload);\n  } catch (e) {\n    if (!(e instanceof SyntaxError)) {\n      return e;\n    }\n    e.payload = payload;\n    error = e;\n  }\n  if (error) {\n    {\n      // eslint-disable-next-line no-console\n      console.warn('This response was unable to be parsed as json.', payload);\n    }\n    return error;\n  }\n  return ret;\n}\nfunction determineBodyPromise(response, requestData) {\n  // response.text() may resolve or reject\n  // it is a native promise, may not have finally\n  return continueOnReject(response.text()).then(payload => _determineContent(response, requestData, payload));\n}\nconst RBRACKET = /\\[\\]$/;\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n}\nfunction isPrimitiveArray(obj) {\n  return Array.isArray(obj);\n}\nfunction isParamsArray(obj) {\n  return Array.isArray(obj);\n}\nfunction buildParams(prefix, obj, s) {\n  let i, len, key;\n  if (prefix) {\n    if (isPrimitiveArray(obj)) {\n      for (i = 0, len = obj.length; i < len; i++) {\n        if (RBRACKET.test(prefix)) {\n          add(s, prefix, obj[i]);\n        } else {\n          buildParams(prefix + '[' + (typeof obj[i] === 'object' && obj[i] !== null ? i : '') + ']', obj[i], s);\n        }\n      }\n    } else if (isPlainObject(obj)) {\n      for (key in obj) {\n        buildParams(prefix + '[' + key + ']', obj[key], s);\n      }\n    } else {\n      ( true && !(obj === null || typeof obj !== 'object') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`query params cannot be a { name, value } pair if prefix is present`, obj === null || typeof obj !== 'object'));\n      add(s, prefix, obj);\n    }\n  } else if (isParamsArray(obj)) {\n    for (i = 0, len = obj.length; i < len; i++) {\n      add(s, obj[i].name, obj[i].value);\n    }\n  } else {\n    ( true && !(typeof obj !== 'string') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`query params cannot be a string if no prefix is present`, typeof obj !== 'string'));\n    ( true && !(!Array.isArray(obj)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`query params should not be an array if no prefix is present`, !Array.isArray(obj)));\n    ( true && !(isPlainObject(obj)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`query params should not be a { name, value } pair if no prefix is present`, isPlainObject(obj)));\n    for (key in obj) {\n      buildParams(key, obj[key], s);\n    }\n  }\n  return s;\n}\n\n/*\n * Helper function that turns the data/body of a request into a query param string.\n * This is directly copied from jQuery.param.\n */\nfunction serializeQueryParams(queryParamsObject) {\n  return buildParams('', queryParamsObject, []).join('&');\n}\n\n/*\n * Part of the `serializeQueryParams` helper function.\n */\nfunction add(s, k, v) {\n  // Strip out keys with undefined value and replace null values with\n  // empty strings (mimics jQuery.ajax)\n  if (v === undefined) {\n    return;\n  } else if (v === null) {\n    v = '';\n  }\n  v = typeof v === 'function' ? v() : v;\n  s[s.length] = `${encodeURIComponent(k)}=${encodeURIComponent(v)}`;\n}\nlet _fetch = null;\nlet REQUEST = null;\nfunction getFetchFunction() {\n  // return cached fetch function\n  if (_fetch !== null) {\n    return _fetch();\n  }\n\n  // grab browser native fetch if available, or global fetch if otherwise configured\n  if (typeof fetch === 'function') {\n    // fallback to using global fetch\n    _fetch = () => fetch;\n\n    /* global FastBoot */\n    // grab fetch from node-fetch\n  } else if (typeof FastBoot !== 'undefined') {\n    try {\n      const nodeFetch = FastBoot.require('node-fetch');\n      const httpRegex = /^https?:\\/\\//;\n      const protocolRelativeRegex = /^\\/\\//;\n\n      // eslint-disable-next-line no-inner-declarations\n      function parseRequest(request) {\n        if (request === null) {\n          throw new Error(\"Trying to fetch with relative url but the application hasn't finished loading FastBootInfo, see details at https://github.com/ember-cli/ember-fetch#relative-url\");\n        }\n        // Old Prember version is not sending protocol\n        const protocol = request.protocol === 'undefined:' ? 'http:' : request.protocol;\n        return [request.get('host'), protocol];\n      }\n\n      // eslint-disable-next-line no-inner-declarations\n      function buildAbsoluteUrl(url) {\n        if (protocolRelativeRegex.test(url)) {\n          const [host] = parseRequest(REQUEST);\n          url = host + url;\n        } else if (!httpRegex.test(url)) {\n          const [host, protocol] = parseRequest(REQUEST);\n          url = protocol + '//' + host + url;\n        }\n        return url;\n      }\n\n      // eslint-disable-next-line no-inner-declarations\n      function patchedFetch(input, options) {\n        if (input && typeof input === 'object' && 'href' in input) {\n          const url = buildAbsoluteUrl(input.href);\n          const info = Object.assign({}, input, {\n            url\n          });\n          return nodeFetch(info, options);\n        } else if (typeof input === 'string') {\n          const url = buildAbsoluteUrl(input);\n          return nodeFetch(url, options);\n        }\n        return nodeFetch(input, options);\n      }\n      _fetch = () => patchedFetch;\n    } catch (e) {\n      throw new Error(`Unable to create a compatible 'fetch' for FastBoot with node-fetch`);\n    }\n  }\n  ( true && !(_fetch) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot find a 'fetch' global and did not detect FastBoot.`, _fetch));\n  return _fetch();\n}\nfunction setupFastboot(fastBootRequest) {\n  REQUEST = fastBootRequest;\n}\nfunction serializeIntoHash(store, modelClass, snapshot, options = {\n  includeId: true\n}) {\n  (0,_ember_data_legacy_compat_private__WEBPACK_IMPORTED_MODULE_1__.upgradeStore)(store);\n  const serializer = store.serializerFor(modelClass.modelName);\n  ( true && !(serializer) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot serialize record, no serializer defined`, serializer));\n  if (typeof serializer.serializeIntoHash === 'function') {\n    const data = {};\n    serializer.serializeIntoHash(data, modelClass, snapshot, options);\n    return data;\n  }\n  return serializer.serialize(snapshot, options);\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/serialize-into-hash-2lQbHRKN.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/debug.cbe3cfb1/node_modules/@ember-data/debug/_app_/data-adapter.js":
/*!*************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/debug.cbe3cfb1/node_modules/@ember-data/debug/_app_/data-adapter.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_data_debug__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _ember_data_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember-data/debug */ \"../rewritten-packages/@ember-data/debug.cbe3cfb1/node_modules/@ember-data/debug/index.js\");\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/debug.cbe3cfb1/node_modules/@ember-data/debug/_app_/data-adapter.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/debug.cbe3cfb1/node_modules/@ember-data/debug/index.js":
/*!************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/debug.cbe3cfb1/node_modules/@ember-data/debug/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _class)\n/* harmony export */ });\n/* harmony import */ var _ember_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/array */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Farray&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_array__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_array__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_debug_data_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/debug/data-adapter */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug%2Fdata-adapter&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug_data_adapter__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_debug_data_adapter__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _ember_object_observers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember/object/observers */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject%2Fobservers&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object_observers__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ember_object_observers__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember/service */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fservice&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ember_service__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _ember_string__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ember/string */ \"../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/index.js\");\nvar _dec, _class2, _descriptor;\nfunction _initializerDefineProperty(target, property, descriptor, context) {\n  if (!descriptor) return;\n  Object.defineProperty(target, property, {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable,\n    writable: descriptor.writable,\n    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0\n  });\n}\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object.keys(descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object.defineProperty(target, property, desc);\n    desc = null;\n  }\n  return desc;\n}\nfunction _initializerWarningHelper(descriptor, context) {\n  throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.');\n}\n/**\n  # Overview\n\n  This package provides the `DataAdapter` which the [Ember Inspector](https://github.com/emberjs/ember-inspector)\n  uses to subscribe and retrieve information for the `data` tab in the inspector.\n\n  This package adds roughly .6 KB when minified and compressed to your application in production; however,\n  you can opt out of shipping this addon in production via options in `ember-cli-build.js`\n\n  ```js\n  let app = new EmberApp(defaults, {\n    emberData: {\n      includeDataAdapterInProduction: false\n    }\n  });\n  ```\n\n  When using `ember-data` as a dependency of your app, the default is to ship the inspector support to production.\n\n  When not using `ember-data` as a dependency but instead using EmberData via declaring specific `@ember-data/<package>`\n  dependencies the default is to not ship to production.\n\n  @module @ember-data/debug\n  @main @ember-data/debug\n*/\n\n\n\n\n\n\nconst StoreTypesMap = new WeakMap();\nfunction typesMapFor(store) {\n  let typesMap = StoreTypesMap.get(store);\n  if (typesMap === undefined) {\n    typesMap = new Map();\n    StoreTypesMap.set(store, typesMap);\n  }\n  return typesMap;\n}\n\n/**\n  Implements `@ember/debug/data-adapter` with for EmberData\n  integration with the ember-inspector.\n\n  @class InspectorDataAdapter\n  @extends DataAdapter\n  @private\n*/\nlet _class = (_dec = (0,_ember_service__WEBPACK_IMPORTED_MODULE_4__.inject)('store'), (_class2 = class _class2 extends (_ember_debug_data_adapter__WEBPACK_IMPORTED_MODULE_2___default()) {\n  constructor(...args) {\n    super(...args);\n    _initializerDefineProperty(this, \"store\", _descriptor, this);\n  }\n  /**\n    Specifies how records can be filtered based on the state of the record\n    Records returned will need to have a `filterValues`\n    property with a key for every name in the returned array\n     @method getFilters\n    @private\n    @return {Array} List of objects defining filters\n     The object should have a `name` and `desc` property\n  */\n  getFilters() {\n    return [{\n      name: 'isNew',\n      desc: 'New'\n    }, {\n      name: 'isModified',\n      desc: 'Modified'\n    }, {\n      name: 'isClean',\n      desc: 'Clean'\n    }];\n  }\n  _nameToClass(type) {\n    return this.store.modelFor(type);\n  }\n\n  /**\n    Fetch the model types and observe them for changes.\n    Maintains the list of model types without needing the Model package for detection.\n     @method watchModelTypes\n    @private\n    @param {Function} typesAdded Callback to call to add types.\n    Takes an array of objects containing wrapped types (returned from `wrapModelType`).\n    @param {Function} typesUpdated Callback to call when a type has changed.\n    Takes an array of objects containing wrapped types.\n    @return {Function} Method to call to remove all observers\n  */\n  watchModelTypes(typesAdded, typesUpdated) {\n    const {\n      store\n    } = this;\n    const unsub = store.notifications.subscribe('resource', (identifier, notificationType) => {\n      if (notificationType === 'added') {\n        this.watchTypeIfUnseen(store, discoveredTypes, identifier.type, typesAdded, typesUpdated, _releaseMethods);\n      }\n    });\n    const __getResourceCache = store._instanceCache.getResourceCache;\n    const _releaseMethods = [() => {\n      store.notifications.unsubscribe(unsub);\n    }];\n    const discoveredTypes = typesMapFor(store);\n    Object.keys(store.identifierCache._cache.resourcesByType).forEach(type => {\n      discoveredTypes.set(type, false);\n    });\n\n    // Add any models that were added during initialization of the app, before the inspector was opened\n    discoveredTypes.forEach((_, type) => {\n      this.watchTypeIfUnseen(store, discoveredTypes, type, typesAdded, typesUpdated, _releaseMethods);\n    });\n    let release = () => {\n      _releaseMethods.forEach(fn => fn());\n      store._instanceCache.getResourceCache = __getResourceCache;\n      // reset the list so the models can be added if the inspector is re-opened\n      // the entries are set to false instead of removed, since the models still exist in the app\n      // we just need the inspector to become aware of them\n      discoveredTypes.forEach((value, key) => {\n        discoveredTypes.set(key, false);\n      });\n      this.releaseMethods.removeObject(release);\n    };\n    this.releaseMethods.pushObject(release);\n    return release;\n  }\n\n  /**\n   * Loop over the discovered types and use the callbacks from watchModelTypes to notify\n   * the consumer of this adapter about the mdoels.\n   *\n   * @method watchTypeIfUnseen\n   * @param {store} store\n   * @param {Map} discoveredTypes\n   * @param {String} type\n   * @param {Function} typesAdded\n   * @param {Function} typesUpdated\n   * @param {Array} releaseMethods\n   * @private\n   */\n  watchTypeIfUnseen(store, discoveredTypes, type, typesAdded, typesUpdated, releaseMethods) {\n    if (discoveredTypes.get(type) !== true) {\n      let klass = store.modelFor(type);\n      let wrapped = this.wrapModelType(klass, type);\n      releaseMethods.push(this.observeModelType(type, typesUpdated));\n      typesAdded([wrapped]);\n      discoveredTypes.set(type, true);\n    }\n  }\n\n  /**\n    Creates a human readable string used for column headers\n     @method columnNameToDesc\n    @private\n    @param {String} name The attribute name\n    @return {String} Human readable string based on the attribute name\n  */\n  columnNameToDesc(name) {\n    return (0,_ember_string__WEBPACK_IMPORTED_MODULE_5__.capitalize)((0,_ember_string__WEBPACK_IMPORTED_MODULE_5__.underscore)(name).replace(/_/g, ' ').trim());\n  }\n\n  /**\n    Get the columns for a given model type\n     @method columnsForType\n    @private\n    @param {Model} typeClass\n    @return {Array} An array of columns of the following format:\n     name: {String} The name of the column\n     desc: {String} Humanized description (what would show in a table column name)\n  */\n  columnsForType(typeClass) {\n    let columns = [{\n      name: 'id',\n      desc: 'Id'\n    }];\n    let count = 0;\n    let self = this;\n    typeClass.attributes.forEach((meta, name) => {\n      if (count++ > self.attributeLimit) {\n        return false;\n      }\n      let desc = this.columnNameToDesc(name);\n      columns.push({\n        name: name,\n        desc: desc\n      });\n    });\n    return columns;\n  }\n\n  /**\n    Fetches all loaded records for a given type\n     @method getRecords\n    @private\n    @param {Model} modelClass of the record\n    @param {String} modelName of the record\n    @return {Array} An array of Model records\n     This array will be observed for changes,\n     so it should update when new records are added/removed\n  */\n  getRecords(modelClass, modelName) {\n    if (arguments.length < 2) {\n      // Legacy Ember.js < 1.13 support\n      let containerKey = modelClass._debugContainerKey;\n      if (containerKey) {\n        let match = containerKey.match(/model:(.*)/);\n        if (match !== null) {\n          modelName = match[1];\n        }\n      }\n    }\n    ( true && !(!!modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)('Cannot find model name. Please upgrade to Ember.js >= 1.13 for Ember Inspector support', !!modelName));\n    return this.store.peekAll(modelName);\n  }\n\n  /**\n    Gets the values for each column\n    This is the attribute values for a given record\n     @method getRecordColumnValues\n    @private\n    @param {Model} record to get values from\n    @return {Object} Keys should match column names defined by the model type\n  */\n  getRecordColumnValues(record) {\n    let count = 0;\n    let columnValues = {\n      id: record.id\n    };\n    record.eachAttribute(key => {\n      if (count++ > this.attributeLimit) {\n        return false;\n      }\n      columnValues[key] = record[key];\n    });\n    return columnValues;\n  }\n\n  /**\n    Returns keywords to match when searching records\n     @method getRecordKeywords\n    @private\n    @param {Model} record\n    @return {Array} Relevant keywords for search based on the record's attribute values\n  */\n  getRecordKeywords(record) {\n    let keywords = [];\n    let keys = (0,_ember_array__WEBPACK_IMPORTED_MODULE_0__.A)(['id']);\n    record.eachAttribute(key => keys.push(key));\n    keys.forEach(key => keywords.push(record[key]));\n    return keywords;\n  }\n\n  /**\n    Returns the values of filters defined by `getFilters`\n    These reflect the state of the record\n     @method getRecordFilterValues\n    @private\n    @param {Model} record\n    @return {Object} The record state filter values\n  */\n  getRecordFilterValues(record) {\n    return {\n      isNew: record.isNew,\n      isModified: record.hasDirtyAttributes && !record.isNew,\n      isClean: !record.hasDirtyAttributes\n    };\n  }\n\n  /**\n    Returns a color that represents the record's state\n    Possible colors: black, blue, green\n     @method getRecordColor\n    @private\n    @param {Model} record\n    @return {String} The record color\n  */\n  getRecordColor(record) {\n    let color = 'black';\n    if (record.isNew) {\n      color = 'green';\n    } else if (record.hasDirtyAttributes) {\n      color = 'blue';\n    }\n    return color;\n  }\n\n  /**\n    Observes all relevant properties and re-sends the wrapped record\n    when a change occurs\n     @method observeRecord\n    @private\n    @param {Model} record\n    @param {Function} recordUpdated Callback used to notify changes\n    @return {Function} The function to call to remove all observers\n  */\n  observeRecord(record, recordUpdated) {\n    let releaseMethods = (0,_ember_array__WEBPACK_IMPORTED_MODULE_0__.A)();\n    let keysToObserve = (0,_ember_array__WEBPACK_IMPORTED_MODULE_0__.A)(['id', 'isNew', 'hasDirtyAttributes']);\n    record.eachAttribute(key => keysToObserve.push(key));\n    let adapter = this;\n    keysToObserve.forEach(function (key) {\n      let handler = function () {\n        recordUpdated(adapter.wrapRecord(record));\n      };\n      (0,_ember_object_observers__WEBPACK_IMPORTED_MODULE_3__.addObserver)(record, key, handler);\n      releaseMethods.push(function () {\n        (0,_ember_object_observers__WEBPACK_IMPORTED_MODULE_3__.removeObserver)(record, key, handler);\n      });\n    });\n    let release = function () {\n      releaseMethods.forEach(fn => fn());\n    };\n    return release;\n  }\n}, _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"store\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2));\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/debug.cbe3cfb1/node_modules/@ember-data/debug/index.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/graph.4c9e27df/node_modules/@ember-data/graph/-private.js":
/*!***************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/graph.4c9e27df/node_modules/@ember-data/graph/-private.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   graphFor: () => (/* binding */ graphFor),\n/* harmony export */   isBelongsTo: () => (/* binding */ isBelongsTo),\n/* harmony export */   peekGraph: () => (/* binding */ peekGraph)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/store/-private */ \"../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/-private.js\");\n\n\nfunction coerceId(id) {\n  {\n    let normalized;\n    if (id === null || id === undefined || id === '') {\n      normalized = null;\n    } else {\n      normalized = String(id);\n    }\n    ( true && !(normalized === id) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`The resource id '<${typeof id}> ${String(id)} ' is not normalized. Update your application code to use '${JSON.stringify(normalized)}' instead.`, normalized === id, {\n      id: 'ember-data:deprecate-non-strict-id',\n      until: '6.0',\n      for: 'ember-data',\n      since: {\n        available: '5.3',\n        enabled: '5.3'\n      }\n    }));\n    return normalized;\n  }\n  ( true && !(id === null || typeof id === 'string' && id.length > 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Resource IDs must be a non-empty string or null. Received '${String(id)}'.`, id === null || typeof id === 'string' && id.length > 0));\n  return id;\n}\nfunction getStore(wrapper) {\n  ( true && !('_store' in wrapper) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`expected a private _store property`, '_store' in wrapper));\n  return wrapper._store;\n}\nfunction expandingGet(cache, key1, key2) {\n  const mainCache = cache[key1] = cache[key1] || Object.create(null);\n  return mainCache[key2];\n}\nfunction expandingSet(cache, key1, key2, value) {\n  const mainCache = cache[key1] = cache[key1] || Object.create(null);\n  mainCache[key2] = value;\n}\nfunction assertValidRelationshipPayload(graph, op) {\n  const relationship = graph.get(op.record, op.field);\n  ( true && !(isHasMany(relationship) || isBelongsTo(relationship)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot update an implicit relationship`, isHasMany(relationship) || isBelongsTo(relationship)));\n  const payload = op.value;\n  const {\n    definition,\n    identifier,\n    state\n  } = relationship;\n  const {\n    type\n  } = identifier;\n  const {\n    field\n  } = op;\n  const {\n    isAsync,\n    kind\n  } = definition;\n  if (payload.links) {\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`You pushed a record of type '${type}' with a relationship '${field}' configured as 'async: false'. You've included a link but no primary data, this may be an error in your payload. EmberData will treat this relationship as known-to-be-empty.`, isAsync || !!payload.data || state.hasReceivedData, {\n      id: 'ds.store.push-link-for-sync-relationship'\n    }));\n  } else if (payload.data) {\n    if (kind === 'belongsTo') {\n      ( true && !(!Array.isArray(payload.data)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`A ${type} record was pushed into the store with the value of ${field} being ${(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.inspect)(payload.data)}, but ${field} is a belongsTo relationship so the value must not be an array. You should probably check your data payload or serializer.`, !Array.isArray(payload.data)));\n      assertRelationshipData(getStore(graph.store), identifier, payload.data, definition);\n    } else if (kind === 'hasMany') {\n      ( true && !(Array.isArray(payload.data)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`A ${type} record was pushed into the store with the value of ${field} being '${(0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.inspect)(payload.data)}', but ${field} is a hasMany relationship so the value must be an array. You should probably check your data payload or serializer.`, Array.isArray(payload.data)));\n      if (Array.isArray(payload.data)) {\n        for (let i = 0; i < payload.data.length; i++) {\n          assertRelationshipData(getStore(graph.store), identifier, payload.data[i], definition);\n        }\n      }\n    }\n  }\n}\nfunction isNew(identifier) {\n  if (!identifier.id) {\n    return true;\n  }\n  const cache = (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_1__.peekCache)(identifier);\n  return Boolean(cache?.isNew(identifier));\n}\nfunction isBelongsTo(relationship) {\n  return relationship.definition.kind === 'belongsTo';\n}\nfunction isImplicit(relationship) {\n  return relationship.definition.isImplicit;\n}\nfunction isHasMany(relationship) {\n  return relationship.definition.kind === 'hasMany';\n}\nfunction forAllRelatedIdentifiers(rel, cb) {\n  if (isBelongsTo(rel)) {\n    if (rel.remoteState) {\n      cb(rel.remoteState);\n    }\n    if (rel.localState && rel.localState !== rel.remoteState) {\n      cb(rel.localState);\n    }\n  } else if (isHasMany(rel)) {\n    // TODO\n    // rel.remoteMembers.forEach(cb);\n    // might be simpler if performance is not a concern\n    for (let i = 0; i < rel.remoteState.length; i++) {\n      const inverseIdentifier = rel.remoteState[i];\n      cb(inverseIdentifier);\n    }\n    rel.additions?.forEach(cb);\n  } else {\n    rel.localMembers.forEach(cb);\n    rel.remoteMembers.forEach(inverseIdentifier => {\n      if (!rel.localMembers.has(inverseIdentifier)) {\n        cb(inverseIdentifier);\n      }\n    });\n  }\n}\n\n/*\n  Removes the given identifier from BOTH remote AND local state.\n\n  This method is useful when either a deletion or a rollback on a new record\n  needs to entirely purge itself from an inverse relationship.\n  */\nfunction removeIdentifierCompletelyFromRelationship(graph, relationship, value, silenceNotifications) {\n  if (isBelongsTo(relationship)) {\n    if (relationship.remoteState === value) {\n      relationship.remoteState = null;\n    }\n    if (relationship.localState === value) {\n      relationship.localState = null;\n      // This allows dematerialized inverses to be rematerialized\n      // we shouldn't be notifying here though, figure out where\n      // a notification was missed elsewhere.\n      if (!silenceNotifications) {\n        notifyChange(graph, relationship.identifier, relationship.definition.key);\n      }\n    }\n  } else if (isHasMany(relationship)) {\n    relationship.remoteMembers.delete(value);\n    relationship.additions?.delete(value);\n    const wasInRemovals = relationship.removals?.delete(value);\n    const canonicalIndex = relationship.remoteState.indexOf(value);\n    if (canonicalIndex !== -1) {\n      relationship.remoteState.splice(canonicalIndex, 1);\n    }\n    if (!wasInRemovals) {\n      const currentIndex = relationship.localState?.indexOf(value);\n      if (currentIndex !== -1 && currentIndex !== undefined) {\n        relationship.localState.splice(currentIndex, 1);\n        // This allows dematerialized inverses to be rematerialized\n        // we shouldn't be notifying here though, figure out where\n        // a notification was missed elsewhere.\n        if (!silenceNotifications) {\n          notifyChange(graph, relationship.identifier, relationship.definition.key);\n        }\n      }\n    }\n  } else {\n    relationship.remoteMembers.delete(value);\n    relationship.localMembers.delete(value);\n  }\n}\n\n// TODO add silencing at the graph level\nfunction notifyChange(graph, identifier, key) {\n  if (identifier === graph._removing) {\n    return;\n  }\n  graph.store.notifyChange(identifier, 'relationships', key);\n}\nfunction assertRelationshipData(store, identifier, data, meta) {\n  ( true && !(!Array.isArray(data)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`A ${identifier.type} record was pushed into the store with the value of ${meta.key} being '${JSON.stringify(data)}', but ${meta.key} is a belongsTo relationship so the value must not be an array. You should probably check your data payload or serializer.`, !Array.isArray(data)));\n  ( true && !(data === null || 'type' in data && typeof data.type === 'string' && data.type.length) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Encountered a relationship identifier without a type for the ${meta.kind} relationship '${meta.key}' on <${identifier.type}:${String(identifier.id)}>, expected an identifier with type '${meta.type}' but found\\n\\n'${JSON.stringify(data, null, 2)}'\\n\\nPlease check your serializer and make sure it is serializing the relationship payload into a JSON API format.`, data === null || 'type' in data && typeof data.type === 'string' && data.type.length));\n  ( true && !(data === null || !!coerceId(data.id)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Encountered a relationship identifier without an id for the ${meta.kind} relationship '${meta.key}' on <${identifier.type}:${String(identifier.id)}>, expected an identifier but found\\n\\n'${JSON.stringify(data, null, 2)}'\\n\\nPlease check your serializer and make sure it is serializing the relationship payload into a JSON API format.`, data === null || !!coerceId(data.id)));\n  if (data?.type === meta.type) {\n    ( true && !(store.getSchemaDefinitionService().doesTypeExist(data.type)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Missing Schema: Encountered a relationship identifier { type: '${data.type}', id: '${String(data.id)}' } for the '${identifier.type}.${meta.key}' ${meta.kind} relationship on <${identifier.type}:${String(identifier.id)}>, but no schema exists for that type.`, store.getSchemaDefinitionService().doesTypeExist(data.type)));\n  } else {\n    ( true && !(data === null || !data.type || store.getSchemaDefinitionService().doesTypeExist(data.type)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Missing Schema: Encountered a relationship identifier with type '${data.type}' for the ${meta.kind} relationship '${meta.key}' on <${identifier.type}:${String(identifier.id)}>, Expected an identifier with type '${meta.type}'. No schema was found for '${data.type}'.`, data === null || !data.type || store.getSchemaDefinitionService().doesTypeExist(data.type)));\n  }\n}\n\n/*\n  Assert that `addedRecord` has a valid type so it can be added to the\n  relationship of the `record`.\n\n  The assert basically checks if the `addedRecord` can be added to the\n  relationship (specified via `relationshipMeta`) of the `record`.\n\n  This utility should only be used internally, as both record parameters must\n  be stable record identifiers and the `relationshipMeta` needs to be the meta\n  information about the relationship, retrieved via\n  `record.relationshipFor(key)`.\n*/\nlet assertPolymorphicType;\nlet assertInheritedSchema;\n{\n  function validateSchema(definition, meta) {\n    const errors = new Map();\n    if (definition.inverseKey !== meta.name) {\n      errors.set('name', ` <---- should be '${definition.inverseKey}'`);\n    }\n    if (definition.inverseType !== meta.type) {\n      errors.set('type', ` <---- should be '${definition.inverseType}'`);\n    }\n    if (definition.inverseKind !== meta.kind) {\n      errors.set('type', ` <---- should be '${definition.inverseKind}'`);\n    }\n    if (definition.inverseIsAsync !== meta.options.async) {\n      errors.set('async', ` <---- should be ${definition.inverseIsAsync}`);\n    }\n    if (definition.inverseIsPolymorphic && definition.inverseIsPolymorphic !== meta.options.polymorphic) {\n      errors.set('polymorphic', ` <---- should be ${definition.inverseIsPolymorphic}`);\n    }\n    if (definition.key !== meta.options.inverse) {\n      errors.set('inverse', ` <---- should be '${definition.key}'`);\n    }\n    if (definition.type !== meta.options.as) {\n      errors.set('as', ` <---- should be '${definition.type}'`);\n    }\n    return errors;\n  }\n  function expectedSchema(definition) {\n    return printSchema({\n      name: definition.inverseKey,\n      type: definition.inverseType,\n      kind: definition.inverseKind,\n      options: {\n        as: definition.type,\n        async: definition.inverseIsAsync,\n        polymorphic: definition.inverseIsPolymorphic || false,\n        inverse: definition.key\n      }\n    });\n  }\n  function printSchema(config, errors) {\n    return `\n\n\\`\\`\\`\n{\n  ${config.name}: {\n    name: '${config.name}',${errors?.get('name') || ''}\n    type: '${config.type}',${errors?.get('type') || ''}\n    kind: '${config.kind}',${errors?.get('kind') || ''}\n    options: {\n      as: '${config.options.as}',${errors?.get('as') || ''}\n      async: ${config.options.async},${errors?.get('async') || ''}\n      polymorphic: ${config.options.polymorphic},${errors?.get('polymorphic') || ''}\n      inverse: '${config.options.inverse}'${errors?.get('inverse') || ''}\n    }\n  }\n}\n\\`\\`\\`\n\n`;\n  }\n  function metaFrom(definition) {\n    return {\n      name: definition.key,\n      type: definition.type,\n      kind: definition.kind,\n      options: {\n        async: definition.isAsync,\n        polymorphic: definition.isPolymorphic,\n        inverse: definition.inverseKey\n      }\n    };\n  }\n  function inverseMetaFrom(definition) {\n    return {\n      name: definition.inverseKey,\n      type: definition.inverseType,\n      kind: definition.inverseKind,\n      options: {\n        as: definition.isPolymorphic ? definition.type : undefined,\n        async: definition.inverseIsAsync,\n        polymorphic: definition.inverseIsPolymorphic,\n        inverse: definition.key\n      }\n    };\n  }\n  function inverseDefinition(definition) {\n    return {\n      key: definition.inverseKey,\n      type: definition.inverseType,\n      kind: definition.inverseKind,\n      isAsync: definition.inverseIsAsync,\n      isPolymorphic: true,\n      isCollection: definition.inverseIsCollection,\n      isImplicit: definition.inverseIsImplicit,\n      inverseKey: definition.key,\n      inverseType: definition.type,\n      inverseKind: definition.kind,\n      inverseIsAsync: definition.isAsync,\n      inverseIsPolymorphic: definition.isPolymorphic,\n      inverseIsImplicit: definition.isImplicit,\n      inverseIsCollection: definition.isCollection,\n      resetOnRemoteUpdate: definition.resetOnRemoteUpdate\n    };\n  }\n  function definitionWithPolymorphic(definition) {\n    return Object.assign({}, definition, {\n      inverseIsPolymorphic: true\n    });\n  }\n  assertInheritedSchema = function assertInheritedSchema(definition, type) {\n    let meta1 = metaFrom(definition);\n    let meta2 = inverseMetaFrom(definition);\n    let errors1 = validateSchema(inverseDefinition(definition), meta1);\n    let errors2 = validateSchema(definitionWithPolymorphic(definition), meta2);\n    if (errors2.size === 0 && errors1.size > 0) {\n      throw new Error(`The schema for the relationship '${type}.${definition.key}' is not configured to satisfy '${definition.inverseType}' and thus cannot utilize the '${definition.inverseType}.${definition.key}' relationship to connect with '${definition.type}.${definition.inverseKey}'\\n\\nIf using this relationship in a polymorphic manner is desired, the relationships schema definition for '${type}' should include:${printSchema(meta1, errors1)}`);\n    } else if (errors1.size > 0) {\n      throw new Error(`The schema for the relationship '${type}.${definition.key}' is not configured to satisfy '${definition.inverseType}' and thus cannot utilize the '${definition.inverseType}.${definition.key}' relationship to connect with '${definition.type}.${definition.inverseKey}'\\n\\nIf using this relationship in a polymorphic manner is desired, the relationships schema definition for '${type}' should include:${printSchema(meta1, errors1)} and the relationships schema definition for '${definition.type}' should include:${printSchema(meta2, errors2)}`);\n    } else if (errors2.size > 0) {\n      throw new Error(`The schema for the relationship '${type}.${definition.key}' satisfies '${definition.inverseType}' but cannot utilize the '${definition.inverseType}.${definition.key}' relationship to connect with '${definition.type}.${definition.inverseKey}' because that relationship is not polymorphic.\\n\\nIf using this relationship in a polymorphic manner is desired, the relationships schema definition for '${definition.type}' should include:${printSchema(meta2, errors2)}`);\n    }\n  };\n  assertPolymorphicType = function assertPolymorphicType(parentIdentifier, parentDefinition, addedIdentifier, store) {\n    if (parentDefinition.inverseIsImplicit) {\n      return;\n    }\n    if (parentDefinition.isPolymorphic) {\n      let meta = store.getSchemaDefinitionService().relationshipsDefinitionFor(addedIdentifier)[parentDefinition.inverseKey];\n      ( true && !(meta) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`No '${parentDefinition.inverseKey}' field exists on '${addedIdentifier.type}'. To use this type in the polymorphic relationship '${parentDefinition.inverseType}.${parentDefinition.key}' the relationships schema definition for ${addedIdentifier.type} should include:${expectedSchema(parentDefinition)}`, meta));\n      ( true && !(!(meta.options.inverse === null && meta?.options.as?.length)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You should not specify both options.as and options.inverse as null on ${addedIdentifier.type}.${parentDefinition.inverseKey}, as if there is no inverse field there is no abstract type to conform to. You may have intended for this relationship to be polymorphic, or you may have mistakenly set inverse to null.`, !(meta.options.inverse === null && meta?.options.as?.length)));\n      let errors = validateSchema(parentDefinition, meta);\n      ( true && !(errors.size === 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`The schema for the relationship '${parentDefinition.inverseKey}' on '${addedIdentifier.type}' type does not correctly implement '${parentDefinition.type}' and thus cannot be assigned to the '${parentDefinition.key}' relationship in '${parentIdentifier.type}'. If using this record in this polymorphic relationship is desired, correct the errors in the schema shown below:${printSchema(meta, errors)}`, errors.size === 0));\n    } else if (addedIdentifier.type !== parentDefinition.type) {\n      // if we are not polymorphic\n      // then the addedIdentifier.type must be the same as the parentDefinition.type\n      let meta = store.getSchemaDefinitionService().relationshipsDefinitionFor(addedIdentifier)[parentDefinition.inverseKey];\n      if (meta?.options.as === parentDefinition.type) {\n        // inverse is likely polymorphic but missing the polymorphic flag\n        let meta = store.getSchemaDefinitionService().relationshipsDefinitionFor({\n          type: parentDefinition.inverseType\n        })[parentDefinition.key];\n        let errors = validateSchema(definitionWithPolymorphic(inverseDefinition(parentDefinition)), meta);\n        ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`The '<${addedIdentifier.type}>.${parentDefinition.inverseKey}' relationship cannot be used polymorphically because '<${parentDefinition.inverseType}>.${parentDefinition.key} is not a polymorphic relationship. To use this relationship in a polymorphic manner, fix the following schema issues on the relationships schema for '${parentDefinition.inverseType}':${printSchema(meta, errors)}`));\n      } else {\n        ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`The '${addedIdentifier.type}' type does not implement '${parentDefinition.type}' and thus cannot be assigned to the '${parentDefinition.key}' relationship in '${parentIdentifier.type}'. If this relationship should be polymorphic, mark ${parentDefinition.inverseType}.${parentDefinition.key} as \\`polymorphic: true\\` and ${addedIdentifier.type}.${parentDefinition.inverseKey} as implementing it via \\`as: '${parentDefinition.type}'\\`.`));\n      }\n    }\n  };\n}\n\n/*\n    case many:1\n    ========\n    In a bi-directional graph with Many:1 edges, adding a value\n    results in up-to 3 discrete value transitions, while removing\n    a value is only 2 transitions.\n\n    For adding C to A\n    If: A <<-> B, C <->> D is the initial state,\n    and: B <->> A <<-> C, D is the final state\n\n    then we would undergo the following transitions.\n\n    add C to A\n    remove C from D\n    add A to C\n\n    For removing B from A\n    If: A <<-> B, C <->> D is the initial state,\n    and: A, B, C <->> D is the final state\n\n    then we would undergo the following transitions.\n\n    remove B from A\n    remove A from B\n\n    case many:many\n    ===========\n    In a bi-directional graph with Many:Many edges, adding or\n    removing a value requires only 2 value transitions.\n\n    For Adding\n    If: A<<->>B, C<<->>D is the initial state (double arrows representing the many side)\n    And: D<<->>C<<->>A<<->>B is the final state\n\n    Then we would undergo two transitions.\n\n    add C to A.\n    add A to C\n\n    For Removing\n    If: A<<->>B, C<<->>D is the initial state (double arrows representing the many side)\n    And: A, B, C<<->>D is the final state\n\n    Then we would undergo two transitions.\n\n    remove B from A\n    remove A from B\n\n    case many:?\n    ========\n    In a uni-directional graph with Many:? edges (modeled in EmberData with `inverse:null`) with\n    artificial (implicit) inverses, replacing a value results in 2 discrete value transitions.\n    This is because a Many:? relationship is effectively Many:Many.\n  */\nfunction replaceRelatedRecords(graph, op, isRemote) {\n  if (isRemote) {\n    replaceRelatedRecordsRemote(graph, op, isRemote);\n  } else {\n    replaceRelatedRecordsLocal(graph, op, isRemote);\n  }\n}\nfunction replaceRelatedRecordsLocal(graph, op, isRemote) {\n  const identifiers = op.value;\n  const relationship = graph.get(op.record, op.field);\n  ( true && !(isHasMany(relationship)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`expected hasMany relationship`, isHasMany(relationship)));\n  relationship.state.hasReceivedData = true;\n  const {\n    additions,\n    removals\n  } = relationship;\n  const {\n    inverseKey,\n    type\n  } = relationship.definition;\n  const {\n    record\n  } = op;\n  const wasDirty = relationship.isDirty;\n  relationship.isDirty = false;\n  const onAdd = identifier => {\n    // Since we are diffing against the remote state, we check\n    // if our previous local state did not contain this identifier\n    const removalsHas = removals?.has(identifier);\n    if (removalsHas || !additions?.has(identifier)) {\n      if (type !== identifier.type) {\n        {\n          assertPolymorphicType(relationship.identifier, relationship.definition, identifier, graph.store);\n        }\n        graph.registerPolymorphicType(type, identifier.type);\n      }\n      relationship.isDirty = true;\n      addToInverse(graph, identifier, inverseKey, op.record, isRemote);\n      if (removalsHas) {\n        removals.delete(identifier);\n      }\n    }\n  };\n  const onRemove = identifier => {\n    // Since we are diffing against the remote state, we check\n    // if our previous local state had contained this identifier\n    const additionsHas = additions?.has(identifier);\n    if (additionsHas || !removals?.has(identifier)) {\n      relationship.isDirty = true;\n      removeFromInverse(graph, identifier, inverseKey, record, isRemote);\n      if (additionsHas) {\n        additions.delete(identifier);\n      }\n    }\n  };\n  const diff = diffCollection(identifiers, relationship, onAdd, onRemove);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  relationship.isDirty || diff.changed;\n\n  // any additions no longer in the local state\n  // need to be removed from the inverse\n  if (additions && additions.size > 0) {\n    additions.forEach(identifier => {\n      if (!diff.add.has(identifier)) {\n        onRemove(identifier);\n      }\n    });\n  }\n\n  // any removals no longer in the local state\n  // need to be added back to the inverse\n  if (removals && removals.size > 0) {\n    removals.forEach(identifier => {\n      if (!diff.del.has(identifier)) {\n        onAdd(identifier);\n      }\n    });\n  }\n  relationship.additions = diff.add;\n  relationship.removals = diff.del;\n  relationship.localState = diff.finalState;\n  relationship.isDirty = wasDirty;\n  if (!wasDirty /*&& becameDirty // TODO to guard like this we need to detect reorder when diffing local */) {\n    notifyChange(graph, op.record, op.field);\n  }\n}\nfunction replaceRelatedRecordsRemote(graph, op, isRemote) {\n  const identifiers = op.value;\n  const relationship = graph.get(op.record, op.field);\n  ( true && !(isHasMany(relationship)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You can only '${op.op}' on a hasMany relationship. ${op.record.type}.${op.field} is a ${relationship.definition.kind}`, isHasMany(relationship)));\n  if (isRemote) {\n    graph._addToTransaction(relationship);\n  }\n  relationship.state.hasReceivedData = true;\n\n  // cache existing state\n  const {\n    definition\n  } = relationship;\n  const {\n    type\n  } = relationship.definition;\n  const diff = diffCollection(identifiers, relationship, identifier => {\n    if (type !== identifier.type) {\n      {\n        assertPolymorphicType(relationship.identifier, relationship.definition, identifier, graph.store);\n      }\n      graph.registerPolymorphicType(type, identifier.type);\n    }\n    // commit additions\n    // TODO build this into the diff?\n    // because we are not dirty if this was a committed local addition\n    if (relationship.additions?.has(identifier)) {\n      relationship.additions.delete(identifier);\n    } else {\n      relationship.isDirty = true;\n    }\n    addToInverse(graph, identifier, definition.inverseKey, op.record, isRemote);\n  }, identifier => {\n    // commit removals\n    // TODO build this into the diff?\n    // because we are not dirty if this was a committed local addition\n    if (relationship.removals?.has(identifier)) {\n      relationship.removals.delete(identifier);\n    } else {\n      relationship.isDirty = true;\n    }\n    removeFromInverse(graph, identifier, definition.inverseKey, op.record, isRemote);\n  });\n\n  // replace existing state\n  relationship.remoteMembers = diff.finalSet;\n  relationship.remoteState = diff.finalState;\n\n  // changed also indicates a change in order\n  if (diff.changed) {\n    relationship.isDirty = true;\n  }\n\n  // TODO unsure if we need this but it\n  // may allow us to more efficiently patch\n  // the associated ManyArray\n  relationship._diff = diff;\n  {\n    // only do this for legacy hasMany, not collection\n    // and provide a way to incrementally migrate\n    if (relationship.definition.kind === 'hasMany' && relationship.definition.resetOnRemoteUpdate !== false) {\n      const deprecationInfo = {\n        removals: [],\n        additions: [],\n        triggered: false\n      };\n      if (relationship.removals) {\n        relationship.isDirty = true;\n        relationship.removals.forEach(identifier => {\n          deprecationInfo.triggered = true;\n          deprecationInfo.removals.push(identifier);\n          // reverse the removal\n          // if we are still in removals at this point then\n          // we were not \"committed\" which means we are present\n          // in the remoteMembers. So we \"add back\" on the inverse.\n          addToInverse(graph, identifier, definition.inverseKey, op.record, isRemote);\n        });\n        relationship.removals = null;\n      }\n      if (relationship.additions) {\n        relationship.additions.forEach(identifier => {\n          // reverse the addition\n          // if we are still in additions at this point then\n          // we were not \"committed\" which means we are not present\n          // in the remoteMembers. So we \"remove\" from the inverse.\n          // however we only do this if we are not a \"new\" record.\n          if (!isNew(identifier)) {\n            deprecationInfo.triggered = true;\n            deprecationInfo.additions.push(identifier);\n            relationship.isDirty = true;\n            relationship.additions.delete(identifier);\n            removeFromInverse(graph, identifier, definition.inverseKey, op.record, isRemote);\n          }\n        });\n        if (relationship.additions.size === 0) {\n          relationship.additions = null;\n        }\n      }\n      if (deprecationInfo.triggered) {\n        ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`EmberData is changing the default semantics of updates to the remote state of relationships.\\n\\nThe following local state was cleared from the <${relationship.identifier.type}>.${relationship.definition.key} hasMany relationship but will not be once this deprecation is resolved by opting into the new behavior:\\n\\n\\tAdded: [${deprecationInfo.additions.map(i => i.lid).join(', ')}]\\n\\tRemoved: [${deprecationInfo.removals.map(i => i.lid).join(', ')}]`, false, {\n          id: 'ember-data:deprecate-relationship-remote-update-clearing-local-state',\n          for: 'ember-data',\n          since: {\n            enabled: '5.3',\n            available: '5.3'\n          },\n          until: '6.0',\n          url: 'https://deprecations.emberjs.com/v5.x#ember-data-deprecate-relationship-remote-update-clearing-local-state'\n        }));\n      }\n    }\n  }\n  if (relationship.isDirty) {\n    flushCanonical(graph, relationship);\n  }\n}\nfunction addToInverse(graph, identifier, key, value, isRemote) {\n  const relationship = graph.get(identifier, key);\n  const {\n    type\n  } = relationship.definition;\n  if (type !== value.type) {\n    {\n      assertPolymorphicType(relationship.identifier, relationship.definition, value, graph.store);\n    }\n    graph.registerPolymorphicType(type, value.type);\n  }\n  if (isBelongsTo(relationship)) {\n    relationship.state.hasReceivedData = true;\n    relationship.state.isEmpty = false;\n    if (isRemote) {\n      graph._addToTransaction(relationship);\n      if (relationship.remoteState !== null) {\n        removeFromInverse(graph, relationship.remoteState, relationship.definition.inverseKey, identifier, isRemote);\n      }\n      relationship.remoteState = value;\n    }\n    if (relationship.localState !== value) {\n      if (!isRemote && relationship.localState) {\n        removeFromInverse(graph, relationship.localState, relationship.definition.inverseKey, identifier, isRemote);\n      }\n      relationship.localState = value;\n      notifyChange(graph, identifier, key);\n    }\n  } else if (isHasMany(relationship)) {\n    if (isRemote) {\n      // TODO this needs to alert stuffs\n      // And patch state better\n      // This is almost definitely wrong\n      // WARNING WARNING WARNING\n\n      if (!relationship.remoteMembers.has(value)) {\n        graph._addToTransaction(relationship);\n        relationship.remoteState.push(value);\n        relationship.remoteMembers.add(value);\n        if (relationship.additions?.has(value)) {\n          relationship.additions.delete(value);\n        } else {\n          relationship.isDirty = true;\n          relationship.state.hasReceivedData = true;\n          flushCanonical(graph, relationship);\n        }\n      }\n    } else {\n      if (_addLocal(graph, identifier, relationship, value, null)) {\n        notifyChange(graph, identifier, key);\n      }\n    }\n  } else {\n    if (isRemote) {\n      if (!relationship.remoteMembers.has(value)) {\n        relationship.remoteMembers.add(value);\n        relationship.localMembers.add(value);\n      }\n    } else {\n      if (!relationship.localMembers.has(value)) {\n        relationship.localMembers.add(value);\n      }\n    }\n  }\n}\nfunction notifyInverseOfPotentialMaterialization(graph, identifier, key, value, isRemote) {\n  const relationship = graph.get(identifier, key);\n  if (isHasMany(relationship) && isRemote && relationship.remoteMembers.has(value)) {\n    notifyChange(graph, identifier, key);\n  }\n}\nfunction removeFromInverse(graph, identifier, key, value, isRemote) {\n  const relationship = graph.get(identifier, key);\n  if (isBelongsTo(relationship)) {\n    relationship.state.isEmpty = true;\n    if (isRemote) {\n      graph._addToTransaction(relationship);\n      relationship.remoteState = null;\n    }\n    if (relationship.localState === value) {\n      relationship.localState = null;\n      notifyChange(graph, identifier, key);\n    }\n  } else if (isHasMany(relationship)) {\n    if (isRemote) {\n      graph._addToTransaction(relationship);\n      if (_removeRemote(relationship, value)) {\n        notifyChange(graph, identifier, key);\n      }\n    } else {\n      if (_removeLocal(relationship, value)) {\n        notifyChange(graph, identifier, key);\n      }\n    }\n  } else {\n    if (isRemote) {\n      relationship.remoteMembers.delete(value);\n      relationship.localMembers.delete(value);\n    } else {\n      if (value && relationship.localMembers.has(value)) {\n        relationship.localMembers.delete(value);\n      }\n    }\n  }\n}\nfunction flushCanonical(graph, rel) {\n  graph._scheduleLocalSync(rel);\n}\nfunction replaceRelatedRecord(graph, op, isRemote = false) {\n  const relationship = graph.get(op.record, op.field);\n  ( true && !(isBelongsTo(relationship)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You can only '${op.op}' on a belongsTo relationship. ${op.record.type}.${op.field} is a ${relationship.definition.kind}`, isBelongsTo(relationship)));\n  if (isRemote) {\n    graph._addToTransaction(relationship);\n  }\n  const {\n    definition,\n    state\n  } = relationship;\n  const prop = isRemote ? 'remoteState' : 'localState';\n  const existingState = relationship[prop];\n\n  /*\n    case 1:1\n    ========\n    In a bi-directional graph with 1:1 edges, replacing a value\n    results in up-to 4 discrete value transitions.\n     If: A <-> B, C <-> D is the initial state,\n    and: A <-> C, B, D is the final state\n     then we would undergo the following 4 transitions.\n     remove A from B\n    add C to A\n    remove C from D\n    add A to C\n     case 1:many\n    ===========\n    In a bi-directional graph with 1:Many edges, replacing a value\n    results in up-to 3 discrete value transitions.\n     If: A<->>B<<->D, C<<->D is the initial state (double arrows representing the many side)\n    And: A<->>C<<->D, B<<->D is the final state\n     Then we would undergo three transitions.\n     remove A from B\n    add C to A.\n    add A to C\n     case 1:?\n    ========\n    In a uni-directional graph with 1:? edges (modeled in EmberData with `inverse:null`) with\n    artificial (implicit) inverses, replacing a value results in up-to 3 discrete value transitions.\n    This is because a 1:? relationship is effectively 1:many.\n     If: A->B, C->B is the initial state\n    And: A->C, C->B is the final state\n     Then we would undergo three transitions.\n     Remove A from B\n    Add C to A\n    Add A to C\n  */\n\n  // nothing for us to do\n  if (op.value === existingState) {\n    // if we were empty before but now know we are empty this needs to be true\n    state.hasReceivedData = true;\n    // if this is a remote update we still sync\n    if (isRemote) {\n      const {\n        localState\n      } = relationship;\n      // don't sync if localState is a new record and our remoteState is null\n      if (localState && isNew(localState) && !existingState) {\n        return;\n      }\n      if (existingState && localState === existingState) {\n        notifyInverseOfPotentialMaterialization(graph, existingState, definition.inverseKey, op.record, isRemote);\n      } else {\n        // if localState does not match existingState then we know\n        // we have a local mutation that has not been persisted yet\n        if (localState !== op.value && relationship.definition.resetOnRemoteUpdate !== false) {\n          relationship.localState = existingState;\n          ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`EmberData is changing the default semantics of updates to the remote state of relationships.\\n\\nThe following local state was cleared from the <${relationship.identifier.type}>.${relationship.definition.key} belongsTo relationship but will not be once this deprecation is resolved:\\n\\n\\t${localState ? 'Added: ' + localState.lid + '\\n\\t' : ''}${existingState ? 'Removed: ' + existingState.lid : ''}`, false, {\n            id: 'ember-data:deprecate-relationship-remote-update-clearing-local-state',\n            for: 'ember-data',\n            since: {\n              enabled: '5.3',\n              available: '5.3'\n            },\n            until: '6.0',\n            url: 'https://deprecations.emberjs.com/v5.x#ember-data-deprecate-relationship-remote-update-clearing-local-state'\n          }));\n          notifyChange(graph, relationship.identifier, relationship.definition.key);\n        }\n      }\n    }\n    return;\n  }\n\n  // remove this value from the inverse if required\n  if (existingState) {\n    removeFromInverse(graph, existingState, definition.inverseKey, op.record, isRemote);\n  }\n\n  // update value to the new value\n  relationship[prop] = op.value;\n  state.hasReceivedData = true;\n  state.isEmpty = op.value === null;\n  state.isStale = false;\n  state.hasFailedLoadAttempt = false;\n  if (op.value) {\n    if (definition.type !== op.value.type) {\n      // assert(\n      //   `The '<${definition.inverseType}>.${op.field}' relationship expects only '${definition.type}' records since it is not polymorphic. Received a Record of type '${op.value.type}'`,\n      //   definition.isPolymorphic\n      // );\n\n      // TODO this should now handle the deprecation warning if isPolymorphic is not set\n      // but the record does turn out to be polymorphic\n      // this should still assert if the user is relying on legacy inheritance/mixins to\n      // provide polymorphic behavior and has not yet added the polymorphic flags\n      {\n        assertPolymorphicType(relationship.identifier, definition, op.value, graph.store);\n      }\n      graph.registerPolymorphicType(definition.type, op.value.type);\n    }\n    addToInverse(graph, op.value, definition.inverseKey, op.record, isRemote);\n  }\n  if (isRemote) {\n    const {\n      localState,\n      remoteState\n    } = relationship;\n    if (localState && isNew(localState) && !remoteState) {\n      return;\n    }\n    // when localState does not match the new remoteState and\n    // localState === existingState then we had no local mutation\n    // and we can safely sync the new remoteState to local\n    if (localState !== remoteState && localState === existingState) {\n      relationship.localState = remoteState;\n      notifyChange(graph, relationship.identifier, relationship.definition.key);\n      // But when localState does not match the new remoteState and\n      // and localState !== existingState then we know we have a local mutation\n      // that has not been persisted yet.\n    } else {\n      if (localState !== remoteState && localState !== existingState && relationship.definition.resetOnRemoteUpdate !== false) {\n        relationship.localState = existingState;\n        ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`EmberData is changing the default semantics of updates to the remote state of relationships.\\n\\nThe following local state was cleared from the <${relationship.identifier.type}>.${relationship.definition.key} belongsTo relationship but will not be once this deprecation is resolved:\\n\\n\\t${localState ? 'Added: ' + localState.lid + '\\n\\t' : ''}${existingState ? 'Removed: ' + existingState.lid : ''}`, false, {\n          id: 'ember-data:deprecate-relationship-remote-update-clearing-local-state',\n          for: 'ember-data',\n          since: {\n            enabled: '5.3',\n            available: '5.3'\n          },\n          until: '6.0',\n          url: 'https://deprecations.emberjs.com/v5.x#ember-data-deprecate-relationship-remote-update-clearing-local-state'\n        }));\n        notifyChange(graph, relationship.identifier, relationship.definition.key);\n      }\n    }\n  } else {\n    notifyChange(graph, relationship.identifier, relationship.definition.key);\n  }\n}\nfunction _deprecatedCompare(newState, newMembers, prevState, prevSet, onAdd, onDel) {\n  const newLength = newState.length;\n  const prevLength = prevState.length;\n  const iterationLength = Math.max(newLength, prevLength);\n  let changed = newMembers.size !== prevSet.size;\n  const added = new Set();\n  const removed = new Set();\n  const duplicates = new Map();\n  const finalSet = new Set();\n  const finalState = [];\n  for (let i = 0, j = 0; i < iterationLength; i++) {\n    let adv = false;\n    let member;\n\n    // accumulate anything added\n    if (i < newLength) {\n      member = newState[i];\n      if (!finalSet.has(member)) {\n        finalState[j] = member;\n        finalSet.add(member);\n        adv = true;\n        if (!prevSet.has(member)) {\n          changed = true;\n          added.add(member);\n          onAdd(member);\n        }\n      } else {\n        let list = duplicates.get(member);\n        if (list === undefined) {\n          list = [];\n          duplicates.set(member, list);\n        }\n        list.push(i);\n      }\n    }\n\n    // accumulate anything removed\n    if (i < prevLength) {\n      const prevMember = prevState[i];\n\n      // detect reordering, adjusting index for duplicates\n      // j is always less than i and so if i < prevLength, j < prevLength\n      if (member !== prevState[j]) {\n        changed = true;\n      }\n      if (!newMembers.has(prevMember)) {\n        changed = true;\n        removed.add(prevMember);\n        onDel(prevMember);\n      }\n    } else if (adv && j < prevLength && member !== prevState[j]) {\n      changed = true;\n    }\n    if (adv) {\n      j++;\n    }\n  }\n  const diff = {\n    add: added,\n    del: removed,\n    finalState,\n    finalSet,\n    changed\n  };\n  return {\n    diff,\n    duplicates\n  };\n}\nfunction _compare(finalState, finalSet, prevState, prevSet, onAdd, onDel) {\n  const finalLength = finalState.length;\n  const prevLength = prevState.length;\n  const iterationLength = Math.max(finalLength, prevLength);\n  const equalLength = finalLength === prevLength;\n  let changed = finalSet.size !== prevSet.size;\n  const added = new Set();\n  const removed = new Set();\n  for (let i = 0; i < iterationLength; i++) {\n    let member;\n\n    // accumulate anything added\n    if (i < finalLength) {\n      member = finalState[i];\n      if (!prevSet.has(member)) {\n        changed = true;\n        added.add(member);\n        onAdd(member);\n      }\n    }\n\n    // accumulate anything removed\n    if (i < prevLength) {\n      const prevMember = prevState[i];\n\n      // detect reordering\n      if (equalLength && member !== prevMember) {\n        changed = true;\n      }\n      if (!finalSet.has(prevMember)) {\n        changed = true;\n        removed.add(prevMember);\n        onDel(prevMember);\n      }\n    }\n  }\n  return {\n    add: added,\n    del: removed,\n    finalState,\n    finalSet,\n    changed\n  };\n}\nfunction diffCollection(finalState, relationship, onAdd, onDel) {\n  const finalSet = new Set(finalState);\n  const {\n    remoteState,\n    remoteMembers\n  } = relationship;\n  {\n    if (finalState.length !== finalSet.size) {\n      const {\n        diff,\n        duplicates\n      } = _deprecatedCompare(finalState, finalSet, remoteState, remoteMembers, onAdd, onDel);\n      {\n        ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`Expected all entries in the relationship ${relationship.definition.type}:${relationship.definition.key} to be unique, see log for a list of duplicate entry indeces`, false, {\n          id: 'ember-data:deprecate-non-unique-relationship-entries',\n          for: 'ember-data',\n          until: '6.0',\n          since: {\n            available: '5.3',\n            enabled: '5.3'\n          }\n        })); // eslint-disable-next-line no-console\n        console.log(duplicates);\n      }\n      return diff;\n    }\n  }\n  return _compare(finalState, finalSet, remoteState, remoteMembers, onAdd, onDel);\n}\nfunction computeLocalState(storage) {\n  if (!storage.isDirty) {\n    ( true && !(Array.isArray(storage.localState)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected localState to be present`, Array.isArray(storage.localState)));\n    return storage.localState;\n  }\n  const state = storage.remoteState.slice();\n  storage.removals?.forEach(v => {\n    const index = state.indexOf(v);\n    state.splice(index, 1);\n  });\n  storage.additions?.forEach(v => {\n    state.push(v);\n  });\n  storage.localState = state;\n  storage.isDirty = false;\n  return state;\n}\nfunction _addLocal(graph, record, relationship, value, index) {\n  const {\n    remoteMembers,\n    removals\n  } = relationship;\n  let additions = relationship.additions;\n  const hasPresence = remoteMembers.has(value) || additions?.has(value);\n  if (hasPresence && !removals?.has(value)) {\n    ( true && !(hasPresence && !removals?.has(value)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Attempted to add the resource '${value.lid}' to the collection <${relationship.identifier.type}>.${relationship.definition.key} it was already in`, hasPresence && !removals?.has(value)));\n    return false;\n  }\n  if (removals?.has(value)) {\n    removals.delete(value);\n  } else {\n    if (!additions) {\n      additions = relationship.additions = new Set();\n    }\n    relationship.state.hasReceivedData = true;\n    additions.add(value);\n    const {\n      type\n    } = relationship.definition;\n    if (type !== value.type) {\n      {\n        assertPolymorphicType(record, relationship.definition, value, graph.store);\n      }\n      graph.registerPolymorphicType(value.type, type);\n    }\n  }\n\n  // if we have existing localState\n  // and we have an index\n  // apply the change, as this is more efficient\n  // than recomputing localState and\n  // it allows us to preserve local ordering\n  // to a small extend. Local ordering should not\n  // be relied upon as any remote change will blow it away\n  if (relationship.localState) {\n    if (index !== null) {\n      relationship.localState.splice(index, 0, value);\n    } else {\n      relationship.localState.push(value);\n    }\n  }\n  ( true && !(relationship.localState || relationship.isDirty) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected relationship to be dirty when adding a local mutation`, relationship.localState || relationship.isDirty));\n  return true;\n}\nfunction _removeLocal(relationship, value) {\n  ( true && !(value) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`expected an identifier to remove from the collection relationship`, value));\n  const {\n    remoteMembers,\n    additions\n  } = relationship;\n  let removals = relationship.removals;\n  const hasPresence = remoteMembers.has(value) || additions?.has(value);\n  if (!hasPresence || removals?.has(value)) {\n    ( true && !(!hasPresence || removals?.has(value)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Attempted to remove the resource '${value.lid}' from the collection <${relationship.identifier.type}>.${relationship.definition.key} but it was not present`, !hasPresence || removals?.has(value)));\n    return false;\n  }\n  if (additions?.has(value)) {\n    additions.delete(value);\n  } else {\n    if (!removals) {\n      removals = relationship.removals = new Set();\n    }\n    removals.add(value);\n  }\n\n  // if we have existing localState\n  // apply the change, as this is more efficient\n  // than recomputing localState and\n  // it allows us to preserve local ordering\n  // to a small extend. Local ordering should not\n  // be relied upon as any remote change will blow it away\n  if (relationship.localState) {\n    const index = relationship.localState.indexOf(value);\n    ( true && !(index !== -1) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot remove a resource that is not present`, index !== -1));\n    relationship.localState.splice(index, 1);\n  }\n  ( true && !(relationship.localState || relationship.isDirty) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected relationship to be dirty when performing a local mutation`, relationship.localState || relationship.isDirty));\n  return true;\n}\nfunction _removeRemote(relationship, value) {\n  ( true && !(value) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`expected an identifier to remove from the collection relationship`, value));\n  const {\n    remoteMembers,\n    additions,\n    removals,\n    remoteState\n  } = relationship;\n  ( true && !(remoteMembers.has(value)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot remove a resource that is not present`, remoteMembers.has(value)));\n  if (!remoteMembers.has(value)) {\n    return false;\n  }\n\n  // remove from remote state\n  remoteMembers.delete(value);\n  let index = remoteState.indexOf(value);\n  ( true && !(index !== -1) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot remove a resource that is not present`, index !== -1));\n  remoteState.splice(index, 1);\n\n  // remove from removals if present\n  if (removals?.has(value)) {\n    removals.delete(value);\n\n    // nothing more to do this was our state already\n    return false;\n  }\n  ( true && !(!additions?.has(value)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Remote state indicated removal of a resource that was present only as a local mutation`, !additions?.has(value))); // if we have existing localState\n  // and we have an index\n  // apply the change, as this is more efficient\n  // than recomputing localState and\n  // it allows us to preserve local ordering\n  // to a small extend. Local ordering should not\n  // be relied upon as any remote change will blow it away\n  if (relationship.localState) {\n    index = relationship.localState.indexOf(value);\n    ( true && !(index !== -1) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot remove a resource that is not present`, index !== -1));\n    relationship.localState.splice(index, 1);\n  }\n  ( true && !(relationship.localState || relationship.isDirty) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected relationship to be dirty when performing a local mutation`, relationship.localState || relationship.isDirty));\n  return true;\n}\nfunction rollbackRelationship(graph, identifier, field, relationship) {\n  if (isBelongsTo(relationship)) {\n    replaceRelatedRecord(graph, {\n      op: 'replaceRelatedRecord',\n      record: identifier,\n      field,\n      value: relationship.remoteState\n    }, false);\n  } else {\n    replaceRelatedRecords(graph, {\n      op: 'replaceRelatedRecords',\n      record: identifier,\n      field,\n      value: relationship.remoteState.slice()\n    }, false);\n  }\n}\n\n/**\n *\n * Given RHS (Right Hand Side)\n *\n * ```ts\n * class User extends Model {\n *   @hasMany('animal', { async: false, inverse: 'owner' }) pets;\n * }\n * ```\n *\n * Given LHS (Left Hand Side)\n *\n * ```ts\n * class Animal extends Model {\n *  @belongsTo('user', { async: false, inverse: 'pets' }) owner;\n * }\n * ```\n *\n * The UpgradedMeta for the RHS would be:\n *\n * ```ts\n * {\n *   kind: 'hasMany',\n *   key: 'pets',\n *   type: 'animal',\n *   isAsync: false,\n *   isImplicit: false,\n *   isCollection: true,\n *   isPolymorphic: false,\n *   inverseKind: 'belongsTo',\n *   inverseKey: 'owner',\n *   inverseType: 'user',\n *   inverseIsAsync: false,\n *   inverseIsImplicit: false,\n *   inverseIsCollection: false,\n *   inverseIsPolymorphic: false,\n * }\n * ```\n *\n * The UpgradeMeta for the LHS would be:\n *\n * ```ts\n * {\n *   kind: 'belongsTo',\n *   key: 'owner',\n *   type: 'user',\n *   isAsync: false,\n *   isImplicit: false,\n *   isCollection: false,\n *   isPolymorphic: false,\n *   inverseKind: 'hasMany',\n *   inverseKey: 'pets',\n *   inverseType: 'animal',\n *   inverseIsAsync: false,\n *   inverseIsImplicit: false,\n *   inverseIsCollection: true,\n *   inverseIsPolymorphic: false,\n * }\n * ```\n *\n *\n * @class UpgradedMeta\n * @internal\n */\nconst BOOL_LATER = null;\nconst STR_LATER = '';\nconst IMPLICIT_KEY_RAND = Date.now();\nfunction implicitKeyFor(type, key) {\n  return `implicit-${type}:${key}${IMPLICIT_KEY_RAND}`;\n}\nfunction syncMeta(definition, inverseDefinition) {\n  definition.inverseKind = inverseDefinition.kind;\n  definition.inverseKey = inverseDefinition.key;\n  definition.inverseType = inverseDefinition.type;\n  definition.inverseIsAsync = inverseDefinition.isAsync;\n  definition.inverseIsCollection = inverseDefinition.isCollection;\n  definition.inverseIsPolymorphic = inverseDefinition.isPolymorphic;\n  definition.inverseIsImplicit = inverseDefinition.isImplicit;\n  const resetOnRemoteUpdate = definition.resetOnRemoteUpdate === false || inverseDefinition.resetOnRemoteUpdate === false ? false : true;\n  definition.resetOnRemoteUpdate = resetOnRemoteUpdate;\n  inverseDefinition.resetOnRemoteUpdate = resetOnRemoteUpdate;\n}\nfunction upgradeMeta(meta) {\n  const niceMeta = {};\n  const options = meta.options;\n  niceMeta.kind = meta.kind;\n  niceMeta.key = meta.name;\n  niceMeta.type = meta.type;\n  ( true && !(typeof options?.async === 'boolean') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected relationship definition to specify async`, typeof options?.async === 'boolean'));\n  niceMeta.isAsync = options.async;\n  niceMeta.isImplicit = false;\n  niceMeta.isCollection = meta.kind === 'hasMany';\n  niceMeta.isPolymorphic = options && !!options.polymorphic;\n  niceMeta.inverseKey = options && options.inverse || STR_LATER;\n  niceMeta.inverseType = STR_LATER;\n  niceMeta.inverseIsAsync = BOOL_LATER;\n  niceMeta.inverseIsImplicit = options && options.inverse === null || BOOL_LATER;\n  niceMeta.inverseIsCollection = BOOL_LATER;\n  niceMeta.resetOnRemoteUpdate = options && options.resetOnRemoteUpdate === false ? false : true;\n  return niceMeta;\n}\nfunction assertConfiguration(info, type, key) {\n  {\n    const isSelfReferential = info.isSelfReferential;\n    if (isSelfReferential) {\n      return true;\n    }\n    const _isRHS = key === info.rhs_relationshipName && (type === info.rhs_baseModelName ||\n    // base or non-polymorphic\n    // if the other side is polymorphic then we need to scan our modelNames\n    info.lhs_isPolymorphic && info.rhs_modelNames.includes(type)); // polymorphic\n    const _isLHS = key === info.lhs_relationshipName && (type === info.lhs_baseModelName ||\n    // base or non-polymorphic\n    // if the other side is polymorphic then we need to scan our modelNames\n    info.rhs_isPolymorphic && info.lhs_modelNames.includes(type)); // polymorphic;\n\n    if (!_isRHS && !_isLHS) {\n      /*\n        this occurs when we are likely polymorphic but not configured to be polymorphic\n        most often due to extending a class that has a relationship definition on it.\n         e.g.\n         ```ts\n        class Pet extends Model {\n          @belongsTo('human', { async: false, inverse: 'pet' }) owner;\n        }\n        class Human extends Model {\n          @belongsTo('pet', { async: false, inverse: 'owner' }) pet;\n        }\n        class Farmer extends Human {}\n        ```\n         In the above case, the following would trigger this error:\n         ```ts\n        let pet = store.createRecord('pet');\n        let farmer = store.createRecord('farmer');\n        farmer.pet = pet; // error\n        ```\n         The correct way to fix this is to specify the polymorphic option on Pet\n        and to specify the abstract type 'human' on the Human base class.\n         ```ts\n        class Pet extends Model {\n          @belongsTo('human', { async: false, inverse: 'pet', polymorphic: true }) owner;\n        }\n        class Human extends Model {\n          @belongsTo('pet', { async: false, inverse: 'owner', as: 'human' }) pet;\n        }\n        class Farmer extends Human {}\n        ```\n         Alternatively both Human and Farmer could declare the relationship, because relationship\n        definitions are \"structural\".\n         ```ts\n        class Pet extends Model {\n          @belongsTo('human', { async: false, inverse: 'pet', polymorphic: true }) owner;\n        }\n        class Human extends Model {\n          @belongsTo('pet', { async: false, inverse: 'owner', as: 'human' }) pet;\n        }\n        class Farmer extends Model {\n          @belongsTo('pet', { async: false, inverse: 'owner', as: 'human' }) pet;\n        }\n        ```\n        */\n      if (key === info.lhs_relationshipName && info.lhs_modelNames.includes(type)) {\n        // parentIdentifier, parentDefinition, addedIdentifier, store\n        assertInheritedSchema(info.lhs_definition, type);\n      } else if (key === info.rhs_relationshipName && info.rhs_modelNames.includes(type)) {\n        assertInheritedSchema(info.lhs_definition, type);\n      }\n      // OPEN AN ISSUE :: we would like to improve our errors but need to understand what corner case got us here\n      throw new Error(`PLEASE OPEN AN ISSUE :: Found a relationship that is neither the LHS nor RHS of the same edge. This is not supported. Please report this to the EmberData team.`);\n    }\n    if (_isRHS && _isLHS) {\n      // not sure how we get here but it's probably the result of some form of inheritance\n      // without having specified polymorphism correctly leading to it not being self-referential\n      // OPEN AN ISSUE :: we would like to improve our errors but need to understand what corner case got us here\n      throw new Error(`PLEASE OPEN AN ISSUE :: Found a relationship that is both the LHS and RHS of the same edge but is not self-referential. This is not supported. Please report this to the EmberData team.`);\n    }\n  }\n}\nfunction isLHS(info, type, key) {\n  const isSelfReferential = info.isSelfReferential;\n  const isRelationship = key === info.lhs_relationshipName;\n  {\n    assertConfiguration(info, type, key);\n  }\n  if (isRelationship === true) {\n    return isSelfReferential === true ||\n    // itself\n    type === info.lhs_baseModelName ||\n    // base or non-polymorphic\n    // if the other side is polymorphic then we need to scan our modelNames\n    info.rhs_isPolymorphic && info.lhs_modelNames.includes(type) // polymorphic\n    ;\n  }\n  return false;\n}\nfunction upgradeDefinition(graph, identifier, propertyName, isImplicit = false) {\n  const cache = graph._definitionCache;\n  const storeWrapper = graph.store;\n  const polymorphicLookup = graph._potentialPolymorphicTypes;\n  const {\n    type\n  } = identifier;\n  let cached = /*#__NOINLINE__*/expandingGet(cache, type, propertyName);\n\n  // CASE: We have a cached resolution (null if no relationship exists)\n  if (cached !== undefined) {\n    return cached;\n  }\n  ( true && !(!isImplicit) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected to find relationship definition in the cache for the implicit relationship ${propertyName}`, !isImplicit));\n  const relationships = storeWrapper.getSchemaDefinitionService().relationshipsDefinitionFor(identifier);\n  ( true && !(relationships) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected to have a relationship definition for ${type} but none was found.`, relationships));\n  const meta = relationships[propertyName];\n  if (!meta) {\n    // TODO potentially we should just be permissive here since this is an implicit relationship\n    // and not require the lookup table to be populated\n    if (polymorphicLookup[type]) {\n      const altTypes = Object.keys(polymorphicLookup[type]);\n      for (let i = 0; i < altTypes.length; i++) {\n        const _cached = expandingGet(cache, altTypes[i], propertyName);\n        if (_cached) {\n          /*#__NOINLINE__*/expandingSet(cache, type, propertyName, _cached);\n          _cached.rhs_modelNames.push(type);\n          return _cached;\n        }\n      }\n    }\n\n    // CASE: We don't have a relationship at all\n    // we should only hit this in prod\n    ( true && !(meta) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a relationship schema for '${type}.${propertyName}', but no relationship schema was found.`, meta));\n    cache[type][propertyName] = null;\n    return null;\n  }\n  const definition = /*#__NOINLINE__*/upgradeMeta(meta);\n  let inverseDefinition;\n  let inverseKey;\n  const inverseType = definition.type;\n\n  // CASE: Inverse is explicitly null\n  if (definition.inverseKey === null) {\n    // TODO probably dont need this assertion if polymorphic\n    ( true && !(getStore(storeWrapper).modelFor(inverseType)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected the inverse model to exist`, getStore(storeWrapper).modelFor(inverseType)));\n    inverseDefinition = null;\n  } else {\n    inverseKey = /*#__NOINLINE__*/inverseForRelationship(getStore(storeWrapper), identifier, propertyName);\n\n    // CASE: If we are polymorphic, and we declared an inverse that is non-null\n    // we must assume that the lack of inverseKey means that there is no\n    // concrete type as the baseType, so we must construct and artificial\n    // placeholder\n    if (!inverseKey && definition.isPolymorphic && definition.inverseKey) {\n      inverseDefinition = {\n        kind: 'belongsTo',\n        // this must be updated when we find the first belongsTo or hasMany definition that matches\n        key: definition.inverseKey,\n        type: type,\n        isAsync: false,\n        // this must be updated when we find the first belongsTo or hasMany definition that matches\n        isImplicit: false,\n        isCollection: false,\n        // this must be updated when we find the first belongsTo or hasMany definition that matches\n        isPolymorphic: false\n      }; // the rest of the fields are populated by syncMeta\n\n      // CASE: Inverse resolves to null\n    } else if (!inverseKey) {\n      inverseDefinition = null;\n    } else {\n      // CASE: We have an explicit inverse or were able to resolve one\n      const inverseDefinitions = storeWrapper.getSchemaDefinitionService().relationshipsDefinitionFor({\n        type: inverseType\n      });\n      ( true && !(inverseDefinitions) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected to have a relationship definition for ${inverseType} but none was found.`, inverseDefinitions));\n      const metaFromInverse = inverseDefinitions[inverseKey];\n      ( true && !(metaFromInverse) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a relationship schema for '${inverseType}.${inverseKey}' to match the inverse of '${type}.${propertyName}', but no relationship schema was found.`, metaFromInverse));\n      inverseDefinition = upgradeMeta(metaFromInverse);\n    }\n  }\n\n  // CASE: We have no inverse\n  if (!inverseDefinition) {\n    // polish off meta\n    inverseKey = /*#__NOINLINE__*/implicitKeyFor(type, propertyName);\n    inverseDefinition = {\n      kind: 'implicit',\n      key: inverseKey,\n      type: type,\n      isAsync: false,\n      isImplicit: true,\n      isCollection: true,\n      // with implicits any number of records could point at us\n      isPolymorphic: false\n    }; // the rest of the fields are populated by syncMeta\n\n    syncMeta(definition, inverseDefinition);\n    syncMeta(inverseDefinition, definition);\n    const info = {\n      lhs_key: `${type}:${propertyName}`,\n      lhs_modelNames: [type],\n      lhs_baseModelName: type,\n      lhs_relationshipName: propertyName,\n      lhs_definition: definition,\n      lhs_isPolymorphic: definition.isPolymorphic,\n      rhs_key: inverseDefinition.key,\n      rhs_modelNames: [inverseType],\n      rhs_baseModelName: inverseType,\n      rhs_relationshipName: inverseDefinition.key,\n      rhs_definition: inverseDefinition,\n      rhs_isPolymorphic: false,\n      hasInverse: false,\n      isSelfReferential: type === inverseType,\n      // this could be wrong if we are self-referential but also polymorphic\n      isReflexive: false // we can't be reflexive if we don't define an inverse\n    };\n    expandingSet(cache, inverseType, inverseKey, info);\n    expandingSet(cache, type, propertyName, info);\n    return info;\n  }\n\n  // CASE: We do have an inverse\n  const baseType = inverseDefinition.type;\n\n  // TODO we want to assert this but this breaks all of our shoddily written tests\n  /*\n    if (DEBUG) {\n      let inverseDoubleCheck = inverseFor(inverseRelationshipName, store);\n       assert(`The ${inverseBaseModelName}:${inverseRelationshipName} relationship declares 'inverse: null', but it was resolved as the inverse for ${baseModelName}:${relationshipName}.`, inverseDoubleCheck);\n    }\n  */\n  // CASE: We may have already discovered the inverse for the baseModelName\n  // CASE: We have already discovered the inverse\n  ( true && !(typeof inverseKey === 'string' && inverseKey.length > 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`We should have determined an inverseKey by now, open an issue if this is hit`, typeof inverseKey === 'string' && inverseKey.length > 0));\n  cached = expandingGet(cache, baseType, propertyName) || expandingGet(cache, inverseType, inverseKey);\n  if (cached) {\n    // TODO this assert can be removed if the above assert is enabled\n    ( true && !(cached.hasInverse !== false) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`The ${inverseType}:${inverseKey} relationship declares 'inverse: null', but it was resolved as the inverse for ${type}:${propertyName}.`, cached.hasInverse !== false));\n    const _isLHS = cached.lhs_baseModelName === baseType;\n    const modelNames = _isLHS ? cached.lhs_modelNames : cached.rhs_modelNames;\n    // make this lookup easier in the future by caching the key\n    modelNames.push(type);\n    expandingSet(cache, type, propertyName, cached);\n    return cached;\n  }\n\n  // this is our first time so polish off the metas\n  syncMeta(definition, inverseDefinition);\n  syncMeta(inverseDefinition, definition);\n  const lhs_modelNames = [type];\n  if (type !== baseType) {\n    lhs_modelNames.push(baseType);\n  }\n  const isSelfReferential = baseType === inverseType;\n  const info = {\n    lhs_key: `${baseType}:${propertyName}`,\n    lhs_modelNames,\n    lhs_baseModelName: baseType,\n    lhs_relationshipName: propertyName,\n    lhs_definition: definition,\n    lhs_isPolymorphic: definition.isPolymorphic,\n    rhs_key: `${inverseType}:${inverseKey}`,\n    rhs_modelNames: [inverseType],\n    rhs_baseModelName: inverseType,\n    rhs_relationshipName: inverseKey,\n    rhs_definition: inverseDefinition,\n    rhs_isPolymorphic: inverseDefinition.isPolymorphic,\n    hasInverse: true,\n    isSelfReferential,\n    isReflexive: isSelfReferential && propertyName === inverseKey\n  };\n\n  // Create entries for the baseModelName as well as modelName to speed up\n  //  inverse lookups\n  expandingSet(cache, baseType, propertyName, info);\n  expandingSet(cache, type, propertyName, info);\n\n  // Greedily populate the inverse\n  expandingSet(cache, inverseType, inverseKey, info);\n  return info;\n}\nfunction inverseForRelationship(store, identifier, key) {\n  const definition = store.getSchemaDefinitionService().relationshipsDefinitionFor(identifier)[key];\n  if (!definition) {\n    return null;\n  }\n  ( true && !(definition.options?.inverse === null || typeof definition.options?.inverse === 'string' && definition.options.inverse.length > 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected the relationship defintion to specify the inverse type or null.`, definition.options?.inverse === null || typeof definition.options?.inverse === 'string' && definition.options.inverse.length > 0));\n  return definition.options.inverse;\n}\nfunction createState() {\n  return {\n    hasReceivedData: false,\n    isEmpty: true,\n    isStale: false,\n    hasFailedLoadAttempt: false,\n    shouldForceReload: false,\n    hasDematerializedInverse: false\n  };\n}\nfunction createCollectionEdge(definition, identifier) {\n  return {\n    definition,\n    identifier,\n    state: createState(),\n    remoteMembers: new Set(),\n    remoteState: [],\n    additions: null,\n    removals: null,\n    meta: null,\n    links: null,\n    localState: null,\n    isDirty: true,\n    transactionRef: 0,\n    _diff: undefined\n  };\n}\nfunction legacyGetCollectionRelationshipData(source) {\n  const payload = {};\n  if (source.state.hasReceivedData) {\n    payload.data = computeLocalState(source);\n  }\n  if (source.links) {\n    payload.links = source.links;\n  }\n  if (source.meta) {\n    payload.meta = source.meta;\n  }\n  return payload;\n}\nfunction createImplicitEdge(definition, identifier) {\n  return {\n    definition,\n    identifier,\n    localMembers: new Set(),\n    remoteMembers: new Set()\n  };\n}\n\n/*\n * @module @ember-data/graph\n *\n * Stores the data for one side of a \"single\" resource relationship.\n *\n * @class ResourceEdge\n * @internal\n */\n\nfunction createResourceEdge(definition, identifier) {\n  return {\n    definition,\n    identifier,\n    state: createState(),\n    transactionRef: 0,\n    localState: null,\n    remoteState: null,\n    meta: null,\n    links: null\n  };\n}\nfunction legacyGetResourceRelationshipData(source) {\n  let data;\n  const payload = {};\n  if (source.localState) {\n    data = source.localState;\n  }\n  if (source.localState === null && source.state.hasReceivedData) {\n    data = null;\n  }\n  if (source.links) {\n    payload.links = source.links;\n  }\n  if (data !== undefined) {\n    payload.data = data;\n  }\n  if (source.meta) {\n    payload.meta = source.meta;\n  }\n  return payload;\n}\nfunction addToRelatedRecords(graph, op, isRemote) {\n  ( true && !(!isRemote) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Graph does not yet support updating the remote state of a relationship via the ${op.op} operation`, !isRemote));\n  const {\n    record,\n    value,\n    index\n  } = op;\n  const relationship = graph.get(record, op.field);\n  ( true && !(isHasMany(relationship)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You can only '${op.op}' on a hasMany relationship. ${record.type}.${op.field} is a ${relationship.definition.kind}`, isHasMany(relationship)));\n  if (Array.isArray(value)) {\n    for (let i = 0; i < value.length; i++) {\n      addRelatedRecord(graph, relationship, record, value[i], index !== undefined ? index + i : index, isRemote);\n    }\n  } else {\n    addRelatedRecord(graph, relationship, record, value, index, isRemote);\n  }\n  notifyChange(graph, relationship.identifier, relationship.definition.key);\n}\nfunction addRelatedRecord(graph, relationship, record, value, index, isRemote) {\n  ( true && !(value) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`expected an identifier to add to the collection relationship`, value));\n  if (_addLocal(graph, record, relationship, value, index ?? null)) {\n    addToInverse(graph, value, relationship.definition.inverseKey, record, isRemote);\n  }\n}\nfunction mergeIdentifier(graph, op, relationships) {\n  Object.keys(relationships).forEach(key => {\n    const rel = relationships[key];\n    if (!rel) {\n      return;\n    }\n    mergeIdentifierForRelationship(graph, op, rel);\n  });\n}\nfunction mergeIdentifierForRelationship(graph, op, rel) {\n  rel.identifier = op.value;\n  forAllRelatedIdentifiers(rel, identifier => {\n    const inverse = graph.get(identifier, rel.definition.inverseKey);\n    mergeInRelationship(graph, inverse, op);\n  });\n}\nfunction mergeInRelationship(graph, rel, op) {\n  if (isBelongsTo(rel)) {\n    mergeBelongsTo(graph, rel, op);\n  } else if (isHasMany(rel)) {\n    mergeHasMany(graph, rel, op);\n  } else {\n    mergeImplicit(graph, rel, op);\n  }\n}\nfunction mergeBelongsTo(graph, rel, op) {\n  if (rel.remoteState === op.record) {\n    rel.remoteState = op.value;\n  }\n  if (rel.localState === op.record) {\n    rel.localState = op.record;\n    notifyChange(graph, rel.identifier, rel.definition.key);\n  }\n}\nfunction mergeHasMany(graph, rel, op) {\n  if (rel.remoteMembers.has(op.record)) {\n    rel.remoteMembers.delete(op.record);\n    rel.remoteMembers.add(op.value);\n    const index = rel.remoteState.indexOf(op.record);\n    rel.remoteState.splice(index, 1, op.value);\n    rel.isDirty = true;\n  }\n  if (rel.additions?.has(op.record)) {\n    rel.additions.delete(op.record);\n    rel.additions.add(op.value);\n    rel.isDirty = true;\n  }\n  if (rel.removals?.has(op.record)) {\n    rel.removals.delete(op.record);\n    rel.removals.add(op.value);\n    rel.isDirty = true;\n  }\n  if (rel.isDirty) {\n    notifyChange(graph, rel.identifier, rel.definition.key);\n  }\n}\nfunction mergeImplicit(graph, rel, op) {\n  if (rel.remoteMembers.has(op.record)) {\n    rel.remoteMembers.delete(op.record);\n    rel.remoteMembers.add(op.value);\n  }\n  if (rel.localMembers.has(op.record)) {\n    rel.localMembers.delete(op.record);\n    rel.localMembers.add(op.value);\n  }\n}\nfunction removeFromRelatedRecords(graph, op, isRemote) {\n  ( true && !(!isRemote) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Graph does not yet support updating the remote state of a relationship via the ${op.op} operation`, !isRemote));\n  const {\n    record,\n    value\n  } = op;\n  const relationship = graph.get(record, op.field);\n  ( true && !(isHasMany(relationship)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You can only '${op.op}' on a hasMany relationship. ${record.type}.${op.field} is a ${relationship.definition.kind}`, isHasMany(relationship))); // TODO we should potentially thread the index information through here\n  // when available as it may make it faster to remove from the local state\n  // when trying to patch more efficiently without blowing away the entire\n  // local state array\n  if (Array.isArray(value)) {\n    for (let i = 0; i < value.length; i++) {\n      removeRelatedRecord(graph, relationship, record, value[i], isRemote);\n    }\n  } else {\n    removeRelatedRecord(graph, relationship, record, value, isRemote);\n  }\n  notifyChange(graph, relationship.identifier, relationship.definition.key);\n}\nfunction removeRelatedRecord(graph, relationship, record, value, isRemote) {\n  ( true && !(value) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`expected an identifier to remove from the collection relationship`, value));\n  if (_removeLocal(relationship, value)) {\n    removeFromInverse(graph, value, relationship.definition.inverseKey, record, isRemote);\n  }\n}\n\n/*\n  This method normalizes a link to an \"links object\". If the passed link is\n  already an object it's returned without any modifications.\n\n  See http://jsonapi.org/format/#document-links for more information.\n*/\nfunction _normalizeLink(link) {\n  switch (typeof link) {\n    case 'object':\n      return link;\n    case 'string':\n      return {\n        href: link\n      };\n  }\n}\n\n/*\n    Updates the \"canonical\" or \"remote\" state of a relationship, replacing any existing\n    state and blowing away any local changes (excepting new records).\n*/\nfunction updateRelationshipOperation(graph, op) {\n  const relationship = graph.get(op.record, op.field);\n  ( true && !(isHasMany(relationship) || isBelongsTo(relationship)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot update an implicit relationship`, isHasMany(relationship) || isBelongsTo(relationship)));\n  const {\n    definition,\n    state,\n    identifier\n  } = relationship;\n  const {\n    isCollection\n  } = definition;\n  const payload = op.value;\n  let hasRelationshipDataProperty = false;\n  let hasUpdatedLink = false;\n  if (payload.meta) {\n    relationship.meta = payload.meta;\n  }\n  if (payload.data !== undefined) {\n    hasRelationshipDataProperty = true;\n    if (isCollection) {\n      // TODO deprecate this case. We\n      // have tests saying we support it.\n      if (payload.data === null) {\n        payload.data = [];\n      }\n      ( true && !(Array.isArray(payload.data)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected an array`, Array.isArray(payload.data)));\n      const cache = graph.store.identifierCache;\n      graph.update({\n        op: 'replaceRelatedRecords',\n        record: identifier,\n        field: op.field,\n        value: upgradeIdentifiers(payload.data, cache)\n      }, true);\n    } else {\n      graph.update({\n        op: 'replaceRelatedRecord',\n        record: identifier,\n        field: op.field,\n        value: payload.data ? graph.store.identifierCache.upgradeIdentifier(payload.data) : null\n      }, true);\n    }\n  } else if (definition.isAsync === false && !state.hasReceivedData) {\n    hasRelationshipDataProperty = true;\n    if (isCollection) {\n      graph.update({\n        op: 'replaceRelatedRecords',\n        record: identifier,\n        field: op.field,\n        value: []\n      }, true);\n    } else {\n      graph.update({\n        op: 'replaceRelatedRecord',\n        record: identifier,\n        field: op.field,\n        value: null\n      }, true);\n    }\n  }\n  if (payload.links) {\n    const originalLinks = relationship.links;\n    relationship.links = payload.links;\n    if (payload.links.related) {\n      const relatedLink = _normalizeLink(payload.links.related);\n      const currentLink = originalLinks && originalLinks.related ? _normalizeLink(originalLinks.related) : null;\n      const currentLinkHref = currentLink ? currentLink.href : null;\n      if (relatedLink && relatedLink.href && relatedLink.href !== currentLinkHref) {\n        ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`You pushed a record of type '${identifier.type}' with a relationship '${definition.key}' configured as 'async: false'. You've included a link but no primary data, this may be an error in your payload. EmberData will treat this relationship as known-to-be-empty.`, definition.isAsync || state.hasReceivedData, {\n          id: 'ds.store.push-link-for-sync-relationship'\n        }));\n        ( true && !(typeof relatedLink.href === 'string' || relatedLink.href === null) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You have pushed a record of type '${identifier.type}' with '${definition.key}' as a link, but the value of that link is not a string.`, typeof relatedLink.href === 'string' || relatedLink.href === null));\n        hasUpdatedLink = true;\n      }\n    }\n  }\n\n  /*\n       Data being pushed into the relationship might contain only data or links,\n       or a combination of both.\n        IF contains only data\n       IF contains both links and data\n        state.isEmpty -> true if is empty array (has-many) or is null (belongs-to)\n        state.hasReceivedData -> true\n        hasDematerializedInverse -> false\n        state.isStale -> false\n        allInverseRecordsAreLoaded -> run-check-to-determine\n        IF contains only links\n        state.isStale -> true\n       */\n  relationship.state.hasFailedLoadAttempt = false;\n  if (hasRelationshipDataProperty) {\n    const relationshipIsEmpty = payload.data === null || Array.isArray(payload.data) && payload.data.length === 0;\n\n    // we don't need to notify here as the update op we pushed in above will notify once\n    // membership is in the correct state.\n    relationship.state.hasReceivedData = true;\n    relationship.state.isStale = false;\n    relationship.state.hasDematerializedInverse = false;\n    relationship.state.isEmpty = relationshipIsEmpty;\n  } else if (hasUpdatedLink) {\n    // only notify stale if we have not previously received membership data.\n    // within this same transaction\n    // this prevents refetching when only one side of the relationship in the\n    // payload contains the info while the other side contains just a link\n    // this only works when the side with just a link is a belongsTo, as we\n    // don't know if a hasMany has full information or not.\n    // see #7049 for context.\n    if (isCollection || !relationship.state.hasReceivedData || isStaleTransaction(relationship.transactionRef, graph._transaction)) {\n      relationship.state.isStale = true;\n      notifyChange(graph, relationship.identifier, relationship.definition.key);\n    } else {\n      relationship.state.isStale = false;\n    }\n  }\n}\nfunction isStaleTransaction(relationshipTransactionId, graphTransactionId) {\n  return relationshipTransactionId === 0 ||\n  // relationship has never notified\n  graphTransactionId === null ||\n  // we are not in a transaction\n  relationshipTransactionId < graphTransactionId // we are not part of the current transaction\n  ;\n}\nfunction upgradeIdentifiers(arr, cache) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = cache.upgradeIdentifier(arr[i]);\n  }\n  return arr;\n}\nconst Graphs = new Map();\nlet transactionRef = 0;\n/*\n * Graph acts as the cache for relationship data. It allows for\n * us to ask about and update relationships for a given Identifier\n * without requiring other objects for that Identifier to be\n * instantiated (such as `RecordData` or a `Record`)\n *\n * This also allows for us to make more substantive changes to relationships\n * with increasingly minor alterations to other portions of the internals\n * over time.\n *\n * The graph is made up of nodes and edges. Each unique identifier gets\n * its own node, which is a dictionary with a list of that node's edges\n * (or connections) to other nodes. In `Model` terms, a node represents a\n * record instance, with each key (an edge) in the dictionary correlating\n * to either a `hasMany` or `belongsTo` field on that record instance.\n *\n * The value for each key, or `edge` is the identifier(s) the node relates\n * to in the graph from that key.\n */\nclass Graph {\n  constructor(store) {\n    this._definitionCache = Object.create(null);\n    this._metaCache = Object.create(null);\n    this._potentialPolymorphicTypes = Object.create(null);\n    this.identifiers = new Map();\n    this.store = store;\n    this.isDestroyed = false;\n    this._willSyncRemote = false;\n    this._willSyncLocal = false;\n    this._pushedUpdates = {\n      belongsTo: undefined,\n      hasMany: undefined,\n      deletions: []\n    };\n    this._updatedRelationships = new Set();\n    this._transaction = null;\n    this._removing = null;\n    this.silenceNotifications = false;\n  }\n  has(identifier, propertyName) {\n    const relationships = this.identifiers.get(identifier);\n    if (!relationships) {\n      return false;\n    }\n    return relationships[propertyName] !== undefined;\n  }\n  getDefinition(identifier, propertyName) {\n    let defs = this._metaCache[identifier.type];\n    let meta = defs?.[propertyName];\n    if (!meta) {\n      const info = /*#__NOINLINE__*/upgradeDefinition(this, identifier, propertyName);\n      ( true && !(info !== null) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Could not determine relationship information for ${identifier.type}.${propertyName}`, info !== null)); // if (info.rhs_definition?.kind === 'implicit') {\n      // we should possibly also do this\n      // but it would result in being extremely permissive for other relationships by accident\n      // this.registerPolymorphicType(info.rhs_baseModelName, identifier.type);\n      // }\n      meta = /*#__NOINLINE__*/isLHS(info, identifier.type, propertyName) ? info.lhs_definition : info.rhs_definition;\n      defs = this._metaCache[identifier.type] = defs || {};\n      defs[propertyName] = meta;\n    }\n    return meta;\n  }\n  get(identifier, propertyName) {\n    ( true && !(propertyName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`expected propertyName`, propertyName));\n    let relationships = this.identifiers.get(identifier);\n    if (!relationships) {\n      relationships = Object.create(null);\n      this.identifiers.set(identifier, relationships);\n    }\n    let relationship = relationships[propertyName];\n    if (!relationship) {\n      const meta = this.getDefinition(identifier, propertyName);\n      if (meta.kind === 'belongsTo') {\n        relationship = relationships[propertyName] = createResourceEdge(meta, identifier);\n      } else if (meta.kind === 'hasMany') {\n        relationship = relationships[propertyName] = createCollectionEdge(meta, identifier);\n      } else {\n        ( true && !(meta.kind === 'implicit' && meta.isImplicit === true) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected kind to be implicit`, meta.kind === 'implicit' && meta.isImplicit === true));\n        relationship = relationships[propertyName] = createImplicitEdge(meta, identifier);\n      }\n    }\n    return relationship;\n  }\n  getData(identifier, propertyName) {\n    const relationship = this.get(identifier, propertyName);\n    ( true && !(!isImplicit(relationship)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot getData() on an implicit relationship`, !isImplicit(relationship)));\n    if (isBelongsTo(relationship)) {\n      return legacyGetResourceRelationshipData(relationship);\n    }\n    return legacyGetCollectionRelationshipData(relationship);\n  }\n\n  /*\n   * Allows for the graph to dynamically discover polymorphic connections\n   * without needing to walk prototype chains.\n   *\n   * Used by edges when an added `type` does not match the expected `type`\n   * for that edge.\n   *\n   * Currently we assert before calling this. For a public API we will want\n   * to call out to the schema manager to ask if we should consider these\n   * types as equivalent for a given relationship.\n   */\n  registerPolymorphicType(type1, type2) {\n    const typeCache = this._potentialPolymorphicTypes;\n    let t1 = typeCache[type1];\n    if (!t1) {\n      t1 = typeCache[type1] = Object.create(null);\n    }\n    t1[type2] = true;\n    let t2 = typeCache[type2];\n    if (!t2) {\n      t2 = typeCache[type2] = Object.create(null);\n    }\n    t2[type1] = true;\n  }\n\n  /*\n   TODO move this comment somewhere else\n   implicit relationships are relationships which have not been declared but the inverse side exists on\n   another record somewhere\n    For example if there was:\n    ```app/models/comment.js\n   import Model, { attr } from '@ember-data/model';\n    export default class Comment extends Model {\n     @attr text;\n   }\n   ```\n    and there is also:\n    ```app/models/post.js\n   import Model, { attr, hasMany } from '@ember-data/model';\n    export default class Post extends Model {\n     @attr title;\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n    Then we would have a implicit 'post' relationship for the comment record in order\n   to be do things like remove the comment from the post if the comment were to be deleted.\n  */\n\n  isReleasable(identifier) {\n    const relationships = this.identifiers.get(identifier);\n    if (!relationships) {\n      return true;\n    }\n    const keys = Object.keys(relationships);\n    for (let i = 0; i < keys.length; i++) {\n      const relationship = relationships[keys[i]];\n      // account for previously unloaded relationships\n      // typically from a prior deletion of a record that pointed to this one implicitly\n      if (relationship === undefined) {\n        continue;\n      }\n      ( true && !(relationship) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a relationship`, relationship));\n      if (relationship.definition.inverseIsAsync && !isNew(identifier)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  unload(identifier, silenceNotifications) {\n    const relationships = this.identifiers.get(identifier);\n    if (relationships) {\n      // cleans up the graph but retains some nodes\n      // to allow for rematerialization\n      Object.keys(relationships).forEach(key => {\n        const rel = relationships[key];\n        if (!rel) {\n          return;\n        }\n        /*#__NOINLINE__*/\n        destroyRelationship(this, rel, silenceNotifications);\n        if ( /*#__NOINLINE__*/isImplicit(rel)) {\n          // @ts-expect-error\n          relationships[key] = undefined;\n        }\n      });\n    }\n  }\n  _isDirty(identifier, field) {\n    const relationships = this.identifiers.get(identifier);\n    if (!relationships) {\n      return false;\n    }\n    const relationship = relationships[field];\n    if (!relationship) {\n      return false;\n    }\n    if (isBelongsTo(relationship)) {\n      return relationship.localState !== relationship.remoteState;\n    } else if (isHasMany(relationship)) {\n      const hasAdditions = relationship.additions !== null && relationship.additions.size > 0;\n      const hasRemovals = relationship.removals !== null && relationship.removals.size > 0;\n      return hasAdditions || hasRemovals || isReordered(relationship);\n    }\n    return false;\n  }\n  getChanged(identifier) {\n    const relationships = this.identifiers.get(identifier);\n    const changed = new Map();\n    if (!relationships) {\n      return changed;\n    }\n    const keys = Object.keys(relationships);\n    for (let i = 0; i < keys.length; i++) {\n      const field = keys[i];\n      const relationship = relationships[field];\n      if (!relationship) {\n        continue;\n      }\n      if (isBelongsTo(relationship)) {\n        if (relationship.localState !== relationship.remoteState) {\n          changed.set(field, {\n            kind: 'resource',\n            remoteState: relationship.remoteState,\n            localState: relationship.localState\n          });\n        }\n      } else if (isHasMany(relationship)) {\n        const hasAdditions = relationship.additions !== null && relationship.additions.size > 0;\n        const hasRemovals = relationship.removals !== null && relationship.removals.size > 0;\n        const reordered = isReordered(relationship);\n        if (hasAdditions || hasRemovals || reordered) {\n          changed.set(field, {\n            kind: 'collection',\n            additions: new Set(relationship.additions) || new Set(),\n            removals: new Set(relationship.removals) || new Set(),\n            remoteState: relationship.remoteState,\n            localState: legacyGetCollectionRelationshipData(relationship).data || [],\n            reordered\n          });\n        }\n      }\n    }\n    return changed;\n  }\n  hasChanged(identifier) {\n    const relationships = this.identifiers.get(identifier);\n    if (!relationships) {\n      return false;\n    }\n    const keys = Object.keys(relationships);\n    for (let i = 0; i < keys.length; i++) {\n      if (this._isDirty(identifier, keys[i])) {\n        return true;\n      }\n    }\n    return false;\n  }\n  rollback(identifier) {\n    const relationships = this.identifiers.get(identifier);\n    const changed = [];\n    if (!relationships) {\n      return changed;\n    }\n    const keys = Object.keys(relationships);\n    for (let i = 0; i < keys.length; i++) {\n      const field = keys[i];\n      const relationship = relationships[field];\n      if (!relationship) {\n        continue;\n      }\n      if (this._isDirty(identifier, field)) {\n        rollbackRelationship(this, identifier, field, relationship);\n        changed.push(field);\n      }\n    }\n    return changed;\n  }\n  remove(identifier) {\n    ( true && !(!this._removing) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot remove ${String(identifier)} while still removing ${String(this._removing)}`, !this._removing));\n    this._removing = identifier;\n    this.unload(identifier);\n    this.identifiers.delete(identifier);\n    this._removing = null;\n  }\n\n  /*\n   * Remote state changes\n   */\n  push(op) {\n    if (op.op === 'deleteRecord') {\n      this._pushedUpdates.deletions.push(op);\n    } else {\n      const definition = this.getDefinition(op.record, op.field);\n      ( true && !(definition.kind !== 'implicit') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot push a remote update for an implicit relationship`, definition.kind !== 'implicit'));\n      addPending(this._pushedUpdates, definition, op);\n    }\n    if (!this._willSyncRemote) {\n      this._willSyncRemote = true;\n      getStore(this.store)._schedule('coalesce', () => this._flushRemoteQueue());\n    }\n  }\n\n  /*\n   * Local state changes\n   */\n\n  update(op, isRemote = false) {\n    ( true && !(op.op === 'deleteRecord' || op.op === 'mergeIdentifiers' || !isImplicit(this.get(op.record, op.field))) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot update an implicit relationship`, op.op === 'deleteRecord' || op.op === 'mergeIdentifiers' || !isImplicit(this.get(op.record, op.field))));\n    switch (op.op) {\n      case 'mergeIdentifiers':\n        {\n          const relationships = this.identifiers.get(op.record);\n          if (relationships) {\n            /*#__NOINLINE__*/mergeIdentifier(this, op, relationships);\n          }\n          break;\n        }\n      case 'updateRelationship':\n        ( true && !(isRemote) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Can only perform the operation updateRelationship on remote state`, isRemote));\n        {\n          // in debug, assert payload validity eagerly\n          // TODO add deprecations/assertion here for duplicates\n          assertValidRelationshipPayload(this, op);\n        }\n        /*#__NOINLINE__*/\n        updateRelationshipOperation(this, op);\n        break;\n      case 'deleteRecord':\n        {\n          ( true && !(isRemote) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Can only perform the operation deleteRelationship on remote state`, isRemote));\n          const identifier = op.record;\n          const relationships = this.identifiers.get(identifier);\n          if (relationships) {\n            Object.keys(relationships).forEach(key => {\n              const rel = relationships[key];\n              if (!rel) {\n                return;\n              }\n              // works together with the has check\n              // @ts-expect-error\n              relationships[key] = undefined;\n              /*#__NOINLINE__*/\n              removeCompletelyFromInverse(this, rel);\n            });\n            this.identifiers.delete(identifier);\n          }\n          break;\n        }\n      case 'replaceRelatedRecord':\n        /*#__NOINLINE__*/replaceRelatedRecord(this, op, isRemote);\n        break;\n      case 'addToRelatedRecords':\n        // we will lift this restriction once the cache is allowed to make remote updates directly\n        ( true && !(!isRemote) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Can only perform the operation addToRelatedRecords on local state`, !isRemote));\n        /*#__NOINLINE__*/\n        addToRelatedRecords(this, op, isRemote);\n        break;\n      case 'removeFromRelatedRecords':\n        // we will lift this restriction once the cache is allowed to make remote updates directly\n        ( true && !(!isRemote) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Can only perform the operation removeFromRelatedRecords on local state`, !isRemote));\n        /*#__NOINLINE__*/\n        removeFromRelatedRecords(this, op, isRemote);\n        break;\n      case 'replaceRelatedRecords':\n        /*#__NOINLINE__*/replaceRelatedRecords(this, op, isRemote);\n        break;\n      default:\n        ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`No local relationship update operation exists for '${op.op}'`));\n    }\n  }\n  _scheduleLocalSync(relationship) {\n    this._updatedRelationships.add(relationship);\n    if (!this._willSyncLocal) {\n      this._willSyncLocal = true;\n      getStore(this.store)._schedule('sync', () => this._flushLocalQueue());\n    }\n  }\n  _flushRemoteQueue() {\n    if (!this._willSyncRemote) {\n      return;\n    }\n    this._transaction = ++transactionRef;\n    this._willSyncRemote = false;\n    const updates = this._pushedUpdates;\n    const {\n      deletions,\n      hasMany,\n      belongsTo\n    } = updates;\n    updates.deletions = [];\n    updates.hasMany = undefined;\n    updates.belongsTo = undefined;\n    for (let i = 0; i < deletions.length; i++) {\n      this.update(deletions[i], true);\n    }\n    if (hasMany) {\n      flushPending(this, hasMany);\n    }\n    if (belongsTo) {\n      flushPending(this, belongsTo);\n    }\n    this._transaction = null;\n  }\n  _addToTransaction(relationship) {\n    ( true && !(this._transaction !== null) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`expected a transaction`, this._transaction !== null));\n    relationship.transactionRef = this._transaction;\n  }\n  _flushLocalQueue() {\n    if (!this._willSyncLocal) {\n      return;\n    }\n    if (this.silenceNotifications) {\n      this.silenceNotifications = false;\n      this._updatedRelationships = new Set();\n      return;\n    }\n    this._willSyncLocal = false;\n    const updated = this._updatedRelationships;\n    this._updatedRelationships = new Set();\n    updated.forEach(rel => notifyChange(this, rel.identifier, rel.definition.key));\n  }\n  destroy() {\n    Graphs.delete(this.store);\n    {\n      Graphs.delete(getStore(this.store));\n      if (Graphs.size) {\n        Graphs.forEach((_, key) => {\n          ( true && !(\n          // @ts-expect-error\n          !key.isDestroyed && !key.isDestroying) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Memory Leak Detected, likely the test or app instance previous to this was not torn down properly`, !key.isDestroyed && !key.isDestroying));\n        });\n      }\n    }\n    this.identifiers.clear();\n    this.store = null;\n    this.isDestroyed = true;\n  }\n}\nfunction flushPending(graph, ops) {\n  ops.forEach(type => {\n    type.forEach(opList => {\n      flushPendingList(graph, opList);\n    });\n  });\n}\nfunction flushPendingList(graph, opList) {\n  for (let i = 0; i < opList.length; i++) {\n    graph.update(opList[i], true);\n  }\n}\n\n// Handle dematerialization for relationship `rel`.  In all cases, notify the\n// relationship of the dematerialization: this is done so the relationship can\n// notify its inverse which needs to update state\n//\n// If the inverse is sync, unloading this record is treated as a client-side\n// delete, so we remove the inverse records from this relationship to\n// disconnect the graph.  Because it's not async, we don't need to keep around\n// the identifier as an id-wrapper for references\nfunction destroyRelationship(graph, rel, silenceNotifications) {\n  if (isImplicit(rel)) {\n    if (graph.isReleasable(rel.identifier)) {\n      /*#__NOINLINE__*/removeCompletelyFromInverse(graph, rel);\n    }\n    return;\n  }\n  const {\n    identifier\n  } = rel;\n  const {\n    inverseKey\n  } = rel.definition;\n  if (!rel.definition.inverseIsImplicit) {\n    /*#__NOINLINE__*/forAllRelatedIdentifiers(rel, inverseIdentifer => /*#__NOINLINE__*/notifyInverseOfDematerialization(graph, inverseIdentifer, inverseKey, identifier, silenceNotifications));\n  }\n  if (!rel.definition.inverseIsImplicit && !rel.definition.inverseIsAsync) {\n    rel.state.isStale = true;\n    /*#__NOINLINE__*/\n    clearRelationship(rel);\n\n    // necessary to clear relationships in the ui from dematerialized records\n    // hasMany is managed by Model which calls `retreiveLatest` after\n    // dematerializing the resource-cache instance.\n    // but sync belongsTo requires this since they don't have a proxy to update.\n    // so we have to notify so it will \"update\" to null.\n    // we should discuss whether we still care about this, probably fine to just\n    // leave the ui relationship populated since the record is destroyed and\n    // internally we've fully cleaned up.\n    if (!rel.definition.isAsync && !silenceNotifications) {\n      /*#__NOINLINE__*/notifyChange(graph, rel.identifier, rel.definition.key);\n    }\n  }\n}\nfunction notifyInverseOfDematerialization(graph, inverseIdentifier, inverseKey, identifier, silenceNotifications) {\n  if (!graph.has(inverseIdentifier, inverseKey)) {\n    return;\n  }\n  const relationship = graph.get(inverseIdentifier, inverseKey);\n  ( true && !(!isImplicit(relationship)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`expected no implicit`, !isImplicit(relationship))); // For remote members, it is possible that inverseRecordData has already been associated to\n  // to another record. For such cases, do not dematerialize the inverseRecordData\n  if (!isBelongsTo(relationship) || !relationship.localState || identifier === relationship.localState) {\n    /*#__NOINLINE__*/removeDematerializedInverse(graph, relationship, identifier, silenceNotifications);\n  }\n}\nfunction clearRelationship(relationship) {\n  if (isBelongsTo(relationship)) {\n    relationship.localState = null;\n    relationship.remoteState = null;\n    relationship.state.hasReceivedData = false;\n    relationship.state.isEmpty = true;\n  } else {\n    relationship.remoteMembers.clear();\n    relationship.remoteState = [];\n    relationship.additions = null;\n    relationship.removals = null;\n    relationship.localState = null;\n  }\n}\nfunction removeDematerializedInverse(graph, relationship, inverseIdentifier, silenceNotifications) {\n  if (isBelongsTo(relationship)) {\n    const localInverse = relationship.localState;\n    if (!relationship.definition.isAsync || localInverse && isNew(localInverse)) {\n      // unloading inverse of a sync relationship is treated as a client-side\n      // delete, so actually remove the models don't merely invalidate the cp\n      // cache.\n      // if the record being unloaded only exists on the client, we similarly\n      // treat it as a client side delete\n      if (relationship.localState === localInverse && localInverse !== null) {\n        relationship.localState = null;\n      }\n      if (relationship.remoteState === localInverse && localInverse !== null) {\n        relationship.remoteState = null;\n        relationship.state.hasReceivedData = true;\n        relationship.state.isEmpty = true;\n        if (relationship.localState && !isNew(relationship.localState)) {\n          relationship.localState = null;\n        }\n      }\n    } else {\n      relationship.state.hasDematerializedInverse = true;\n    }\n    if (!silenceNotifications) {\n      notifyChange(graph, relationship.identifier, relationship.definition.key);\n    }\n  } else {\n    if (!relationship.definition.isAsync || inverseIdentifier && isNew(inverseIdentifier)) {\n      // unloading inverse of a sync relationship is treated as a client-side\n      // delete, so actually remove the models don't merely invalidate the cp\n      // cache.\n      // if the record being unloaded only exists on the client, we similarly\n      // treat it as a client side delete\n      /*#__NOINLINE__*/\n      removeIdentifierCompletelyFromRelationship(graph, relationship, inverseIdentifier);\n    } else {\n      relationship.state.hasDematerializedInverse = true;\n    }\n    if (!silenceNotifications) {\n      notifyChange(graph, relationship.identifier, relationship.definition.key);\n    }\n  }\n}\nfunction removeCompletelyFromInverse(graph, relationship) {\n  const {\n    identifier\n  } = relationship;\n  const {\n    inverseKey\n  } = relationship.definition;\n  forAllRelatedIdentifiers(relationship, inverseIdentifier => {\n    if (graph.has(inverseIdentifier, inverseKey)) {\n      removeIdentifierCompletelyFromRelationship(graph, graph.get(inverseIdentifier, inverseKey), identifier);\n    }\n  });\n  if (isBelongsTo(relationship)) {\n    if (!relationship.definition.isAsync) {\n      clearRelationship(relationship);\n    }\n    relationship.localState = null;\n  } else if (isHasMany(relationship)) {\n    if (!relationship.definition.isAsync) {\n      clearRelationship(relationship);\n      notifyChange(graph, relationship.identifier, relationship.definition.key);\n    }\n  } else {\n    relationship.remoteMembers.clear();\n    relationship.localMembers.clear();\n  }\n}\nfunction addPending(cache, definition, op) {\n  const lc = cache[definition.kind] = cache[definition.kind] || new Map();\n  let lc2 = lc.get(definition.inverseType);\n  if (!lc2) {\n    lc2 = new Map();\n    lc.set(definition.inverseType, lc2);\n  }\n  let arr = lc2.get(op.field);\n  if (!arr) {\n    arr = [];\n    lc2.set(op.field, arr);\n  }\n  arr.push(op);\n}\nfunction isReordered(relationship) {\n  // if we are dirty we are never re-ordered because accessing\n  // the state would flush away any reordering.\n  if (relationship.isDirty) {\n    return false;\n  }\n  const {\n    remoteState,\n    localState,\n    additions,\n    removals\n  } = relationship;\n  ( true && !(localState) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected localSate`, localState));\n  for (let i = 0, j = 0; i < remoteState.length; i++) {\n    const member = remoteState[i];\n    const localMember = localState[j];\n    if (member !== localMember) {\n      if (removals && removals.has(member)) {\n        // dont increment j because we want to skip this\n        continue;\n      }\n      if (additions && additions.has(localMember)) {\n        // increment j to skip this localMember\n        // decrement i to repeat this remoteMember\n        j++;\n        i--;\n        continue;\n      }\n      return true;\n    }\n\n    // if we made it here, increment j\n    j++;\n  }\n  return false;\n}\nfunction isStore(maybeStore) {\n  return maybeStore._instanceCache !== undefined;\n}\nfunction getWrapper(store) {\n  return isStore(store) ? store._instanceCache._storeWrapper : store;\n}\nfunction peekGraph(store) {\n  return Graphs.get(getWrapper(store));\n}\nfunction graphFor(store) {\n  const wrapper = getWrapper(store);\n  let graph = Graphs.get(wrapper);\n  if (!graph) {\n    graph = new Graph(wrapper);\n    Graphs.set(wrapper, graph);\n    getStore(wrapper)._graph = graph;\n    {\n      if (getStore(wrapper).isDestroying) {\n        throw new Error(`Memory Leak Detected During Teardown`);\n      }\n    }\n  }\n  return graph;\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/graph.4c9e27df/node_modules/@ember-data/graph/-private.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/json-api.d7f0a39f/node_modules/@ember-data/json-api/index.js":
/*!******************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/json-api.d7f0a39f/node_modules/@ember-data/json-api/index.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ JSONAPICache)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_graph_private__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/graph/-private */ \"../rewritten-packages/@ember-data/graph.4c9e27df/node_modules/@ember-data/graph/-private.js\");\n\n\n/**\n * @module @ember-data/json-api\n */\nfunction isImplicit(relationship) {\n  return relationship.definition.isImplicit;\n}\nfunction upgradeCapabilities(obj) {}\nconst EMPTY_ITERATOR = {\n  iterator() {\n    return {\n      next() {\n        return {\n          done: true,\n          value: undefined\n        };\n      }\n    };\n  }\n};\nfunction makeCache() {\n  return {\n    id: null,\n    remoteAttrs: null,\n    localAttrs: null,\n    inflightAttrs: null,\n    changes: null,\n    errors: null,\n    isNew: false,\n    isDeleted: false,\n    isDeletionCommitted: false\n  };\n}\n\n/**\n  A JSON:API Cache implementation.\n\n  What cache the store uses is configurable. Using a different\n  implementation can be achieved by implementing the store's\n  createCache hook.\n\n  This is the cache implementation used by `ember-data`.\n\n  ```js\n  import Cache from '@ember-data/json-api';\n  import Store from '@ember-data/store';\n\n  export default class extends Store {\n    createCache(wrapper) {\n      return new Cache(wrapper);\n    }\n  }\n  ```\n\n  @class Cache\n  @public\n */\n\nclass JSONAPICache {\n  /**\n   * The Cache Version that this implementation implements.\n   *\n   * @type {'2'}\n   * @public\n   * @property version\n   */\n\n  constructor(storeWrapper) {\n    this.version = '2';\n    this._capabilities = storeWrapper;\n    this.__cache = new Map();\n    this.__graph = (0,_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_1__.graphFor)(storeWrapper);\n    this.__destroyedCache = new Map();\n    this.__documents = new Map();\n  }\n\n  // Cache Management\n  // ================\n\n  /**\n   * Cache the response to a request\n   *\n   * Implements `Cache.put`.\n   *\n   * Expects a StructuredDocument whose `content` member is a JsonApiDocument.\n   *\n   * ```js\n   * cache.put({\n   *   request: { url: 'https://api.example.com/v1/user/1' },\n   *   content: {\n   *     data: {\n   *       type: 'user',\n   *       id: '1',\n   *       attributes: {\n   *         name: 'Chris'\n   *       }\n   *     }\n   *   }\n   * })\n   * ```\n   *\n   * > **Note**\n   * > The nested `content` and `data` members are not a mistake. This is because\n   * > there are two separate concepts involved here, the `StructuredDocument` which contains\n   * > the context of a given Request that has been issued with the returned contents as its\n   * > `content` property, and a `JSON:API Document` which is the json contents returned by\n   * > this endpoint and which uses its `data` property to signify which resources are the\n   * > primary resources associated with the request.\n   *\n   * StructuredDocument's with urls will be cached as full documents with\n   * associated resource membership order and contents preserved but linked\n   * into the cache.\n   *\n   * @method put\n   * @param {StructuredDocument} doc\n   * @return {ResourceDocument}\n   * @public\n   */\n\n  put(doc) {\n    ( true && !(doc instanceof Error || typeof doc.content === 'object' && doc.content !== null) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a JSON:API Document as the content provided to the cache, received ${typeof doc.content}`, doc instanceof Error || typeof doc.content === 'object' && doc.content !== null));\n    if (isErrorDocument(doc)) {\n      return this._putDocument(doc, undefined, undefined);\n    } else if (isMetaDocument(doc)) {\n      return this._putDocument(doc, undefined, undefined);\n    }\n    const jsonApiDoc = doc.content;\n    const included = jsonApiDoc.included;\n    let i, length;\n    const {\n      identifierCache\n    } = this._capabilities;\n    if (included) {\n      for (i = 0, length = included.length; i < length; i++) {\n        included[i] = putOne(this, identifierCache, included[i]);\n      }\n    }\n    if (Array.isArray(jsonApiDoc.data)) {\n      length = jsonApiDoc.data.length;\n      const identifiers = [];\n      for (i = 0; i < length; i++) {\n        identifiers.push(putOne(this, identifierCache, jsonApiDoc.data[i]));\n      }\n      return this._putDocument(doc, identifiers, included);\n    }\n    if (jsonApiDoc.data === null) {\n      return this._putDocument(doc, null, included);\n    }\n    ( true && !(typeof jsonApiDoc.data === 'object') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a resource object in the 'data' property in the document provided to the cache, but was ${typeof jsonApiDoc.data}`, typeof jsonApiDoc.data === 'object'));\n    const identifier = putOne(this, identifierCache, jsonApiDoc.data);\n    return this._putDocument(doc, identifier, included);\n  }\n  _putDocument(doc, data, included) {\n    // @ts-expect-error narrowing within is just horrible  in TS :/\n    const resourceDocument = isErrorDocument(doc) ? fromStructuredError(doc) : fromBaseDocument(doc);\n    if (data !== undefined) {\n      resourceDocument.data = data;\n    }\n    if (included !== undefined) {\n      ( true && !(!isErrorDocument(doc)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`There should not be included data on an Error document`, !isErrorDocument(doc)));\n      ( true && !(!isMetaDocument(doc)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`There should not be included data on a Meta document`, !isMetaDocument(doc)));\n      resourceDocument.included = included;\n    }\n    const request = doc.request;\n    const identifier = request ? this._capabilities.identifierCache.getOrCreateDocumentIdentifier(request) : null;\n    if (identifier) {\n      resourceDocument.lid = identifier.lid;\n\n      // @ts-expect-error\n      doc.content = resourceDocument;\n      const hasExisting = this.__documents.has(identifier.lid);\n      this.__documents.set(identifier.lid, doc);\n      this._capabilities.notifyChange(identifier, hasExisting ? 'updated' : 'added');\n    }\n    return resourceDocument;\n  }\n\n  /**\n   * Update the \"remote\" or \"canonical\" (persisted) state of the Cache\n   * by merging new information into the existing state.\n   *\n   * Note: currently the only valid resource operation is a MergeOperation\n   * which occurs when a collision of identifiers is detected.\n   *\n   * @method patch\n   * @public\n   * @param {Operation} op the operation to perform\n   * @return {void}\n   */\n  patch(op) {\n    if (op.op === 'mergeIdentifiers') {\n      const cache = this.__cache.get(op.record);\n      if (cache) {\n        this.__cache.set(op.value, cache);\n        this.__cache.delete(op.record);\n      }\n      this.__graph.update(op, true);\n    }\n  }\n\n  /**\n   * Update the \"local\" or \"current\" (unpersisted) state of the Cache\n   *\n   * @method mutate\n   * @param {Mutation} mutation\n   * @return {void}\n   * @public\n   */\n  mutate(mutation) {\n    this.__graph.update(mutation, false);\n  }\n\n  /**\n   * Peek resource data from the Cache.\n   *\n   * In development, if the return value\n   * is JSON the return value\n   * will be deep-cloned and deep-frozen\n   * to prevent mutation thereby enforcing cache\n   * Immutability.\n   *\n   * This form of peek is useful for implementations\n   * that want to feed raw-data from cache to the UI\n   * or which want to interact with a blob of data\n   * directly from the presentation cache.\n   *\n   * An implementation might want to do this because\n   * de-referencing records which read from their own\n   * blob is generally safer because the record does\n   * not require retainining connections to the Store\n   * and Cache to present data on a per-field basis.\n   *\n   * This generally takes the place of `getAttr` as\n   * an API and may even take the place of `getRelationship`\n   * depending on implementation specifics, though this\n   * latter usage is less recommended due to the advantages\n   * of the Graph handling necessary entanglements and\n   * notifications for relational data.\n   *\n   * @method peek\n   * @public\n   * @param {StableRecordIdentifier | StableDocumentIdentifier} identifier\n   * @return {ResourceDocument | ResourceBlob | null} the known resource data\n   */\n\n  peek(identifier) {\n    if ('type' in identifier) {\n      const peeked = this.__safePeek(identifier, false);\n      if (!peeked) {\n        return null;\n      }\n      const {\n        type,\n        id,\n        lid\n      } = identifier;\n      const attributes = Object.assign({}, peeked.remoteAttrs, peeked.inflightAttrs, peeked.localAttrs);\n      const relationships = {};\n      const rels = this.__graph.identifiers.get(identifier);\n      if (rels) {\n        Object.keys(rels).forEach(key => {\n          const rel = rels[key];\n          if (rel.definition.isImplicit) {\n            return;\n          } else {\n            relationships[key] = this.__graph.getData(identifier, key);\n          }\n        });\n      }\n      upgradeCapabilities(this._capabilities);\n      const store = this._capabilities._store;\n      const attrs = this._capabilities.schema.fields(identifier);\n      attrs.forEach((attr, key) => {\n        if (key in attributes && attributes[key] !== undefined) {\n          return;\n        }\n        const defaultValue = getDefaultValue(attr, identifier, store);\n        if (defaultValue !== undefined) {\n          attributes[key] = defaultValue;\n        }\n      });\n      return {\n        type,\n        id,\n        lid,\n        attributes,\n        relationships\n      };\n    }\n    const document = this.peekRequest(identifier);\n    if (document) {\n      if ('content' in document) return document.content;\n    }\n    return null;\n  }\n\n  /**\n   * Peek the Cache for the existing request data associated with\n   * a cacheable request.\n   *\n   * This is effectively the reverse of `put` for a request in\n   * that it will return the the request, response, and content\n   * whereas `peek` will return just the `content`.\n   *\n   * @method peekRequest\n   * @param {StableDocumentIdentifier}\n   * @return {StructuredDocument<ResourceDocument> | null}\n   * @public\n   */\n  peekRequest(identifier) {\n    return this.__documents.get(identifier.lid) || null;\n  }\n\n  /**\n   * Push resource data from a remote source into the cache for this identifier\n   *\n   * @method upsert\n   * @public\n   * @param identifier\n   * @param data\n   * @param hasRecord\n   * @return {void | string[]} if `hasRecord` is true then calculated key changes should be returned\n   */\n  upsert(identifier, data, calculateChanges) {\n    let changedKeys;\n    const peeked = this.__safePeek(identifier, false);\n    const existed = !!peeked;\n    const cached = peeked || this._createCache(identifier);\n    const isLoading = /*#__NOINLINE__*/_isLoading(peeked, this._capabilities, identifier) || !recordIsLoaded(peeked);\n    const isUpdate = /*#__NOINLINE__*/!_isEmpty(peeked) && !isLoading;\n    if (cached.isNew) {\n      cached.isNew = false;\n      this._capabilities.notifyChange(identifier, 'identity');\n      this._capabilities.notifyChange(identifier, 'state');\n    }\n    if (calculateChanges) {\n      changedKeys = existed ? calculateChangedKeys(cached, data.attributes) : Object.keys(data.attributes || {});\n    }\n    cached.remoteAttrs = Object.assign(cached.remoteAttrs || Object.create(null), data.attributes);\n    if (cached.localAttrs) {\n      if (patchLocalAttributes(cached)) {\n        this._capabilities.notifyChange(identifier, 'state');\n      }\n    }\n    if (!isUpdate) {\n      this._capabilities.notifyChange(identifier, 'added');\n    }\n    if (data.id) {\n      cached.id = data.id;\n    }\n    if (data.relationships) {\n      setupRelationships(this.__graph, this._capabilities, identifier, data);\n    }\n    if (changedKeys && changedKeys.length) {\n      notifyAttributes(this._capabilities, identifier, changedKeys);\n    }\n    return changedKeys;\n  }\n\n  // Cache Forking Support\n  // =====================\n\n  /**\n   * Create a fork of the cache from the current state.\n   *\n   * Applications should typically not call this method themselves,\n   * preferring instead to fork at the Store level, which will\n   * utilize this method to fork the cache.\n   *\n   * @method fork\n   * @internal\n   * @return Promise<Cache>\n   */\n  fork() {\n    throw new Error(`Not Implemented`);\n  }\n\n  /**\n   * Merge a fork back into a parent Cache.\n   *\n   * Applications should typically not call this method themselves,\n   * preferring instead to merge at the Store level, which will\n   * utilize this method to merge the caches.\n   *\n   * @method merge\n   * @param {Cache} cache\n   * @public\n   * @return Promise<void>\n   */\n  merge(cache) {\n    throw new Error(`Not Implemented`);\n  }\n\n  /**\n   * Generate the list of changes applied to all\n   * record in the store.\n   *\n   * Each individual resource or document that has\n   * been mutated should be described as an individual\n   * `Change` entry in the returned array.\n   *\n   * A `Change` is described by an object containing up to\n   * three properties: (1) the `identifier` of the entity that\n   * changed; (2) the `op` code of that change being one of\n   * `upsert` or `remove`, and if the op is `upsert` a `patch`\n   * containing the data to merge into the cache for the given\n   * entity.\n   *\n   * This `patch` is opaque to the Store but should be understood\n   * by the Cache and may expect to be utilized by an Adapter\n   * when generating data during a `save` operation.\n   *\n   * It is generally recommended that the `patch` contain only\n   * the updated state, ignoring fields that are unchanged\n   *\n   * ```ts\n   * interface Change {\n   *  identifier: StableRecordIdentifier | StableDocumentIdentifier;\n   *  op: 'upsert' | 'remove';\n   *  patch?: unknown;\n   * }\n   * ```\n   *\n   * @method diff\n   * @public\n   */\n  diff() {\n    throw new Error(`Not Implemented`);\n  }\n\n  // SSR Support\n  // ===========\n\n  /**\n   * Serialize the entire contents of the Cache into a Stream\n   * which may be fed back into a new instance of the same Cache\n   * via `cache.hydrate`.\n   *\n   * @method dump\n   * @return {Promise<ReadableStream>}\n   * @public\n   */\n  dump() {\n    throw new Error(`Not Implemented`);\n  }\n\n  /**\n   * hydrate a Cache from a Stream with content previously serialized\n   * from another instance of the same Cache, resolving when hydration\n   * is complete.\n   *\n   * This method should expect to be called both in the context of restoring\n   * the Cache during application rehydration after SSR **AND** at unknown\n   * times during the lifetime of an already booted application when it is\n   * desired to bulk-load additional information into the cache. This latter\n   * behavior supports optimizing pre/fetching of data for route transitions\n   * via data-only SSR modes.\n   *\n   * @method hydrate\n   * @param {ReadableStream} stream\n   * @return {Promise<void>}\n   * @public\n   */\n  hydrate(stream) {\n    throw new Error('Not Implemented');\n  }\n\n  // Resource Support\n  // ================\n\n  /**\n   * [LIFECYCLE] Signal to the cache that a new record has been instantiated on the client\n   *\n   * It returns properties from options that should be set on the record during the create\n   * process. This return value behavior is deprecated.\n   *\n   * @method clientDidCreate\n   * @public\n   * @param identifier\n   * @param createArgs\n   */\n  clientDidCreate(identifier, options) {\n    const cached = this._createCache(identifier);\n    cached.isNew = true;\n    const createOptions = {};\n    if (options !== undefined) {\n      const storeWrapper = this._capabilities;\n      const fields = storeWrapper.schema.fields(identifier);\n      const graph = this.__graph;\n      const propertyNames = Object.keys(options);\n      for (let i = 0; i < propertyNames.length; i++) {\n        const name = propertyNames[i];\n        const propertyValue = options[name];\n        if (name === 'id') {\n          continue;\n        }\n        const fieldType = fields.get(name);\n        const kind = fieldType !== undefined ? 'kind' in fieldType ? fieldType.kind : 'attribute' : null;\n        let relationship;\n        switch (kind) {\n          case 'attribute':\n            this.setAttr(identifier, name, propertyValue);\n            createOptions[name] = propertyValue;\n            break;\n          case 'belongsTo':\n            this.mutate({\n              op: 'replaceRelatedRecord',\n              field: name,\n              record: identifier,\n              value: propertyValue\n            });\n            relationship = graph.get(identifier, name);\n            relationship.state.hasReceivedData = true;\n            relationship.state.isEmpty = false;\n            break;\n          case 'hasMany':\n            this.mutate({\n              op: 'replaceRelatedRecords',\n              field: name,\n              record: identifier,\n              value: propertyValue\n            });\n            relationship = graph.get(identifier, name);\n            relationship.state.hasReceivedData = true;\n            relationship.state.isEmpty = false;\n            break;\n          default:\n            // reflect back (pass-thru) unknown properties\n            createOptions[name] = propertyValue;\n        }\n      }\n    }\n    this._capabilities.notifyChange(identifier, 'added');\n    return createOptions;\n  }\n\n  /**\n   * [LIFECYCLE] Signals to the cache that a resource\n   * will be part of a save transaction.\n   *\n   * @method willCommit\n   * @public\n   * @param identifier\n   */\n  willCommit(identifier) {\n    const cached = this.__peek(identifier, false);\n\n    /*\n      if we have multiple saves in flight at once then\n      we have information loss no matter what. This\n      attempts to lose the least information.\n       If we were to clear inflightAttrs, previous requests\n      would not be able to use it during their didCommit.\n       If we upsert inflightattrs, previous requests incorrectly\n      see more recent inflight changes as part of their own and\n      will incorrectly mark the new state as the correct remote state.\n       We choose this latter behavior to avoid accidentally removing\n      earlier changes.\n       If apps do not want this behavior they can either\n      - chain save requests serially vs allowing concurrent saves\n      - move to using a request handler that caches the inflight state\n        on a per-request basis\n      - change their save requests to only send a \"PATCH\" instead of a \"PUT\"\n        so that only latest changes are involved in each request, and then also\n        ensure that the API or their handler reflects only those changes back\n        for upsert into the cache.\n    */\n    if (cached.inflightAttrs) {\n      if (cached.localAttrs) {\n        Object.assign(cached.inflightAttrs, cached.localAttrs);\n      }\n    } else {\n      cached.inflightAttrs = cached.localAttrs;\n    }\n    cached.localAttrs = null;\n    {}\n  }\n\n  /**\n   * [LIFECYCLE] Signals to the cache that a resource\n   * was successfully updated as part of a save transaction.\n   *\n   * @method didCommit\n   * @public\n   * @param identifier\n   * @param data\n   */\n  didCommit(committedIdentifier, result) {\n    const payload = result.content;\n    const operation = result.request.op;\n    const data = payload && payload.data;\n    if (!data) {\n      ( true && !(committedIdentifier.id) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Your ${committedIdentifier.type} record was saved to the server, but the response does not have an id and no id has been set client side. Records must have ids. Please update the server response to provide an id in the response or generate the id on the client side either before saving the record or while normalizing the response.`, committedIdentifier.id));\n    }\n    const {\n      identifierCache\n    } = this._capabilities;\n    const existingId = committedIdentifier.id;\n    const identifier = operation !== 'deleteRecord' && data ? identifierCache.updateRecordIdentifier(committedIdentifier, data) : committedIdentifier;\n    const cached = this.__peek(identifier, false);\n    if (cached.isDeleted) {\n      this.__graph.push({\n        op: 'deleteRecord',\n        record: identifier,\n        isNew: false\n      });\n      cached.isDeletionCommitted = true;\n      this._capabilities.notifyChange(identifier, 'removed');\n      // TODO @runspired should we early exit here?\n    }\n    {\n      if (cached.isNew && !identifier.id && (typeof data?.id !== 'string' || data.id.length > 0)) {\n        const error = new Error(`Expected an id ${String(identifier)} in response ${JSON.stringify(data)}`);\n        //@ts-expect-error\n        error.isAdapterError = true;\n        //@ts-expect-error\n        error.code = 'InvalidError';\n        throw error;\n      }\n    }\n    cached.isNew = false;\n    let newCanonicalAttributes;\n    if (data) {\n      if (data.id && !cached.id) {\n        cached.id = data.id;\n      }\n      if (identifier === committedIdentifier && identifier.id !== existingId) {\n        this._capabilities.notifyChange(identifier, 'identity');\n      }\n      ( true && !(identifier.id === cached.id) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected the ID received for the primary '${identifier.type}' resource being saved to match the current id '${cached.id}' but received '${identifier.id}'.`, identifier.id === cached.id));\n      if (data.relationships) {\n        {}\n        setupRelationships(this.__graph, this._capabilities, identifier, data);\n      }\n      newCanonicalAttributes = data.attributes;\n    }\n    const changedKeys = calculateChangedKeys(cached, newCanonicalAttributes);\n    cached.remoteAttrs = Object.assign(cached.remoteAttrs || Object.create(null), cached.inflightAttrs, newCanonicalAttributes);\n    cached.inflightAttrs = null;\n    patchLocalAttributes(cached);\n    if (cached.errors) {\n      cached.errors = null;\n      this._capabilities.notifyChange(identifier, 'errors');\n    }\n    notifyAttributes(this._capabilities, identifier, changedKeys);\n    this._capabilities.notifyChange(identifier, 'state');\n    const included = payload && payload.included;\n    if (included) {\n      for (let i = 0, length = included.length; i < length; i++) {\n        putOne(this, identifierCache, included[i]);\n      }\n    }\n    return {\n      data: identifier\n    };\n  }\n\n  /**\n   * [LIFECYCLE] Signals to the cache that a resource\n   * was update via a save transaction failed.\n   *\n   * @method commitWasRejected\n   * @public\n   * @param identifier\n   * @param errors\n   */\n  commitWasRejected(identifier, errors) {\n    const cached = this.__peek(identifier, false);\n    if (cached.inflightAttrs) {\n      const keys = Object.keys(cached.inflightAttrs);\n      if (keys.length > 0) {\n        const attrs = cached.localAttrs = cached.localAttrs || Object.create(null);\n        for (let i = 0; i < keys.length; i++) {\n          if (attrs[keys[i]] === undefined) {\n            attrs[keys[i]] = cached.inflightAttrs[keys[i]];\n          }\n        }\n      }\n      cached.inflightAttrs = null;\n    }\n    if (errors) {\n      cached.errors = errors;\n    }\n    this._capabilities.notifyChange(identifier, 'errors');\n  }\n\n  /**\n   * [LIFECYCLE] Signals to the cache that all data for a resource\n   * should be cleared.\n   *\n   * This method is a candidate to become a mutation\n   *\n   * @method unloadRecord\n   * @public\n   * @param identifier\n   */\n  unloadRecord(identifier) {\n    const storeWrapper = this._capabilities;\n    // TODO this is necessary because\n    // we maintain memebership inside InstanceCache\n    // for peekAll, so even though we haven't created\n    // any data we think this exists.\n    // TODO can we eliminate that membership now?\n    if (!this.__cache.has(identifier)) {\n      // the graph may still need to unload identity\n      (0,_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_1__.peekGraph)(storeWrapper)?.unload(identifier);\n      return;\n    }\n    const removeFromRecordArray = !this.isDeletionCommitted(identifier);\n    let removed = false;\n    const cached = this.__peek(identifier, false);\n    if (cached.isNew) {\n      (0,_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_1__.peekGraph)(storeWrapper)?.push({\n        op: 'deleteRecord',\n        record: identifier,\n        isNew: true\n      });\n    } else {\n      (0,_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_1__.peekGraph)(storeWrapper)?.unload(identifier);\n    }\n\n    // effectively clearing these is ensuring that\n    // we report as `isEmpty` during teardown.\n    cached.localAttrs = null;\n    cached.remoteAttrs = null;\n    cached.inflightAttrs = null;\n    const relatedIdentifiers = _allRelatedIdentifiers(storeWrapper, identifier);\n    if (areAllModelsUnloaded(storeWrapper, relatedIdentifiers)) {\n      for (let i = 0; i < relatedIdentifiers.length; ++i) {\n        const relatedIdentifier = relatedIdentifiers[i];\n        storeWrapper.notifyChange(relatedIdentifier, 'removed');\n        removed = true;\n        storeWrapper.disconnectRecord(relatedIdentifier);\n      }\n    }\n    this.__cache.delete(identifier);\n    this.__destroyedCache.set(identifier, cached);\n\n    /*\n     * The destroy cache is a hack to prevent applications\n     * from blowing up during teardown. Accessing state\n     * on a destroyed record is not safe, but historically\n     * was possible due to a combination of teardown timing\n     * and retention of cached state directly on the\n     * record itself.\n     *\n     * Once we have deprecated accessing state on a destroyed\n     * instance we may remove this. The timing isn't a huge deal\n     * as momentarily retaining the objects outside the bounds\n     * of a test won't cause issues.\n     */\n    if (this.__destroyedCache.size === 1) {\n      // TODO do we still need this?\n      setTimeout(() => {\n        this.__destroyedCache.clear();\n      }, 100);\n    }\n    if (!removed && removeFromRecordArray) {\n      storeWrapper.notifyChange(identifier, 'removed');\n    }\n  }\n\n  // Granular Resource Data APIs\n  // ===========================\n\n  /**\n   * Retrieve the data for an attribute from the cache\n   *\n   * @method getAttr\n   * @public\n   * @param identifier\n   * @param field\n   * @return {unknown}\n   */\n  getAttr(identifier, attr) {\n    const cached = this.__peek(identifier, true);\n    if (cached.localAttrs && attr in cached.localAttrs) {\n      return cached.localAttrs[attr];\n    } else if (cached.inflightAttrs && attr in cached.inflightAttrs) {\n      return cached.inflightAttrs[attr];\n    } else if (cached.remoteAttrs && attr in cached.remoteAttrs) {\n      return cached.remoteAttrs[attr];\n    } else {\n      const attrSchema = this._capabilities.schema.fields(identifier).get(attr);\n      upgradeCapabilities(this._capabilities);\n      return getDefaultValue(attrSchema, identifier, this._capabilities._store);\n    }\n  }\n\n  /**\n   * Mutate the data for an attribute in the cache\n   *\n   * This method is a candidate to become a mutation\n   *\n   * @method setAttr\n   * @public\n   * @param identifier\n   * @param field\n   * @param value\n   */\n  setAttr(identifier, attr, value) {\n    const cached = this.__peek(identifier, false);\n    const existing = cached.inflightAttrs && attr in cached.inflightAttrs ? cached.inflightAttrs[attr] : cached.remoteAttrs && attr in cached.remoteAttrs ? cached.remoteAttrs[attr] : undefined;\n    if (existing !== value) {\n      cached.localAttrs = cached.localAttrs || Object.create(null);\n      cached.localAttrs[attr] = value;\n      cached.changes = cached.changes || Object.create(null);\n      cached.changes[attr] = [existing, value];\n    } else if (cached.localAttrs) {\n      delete cached.localAttrs[attr];\n      delete cached.changes[attr];\n    }\n    this._capabilities.notifyChange(identifier, 'attributes', attr);\n  }\n\n  /**\n   * Query the cache for the changed attributes of a resource.\n   *\n   * @method changedAttrs\n   * @public\n   * @param identifier\n   * @return {ChangedAttributesHash} { <field>: [<old>, <new>] }\n   */\n  changedAttrs(identifier) {\n    // TODO freeze in dev\n    return this.__peek(identifier, false).changes || Object.create(null);\n  }\n\n  /**\n   * Query the cache for whether any mutated attributes exist\n   *\n   * @method hasChangedAttrs\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */\n  hasChangedAttrs(identifier) {\n    const cached = this.__peek(identifier, true);\n    return cached.inflightAttrs !== null && Object.keys(cached.inflightAttrs).length > 0 || cached.localAttrs !== null && Object.keys(cached.localAttrs).length > 0;\n  }\n\n  /**\n   * Tell the cache to discard any uncommitted mutations to attributes\n   *\n   * This method is a candidate to become a mutation\n   *\n   * @method rollbackAttrs\n   * @public\n   * @param identifier\n   * @return {string[]} the names of fields that were restored\n   */\n  rollbackAttrs(identifier) {\n    const cached = this.__peek(identifier, false);\n    let dirtyKeys;\n    cached.isDeleted = false;\n    if (cached.localAttrs !== null) {\n      dirtyKeys = Object.keys(cached.localAttrs);\n      cached.localAttrs = null;\n      cached.changes = null;\n    }\n    if (cached.isNew) {\n      // > Note: Graph removal handled by unloadRecord\n      cached.isDeletionCommitted = true;\n      cached.isDeleted = true;\n      cached.isNew = false;\n    }\n    cached.inflightAttrs = null;\n    if (cached.errors) {\n      cached.errors = null;\n      this._capabilities.notifyChange(identifier, 'errors');\n    }\n    this._capabilities.notifyChange(identifier, 'state');\n    if (dirtyKeys && dirtyKeys.length) {\n      notifyAttributes(this._capabilities, identifier, dirtyKeys);\n    }\n    return dirtyKeys || [];\n  }\n\n  /**\n     * Query the cache for the changes to relationships of a resource.\n     *\n     * Returns a map of relationship names to RelationshipDiff objects.\n     *\n     * ```ts\n     * type RelationshipDiff =\n    | {\n        kind: 'collection';\n        remoteState: StableRecordIdentifier[];\n        additions: Set<StableRecordIdentifier>;\n        removals: Set<StableRecordIdentifier>;\n        localState: StableRecordIdentifier[];\n        reordered: boolean;\n      }\n    | {\n        kind: 'resource';\n        remoteState: StableRecordIdentifier | null;\n        localState: StableRecordIdentifier | null;\n      };\n      ```\n     *\n     * @method changedRelationships\n     * @public\n     * @param {StableRecordIdentifier} identifier\n     * @return {Map<string, RelationshipDiff>}\n     */\n  changedRelationships(identifier) {\n    return this.__graph.getChanged(identifier);\n  }\n\n  /**\n   * Query the cache for whether any mutated relationships exist\n   *\n   * @method hasChangedRelationships\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @return {boolean}\n   */\n  hasChangedRelationships(identifier) {\n    return this.__graph.hasChanged(identifier);\n  }\n\n  /**\n   * Tell the cache to discard any uncommitted mutations to relationships.\n   *\n   * This will also discard the change on any appropriate inverses.\n   *\n   * This method is a candidate to become a mutation\n   *\n   * @method rollbackRelationships\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @return {string[]} the names of relationships that were restored\n   */\n  rollbackRelationships(identifier) {\n    upgradeCapabilities(this._capabilities);\n    let result;\n    this._capabilities._store._join(() => {\n      result = this.__graph.rollback(identifier);\n    });\n    return result;\n  }\n\n  /**\n   * Query the cache for the current state of a relationship property\n   *\n   * @method getRelationship\n   * @public\n   * @param identifier\n   * @param field\n   * @return resource relationship object\n   */\n  getRelationship(identifier, field) {\n    return this.__graph.getData(identifier, field);\n  }\n\n  // Resource State\n  // ===============\n\n  /**\n   * Update the cache state for the given resource to be marked\n   * as locally deleted, or remove such a mark.\n   *\n   * This method is a candidate to become a mutation\n   *\n   * @method setIsDeleted\n   * @public\n   * @param identifier\n   * @param isDeleted {boolean}\n   */\n  setIsDeleted(identifier, isDeleted) {\n    const cached = this.__peek(identifier, false);\n    cached.isDeleted = isDeleted;\n    // > Note: Graph removal for isNew handled by unloadRecord\n    this._capabilities.notifyChange(identifier, 'state');\n  }\n\n  /**\n   * Query the cache for any validation errors applicable to the given resource.\n   *\n   * @method getErrors\n   * @public\n   * @param identifier\n   * @return {JsonApiError[]}\n   */\n  getErrors(identifier) {\n    return this.__peek(identifier, true).errors || [];\n  }\n\n  /**\n   * Query the cache for whether a given resource has any available data\n   *\n   * @method isEmpty\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */\n  isEmpty(identifier) {\n    const cached = this.__safePeek(identifier, true);\n    return cached ? cached.remoteAttrs === null && cached.inflightAttrs === null && cached.localAttrs === null : true;\n  }\n\n  /**\n   * Query the cache for whether a given resource was created locally and not\n   * yet persisted.\n   *\n   * @method isNew\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */\n  isNew(identifier) {\n    // TODO can we assert here?\n    return this.__safePeek(identifier, true)?.isNew || false;\n  }\n\n  /**\n   * Query the cache for whether a given resource is marked as deleted (but not\n   * necessarily persisted yet).\n   *\n   * @method isDeleted\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */\n  isDeleted(identifier) {\n    // TODO can we assert here?\n    return this.__safePeek(identifier, true)?.isDeleted || false;\n  }\n\n  /**\n   * Query the cache for whether a given resource has been deleted and that deletion\n   * has also been persisted.\n   *\n   * @method isDeletionCommitted\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */\n  isDeletionCommitted(identifier) {\n    // TODO can we assert here?\n    return this.__safePeek(identifier, true)?.isDeletionCommitted || false;\n  }\n\n  /**\n   * Private method used to populate an entry for the identifier\n   *\n   * @method _createCache\n   * @internal\n   * @param {StableRecordIdentifier} identifier\n   * @return {CachedResource}\n   */\n  _createCache(identifier) {\n    ( true && !(!this.__cache.has(identifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected no resource data to yet exist in the cache`, !this.__cache.has(identifier)));\n    const cache = makeCache();\n    this.__cache.set(identifier, cache);\n    return cache;\n  }\n\n  /**\n   * Peek whether we have cached resource data matching the identifier\n   * without asserting if the resource data is missing.\n   *\n   * @method __safePeek\n   * @param {StableRecordIdentifier} identifier\n   * @param {Boolean} allowDestroyed\n   * @internal\n   * @return {CachedResource | undefined}\n   */\n  __safePeek(identifier, allowDestroyed) {\n    let resource = this.__cache.get(identifier);\n    if (!resource && allowDestroyed) {\n      resource = this.__destroyedCache.get(identifier);\n    }\n    return resource;\n  }\n\n  /**\n   * Peek whether we have cached resource data matching the identifier\n   * Asserts if the resource data is missing.\n   *\n   * @method __Peek\n   * @param {StableRecordIdentifier} identifier\n   * @param {Boolean} allowDestroyed\n   * @internal\n   * @return {CachedResource}\n   */\n  __peek(identifier, allowDestroyed) {\n    const resource = this.__safePeek(identifier, allowDestroyed);\n    ( true && !(resource) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected Cache to have a resource entry for the identifier ${String(identifier)} but none was found`, resource));\n    return resource;\n  }\n}\nfunction areAllModelsUnloaded(wrapper, identifiers) {\n  for (let i = 0; i < identifiers.length; ++i) {\n    const identifier = identifiers[i];\n    if (wrapper.hasRecord(identifier)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getLocalState(rel) {\n  if ((0,_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_1__.isBelongsTo)(rel)) {\n    return rel.localState ? [rel.localState] : [];\n  }\n  return rel.additions ? [...rel.additions] : [];\n}\nfunction getRemoteState(rel) {\n  if ((0,_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_1__.isBelongsTo)(rel)) {\n    return rel.remoteState ? [rel.remoteState] : [];\n  }\n  return rel.remoteState;\n}\nfunction getDefaultValue(schema, identifier, store) {\n  const options = schema?.options;\n  if (!schema || !options && !schema.type) {\n    return;\n  }\n  if (schema.kind !== 'attribute' && schema.kind !== 'field') {\n    return;\n  }\n\n  // legacy support for defaultValues that are functions\n  if (typeof options?.defaultValue === 'function') {\n    // If anyone opens an issue for args not working right, we'll restore + deprecate it via a Proxy\n    // that lazily instantiates the record. We don't want to provide any args here\n    // because in a non @ember-data/model world they don't make sense.\n    return options.defaultValue();\n    // legacy support for defaultValues that are primitives\n  } else if (options && 'defaultValue' in options) {\n    const defaultValue = options.defaultValue;\n    ( true && !(typeof defaultValue !== 'object' || defaultValue === null) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Non primitive defaultValues are not supported because they are shared between all instances. If you would like to use a complex object as a default value please provide a function that returns the complex object.`, typeof defaultValue !== 'object' || defaultValue === null));\n    return defaultValue;\n\n    // new style transforms\n  } else if (schema.kind !== 'attribute' && schema.type) {\n    const transform = store.schema.transforms?.get(schema.type);\n    if (transform?.defaultValue) {\n      return transform.defaultValue(options || null, identifier);\n    }\n  }\n}\nfunction notifyAttributes(storeWrapper, identifier, keys) {\n  if (!keys) {\n    storeWrapper.notifyChange(identifier, 'attributes');\n    return;\n  }\n  for (let i = 0; i < keys.length; i++) {\n    storeWrapper.notifyChange(identifier, 'attributes', keys[i]);\n  }\n}\n\n/*\n      TODO @deprecate IGOR DAVID\n      There seems to be a potential bug here, where we will return keys that are not\n      in the schema\n  */\nfunction calculateChangedKeys(cached, updates) {\n  const changedKeys = [];\n  if (updates) {\n    const keys = Object.keys(updates);\n    const length = keys.length;\n    const localAttrs = cached.localAttrs;\n    const original = Object.assign(Object.create(null), cached.remoteAttrs, cached.inflightAttrs);\n    for (let i = 0; i < length; i++) {\n      const key = keys[i];\n      const value = updates[key];\n\n      // A value in localAttrs means the user has a local change to\n      // this attribute. We never override this value when merging\n      // updates from the backend so we should not sent a change\n      // notification if the server value differs from the original.\n      if (localAttrs && localAttrs[key] !== undefined) {\n        continue;\n      }\n      if (original[key] !== value) {\n        changedKeys.push(key);\n      }\n    }\n  }\n  return changedKeys;\n}\nfunction cacheIsEmpty(cached) {\n  return !cached || cached.remoteAttrs === null && cached.inflightAttrs === null && cached.localAttrs === null;\n}\nfunction _isEmpty(peeked) {\n  if (!peeked) {\n    return true;\n  }\n  const isNew = peeked.isNew;\n  const isDeleted = peeked.isDeleted;\n  const isEmpty = cacheIsEmpty(peeked);\n  return (!isNew || isDeleted) && isEmpty;\n}\nfunction recordIsLoaded(cached, filterDeleted = false) {\n  if (!cached) {\n    return false;\n  }\n  const isNew = cached.isNew;\n  const isEmpty = cacheIsEmpty(cached);\n\n  // if we are new we must consider ourselves loaded\n  if (isNew) {\n    return !cached.isDeleted;\n  }\n  // even if we have a past request, if we are now empty we are not loaded\n  // typically this is true after an unloadRecord call\n\n  // if we are not empty, not new && we have a fulfilled request then we are loaded\n  // we should consider allowing for something to be loaded that is simply \"not empty\".\n  // which is how RecordState currently handles this case; however, RecordState is buggy\n  // in that it does not account for unloading.\n  return filterDeleted && cached.isDeletionCommitted ? false : !isEmpty;\n}\nfunction _isLoading(peeked, capabilities, identifier) {\n  // TODO refactor things such that the cache is not required to know\n  // about isLoading\n  const req = capabilities._store.getRequestStateService();\n  // const fulfilled = req.getLastRequestForRecord(identifier);\n  const isLoaded = recordIsLoaded(peeked);\n  return !isLoaded &&\n  // fulfilled === null &&\n  req.getPendingRequestsForRecord(identifier).some(r => r.type === 'query');\n}\nfunction setupRelationships(graph, storeWrapper, identifier, data) {\n  // TODO @runspired iterating by definitions instead of by payload keys\n  // allows relationship payloads to be ignored silently if no relationship\n  // definition exists. Ensure there's a test for this and then consider\n  // moving this to an assertion. This check should possibly live in the graph.\n  const relationships = storeWrapper.getSchemaDefinitionService().relationshipsDefinitionFor(identifier);\n  const keys = Object.keys(relationships);\n  for (let i = 0; i < keys.length; i++) {\n    const relationshipName = keys[i];\n    const relationshipData = data.relationships[relationshipName];\n    if (!relationshipData) {\n      continue;\n    }\n    graph.push({\n      op: 'updateRelationship',\n      record: identifier,\n      field: relationshipName,\n      value: relationshipData\n    });\n  }\n}\nfunction patchLocalAttributes(cached) {\n  const {\n    localAttrs,\n    remoteAttrs,\n    inflightAttrs,\n    changes\n  } = cached;\n  if (!localAttrs) {\n    cached.changes = null;\n    return false;\n  }\n  let hasAppliedPatch = false;\n  const mutatedKeys = Object.keys(localAttrs);\n  for (let i = 0, length = mutatedKeys.length; i < length; i++) {\n    const attr = mutatedKeys[i];\n    const existing = inflightAttrs && attr in inflightAttrs ? inflightAttrs[attr] : remoteAttrs && attr in remoteAttrs ? remoteAttrs[attr] : undefined;\n    if (existing === localAttrs[attr]) {\n      hasAppliedPatch = true;\n      delete localAttrs[attr];\n      delete changes[attr];\n    }\n  }\n  return hasAppliedPatch;\n}\nfunction putOne(cache, identifiers, resource) {\n  ( true && !(resource.id !== null && resource.id !== undefined && resource.id !== '') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You must include an 'id' for the resource data ${resource.type}`, resource.id !== null && resource.id !== undefined && resource.id !== ''));\n  ( true && !(cache._capabilities.getSchemaDefinitionService().doesTypeExist(resource.type)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Missing Resource Type: received resource data with a type '${resource.type}' but no schema could be found with that name.`, cache._capabilities.getSchemaDefinitionService().doesTypeExist(resource.type)));\n  let identifier = identifiers.peekRecordIdentifier(resource);\n  if (identifier) {\n    identifier = identifiers.updateRecordIdentifier(identifier, resource);\n  } else {\n    identifier = identifiers.getOrCreateRecordIdentifier(resource);\n  }\n  cache.upsert(identifier, resource, cache._capabilities.hasRecord(identifier));\n  // even if the identifier was not \"existing\" before, it is now\n  return identifier;\n}\n\n/*\n    Iterates over the set of internal models reachable from `this` across exactly one\n    relationship.\n  */\nfunction _directlyRelatedIdentifiersIterable(storeWrapper, originating) {\n  const graph = (0,_ember_data_graph_private__WEBPACK_IMPORTED_MODULE_1__.peekGraph)(storeWrapper);\n  const initializedRelationships = graph?.identifiers.get(originating);\n  if (!initializedRelationships) {\n    return EMPTY_ITERATOR;\n  }\n  const initializedRelationshipsArr = [];\n  Object.keys(initializedRelationships).forEach(key => {\n    const rel = initializedRelationships[key];\n    if (rel && !isImplicit(rel)) {\n      initializedRelationshipsArr.push(rel);\n    }\n  });\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  const findNext = () => {\n    while (i < initializedRelationshipsArr.length) {\n      while (j < 2) {\n        const relatedIdentifiers = j === 0 ? getLocalState(initializedRelationshipsArr[i]) : getRemoteState(initializedRelationshipsArr[i]);\n        while (k < relatedIdentifiers.length) {\n          const relatedIdentifier = relatedIdentifiers[k++];\n          if (relatedIdentifier !== null) {\n            return relatedIdentifier;\n          }\n        }\n        k = 0;\n        j++;\n      }\n      j = 0;\n      i++;\n    }\n    return undefined;\n  };\n  return {\n    iterator() {\n      return {\n        next: () => {\n          const value = findNext();\n          return {\n            value,\n            done: value === undefined\n          };\n        }\n      };\n    }\n  };\n}\n\n/*\n      Computes the set of Identifiers reachable from this Identifier.\n\n      Reachability is determined over the relationship graph (ie a graph where\n      nodes are identifiers and edges are belongs to or has many\n      relationships).\n\n      Returns an array including `this` and all identifiers reachable\n      from `this.identifier`.\n    */\nfunction _allRelatedIdentifiers(storeWrapper, originating) {\n  const array = [];\n  const queue = [];\n  const seen = new Set();\n  queue.push(originating);\n  while (queue.length > 0) {\n    const identifier = queue.shift();\n    array.push(identifier);\n    seen.add(identifier);\n    const iterator = _directlyRelatedIdentifiersIterable(storeWrapper, originating).iterator();\n    for (let obj = iterator.next(); !obj.done; obj = iterator.next()) {\n      const relatedIdentifier = obj.value;\n      if (relatedIdentifier && !seen.has(relatedIdentifier)) {\n        seen.add(relatedIdentifier);\n        queue.push(relatedIdentifier);\n      }\n    }\n  }\n  return array;\n}\nfunction isMetaDocument(doc) {\n  return !(doc instanceof Error) && doc.content && !('data' in doc.content) && !('included' in doc.content) && 'meta' in doc.content;\n}\nfunction isErrorDocument(doc) {\n  return doc instanceof Error;\n}\nfunction fromBaseDocument(doc) {\n  const resourceDocument = {};\n  const jsonApiDoc = doc.content;\n  if (jsonApiDoc) {\n    copyLinksAndMeta(resourceDocument, jsonApiDoc);\n  }\n  return resourceDocument;\n}\nfunction fromStructuredError(doc) {\n  const errorDoc = {};\n  if (doc.content) {\n    copyLinksAndMeta(errorDoc, doc.content);\n    if ('errors' in doc.content) {\n      errorDoc.errors = doc.content.errors;\n    } else if (typeof doc.error === 'object' && 'errors' in doc.error) {\n      errorDoc.errors = doc.error.errors;\n    } else {\n      errorDoc.errors = [{\n        title: doc.message\n      }];\n    }\n  }\n  return errorDoc;\n}\nfunction copyLinksAndMeta(target, source) {\n  if ('links' in source) {\n    target.links = source.links;\n  }\n  if ('meta' in source) {\n    target.meta = source.meta;\n  }\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/json-api.d7f0a39f/node_modules/@ember-data/json-api/index.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/json-api.d7f0a39f/node_modules/@ember-data/json-api/request.js":
/*!********************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/json-api.d7f0a39f/node_modules/@ember-data/json-api/request.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createRecord: () => (/* binding */ createRecord),\n/* harmony export */   deleteRecord: () => (/* binding */ deleteRecord),\n/* harmony export */   findRecord: () => (/* binding */ findRecord),\n/* harmony export */   postQuery: () => (/* binding */ postQuery),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   serializePatch: () => (/* binding */ serializePatch),\n/* harmony export */   serializeResources: () => (/* binding */ serializeResources),\n/* harmony export */   setBuildURLConfig: () => (/* binding */ setBuildURLConfig),\n/* harmony export */   updateRecord: () => (/* binding */ updateRecord)\n/* harmony export */ });\n/* harmony import */ var ember_inflector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ember-inflector */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/index.js\");\n/* harmony import */ var _ember_data_request_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/request-utils */ \"../rewritten-packages/@ember-data/request-utils.d2e97183/node_modules/@ember-data/request-utils/index.js\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _ember_data_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember-data/store */ \"../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/index.js\");\n\n\n\n\n\n/**\n * @module @ember-data/json-api/request\n */\n\nconst JsonApiAccept = 'application/vnd.api+json';\nconst DEFAULT_CONFIG = {\n  host: '',\n  namespace: ''\n};\nlet ACCEPT_HEADER_VALUE = 'application/vnd.api+json';\n\n/**\n * Allows setting extensions and profiles to be used in the `Accept` header.\n *\n * Extensions and profiles are keyed by their namespace with the value being\n * their URI.\n *\n * Example:\n *\n * ```ts\n * setBuildURLConfig({\n *   extensions: {\n *     atomic: 'https://jsonapi.org/ext/atomic'\n *   },\n *   profiles: {\n *     pagination: 'https://jsonapi.org/profiles/ethanresnick/cursor-pagination'\n *   }\n * });\n * ```\n *\n * This also sets the global configuration for `buildBaseURL`\n * for host and namespace values for the application\n * in the `@ember-data/request-utils` package.\n *\n * These values may still be overridden by passing\n * them to buildBaseURL directly.\n *\n * This method may be called as many times as needed\n *\n * ```ts\n * type BuildURLConfig = {\n *   host: string;\n *   namespace: string'\n * }\n * ```\n *\n * @method setBuildURLConfig\n * @static\n * @public\n * @for @ember-data/json-api/request\n * @param {BuildURLConfig} config\n * @return void\n */\nfunction setBuildURLConfig(config) {\n  Object.assign({}, DEFAULT_CONFIG, config);\n  if (config.profiles || config.extensions) {\n    let accept = JsonApiAccept;\n    if (config.profiles) {\n      const profiles = Object.values(config.profiles);\n      if (profiles.length) {\n        accept += ';profile=\"' + profiles.join(' ') + '\"';\n      }\n    }\n    if (config.extensions) {\n      const extensions = Object.values(config.extensions);\n      if (extensions.length) {\n        accept += ';ext=' + extensions.join(' ');\n      }\n    }\n    ACCEPT_HEADER_VALUE = accept;\n  }\n  (0,_ember_data_request_utils__WEBPACK_IMPORTED_MODULE_1__.setBuildURLConfig)(config);\n}\nfunction copyForwardUrlOptions(urlOptions, options) {\n  if ('host' in options) {\n    urlOptions.host = options.host;\n  }\n  if ('namespace' in options) {\n    urlOptions.namespace = options.namespace;\n  }\n  if ('resourcePath' in options) {\n    urlOptions.resourcePath = options.resourcePath;\n  }\n}\nfunction extractCacheOptions(options) {\n  const cacheOptions = {};\n  if ('reload' in options) {\n    cacheOptions.reload = options.reload;\n  }\n  if ('backgroundReload' in options) {\n    cacheOptions.backgroundReload = options.backgroundReload;\n  }\n  return cacheOptions;\n}\n\n/**\n * @module @ember-data/json-api/request\n */\n\n/**\n * Builds request options to fetch a single resource by a known id or identifier\n * configured for the url and header expectations of most JSON:API APIs.\n *\n * **Basic Usage**\n *\n * ```ts\n * import { findRecord } from '@ember-data/json-api/request';\n *\n * const data = await store.request(findRecord('person', '1'));\n * ```\n *\n * **With Options**\n *\n * ```ts\n * import { findRecord } from '@ember-data/json-api/request';\n *\n * const options = findRecord('person', '1', { include: ['pets', 'friends'] });\n * const data = await store.request(options);\n * ```\n *\n * **With an Identifier**\n *\n * ```ts\n * import { findRecord } from '@ember-data/json-api/request';\n *\n * const options = findRecord({ type: 'person', id: '1' }, { include: ['pets', 'friends'] });\n * const data = await store.request(options);\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's lifetimes service, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's lifetimes service,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { findRecord } from '@ember-data/json-api/request';\n *\n * const options = findRecord('person', '1', { include: ['pets', 'friends'] }, { namespace: 'api/v2' });\n * const data = await store.request(options);\n * ```\n *\n * @method findRecord\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param identifier\n * @param options\n */\n\nfunction findRecord(arg1, arg2, arg3) {\n  const identifier = typeof arg1 === 'string' ? {\n    type: arg1,\n    id: arg2\n  } : arg1;\n  const options = (typeof arg1 === 'string' ? arg3 : arg2) || {};\n  const cacheOptions = extractCacheOptions(options);\n  const urlOptions = {\n    identifier,\n    op: 'findRecord',\n    resourcePath: (0,ember_inflector__WEBPACK_IMPORTED_MODULE_0__.pluralize)(identifier.type)\n  };\n  copyForwardUrlOptions(urlOptions, options);\n  const url = (0,_ember_data_request_utils__WEBPACK_IMPORTED_MODULE_1__.buildBaseURL)(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', ACCEPT_HEADER_VALUE);\n  return {\n    url: options.include?.length ? `${url}?${(0,_ember_data_request_utils__WEBPACK_IMPORTED_MODULE_1__.buildQueryParams)({\n      include: options.include\n    }, options.urlParamsSettings)}` : url,\n    method: 'GET',\n    headers,\n    cacheOptions,\n    op: 'findRecord',\n    records: [identifier]\n  };\n}\n\n/**\n * @module @ember-data/json-api/request\n */\n\n/**\n * Builds request options to query for resources, usually by a primary\n * type, configured for the url and header expectations of most JSON:API APIs.\n *\n * The key difference between this and `postQuery` is that this method will send the query\n * as query params in the url of a \"GET\" request instead of as the JSON body of a \"POST\"\n * request.\n *\n * **Basic Usage**\n *\n * ```ts\n * import { query } from '@ember-data/json-api/request';\n *\n * const data = await store.request(query('person'));\n * ```\n *\n * **With Query Params**\n *\n * ```ts\n * import { query } from '@ember-data/json-api/request';\n *\n * const options = query('person', { include: ['pets', 'friends'] });\n * const data = await store.request(options);\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's lifetimes service, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's lifetimes service,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { query } from '@ember-data/json-api/request';\n *\n * const options = query('person', { include: ['pets', 'friends'] }, { reload: true });\n * const data = await store.request(options);\n * ```\n *\n * @method query\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param identifier\n * @param query\n * @param options\n */\nfunction query(type,\n// eslint-disable-next-line @typescript-eslint/no-shadow\nquery = {}, options = {}) {\n  const cacheOptions = extractCacheOptions(options);\n  const urlOptions = {\n    identifier: {\n      type\n    },\n    op: 'query',\n    resourcePath: (0,ember_inflector__WEBPACK_IMPORTED_MODULE_0__.pluralize)(type)\n  };\n  copyForwardUrlOptions(urlOptions, options);\n  const url = (0,_ember_data_request_utils__WEBPACK_IMPORTED_MODULE_1__.buildBaseURL)(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', ACCEPT_HEADER_VALUE);\n  const queryString = (0,_ember_data_request_utils__WEBPACK_IMPORTED_MODULE_1__.buildQueryParams)(query, options.urlParamsSettings);\n  return {\n    url: queryString ? `${url}?${queryString}` : url,\n    method: 'GET',\n    headers,\n    cacheOptions,\n    op: 'query'\n  };\n}\n\n/**\n * Builds request options to query for resources, usually by a primary\n * type, configured for the url and header expectations of most JSON:API APIs.\n *\n * The key difference between this and `query` is that this method will send the query\n * as the JSON body of a \"POST\" request instead of as query params in the url of a \"GET\"\n * request.\n *\n * A CacheKey is generated from the url and query params, and used to cache the response\n * in the store.\n *\n * ```ts\n * import { postQuery } from '@ember-data/json-api/request';\n *\n * const options = postQuery('person', { include: ['pets', 'friends'] });\n * const data = await store.request(options);\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's lifetimes service, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's lifetimes service,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { postQuery } from '@ember-data/json-api/request';\n *\n * const options = postQuery('person', { include: ['pets', 'friends'] }, { reload: true });\n * const data = await store.request(options);\n * ```\n *\n * @method postQuery\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param identifier\n * @param query\n * @param options\n */\nfunction postQuery(type,\n// eslint-disable-next-line @typescript-eslint/no-shadow\nquery = {}, options = {}) {\n  const cacheOptions = extractCacheOptions(options);\n  const urlOptions = {\n    identifier: {\n      type\n    },\n    op: 'query',\n    resourcePath: options.resourcePath ?? (0,ember_inflector__WEBPACK_IMPORTED_MODULE_0__.pluralize)(type)\n  };\n  copyForwardUrlOptions(urlOptions, options);\n  const url = (0,_ember_data_request_utils__WEBPACK_IMPORTED_MODULE_1__.buildBaseURL)(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', ACCEPT_HEADER_VALUE);\n  const queryData = structuredClone(query);\n  cacheOptions.key = cacheOptions.key ?? `${url}?${(0,_ember_data_request_utils__WEBPACK_IMPORTED_MODULE_1__.buildQueryParams)(queryData, options.urlParamsSettings)}`;\n  return {\n    url,\n    method: 'POST',\n    body: JSON.stringify(query),\n    headers,\n    cacheOptions: cacheOptions,\n    op: 'query'\n  };\n}\nfunction isExisting(identifier) {\n  return 'id' in identifier && identifier.id !== null && 'type' in identifier && identifier.type !== null;\n}\n\n/**\n * Builds request options to delete record for resources,\n * configured for the url, method and header expectations of most JSON:API APIs.\n *\n * **Basic Usage**\n *\n * ```ts\n * import { deleteRecord } from '@ember-data/json-api/request';\n *\n * const person = this.store.peekRecord('person', '1');\n *\n * // mark record as deleted\n * store.deleteRecord(person);\n *\n * // persist deletion\n * const data = await store.request(deleteRecord(person));\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's lifetimes service, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's lifetimes service,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { deleteRecord } from '@ember-data/json-api/request';\n *\n * const person = this.store.peekRecord('person', '1');\n *\n * // mark record as deleted\n * store.deleteRecord(person);\n *\n * // persist deletion\n * const options = deleteRecord(person, { namespace: 'api/v1' });\n * const data = await store.request(options);\n * ```\n *\n * @method deleteRecord\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param record\n * @param options\n */\nfunction deleteRecord(record, options = {}) {\n  const identifier = (0,_ember_data_store__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(record);\n  ( true && !(identifier) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.assert)(`Expected to be given a record instance`, identifier));\n  ( true && !(isExisting(identifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.assert)(`Cannot delete a record that does not have an associated type and id.`, isExisting(identifier)));\n  const urlOptions = {\n    identifier: identifier,\n    op: 'deleteRecord',\n    resourcePath: (0,ember_inflector__WEBPACK_IMPORTED_MODULE_0__.pluralize)(identifier.type)\n  };\n  copyForwardUrlOptions(urlOptions, options);\n  const url = (0,_ember_data_request_utils__WEBPACK_IMPORTED_MODULE_1__.buildBaseURL)(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', ACCEPT_HEADER_VALUE);\n  return {\n    url,\n    method: 'DELETE',\n    headers,\n    op: 'deleteRecord',\n    data: {\n      record: identifier\n    },\n    records: [identifier]\n  };\n}\n\n/**\n * Builds request options to create new record for resources,\n * configured for the url, method and header expectations of most JSON:API APIs.\n *\n * **Basic Usage**\n *\n * ```ts\n * import { createRecord } from '@ember-data/json-api/request';\n *\n * const person = this.store.createRecord('person', { name: 'Ted' });\n * const data = await store.request(createRecord(person));\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's lifetimes service, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's lifetimes service,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { createRecord } from '@ember-data/json-api/request';\n *\n * const person = this.store.createRecord('person', { name: 'Ted' });\n * const options = createRecord(person, { namespace: 'api/v1' });\n * const data = await store.request(options);\n * ```\n *\n * @method createRecord\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param record\n * @param options\n */\nfunction createRecord(record, options = {}) {\n  const identifier = (0,_ember_data_store__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(record);\n  ( true && !(identifier) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.assert)(`Expected to be given a record instance`, identifier));\n  const urlOptions = {\n    identifier: identifier,\n    op: 'createRecord',\n    resourcePath: (0,ember_inflector__WEBPACK_IMPORTED_MODULE_0__.pluralize)(identifier.type)\n  };\n  copyForwardUrlOptions(urlOptions, options);\n  const url = (0,_ember_data_request_utils__WEBPACK_IMPORTED_MODULE_1__.buildBaseURL)(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', ACCEPT_HEADER_VALUE);\n  return {\n    url,\n    method: 'POST',\n    headers,\n    op: 'createRecord',\n    data: {\n      record: identifier\n    },\n    records: [identifier]\n  };\n}\n\n/**\n * Builds request options to update existing record for resources,\n * configured for the url, method and header expectations of most JSON:API APIs.\n *\n * **Basic Usage**\n *\n * ```ts\n * import { updateRecord } from '@ember-data/json-api/request';\n *\n * const person = this.store.peekRecord('person', '1');\n * person.name = 'Chris';\n * const data = await store.request(updateRecord(person));\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `patch` - Allows caller to specify whether to use a PATCH request instead of a PUT request, defaults to `false`.\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's lifetimes service, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's lifetimes service,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { updateRecord } from '@ember-data/json-api/request';\n *\n * const person = this.store.peekRecord('person', '1');\n * person.name = 'Chris';\n * const options = updateRecord(person, { patch: true });\n * const data = await store.request(options);\n * ```\n *\n * @method updateRecord\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param record\n * @param options\n */\nfunction updateRecord(record, options = {}) {\n  const identifier = (0,_ember_data_store__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(record);\n  ( true && !(identifier) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.assert)(`Expected to be given a record instance`, identifier));\n  ( true && !(isExisting(identifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.assert)(`Cannot update a record that does not have an associated type and id.`, isExisting(identifier)));\n  const urlOptions = {\n    identifier: identifier,\n    op: 'updateRecord',\n    resourcePath: (0,ember_inflector__WEBPACK_IMPORTED_MODULE_0__.pluralize)(identifier.type)\n  };\n  copyForwardUrlOptions(urlOptions, options);\n  const url = (0,_ember_data_request_utils__WEBPACK_IMPORTED_MODULE_1__.buildBaseURL)(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', ACCEPT_HEADER_VALUE);\n  return {\n    url,\n    method: options.patch ? 'PATCH' : 'PUT',\n    headers,\n    op: 'updateRecord',\n    data: {\n      record: identifier\n    },\n    records: [identifier]\n  };\n}\n\n/**\n * @module @ember-data/json-api/request\n */\n\n/**\n * Serializes the current state of a resource or array of resources for use with POST or PUT requests.\n *\n * @method serializeResources\n * @static\n * @public\n * @for @ember-data/json-api/request\n * @param {Cache} cache}\n * @param {StableRecordIdentifier} identifier\n * @return {object} An object with a `data` property containing the serialized resource patch\n */\n\nfunction serializeResources(cache, identifiers) {\n  return {\n    data: Array.isArray(identifiers) ? identifiers.map(identifier => _serializeResource(cache, identifier)) : _serializeResource(cache, identifiers)\n  };\n}\nfunction _serializeResource(cache, identifier) {\n  const {\n    id,\n    lid,\n    type\n  } = identifier;\n  // yup! this method actually does nothing. It's just here for the dev assertion\n  // and to assist in providing a little sugar to the consuming app via the `serializeResources` utility\n  const record = cache.peek(identifier);\n  ( true && !(record) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.assert)(`A record with id ${String(id)} and type ${type} for lid ${lid} was not found not in the supplied Cache.`, record));\n  return record;\n}\n\n/**\n * Serializes changes to a resource for use with PATCH requests.\n *\n * Only attributes which are changed are serialized.\n * Only relationships which are changed are serialized.\n *\n * Collection relationships serialize the collection as a whole.\n *\n * If you would like to serialize updates to a collection more granularly\n * (for instance, as operations) request the diff from the store and\n * serialize as desired:\n *\n * ```ts\n * const relationshipDiffMap = cache.changedRelationships(identifier);\n * ```\n *\n * @method serializePatch\n * @static\n * @public\n * @for @ember-data/json-api/request\n * @param {Cache} cache}\n * @param {StableRecordIdentifier} identifier\n * @return {object} An object with a `data` property containing the serialized resource patch\n */\nfunction serializePatch(cache, identifier) {\n  const {\n    id,\n    lid,\n    type\n  } = identifier;\n  const record = cache.peek(identifier);\n  ( true && !(record) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.assert)(`A record with id ${String(id)} and type ${type} for lid ${lid} was not found not in the supplied Cache.`, record));\n  const data = {\n    type,\n    lid,\n    id\n  };\n  if (cache.hasChangedAttrs(identifier)) {\n    const attrsChanges = cache.changedAttrs(identifier);\n    const attributes = {};\n    Object.keys(attrsChanges).forEach(key => {\n      const change = attrsChanges[key];\n      const newVal = change[1];\n      attributes[key] = newVal === undefined ? null : newVal;\n    });\n    data.attributes = attributes;\n  }\n  const changedRelationships = cache.changedRelationships(identifier);\n  if (changedRelationships.size) {\n    const relationships = {};\n    changedRelationships.forEach((diff, key) => {\n      relationships[key] = {\n        data: diff.localState\n      };\n    });\n    data.relationships = relationships;\n  }\n  return {\n    data\n  };\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/json-api.d7f0a39f/node_modules/@ember-data/json-api/request.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/legacy-compat.e84b6420/node_modules/@ember-data/legacy-compat/-private-1aicprWG.js":
/*!****************************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/legacy-compat.e84b6420/node_modules/@ember-data/legacy-compat/-private-1aicprWG.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   F: () => (/* binding */ FetchManager),\n/* harmony export */   S: () => (/* binding */ SaveOp),\n/* harmony export */   a: () => (/* binding */ assertIdentifierHasId),\n/* harmony export */   b: () => (/* binding */ SnapshotRecordArray),\n/* harmony export */   c: () => (/* binding */ Snapshot),\n/* harmony export */   i: () => (/* binding */ iterateData),\n/* harmony export */   n: () => (/* binding */ normalizeResponseHelper),\n/* harmony export */   p: () => (/* binding */ payloadIsNotBlank),\n/* harmony export */   u: () => (/* binding */ upgradeStore)\n/* harmony export */ });\n/* harmony import */ var _ember_data_store_private__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember-data/store/-private */ \"../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/-private.js\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_data_request__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember-data/request */ \"../rewritten-packages/@ember-data/request.7c2e6d52/node_modules/@ember-data/request/index.js\");\n/* harmony import */ var _embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../../@embroider/macros/src/addon/es-compat2 */ \"../../@embroider/macros/src/addon/es-compat2.js\");\n\n\n\n\n/**\n  @module @ember-data/legacy-compat\n*/\n\n/**\n  SnapshotRecordArray is not directly instantiable.\n  Instances are provided to consuming application's\n  adapters for certain requests.\n\n  @class SnapshotRecordArray\n  @public\n*/\n\nclass SnapshotRecordArray {\n  /**\n    SnapshotRecordArray is not directly instantiable.\n    Instances are provided to consuming application's\n    adapters and serializers for certain requests.\n     @method constructor\n    @private\n    @constructor\n    @param {Store} store\n    @param {string} type\n    @param options\n   */\n  constructor(store, type, options = {}) {\n    this.__store = store;\n    /**\n      An array of snapshots\n      @private\n      @property _snapshots\n      @type {Array}\n    */\n    this._snapshots = null;\n\n    /**\n    The modelName of the underlying records for the snapshots in the array, as a Model\n    @property modelName\n    @public\n    @type {Model}\n    */\n    this.modelName = type;\n\n    /**\n      A hash of adapter options passed into the store method for this request.\n       Example\n       ```app/adapters/post.js\n      import MyCustomAdapter from './custom-adapter';\n       export default class PostAdapter extends MyCustomAdapter {\n        findAll(store, type, sinceToken, snapshotRecordArray) {\n          if (snapshotRecordArray.adapterOptions.subscribe) {\n            // ...\n          }\n          // ...\n        }\n      }\n      ```\n       @property adapterOptions\n      @public\n      @type {Object}\n    */\n    this.adapterOptions = options.adapterOptions;\n\n    /**\n      The relationships to include for this request.\n       Example\n       ```app/adapters/application.js\n      import Adapter from '@ember-data/adapter';\n       export default class ApplicationAdapter extends Adapter {\n        findAll(store, type, snapshotRecordArray) {\n          let url = `/${type.modelName}?include=${encodeURIComponent(snapshotRecordArray.include)}`;\n           return fetch(url).then((response) => response.json())\n        }\n      }\n      ```\n       @property include\n      @public\n      @type {String|Array}\n    */\n    this.include = options.include;\n  }\n\n  /**\n    An array of records\n     @property _recordArray\n    @private\n    @type {Array}\n  */\n  get _recordArray() {\n    return this.__store.peekAll(this.modelName);\n  }\n\n  /**\n      Number of records in the array\n       Example\n       ```app/adapters/post.js\n      import JSONAPIAdapter from '@ember-data/adapter/json-api';\n       export default class PostAdapter extends JSONAPIAdapter {\n        shouldReloadAll(store, snapshotRecordArray) {\n          return !snapshotRecordArray.length;\n        }\n      });\n      ```\n       @property length\n      @public\n      @type {Number}\n    */\n  get length() {\n    return this._recordArray.length;\n  }\n\n  /**\n    Get snapshots of the underlying record array\n     Example\n     ```app/adapters/post.js\n    import JSONAPIAdapter from '@ember-data/adapter/json-api';\n     export default class PostAdapter extends JSONAPIAdapter {\n      shouldReloadAll(store, snapshotArray) {\n        let snapshots = snapshotArray.snapshots();\n         return snapshots.any(function(ticketSnapshot) {\n          let timeDiff = moment().diff(ticketSnapshot.attr('lastAccessedAt'), 'minutes');\n          if (timeDiff > 20) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n      }\n    }\n    ```\n     @method snapshots\n    @public\n    @return {Array} Array of snapshots\n  */\n  snapshots() {\n    if (this._snapshots !== null) {\n      return this._snapshots;\n    }\n    upgradeStore(this.__store);\n    const {\n      _fetchManager\n    } = this.__store;\n    this._snapshots = this._recordArray[_ember_data_store_private__WEBPACK_IMPORTED_MODULE_0__.SOURCE].map(identifier => _fetchManager.createSnapshot(identifier));\n    return this._snapshots;\n  }\n}\nfunction assertIdentifierHasId(identifier) {\n  ( true && !(identifier && identifier.id !== null) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Attempted to schedule a fetch for a record without an id.`, identifier && identifier.id !== null));\n}\nfunction iterateData(data, fn) {\n  if (Array.isArray(data)) {\n    return data.map(fn);\n  } else {\n    return fn(data);\n  }\n}\nfunction payloadIsNotBlank(adapterPayload) {\n  if (Array.isArray(adapterPayload)) {\n    return true;\n  } else {\n    return Object.keys(adapterPayload || {}).length !== 0;\n  }\n}\n\n/**\n  This is a helper method that validates a JSON API top-level document\n\n  The format of a document is described here:\n  http://jsonapi.org/format/#document-top-level\n\n  @internal\n*/\nfunction validateDocumentStructure(doc) {\n  {\n    const errors = [];\n    if (!doc || typeof doc !== 'object') {\n      errors.push('Top level of a JSON API document must be an object');\n    } else {\n      if (!('data' in doc) && !('errors' in doc) && !('meta' in doc)) {\n        errors.push('One or more of the following keys must be present: \"data\", \"errors\", \"meta\".');\n      } else {\n        if ('data' in doc && 'errors' in doc) {\n          errors.push('Top level keys \"errors\" and \"data\" cannot both be present in a JSON API document');\n        }\n      }\n      if ('data' in doc) {\n        if (!(doc.data === null || Array.isArray(doc.data) || typeof doc.data === 'object')) {\n          errors.push('data must be null, an object, or an array');\n        }\n      }\n      if ('meta' in doc) {\n        if (typeof doc.meta !== 'object') {\n          errors.push('meta must be an object');\n        }\n      }\n      if ('errors' in doc) {\n        if (!Array.isArray(doc.errors)) {\n          errors.push('errors must be an array');\n        }\n      }\n      if ('links' in doc) {\n        if (typeof doc.links !== 'object') {\n          errors.push('links must be an object');\n        }\n      }\n      if ('jsonapi' in doc) {\n        if (typeof doc.jsonapi !== 'object') {\n          errors.push('jsonapi must be an object');\n        }\n      }\n      if ('included' in doc) {\n        if (typeof doc.included !== 'object') {\n          errors.push('included must be an array');\n        }\n      }\n    }\n    ( true && !(errors.length === 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Response must be normalized to a valid JSON API document:\\n\\t* ${errors.join('\\n\\t* ')}`, errors.length === 0));\n  }\n}\nfunction normalizeResponseHelper(serializer, store, modelClass, payload, id, requestType) {\n  const normalizedResponse = serializer ? serializer.normalizeResponse(store, modelClass, payload, id, requestType) : payload;\n  validateDocumentStructure(normalizedResponse);\n  return normalizedResponse;\n}\n\n/**\n  @module @ember-data/store\n*/\n/**\n  Snapshot is not directly instantiable.\n  Instances are provided to a consuming application's\n  adapters and serializers for certain requests.\n\n  Snapshots are only available when using `@ember-data/legacy-compat`\n  for legacy compatibility with adapters and serializers.\n\n  @class Snapshot\n  @public\n*/\nclass Snapshot {\n  /**\n   * @method constructor\n   * @constructor\n   * @private\n   * @param options\n   * @param identifier\n   * @param _store\n   */\n  constructor(options, identifier, store) {\n    this._store = store;\n    this.__attributes = null;\n    this._belongsToRelationships = Object.create(null);\n    this._belongsToIds = Object.create(null);\n    this._hasManyRelationships = Object.create(null);\n    this._hasManyIds = Object.create(null);\n    const hasRecord = !!store._instanceCache.peek(identifier);\n    this.modelName = identifier.type;\n\n    /**\n      The unique RecordIdentifier associated with this Snapshot.\n       @property identifier\n      @public\n      @type {StableRecordIdentifier}\n    */\n    this.identifier = identifier;\n\n    /*\n      If the we do not yet have a record, then we are\n      likely a snapshot being provided to a find request, so we\n      populate __attributes lazily. Else, to preserve the \"moment\n      in time\" in which a snapshot is created, we greedily grab\n      the values.\n     */\n    if (hasRecord) {\n      this._attributes;\n    }\n\n    /**\n     The id of the snapshot's underlying record\n      Example\n      ```javascript\n     // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\n     postSnapshot.id; // => '1'\n     ```\n      @property id\n     @type {String}\n     @public\n     */\n    this.id = identifier.id;\n\n    /**\n     A hash of adapter options\n     @property adapterOptions\n     @type {Object}\n     @public\n     */\n    this.adapterOptions = options.adapterOptions;\n\n    /**\n     If `include` was passed to the options hash for the request, the value\n     would be available here.\n      @property include\n     @type {String|Array}\n     @public\n     */\n    this.include = options.include;\n\n    /**\n     The name of the type of the underlying record for this snapshot, as a string.\n      @property modelName\n     @type {String}\n     @public\n     */\n    this.modelName = identifier.type;\n    if (hasRecord) {\n      const cache = this._store.cache;\n      this._changedAttributes = cache.changedAttrs(identifier);\n    }\n  }\n\n  /**\n   The underlying record for this snapshot. Can be used to access methods and\n   properties defined on the record.\n    Example\n    ```javascript\n   let json = snapshot.record.toJSON();\n   ```\n    @property record\n   @type {Model}\n   @public\n   */\n  get record() {\n    const record = this._store.peekRecord(this.identifier);\n    ( true && !(record !== null) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Record ${this.identifier.type} ${this.identifier.id} (${this.identifier.lid}) is not yet loaded and thus cannot be accessed from the Snapshot during serialization`, record !== null));\n    return record;\n  }\n  get _attributes() {\n    if (this.__attributes !== null) {\n      return this.__attributes;\n    }\n    const attributes = this.__attributes = Object.create(null);\n    const {\n      identifier\n    } = this;\n    const attrs = Object.keys(this._store.getSchemaDefinitionService().attributesDefinitionFor(identifier));\n    const cache = this._store.cache;\n    attrs.forEach(keyName => {\n      attributes[keyName] = cache.getAttr(identifier, keyName);\n    });\n    return attributes;\n  }\n  get isNew() {\n    const cache = this._store.cache;\n    return cache?.isNew(this.identifier) || false;\n  }\n\n  /**\n   Returns the value of an attribute.\n    Example\n    ```javascript\n   // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\n   postSnapshot.attr('author'); // => 'Tomster'\n   postSnapshot.attr('title'); // => 'Ember.js rocks'\n   ```\n    Note: Values are loaded eagerly and cached when the snapshot is created.\n    @method attr\n   @param {String} keyName\n   @return {Object} The attribute value or undefined\n   @public\n   */\n  attr(keyName) {\n    if (keyName in this._attributes) {\n      return this._attributes[keyName];\n    }\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Model '${this.identifier.lid}' has no attribute named '${keyName}' defined.`, false));\n  }\n\n  /**\n   Returns all attributes and their corresponding values.\n    Example\n    ```javascript\n   // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\n   postSnapshot.attributes(); // => { author: 'Tomster', title: 'Ember.js rocks' }\n   ```\n    @method attributes\n   @return {Object} All attributes of the current snapshot\n   @public\n   */\n  attributes() {\n    return {\n      ...this._attributes\n    };\n  }\n\n  /**\n   Returns all changed attributes and their old and new values.\n    Example\n    ```javascript\n   // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\n   postModel.set('title', 'Ember.js rocks!');\n   postSnapshot.changedAttributes(); // => { title: ['Ember.js rocks', 'Ember.js rocks!'] }\n   ```\n    @method changedAttributes\n   @return {Object} All changed attributes of the current snapshot\n   @public\n   */\n  changedAttributes() {\n    const changedAttributes = Object.create(null);\n    if (!this._changedAttributes) {\n      return changedAttributes;\n    }\n    const changedAttributeKeys = Object.keys(this._changedAttributes);\n    for (let i = 0, length = changedAttributeKeys.length; i < length; i++) {\n      const key = changedAttributeKeys[i];\n      changedAttributes[key] = this._changedAttributes[key].slice();\n    }\n    return changedAttributes;\n  }\n\n  /**\n   Returns the current value of a belongsTo relationship.\n    `belongsTo` takes an optional hash of options as a second parameter,\n   currently supported options are:\n    - `id`: set to `true` if you only want the ID of the related record to be\n   returned.\n    Example\n    ```javascript\n   // store.push('post', { id: 1, title: 'Hello World' });\n   // store.createRecord('comment', { body: 'Lorem ipsum', post: post });\n   commentSnapshot.belongsTo('post'); // => Snapshot\n   commentSnapshot.belongsTo('post', { id: true }); // => '1'\n    // store.push('comment', { id: 1, body: 'Lorem ipsum' });\n   commentSnapshot.belongsTo('post'); // => undefined\n   ```\n    Calling `belongsTo` will return a new Snapshot as long as there's any known\n   data for the relationship available, such as an ID. If the relationship is\n   known but unset, `belongsTo` will return `null`. If the contents of the\n   relationship is unknown `belongsTo` will return `undefined`.\n    Note: Relationships are loaded lazily and cached upon first access.\n    @method belongsTo\n   @param {String} keyName\n   @param {Object} [options]\n   @public\n   @return {(Snapshot|String|null|undefined)} A snapshot or ID of a known\n   relationship or null if the relationship is known but unset. undefined\n   will be returned if the contents of the relationship is unknown.\n   */\n  belongsTo(keyName, options) {\n    const returnModeIsId = !!(options && options.id);\n    let result;\n    const store = this._store;\n    if (returnModeIsId === true && keyName in this._belongsToIds) {\n      return this._belongsToIds[keyName];\n    }\n    if (returnModeIsId === false && keyName in this._belongsToRelationships) {\n      return this._belongsToRelationships[keyName];\n    }\n    const relationshipMeta = store.getSchemaDefinitionService().relationshipsDefinitionFor({\n      type: this.modelName\n    })[keyName];\n    ( true && !(relationshipMeta && relationshipMeta.kind === 'belongsTo') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Model '${this.identifier.lid}' has no belongsTo relationship named '${keyName}' defined.`, relationshipMeta && relationshipMeta.kind === 'belongsTo')); // TODO @runspired it seems this code branch would not work with CUSTOM_MODEL_CLASSes\n    // this check is not a regression in behavior because relationships don't currently\n    // function without access to intimate API contracts between RecordData and Model.\n    // This is a requirement we should fix as soon as the relationship layer does not require\n    // this intimate API usage.\n    const graphFor = (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(__webpack_require__(/*! @ember-data/graph/-private */ \"../rewritten-packages/@ember-data/graph.4c9e27df/node_modules/@ember-data/graph/-private.js\")).graphFor;\n    const {\n      identifier\n    } = this;\n    {\n      const relationship = graphFor(this._store).get(identifier, keyName);\n      ( true && !(relationship) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You looked up the ${keyName} belongsTo relationship for { type: ${identifier.type}, id: ${identifier.id || ''}, lid: ${identifier.lid} but no such relationship was found.`, relationship));\n      ( true && !(relationship.definition.kind === 'belongsTo') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You looked up the ${keyName} belongsTo relationship for { type: ${identifier.type}, id: ${identifier.id || ''}, lid: ${identifier.lid} but that relationship is a hasMany.`, relationship.definition.kind === 'belongsTo'));\n    }\n    const value = graphFor(this._store).getData(identifier, keyName);\n    const data = value && value.data;\n    const inverseIdentifier = data ? store.identifierCache.getOrCreateRecordIdentifier(data) : null;\n    if (value && value.data !== undefined) {\n      const cache = store.cache;\n      if (inverseIdentifier && !cache.isDeleted(inverseIdentifier)) {\n        if (returnModeIsId) {\n          result = inverseIdentifier.id;\n        } else {\n          result = store._fetchManager.createSnapshot(inverseIdentifier);\n        }\n      } else {\n        result = null;\n      }\n    }\n    if (returnModeIsId) {\n      this._belongsToIds[keyName] = result;\n    } else {\n      this._belongsToRelationships[keyName] = result;\n    }\n    return result;\n  }\n\n  /**\n   Returns the current value of a hasMany relationship.\n    `hasMany` takes an optional hash of options as a second parameter,\n   currently supported options are:\n    - `ids`: set to `true` if you only want the IDs of the related records to be\n   returned.\n    Example\n    ```javascript\n   // store.push('post', { id: 1, title: 'Hello World', comments: [2, 3] });\n   postSnapshot.hasMany('comments'); // => [Snapshot, Snapshot]\n   postSnapshot.hasMany('comments', { ids: true }); // => ['2', '3']\n    // store.push('post', { id: 1, title: 'Hello World' });\n   postSnapshot.hasMany('comments'); // => undefined\n   ```\n    Note: Relationships are loaded lazily and cached upon first access.\n    @method hasMany\n   @param {String} keyName\n   @param {Object} [options]\n   @public\n   @return {(Array|undefined)} An array of snapshots or IDs of a known\n   relationship or an empty array if the relationship is known but unset.\n   undefined will be returned if the contents of the relationship is unknown.\n   */\n  hasMany(keyName, options) {\n    const returnModeIsIds = !!(options && options.ids);\n    let results;\n    const cachedIds = this._hasManyIds[keyName];\n    const cachedSnapshots = this._hasManyRelationships[keyName];\n    if (returnModeIsIds === true && keyName in this._hasManyIds) {\n      return cachedIds;\n    }\n    if (returnModeIsIds === false && keyName in this._hasManyRelationships) {\n      return cachedSnapshots;\n    }\n    const store = this._store;\n    const relationshipMeta = store.getSchemaDefinitionService().relationshipsDefinitionFor({\n      type: this.modelName\n    })[keyName];\n    ( true && !(relationshipMeta && relationshipMeta.kind === 'hasMany') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Model '${this.identifier.lid}' has no hasMany relationship named '${keyName}' defined.`, relationshipMeta && relationshipMeta.kind === 'hasMany')); // TODO @runspired it seems this code branch would not work with CUSTOM_MODEL_CLASSes\n    // this check is not a regression in behavior because relationships don't currently\n    // function without access to intimate API contracts between RecordData and Model.\n    // This is a requirement we should fix as soon as the relationship layer does not require\n    // this intimate API usage.\n    const graphFor = (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(__webpack_require__(/*! @ember-data/graph/-private */ \"../rewritten-packages/@ember-data/graph.4c9e27df/node_modules/@ember-data/graph/-private.js\")).graphFor;\n    const {\n      identifier\n    } = this;\n    {\n      const relationship = graphFor(this._store).get(identifier, keyName);\n      ( true && !(relationship) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You looked up the ${keyName} hasMany relationship for { type: ${identifier.type}, id: ${identifier.id || ''}, lid: ${identifier.lid} but no such relationship was found.`, relationship));\n      ( true && !(relationship.definition.kind === 'hasMany') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You looked up the ${keyName} hasMany relationship for { type: ${identifier.type}, id: ${identifier.id || ''}, lid: ${identifier.lid} but that relationship is a belongsTo.`, relationship.definition.kind === 'hasMany'));\n    }\n    const value = graphFor(this._store).getData(identifier, keyName);\n    if (value.data) {\n      results = [];\n      value.data.forEach(member => {\n        const inverseIdentifier = store.identifierCache.getOrCreateRecordIdentifier(member);\n        const cache = store.cache;\n        if (!cache.isDeleted(inverseIdentifier)) {\n          if (returnModeIsIds) {\n            results.push(inverseIdentifier.id);\n          } else {\n            results.push(store._fetchManager.createSnapshot(inverseIdentifier));\n          }\n        }\n      });\n    }\n\n    // we assign even if `undefined` so that we don't reprocess the relationship\n    // on next access. This works with the `keyName in` checks above.\n    if (returnModeIsIds) {\n      this._hasManyIds[keyName] = results;\n    } else {\n      this._hasManyRelationships[keyName] = results;\n    }\n    return results;\n  }\n\n  /**\n    Iterates through all the attributes of the model, calling the passed\n    function on each attribute.\n     Example\n     ```javascript\n    snapshot.eachAttribute(function(name, meta) {\n      // ...\n    });\n    ```\n     @method eachAttribute\n    @param {Function} callback the callback to execute\n    @param {Object} [binding] the value to which the callback's `this` should be bound\n    @public\n  */\n  eachAttribute(callback, binding) {\n    const attrDefs = this._store.getSchemaDefinitionService().attributesDefinitionFor(this.identifier);\n    Object.keys(attrDefs).forEach(key => {\n      callback.call(binding, key, attrDefs[key]);\n    });\n  }\n\n  /**\n    Iterates through all the relationships of the model, calling the passed\n    function on each relationship.\n     Example\n     ```javascript\n    snapshot.eachRelationship(function(name, relationship) {\n      // ...\n    });\n    ```\n     @method eachRelationship\n    @param {Function} callback the callback to execute\n    @param {Object} [binding] the value to which the callback's `this` should be bound\n    @public\n  */\n  eachRelationship(callback, binding) {\n    const relationshipDefs = this._store.getSchemaDefinitionService().relationshipsDefinitionFor(this.identifier);\n    Object.keys(relationshipDefs).forEach(key => {\n      callback.call(binding, key, relationshipDefs[key]);\n    });\n  }\n\n  /**\n    Serializes the snapshot using the serializer for the model.\n     Example\n     ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n     export default Adapter.extend({\n      createRecord(store, type, snapshot) {\n        let data = snapshot.serialize({ includeId: true });\n        let url = `/${type.modelName}`;\n         return fetch(url, {\n          method: 'POST',\n          body: data,\n        }).then((response) => response.json())\n      }\n    });\n    ```\n     @method serialize\n    @param {Object} options\n    @return {Object} an object whose values are primitive JSON values only\n    @public\n   */\n  serialize(options) {\n    upgradeStore(this._store);\n    const serializer = this._store.serializerFor(this.modelName);\n    ( true && !(serializer) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Cannot serialize record, no serializer found`, serializer));\n    return serializer.serialize(this, options);\n  }\n}\nconst SaveOp = Symbol('SaveOp');\nclass FetchManager {\n  // fetches pending in the runloop, waiting to be coalesced\n\n  constructor(store) {\n    this._store = store;\n    // used to keep track of all the find requests that need to be coalesced\n    this._pendingFetch = new Map();\n    this.requestCache = store.getRequestStateService();\n    this.isDestroyed = false;\n  }\n  createSnapshot(identifier, options = {}) {\n    return new Snapshot(options, identifier, this._store);\n  }\n\n  /**\n    This method is called by `record.save`, and gets passed a\n    resolver for the promise that `record.save` returns.\n     It schedules saving to happen at the end of the run loop.\n     @internal\n  */\n  scheduleSave(identifier, options) {\n    const resolver = (0,_ember_data_request__WEBPACK_IMPORTED_MODULE_2__.createDeferred)();\n    const query = {\n      op: 'saveRecord',\n      recordIdentifier: identifier,\n      options\n    };\n    const queryRequest = {\n      data: [query]\n    };\n    const snapshot = this.createSnapshot(identifier, options);\n    const pendingSaveItem = {\n      snapshot: snapshot,\n      resolver: resolver,\n      identifier,\n      options,\n      queryRequest\n    };\n    const monitored = this.requestCache._enqueue(resolver.promise, pendingSaveItem.queryRequest);\n    _flushPendingSave(this._store, pendingSaveItem);\n    return monitored;\n  }\n  scheduleFetch(identifier, options, request) {\n    const query = {\n      op: 'findRecord',\n      recordIdentifier: identifier,\n      options\n    };\n    const queryRequest = {\n      data: [query]\n    };\n    const pendingFetch = this.getPendingFetch(identifier, options);\n    if (pendingFetch) {\n      return pendingFetch;\n    }\n    const modelName = identifier.type;\n    const resolver = (0,_ember_data_request__WEBPACK_IMPORTED_MODULE_2__.createDeferred)();\n    const pendingFetchItem = {\n      identifier,\n      resolver,\n      options,\n      queryRequest\n    };\n    const resolverPromise = resolver.promise;\n    const store = this._store;\n    const isInitialLoad = !store._instanceCache.recordIsLoaded(identifier); // we don't use isLoading directly because we are the request\n\n    const monitored = this.requestCache._enqueue(resolverPromise, pendingFetchItem.queryRequest);\n    let promise = monitored.then(payload => {\n      // ensure that regardless of id returned we assign to the correct record\n      if (payload.data && !Array.isArray(payload.data)) {\n        payload.data.lid = identifier.lid;\n      }\n\n      // additional data received in the payload\n      // may result in the merging of identifiers (and thus records)\n      const potentiallyNewIm = store._push(payload, options.reload);\n      if (potentiallyNewIm && !Array.isArray(potentiallyNewIm)) {\n        return potentiallyNewIm;\n      }\n      return identifier;\n    }, error => {\n      ( true && !(!store.isDestroyed) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Async Leak Detected: Expected the store to not be destroyed`, !store.isDestroyed));\n      const cache = store.cache;\n      if (!cache || cache.isEmpty(identifier) || isInitialLoad) {\n        let isReleasable = true;\n        {\n          if (!cache) {\n            const graphFor = (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(__webpack_require__(/*! @ember-data/graph/-private */ \"../rewritten-packages/@ember-data/graph.4c9e27df/node_modules/@ember-data/graph/-private.js\")).graphFor;\n            const graph = graphFor(store);\n            isReleasable = graph.isReleasable(identifier);\n            if (!isReleasable) {\n              graph.unload(identifier, true);\n            }\n          }\n        }\n        if (cache || isReleasable) {\n          store._enableAsyncFlush = true;\n          store._instanceCache.unloadRecord(identifier);\n          store._enableAsyncFlush = null;\n        }\n      }\n      throw error;\n    });\n    if (this._pendingFetch.size === 0) {\n      void new Promise(resolve => setTimeout(resolve, 0)).then(() => {\n        this.flushAllPendingFetches();\n      });\n    }\n    const fetchesByType = this._pendingFetch;\n    let fetchesById = fetchesByType.get(modelName);\n    if (!fetchesById) {\n      fetchesById = new Map();\n      fetchesByType.set(modelName, fetchesById);\n    }\n    let requestsForIdentifier = fetchesById.get(identifier);\n    if (!requestsForIdentifier) {\n      requestsForIdentifier = [];\n      fetchesById.set(identifier, requestsForIdentifier);\n    }\n    requestsForIdentifier.push(pendingFetchItem);\n    {\n      if (!request.disableTestWaiter) {\n        const {\n          waitForPromise\n        } = (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(__webpack_require__(/*! @ember/test-waiters */ \"../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/index.js\"));\n        promise = waitForPromise(promise);\n      }\n    }\n    pendingFetchItem.promise = promise;\n    return promise;\n  }\n  getPendingFetch(identifier, options) {\n    const pendingFetches = this._pendingFetch.get(identifier.type)?.get(identifier);\n\n    // We already have a pending fetch for this\n    if (pendingFetches) {\n      const matchingPendingFetch = pendingFetches.find(fetch => isSameRequest(options, fetch.options));\n      if (matchingPendingFetch) {\n        return matchingPendingFetch.promise;\n      }\n    }\n  }\n  flushAllPendingFetches() {\n    if (this.isDestroyed) {\n      return;\n    }\n    const store = this._store;\n    this._pendingFetch.forEach((fetchItem, type) => _flushPendingFetchForType(store, fetchItem, type));\n    this._pendingFetch.clear();\n  }\n  fetchDataIfNeededForIdentifier(identifier, options = {}, request) {\n    // pre-loading will change the isEmpty value\n    const isEmpty = _isEmpty(this._store._instanceCache, identifier);\n    const isLoading = _isLoading(this._store._instanceCache, identifier);\n    let promise;\n    if (isEmpty) {\n      assertIdentifierHasId(identifier);\n      {\n        promise = this.scheduleFetch(identifier, Object.assign({}, options, {\n          reload: true\n        }), request);\n      }\n    } else if (isLoading) {\n      promise = this.getPendingFetch(identifier, options);\n      ( true && !(promise) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Expected to find a pending request for a record in the loading state, but found none`, promise));\n    } else {\n      promise = Promise.resolve(identifier);\n    }\n    return promise;\n  }\n  destroy() {\n    this.isDestroyed = true;\n  }\n}\nfunction _isEmpty(instanceCache, identifier) {\n  const cache = instanceCache.cache;\n  if (!cache) {\n    return true;\n  }\n  const isNew = cache.isNew(identifier);\n  const isDeleted = cache.isDeleted(identifier);\n  const isEmpty = cache.isEmpty(identifier);\n  return (!isNew || isDeleted) && isEmpty;\n}\nfunction _isLoading(cache, identifier) {\n  const req = cache.store.getRequestStateService();\n  // const fulfilled = req.getLastRequestForRecord(identifier);\n  const isLoaded = cache.recordIsLoaded(identifier);\n  return !isLoaded &&\n  // fulfilled === null &&\n  req.getPendingRequestsForRecord(identifier).some(r => r.type === 'query');\n}\nfunction includesSatisfies(current, existing) {\n  // if we have no includes we are good\n  if (!current?.length) {\n    return true;\n  }\n\n  // if we are here we have includes,\n  // and if existing has no includes then we will need a new request\n  if (!existing?.length) {\n    return false;\n  }\n  const arrCurrent = (Array.isArray(current) ? current : current.split(',')).sort();\n  const arrExisting = (Array.isArray(existing) ? existing : existing.split(',')).sort();\n\n  // includes are identical\n  if (arrCurrent.join(',') === arrExisting.join(',')) {\n    return true;\n  }\n\n  // if all of current includes are in existing includes then we are good\n  // so if we find one that is not in existing then we need a new request\n  for (let i = 0; i < arrCurrent.length; i++) {\n    if (!arrExisting.includes(arrCurrent[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction optionsSatisfies(current, existing) {\n  return !current || current === existing || Object.keys(current).length === 0;\n}\n\n// this function helps resolve whether we have a pending request that we should use instead\nfunction isSameRequest(options = {}, existingOptions = {}) {\n  return optionsSatisfies(options.adapterOptions, existingOptions.adapterOptions) && includesSatisfies(options.include, existingOptions.include);\n}\nfunction _findMany(store, adapter, modelName, snapshots) {\n  const modelClass = store.modelFor(modelName); // `adapter.findMany` gets the modelClass still\n  const promise = Promise.resolve().then(() => {\n    const ids = snapshots.map(s => s.id);\n    ( true && !(ids.every(v => v !== null)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Cannot fetch a record without an id`, ids.every(v => v !== null))); // eslint-disable-next-line @typescript-eslint/unbound-method\n    ( true && !(adapter.findMany) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Expected this adapter to implement findMany for coalescing`, adapter.findMany));\n    const ret = adapter.findMany(store, modelClass, ids, snapshots);\n    ( true && !(ret !== undefined) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)('adapter.findMany returned undefined, this was very likely a mistake', ret !== undefined));\n    return ret;\n  });\n  return promise.then(adapterPayload => {\n    ( true && !(!!payloadIsNotBlank(adapterPayload)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You made a 'findMany' request for '${modelName}' records with ids '[${snapshots.map(s => s.id).join(',')}]', but the adapter's response did not have any data`, !!payloadIsNotBlank(adapterPayload)));\n    const serializer = store.serializerFor(modelName);\n    const payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'findMany');\n    return payload;\n  });\n}\nfunction rejectFetchedItems(fetchMap, snapshots, error) {\n  for (let i = 0, l = snapshots.length; i < l; i++) {\n    const snapshot = snapshots[i];\n    const pair = fetchMap.get(snapshot);\n    if (pair) {\n      pair.resolver.reject(error || new Error(`Expected: '<${snapshot.modelName}:${snapshot.id}>' to be present in the adapter provided payload, but it was not found.`));\n    }\n  }\n}\nfunction handleFoundRecords(store, fetchMap, snapshots, coalescedPayload) {\n  /*\n    It is possible that the same ID is included multiple times\n    via multiple snapshots. This happens when more than one\n    options hash was supplied, each of which must be uniquely\n    accounted for.\n     However, since we can't map from response to a specific\n    options object, we resolve all snapshots by id with\n    the first response we see.\n  */\n  const snapshotsById = new Map();\n  for (let i = 0; i < snapshots.length; i++) {\n    const id = snapshots[i].id;\n    let snapshotGroup = snapshotsById.get(id);\n    if (!snapshotGroup) {\n      snapshotGroup = [];\n      snapshotsById.set(id, snapshotGroup);\n    }\n    snapshotGroup.push(snapshots[i]);\n  }\n  const included = Array.isArray(coalescedPayload.included) ? coalescedPayload.included : [];\n\n  // resolve found records\n  const resources = coalescedPayload.data;\n  for (let i = 0, l = resources.length; i < l; i++) {\n    const resource = resources[i];\n    const snapshotGroup = snapshotsById.get(resource.id);\n    snapshotsById.delete(resource.id);\n    if (!snapshotGroup) {\n      // TODO consider whether this should be a deprecation/assertion\n      included.push(resource);\n    } else {\n      snapshotGroup.forEach(snapshot => {\n        const pair = fetchMap.get(snapshot);\n        const resolver = pair.resolver;\n        resolver.resolve({\n          data: resource\n        });\n      });\n    }\n  }\n  if (included.length > 0) {\n    store._push({\n      data: null,\n      included\n    }, true);\n  }\n  if (snapshotsById.size === 0) {\n    return;\n  }\n\n  // reject missing records\n  const rejected = [];\n  snapshotsById.forEach(snapshotArray => {\n    rejected.push(...snapshotArray);\n  });\n  ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.warn)('Ember Data expected to find records with the following ids in the adapter response from findMany but they were missing: [ \"' + [...snapshotsById.values()].map(r => r[0].id).join('\", \"') + '\" ]', {\n    id: 'ds.store.missing-records-from-adapter'\n  }));\n  rejectFetchedItems(fetchMap, rejected);\n}\nfunction _fetchRecord(store, adapter, fetchItem) {\n  const identifier = fetchItem.identifier;\n  const modelName = identifier.type;\n  ( true && !(adapter) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You tried to find a record but you have no adapter (for ${modelName})`, adapter));\n  ( true && !(typeof adapter.findRecord === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You tried to find a record but your adapter (for ${modelName}) does not implement 'findRecord'`, typeof adapter.findRecord === 'function'));\n  const snapshot = store._fetchManager.createSnapshot(identifier, fetchItem.options);\n  const klass = store.modelFor(identifier.type);\n  const id = identifier.id;\n  let promise = Promise.resolve().then(() => {\n    return adapter.findRecord(store, klass, identifier.id, snapshot);\n  });\n  promise = promise.then(adapterPayload => {\n    ( true && !(!(store.isDestroyed || store.isDestroying)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Async Leak Detected: Expected the store to not be destroyed`, !(store.isDestroyed || store.isDestroying)));\n    ( true && !(!!payloadIsNotBlank(adapterPayload)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You made a 'findRecord' request for a '${modelName}' with id '${id}', but the adapter's response did not have any data`, !!payloadIsNotBlank(adapterPayload)));\n    const serializer = store.serializerFor(modelName);\n    const payload = normalizeResponseHelper(serializer, store, klass, adapterPayload, id, 'findRecord');\n    ( true && !(!Array.isArray(payload.data)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Ember Data expected the primary data returned from a 'findRecord' response to be an object but instead it found an array.`, !Array.isArray(payload.data)));\n    ( true && !('data' in payload && payload.data !== null && typeof payload.data === 'object') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`The 'findRecord' request for ${modelName}:${id} resolved indicating success but contained no primary data. To indicate a 404 not found you should either reject the promise returned by the adapter's findRecord method or throw a NotFoundError.`, 'data' in payload && payload.data !== null && typeof payload.data === 'object'));\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.warn)(`You requested a record of type '${modelName}' with id '${id}' but the adapter returned a payload with primary data having an id of '${payload.data.id}'. Use 'store.findRecord()' when the requested id is the same as the one returned by the adapter. In other cases use 'store.queryRecord()' instead.`, (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_0__.coerceId)(payload.data.id) === (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_0__.coerceId)(id), {\n      id: 'ds.store.findRecord.id-mismatch'\n    }));\n    return payload;\n  });\n  fetchItem.resolver.resolve(promise);\n}\nfunction _processCoalescedGroup(store, fetchMap, group, adapter, modelName) {\n  if (group.length > 1) {\n    _findMany(store, adapter, modelName, group).then(payloads => {\n      handleFoundRecords(store, fetchMap, group, payloads);\n    }).catch(error => {\n      rejectFetchedItems(fetchMap, group, error);\n    });\n  } else if (group.length === 1) {\n    _fetchRecord(store, adapter, fetchMap.get(group[0]));\n  } else {\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(\"You cannot return an empty array from adapter's method groupRecordsForFindMany\", false));\n  }\n}\nfunction _flushPendingFetchForType(store, pendingFetchMap, modelName) {\n  const adapter = store.adapterFor(modelName);\n  const shouldCoalesce = !!adapter.findMany && adapter.coalesceFindRequests;\n  if (shouldCoalesce) {\n    const pendingFetchItems = [];\n    pendingFetchMap.forEach((requestsForIdentifier, identifier) => {\n      if (requestsForIdentifier.length > 1) {\n        return;\n      }\n\n      // remove this entry from the map so it's not processed again\n      pendingFetchMap.delete(identifier);\n      pendingFetchItems.push(requestsForIdentifier[0]);\n    });\n    const totalItems = pendingFetchItems.length;\n    if (totalItems > 1) {\n      const snapshots = new Array(totalItems);\n      const fetchMap = new Map();\n      for (let i = 0; i < totalItems; i++) {\n        const fetchItem = pendingFetchItems[i];\n        snapshots[i] = store._fetchManager.createSnapshot(fetchItem.identifier, fetchItem.options);\n        fetchMap.set(snapshots[i], fetchItem);\n      }\n      let groups;\n      if (adapter.groupRecordsForFindMany) {\n        groups = adapter.groupRecordsForFindMany(store, snapshots);\n      } else {\n        groups = [snapshots];\n      }\n      for (let i = 0, l = groups.length; i < l; i++) {\n        _processCoalescedGroup(store, fetchMap, groups[i], adapter, modelName);\n      }\n    } else if (totalItems === 1) {\n      _fetchRecord(store, adapter, pendingFetchItems[0]);\n    }\n  }\n  pendingFetchMap.forEach(pendingFetchItems => {\n    pendingFetchItems.forEach(pendingFetchItem => {\n      _fetchRecord(store, adapter, pendingFetchItem);\n    });\n  });\n}\nfunction _flushPendingSave(store, pending) {\n  const {\n    snapshot,\n    resolver,\n    identifier,\n    options\n  } = pending;\n  const adapter = store.adapterFor(identifier.type);\n  const operation = options[SaveOp];\n  const modelName = snapshot.modelName;\n  const modelClass = store.modelFor(modelName);\n  ( true && !(adapter) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You tried to update a record but you have no adapter (for ${modelName})`, adapter));\n  ( true && !(typeof adapter[operation] === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You tried to update a record but your adapter (for ${modelName}) does not implement '${operation}'`, typeof adapter[operation] === 'function'));\n  let promise = Promise.resolve().then(() => adapter[operation](store, modelClass, snapshot));\n  const serializer = store.serializerFor(modelName);\n  ( true && !(promise !== undefined) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Your adapter's '${operation}' method must return a value, but it returned 'undefined'`, promise !== undefined));\n  promise = promise.then(adapterPayload => {\n    if (adapterPayload) {\n      return normalizeResponseHelper(serializer, store, modelClass, adapterPayload, snapshot.id, operation);\n    }\n  });\n  resolver.resolve(promise);\n}\n\n/**\n * Utilities - often temporary - for maintaining backwards compatibility with\n * older parts of EmberData.\n *\n  @module @ember-data/legacy-compat\n  @main @ember-data/legacy-compat\n*/\nfunction upgradeStore(store) {}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/legacy-compat.e84b6420/node_modules/@ember-data/legacy-compat/-private-1aicprWG.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/legacy-compat.e84b6420/node_modules/@ember-data/legacy-compat/-private.js":
/*!*******************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/legacy-compat.e84b6420/node_modules/@ember-data/legacy-compat/-private.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchManager: () => (/* reexport safe */ _private_1aicprWG__WEBPACK_IMPORTED_MODULE_0__.F),\n/* harmony export */   SaveOp: () => (/* reexport safe */ _private_1aicprWG__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   Snapshot: () => (/* reexport safe */ _private_1aicprWG__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   SnapshotRecordArray: () => (/* reexport safe */ _private_1aicprWG__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   upgradeStore: () => (/* reexport safe */ _private_1aicprWG__WEBPACK_IMPORTED_MODULE_0__.u)\n/* harmony export */ });\n/* harmony import */ var _private_1aicprWG__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./-private-1aicprWG */ \"../rewritten-packages/@ember-data/legacy-compat.e84b6420/node_modules/@ember-data/legacy-compat/-private-1aicprWG.js\");\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/legacy-compat.e84b6420/node_modules/@ember-data/legacy-compat/-private.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/legacy-compat.e84b6420/node_modules/@ember-data/legacy-compat/index.js":
/*!****************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/legacy-compat.e84b6420/node_modules/@ember-data/legacy-compat/index.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LegacyNetworkHandler: () => (/* binding */ LegacyNetworkHandler),\n/* harmony export */   adapterFor: () => (/* binding */ adapterFor),\n/* harmony export */   cleanup: () => (/* binding */ cleanup),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   pushPayload: () => (/* binding */ pushPayload),\n/* harmony export */   serializeRecord: () => (/* binding */ serializeRecord),\n/* harmony export */   serializerFor: () => (/* binding */ serializerFor)\n/* harmony export */ });\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/application */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fapplication&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_application__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_data_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember-data/store */ \"../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/index.js\");\n/* harmony import */ var _ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember-data/store/-private */ \"../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/-private.js\");\n/* harmony import */ var _private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./-private-1aicprWG */ \"../rewritten-packages/@ember-data/legacy-compat.e84b6420/node_modules/@ember-data/legacy-compat/-private-1aicprWG.js\");\n/* harmony import */ var _embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../../@embroider/macros/src/addon/es-compat2 */ \"../../@embroider/macros/src/addon/es-compat2.js\");\n\n\n\n\n\n\nfunction _findHasMany(adapter, store, identifier, link, relationship, options) {\n  let promise = Promise.resolve().then(() => {\n    const snapshot = store._fetchManager.createSnapshot(identifier, options);\n    const useLink = !link || typeof link === 'string';\n    const relatedLink = useLink ? link : link.href;\n    return adapter.findHasMany(store, snapshot, relatedLink, relationship);\n  });\n  promise = promise.then(adapterPayload => {\n    ( true && !((0,_private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.p)(adapterPayload)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You made a 'findHasMany' request for a ${identifier.type}'s '${relationship.name}' relationship, using link '${link}' , but the adapter's response did not have any data`, (0,_private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.p)(adapterPayload)));\n    const modelClass = store.modelFor(relationship.type);\n    const serializer = store.serializerFor(relationship.type);\n    let payload = (0,_private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.n)(serializer, store, modelClass, adapterPayload, null, 'findHasMany');\n    ( true && !('data' in payload && Array.isArray(payload.data)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`fetched the hasMany relationship '${relationship.name}' for ${identifier.type}:${identifier.id} with link '${link}', but no data member is present in the response. If no data exists, the response should set { data: [] }`, 'data' in payload && Array.isArray(payload.data)));\n    payload = syncRelationshipDataFromLink(store, payload, identifier, relationship);\n    return store._push(payload, true);\n  }, null, `DS: Extract payload of '${identifier.type}' : hasMany '${relationship.type}'`);\n  return promise;\n}\nfunction _findBelongsTo(store, identifier, link, relationship, options) {\n  let promise = Promise.resolve().then(() => {\n    const adapter = store.adapterFor(identifier.type);\n    ( true && !(adapter) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You tried to load a belongsTo relationship but you have no adapter (for ${identifier.type})`, adapter));\n    ( true && !(typeof adapter.findBelongsTo === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You tried to load a belongsTo relationship from a specified 'link' in the original payload but your adapter does not implement 'findBelongsTo'`, typeof adapter.findBelongsTo === 'function'));\n    const snapshot = store._fetchManager.createSnapshot(identifier, options);\n    const useLink = !link || typeof link === 'string';\n    const relatedLink = useLink ? link : link.href;\n    return adapter.findBelongsTo(store, snapshot, relatedLink, relationship);\n  });\n  promise = promise.then(adapterPayload => {\n    const modelClass = store.modelFor(relationship.type);\n    const serializer = store.serializerFor(relationship.type);\n    let payload = (0,_private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.n)(serializer, store, modelClass, adapterPayload, null, 'findBelongsTo');\n    ( true && !('data' in payload && (payload.data === null || typeof payload.data === 'object' && !Array.isArray(payload.data))) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`fetched the belongsTo relationship '${relationship.name}' for ${identifier.type}:${identifier.id} with link '${link}', but no data member is present in the response. If no data exists, the response should set { data: null }`, 'data' in payload && (payload.data === null || typeof payload.data === 'object' && !Array.isArray(payload.data))));\n    if (!payload.data && !payload.links && !payload.meta) {\n      return null;\n    }\n    payload = syncRelationshipDataFromLink(store, payload, identifier, relationship);\n    return store._push(payload, true);\n  }, null, `DS: Extract payload of ${identifier.type} : ${relationship.type}`);\n  return promise;\n}\n\n// sync\n// iterate over records in payload.data\n// for each record\n//   assert that record.relationships[inverse] is either undefined (so we can fix it)\n//     or provide a data: {id, type} that matches the record that requested it\n//   return the relationship data for the parent\nfunction syncRelationshipDataFromLink(store, payload, parentIdentifier, relationship) {\n  // ensure the right hand side (incoming payload) points to the parent record that\n  // requested this relationship\n  const relationshipData = payload.data ? (0,_private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.i)(payload.data, (data, index) => {\n    const {\n      id,\n      type\n    } = data;\n    ensureRelationshipIsSetToParent(data, parentIdentifier, store, relationship, index);\n    return {\n      id,\n      type\n    };\n  }) : null;\n  const relatedDataHash = {};\n  if ('meta' in payload) {\n    relatedDataHash.meta = payload.meta;\n  }\n  if ('links' in payload) {\n    relatedDataHash.links = payload.links;\n  }\n  if ('data' in payload) {\n    relatedDataHash.data = relationshipData;\n  }\n\n  // now, push the left hand side (the parent record) to ensure things are in sync, since\n  // the payload will be pushed with store._push\n  const parentPayload = {\n    id: parentIdentifier.id,\n    type: parentIdentifier.type,\n    relationships: {\n      [relationship.name]: relatedDataHash\n    }\n  };\n  if (!Array.isArray(payload.included)) {\n    payload.included = [];\n  }\n  payload.included.push(parentPayload);\n  return payload;\n}\nfunction ensureRelationshipIsSetToParent(payload, parentIdentifier, store, parentRelationship, index) {\n  const {\n    id,\n    type\n  } = payload;\n  if (!payload.relationships) {\n    payload.relationships = {};\n  }\n  const {\n    relationships\n  } = payload;\n  const inverse = getInverse(store, parentIdentifier, parentRelationship, type);\n  if (inverse) {\n    const {\n      inverseKey,\n      kind\n    } = inverse;\n    const relationshipData = relationships[inverseKey] && relationships[inverseKey].data;\n    {\n      if (typeof relationshipData !== 'undefined' && !relationshipDataPointsToParent(relationshipData, parentIdentifier)) {\n        const inspect = function inspect(thing) {\n          return `'${JSON.stringify(thing)}'`;\n        };\n        const quotedType = inspect(type);\n        const quotedInverse = inspect(inverseKey);\n        const expected = inspect({\n          id: parentIdentifier.id,\n          type: parentIdentifier.type\n        });\n        const expectedModel = `${parentIdentifier.type}:${parentIdentifier.id}`;\n        const got = inspect(relationshipData);\n        const prefix = typeof index === 'number' ? `data[${index}]` : `data`;\n        const path = `${prefix}.relationships.${inverseKey}.data`;\n        const other = relationshipData ? `<${relationshipData.type}:${relationshipData.id}>` : null;\n        const relationshipFetched = `${expectedModel}.${parentRelationship.kind}(\"${parentRelationship.name}\")`;\n        const includedRecord = `<${type}:${id}>`;\n        const message = [`Encountered mismatched relationship: Ember Data expected ${path} in the payload from ${relationshipFetched} to include ${expected} but got ${got} instead.\\n`, `The ${includedRecord} record loaded at ${prefix} in the payload specified ${other} as its ${quotedInverse}, but should have specified ${expectedModel} (the record the relationship is being loaded from) as its ${quotedInverse} instead.`, `This could mean that the response for ${relationshipFetched} may have accidentally returned ${quotedType} records that aren't related to ${expectedModel} and could be related to a different ${parentIdentifier.type} record instead.`, `Ember Data has corrected the ${includedRecord} record's ${quotedInverse} relationship to ${expectedModel} so that ${relationshipFetched} will include ${includedRecord}.`, `Please update the response from the server or change your serializer to either ensure that the response for only includes ${quotedType} records that specify ${expectedModel} as their ${quotedInverse}, or omit the ${quotedInverse} relationship from the response.`].join('\\n');\n        ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(message));\n      }\n    }\n    if (kind !== 'hasMany' || typeof relationshipData !== 'undefined') {\n      relationships[inverseKey] = relationships[inverseKey] || {};\n      relationships[inverseKey].data = fixRelationshipData(relationshipData, kind, parentIdentifier);\n    }\n  }\n}\nfunction inverseForRelationship(store, identifier, key) {\n  const definition = store.getSchemaDefinitionService().relationshipsDefinitionFor(identifier)[key];\n  if (!definition) {\n    return null;\n  }\n  ( true && !(definition.options?.inverse === null || typeof definition.options?.inverse === 'string' && definition.options.inverse.length > 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Expected the relationship defintion to specify the inverse type or null.`, definition.options?.inverse === null || typeof definition.options?.inverse === 'string' && definition.options.inverse.length > 0));\n  return definition.options.inverse;\n}\nfunction getInverse(store, parentIdentifier, parentRelationship, type) {\n  const {\n    name: lhs_relationshipName\n  } = parentRelationship;\n  const {\n    type: parentType\n  } = parentIdentifier;\n  const inverseKey = inverseForRelationship(store, {\n    type: parentType\n  }, lhs_relationshipName);\n  if (inverseKey) {\n    const definition = store.getSchemaDefinitionService().relationshipsDefinitionFor({\n      type\n    });\n    const {\n      kind\n    } = definition[inverseKey];\n    return {\n      inverseKey,\n      kind\n    };\n  }\n}\nfunction relationshipDataPointsToParent(relationshipData, identifier) {\n  if (relationshipData === null) {\n    return false;\n  }\n  if (Array.isArray(relationshipData)) {\n    if (relationshipData.length === 0) {\n      return false;\n    }\n    for (let i = 0; i < relationshipData.length; i++) {\n      const entry = relationshipData[i];\n      if (validateRelationshipEntry(entry, identifier)) {\n        return true;\n      }\n    }\n  } else {\n    return validateRelationshipEntry(relationshipData, identifier);\n  }\n  return false;\n}\nfunction fixRelationshipData(relationshipData, relationshipKind, {\n  id,\n  type\n}) {\n  const parentRelationshipData = {\n    id,\n    type\n  };\n  let payload;\n  if (relationshipKind === 'hasMany') {\n    payload = relationshipData || [];\n    if (relationshipData) {\n      // these arrays could be massive so this is better than filter\n      // Note: this is potentially problematic if type/id are not in the\n      // same state of normalization.\n      const found = relationshipData.find(v => {\n        return v.type === parentRelationshipData.type && v.id === parentRelationshipData.id;\n      });\n      if (!found) {\n        payload.push(parentRelationshipData);\n      }\n    } else {\n      payload.push(parentRelationshipData);\n    }\n  } else {\n    payload = relationshipData || {};\n    Object.assign(payload, parentRelationshipData);\n  }\n  return payload;\n}\nfunction validateRelationshipEntry({\n  id\n}, {\n  id: parentModelID\n}) {\n  return id && id.toString() === parentModelID;\n}\nconst PotentialLegacyOperations = new Set(['findRecord', 'findAll', 'query', 'queryRecord', 'findBelongsTo', 'findHasMany', 'updateRecord', 'createRecord', 'deleteRecord']);\nconst LegacyNetworkHandler = {\n  request(context, next) {\n    // if we are not a legacy request, move on\n    if (context.request.url || !context.request.op || !PotentialLegacyOperations.has(context.request.op)) {\n      return next(context.request);\n    }\n    const {\n      store\n    } = context.request;\n    if (!store._fetchManager) {\n      store._fetchManager = new _private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.F(store);\n    }\n    switch (context.request.op) {\n      case 'findRecord':\n        return findRecord(context);\n      case 'findAll':\n        return findAll(context);\n      case 'query':\n        return query(context);\n      case 'queryRecord':\n        return queryRecord(context);\n      case 'findBelongsTo':\n        return findBelongsTo(context);\n      case 'findHasMany':\n        return findHasMany(context);\n      case 'updateRecord':\n        return saveRecord(context);\n      case 'createRecord':\n        return saveRecord(context);\n      case 'deleteRecord':\n        return saveRecord(context);\n      default:\n        return next(context.request);\n    }\n  }\n};\nfunction findBelongsTo(context) {\n  const {\n    store,\n    data,\n    records: identifiers\n  } = context.request;\n  const {\n    options,\n    record,\n    links,\n    useLink,\n    field\n  } = data;\n  const identifier = identifiers?.[0];\n\n  // short circuit if we are already loading\n  const pendingRequest = identifier && store._fetchManager.getPendingFetch(identifier, options);\n  if (pendingRequest) {\n    return pendingRequest;\n  }\n  if (useLink) {\n    ( true && !(links && links.related) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Expected a related link when calling store.findBelongsTo, found ${String(links)}`, links && links.related));\n    return _findBelongsTo(store, record, links.related, field, options);\n  }\n  ( true && !(Array.isArray(identifiers) && identifiers.length === 1) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Expected an identifier`, Array.isArray(identifiers) && identifiers.length === 1));\n  const manager = store._fetchManager;\n  (0,_private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.a)(identifier);\n  return options.reload ? manager.scheduleFetch(identifier, options, context.request) : manager.fetchDataIfNeededForIdentifier(identifier, options, context.request);\n}\nfunction findHasMany(context) {\n  const {\n    store,\n    data,\n    records: identifiers\n  } = context.request;\n  const {\n    options,\n    record,\n    links,\n    useLink,\n    field\n  } = data;\n\n  // link case\n  if (useLink) {\n    const adapter = store.adapterFor(record.type);\n    /*\n    If a relationship was originally populated by the adapter as a link\n    (as opposed to a list of IDs), this method is called when the\n    relationship is fetched.\n     The link (which is usually a URL) is passed through unchanged, so the\n    adapter can make whatever request it wants.\n     The usual use-case is for the server to register a URL as a link, and\n    then use that URL in the future to make a request for the relationship.\n    */\n    ( true && !(adapter) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You tried to load a hasMany relationship but you have no adapter (for ${record.type})`, adapter));\n    ( true && !(typeof adapter.findHasMany === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You tried to load a hasMany relationship from a specified 'link' in the original payload but your adapter does not implement 'findHasMany'`, typeof adapter.findHasMany === 'function'));\n    ( true && !(links && links.related) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Expected a related link when calling store.findhasMany, found ${String(links)}`, links && links.related));\n    return _findHasMany(adapter, store, record, links.related, field, options);\n  }\n\n  // identifiers case\n  ( true && !(Array.isArray(identifiers)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Expected an array of identifiers to fetch`, Array.isArray(identifiers)));\n  const fetches = new Array(identifiers.length);\n  const manager = store._fetchManager;\n  for (let i = 0; i < identifiers.length; i++) {\n    const identifier = identifiers[i];\n    // TODO we probably can be lenient here and return from cache for the isNew case\n    (0,_private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.a)(identifier);\n    fetches[i] = options.reload ? manager.scheduleFetch(identifier, options, context.request) : manager.fetchDataIfNeededForIdentifier(identifier, options, context.request);\n  }\n  return Promise.all(fetches);\n}\nfunction saveRecord(context) {\n  const {\n    store,\n    data,\n    op: operation\n  } = context.request;\n  const {\n    options,\n    record: identifier\n  } = data;\n  const saveOptions = Object.assign({\n    [_private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.S]: operation\n  }, options);\n  const fetchManagerPromise = store._fetchManager.scheduleSave(identifier, saveOptions);\n  return fetchManagerPromise.then(payload => {\n    let result;\n    store._join(() => {\n      // @ts-expect-error we don't have access to a response in legacy\n      result = store.cache.didCommit(identifier, {\n        request: context.request,\n        content: payload\n      });\n    });\n\n    // blatantly lie if we were a createRecord request\n    // to give some semblance of cache-control to the\n    // lifetimes service while legacy is still around\n    if (store.lifetimes?.didRequest && operation === 'createRecord') {\n      store.lifetimes.didRequest(context.request, {\n        status: 201\n      }, null, store);\n    }\n    return store.peekRecord(result.data);\n  }).catch(e => {\n    let err = e;\n    if (!e) {\n      err = new Error(`Unknown Error Occurred During Request`);\n    } else if (typeof e === 'string') {\n      err = new Error(e);\n    }\n    adapterDidInvalidate(store, identifier, err);\n    throw err;\n  });\n}\nfunction adapterDidInvalidate(store, identifier, error) {\n  if (error && error.isAdapterError === true && error.code === 'InvalidError') {\n    const serializer = store.serializerFor(identifier.type);\n\n    // TODO @deprecate extractErrors being called\n    // TODO remove extractErrors from the default serializers.\n    if (serializer && typeof serializer.extractErrors === 'function') {\n      const errorsHash = serializer.extractErrors(store, store.modelFor(identifier.type), error, identifier.id);\n      error.errors = errorsHashToArray(errorsHash);\n    }\n  }\n  const cache = store.cache;\n  if (error.errors) {\n    ( true && !(typeof cache.getErrors === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Expected the cache in use by resource ${String(identifier)} to have a getErrors(identifier) method for retreiving errors.`, typeof cache.getErrors === 'function'));\n    let jsonApiErrors = error.errors;\n    if (jsonApiErrors.length === 0) {\n      jsonApiErrors = [{\n        title: 'Invalid Error',\n        detail: '',\n        source: {\n          pointer: '/data'\n        }\n      }];\n    }\n    cache.commitWasRejected(identifier, jsonApiErrors);\n  } else {\n    cache.commitWasRejected(identifier);\n  }\n}\nfunction makeArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\nconst PRIMARY_ATTRIBUTE_KEY = 'base';\nfunction errorsHashToArray(errors) {\n  const out = [];\n  if (errors) {\n    Object.keys(errors).forEach(key => {\n      const messages = makeArray(errors[key]);\n      for (let i = 0; i < messages.length; i++) {\n        let title = 'Invalid Attribute';\n        let pointer = `/data/attributes/${key}`;\n        if (key === PRIMARY_ATTRIBUTE_KEY) {\n          title = 'Invalid Document';\n          pointer = `/data`;\n        }\n        out.push({\n          title: title,\n          detail: messages[i],\n          source: {\n            pointer: pointer\n          }\n        });\n      }\n    });\n  }\n  return out;\n}\nfunction findRecord(context) {\n  const {\n    store,\n    data\n  } = context.request;\n  const {\n    record: identifier,\n    options\n  } = data;\n  let promise;\n\n  // if not loaded start loading\n  if (!store._instanceCache.recordIsLoaded(identifier)) {\n    promise = store._fetchManager.fetchDataIfNeededForIdentifier(identifier, options, context.request);\n\n    // Refetch if the reload option is passed\n  } else if (options.reload) {\n    (0,_private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.a)(identifier);\n    promise = store._fetchManager.scheduleFetch(identifier, options, context.request);\n  } else {\n    let snapshot = null;\n    const adapter = store.adapterFor(identifier.type);\n\n    // Refetch the record if the adapter thinks the record is stale\n    if (typeof options.reload === 'undefined' && adapter.shouldReloadRecord && adapter.shouldReloadRecord(store, snapshot = store._fetchManager.createSnapshot(identifier, options))) {\n      (0,_private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.a)(identifier);\n      {\n        promise = store._fetchManager.scheduleFetch(identifier, Object.assign({}, options, {\n          reload: true\n        }), context.request);\n      }\n    } else {\n      // Trigger the background refetch if backgroundReload option is passed\n      if (options.backgroundReload !== false && (options.backgroundReload || !adapter.shouldBackgroundReloadRecord || adapter.shouldBackgroundReloadRecord(store, snapshot = snapshot || store._fetchManager.createSnapshot(identifier, options)))) {\n        (0,_private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.a)(identifier);\n        {\n          void store._fetchManager.scheduleFetch(identifier, Object.assign({}, options, {\n            backgroundReload: true\n          }), context.request);\n        }\n      }\n\n      // Return the cached record\n      promise = Promise.resolve(identifier);\n    }\n  }\n  return promise.then(i => store.peekRecord(i));\n}\nfunction findAll(context) {\n  const {\n    store,\n    data\n  } = context.request;\n  const {\n    type,\n    options\n  } = data;\n  const adapter = store.adapterFor(type);\n  ( true && !(adapter) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You tried to load all records but you have no adapter (for ${type})`, adapter));\n  ( true && !(typeof adapter.findAll === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You tried to load all records but your adapter does not implement 'findAll'`, typeof adapter.findAll === 'function')); // avoid initializing the liveArray just to set `isUpdating`\n  const maybeRecordArray = store.recordArrayManager._live.get(type);\n  const snapshotArray = new _private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.b(store, type, options);\n  const shouldReload = options.reload || options.reload !== false && (adapter.shouldReloadAll && adapter.shouldReloadAll(store, snapshotArray) || !adapter.shouldReloadAll && snapshotArray.length === 0);\n  let fetch;\n  if (shouldReload) {\n    maybeRecordArray && (maybeRecordArray.isUpdating = true);\n    fetch = _findAll(adapter, store, type, snapshotArray, context.request, true);\n  } else {\n    fetch = Promise.resolve(store.peekAll(type));\n    if (options.backgroundReload || options.backgroundReload !== false && (!adapter.shouldBackgroundReloadAll || adapter.shouldBackgroundReloadAll(store, snapshotArray))) {\n      maybeRecordArray && (maybeRecordArray.isUpdating = true);\n      void _findAll(adapter, store, type, snapshotArray, context.request, false);\n    }\n  }\n  return fetch;\n}\nfunction _findAll(adapter, store, type, snapshotArray, request, isAsyncFlush) {\n  const schema = store.modelFor(type);\n  let promise = Promise.resolve().then(() => adapter.findAll(store, schema, null, snapshotArray));\n  promise = promise.then(adapterPayload => {\n    ( true && !((0,_private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.p)(adapterPayload)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You made a 'findAll' request for '${type}' records, but the adapter's response did not have any data`, (0,_private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.p)(adapterPayload)));\n    const serializer = store.serializerFor(type);\n    const payload = (0,_private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.n)(serializer, store, schema, adapterPayload, null, 'findAll');\n    store._push(payload, isAsyncFlush);\n    snapshotArray._recordArray.isUpdating = false;\n    return snapshotArray._recordArray;\n  });\n  {\n    if (!request.disableTestWaiter) {\n      const {\n        waitForPromise\n      } = (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(__webpack_require__(/*! @ember/test-waiters */ \"../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/index.js\"));\n      promise = waitForPromise(promise);\n    }\n  }\n  return promise;\n}\nfunction query(context) {\n  const {\n    store,\n    data\n  } = context.request;\n  let {\n    options\n  } = data;\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  const {\n    type,\n    query\n  } = data;\n  const adapter = store.adapterFor(type);\n  ( true && !(adapter) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You tried to make a query but you have no adapter (for ${type})`, adapter));\n  ( true && !(typeof adapter.query === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You tried to make a query but your adapter does not implement 'query'`, typeof adapter.query === 'function'));\n  const recordArray = options._recordArray || store.recordArrayManager.createArray({\n    type,\n    query\n  });\n  {\n    options = Object.assign({}, options);\n    delete options._recordArray;\n  }\n  const schema = store.modelFor(type);\n  const promise = Promise.resolve().then(() => adapter.query(store, schema, query, recordArray, options));\n  return promise.then(adapterPayload => {\n    const serializer = store.serializerFor(type);\n    const payload = (0,_private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.n)(serializer, store, schema, adapterPayload, null, 'query');\n    const identifiers = store._push(payload, true);\n    ( true && !(Array.isArray(identifiers)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)('The response to store.query is expected to be an array but it was a single record. Please wrap your response in an array or use `store.queryRecord` to query for a single record.', Array.isArray(identifiers)));\n    store.recordArrayManager.populateManagedArray(recordArray, identifiers, payload);\n    return recordArray;\n  });\n}\nfunction assertSingleResourceDocument(payload) {\n  ( true && !(!Array.isArray(payload.data)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Expected the primary data returned by the serializer for a 'queryRecord' response to be a single object or null but instead it was an array.`, !Array.isArray(payload.data)));\n}\nfunction queryRecord(context) {\n  const {\n    store,\n    data\n  } = context.request;\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  const {\n    type,\n    query,\n    options\n  } = data;\n  const adapter = store.adapterFor(type);\n  ( true && !(adapter) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You tried to make a query but you have no adapter (for ${type})`, adapter));\n  ( true && !(typeof adapter.queryRecord === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You tried to make a query but your adapter does not implement 'queryRecord'`, typeof adapter.queryRecord === 'function'));\n  const schema = store.modelFor(type);\n  const promise = Promise.resolve().then(() => adapter.queryRecord(store, schema, query, options));\n  return promise.then(adapterPayload => {\n    const serializer = store.serializerFor(type);\n    const payload = (0,_private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.n)(serializer, store, schema, adapterPayload, null, 'queryRecord');\n    assertSingleResourceDocument(payload);\n    const identifier = store._push(payload, true);\n    return identifier ? store.peekRecord(identifier) : null;\n  });\n}\n\n/**\n * @module @ember-data/store\n * @class Store\n */\n\n/**\n    Returns an instance of the adapter for a given type. For\n    example, `adapterFor('person')` will return an instance of\n    the adapter located at `app/adapters/person.js`\n\n    If no `person` adapter is found, this method will look\n    for an `application` adapter (the default adapter for\n    your entire application).\n\n    @method adapterFor\n    @public\n    @param {String} modelName\n    @return Adapter\n  */\n\nfunction adapterFor(modelName, _allowMissing) {\n  ( true && !(!(this.isDestroying || this.isDestroyed)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Attempted to call store.adapterFor(), but the store instance has already been destroyed.`, !(this.isDestroying || this.isDestroyed)));\n  ( true && !(modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You need to pass a model name to the store's adapterFor method`, modelName));\n  ( true && !(typeof modelName === 'string') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Passing classes to store.adapterFor has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n  this._adapterCache = this._adapterCache || Object.create(null);\n  const normalizedModelName = (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__._deprecatingNormalize)(modelName);\n  const {\n    _adapterCache\n  } = this;\n  let adapter = _adapterCache[normalizedModelName];\n  if (adapter) {\n    return adapter;\n  }\n  const owner = (0,_ember_application__WEBPACK_IMPORTED_MODULE_0__.getOwner)(this);\n\n  // name specific adapter\n  adapter = owner.lookup(`adapter:${normalizedModelName}`);\n  if (adapter !== undefined) {\n    _adapterCache[normalizedModelName] = adapter;\n    return adapter;\n  }\n\n  // no adapter found for the specific name, fallback and check for application adapter\n  adapter = _adapterCache.application || owner.lookup('adapter:application');\n  if (adapter !== undefined) {\n    _adapterCache[normalizedModelName] = adapter;\n    _adapterCache.application = adapter;\n    return adapter;\n  }\n  ( true && !(_allowMissing) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`No adapter was found for '${modelName}' and no 'application' adapter was found as a fallback.`, _allowMissing));\n}\n\n/**\n    Returns an instance of the serializer for a given type. For\n    example, `serializerFor('person')` will return an instance of\n    `App.PersonSerializer`.\n\n    If no `App.PersonSerializer` is found, this method will look\n    for an `App.ApplicationSerializer` (the default serializer for\n    your entire application).\n\n    If a serializer cannot be found on the adapter, it will fall back\n    to an instance of `JSONSerializer`.\n\n    @method serializerFor\n    @public\n    @param {String} modelName the record to serialize\n    @return {Serializer}\n  */\nfunction serializerFor(modelName) {\n  ( true && !(!(this.isDestroying || this.isDestroyed)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Attempted to call store.serializerFor(), but the store instance has already been destroyed.`, !(this.isDestroying || this.isDestroyed)));\n  ( true && !(modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You need to pass a model name to the store's serializerFor method`, modelName));\n  ( true && !(typeof modelName === 'string') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Passing classes to store.serializerFor has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n  this._serializerCache = this._serializerCache || Object.create(null);\n  const normalizedModelName = (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__._deprecatingNormalize)(modelName);\n  const {\n    _serializerCache\n  } = this;\n  let serializer = _serializerCache[normalizedModelName];\n  if (serializer) {\n    return serializer;\n  }\n\n  // by name\n  const owner = (0,_ember_application__WEBPACK_IMPORTED_MODULE_0__.getOwner)(this);\n  serializer = owner.lookup(`serializer:${normalizedModelName}`);\n  if (serializer !== undefined) {\n    _serializerCache[normalizedModelName] = serializer;\n    return serializer;\n  }\n\n  // no serializer found for the specific model, fallback and check for application serializer\n  serializer = _serializerCache.application || owner.lookup('serializer:application');\n  if (serializer !== undefined) {\n    _serializerCache[normalizedModelName] = serializer;\n    _serializerCache.application = serializer;\n    return serializer;\n  }\n  return null;\n}\n\n/**\n    `normalize` converts a json payload into the normalized form that\n    [push](../methods/push?anchor=push) expects.\n\n    Example\n\n    ```js\n    socket.on('message', function(message) {\n      let modelName = message.model;\n      let data = message.data;\n      store.push(store.normalize(modelName, data));\n    });\n    ```\n\n    @method normalize\n    @public\n    @param {String} modelName The name of the model type for this payload\n    @param {Object} payload\n    @return {Object} The normalized payload\n  */\n// TODO @runspired @deprecate users should call normalize on the associated serializer directly\nfunction normalize(modelName, payload) {\n  ( true && !(!(this.isDestroying || this.isDestroyed)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Attempted to call store.normalize(), but the store instance has already been destroyed.`, !(this.isDestroying || this.isDestroyed)));\n  ( true && !(modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You need to pass a model name to the store's normalize method`, modelName));\n  ( true && !(typeof modelName === 'string') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${typeof modelName}`, typeof modelName === 'string'));\n  const normalizedModelName = (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__._deprecatingNormalize)(modelName);\n  const serializer = this.serializerFor(normalizedModelName);\n  const schema = this.modelFor(normalizedModelName);\n  ( true && !(typeof serializer?.normalize === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You must define a normalize method in your serializer in order to call store.normalize`, typeof serializer?.normalize === 'function'));\n  return serializer.normalize(schema, payload);\n}\n\n/**\n    Push some raw data into the store.\n\n    This method can be used both to push in brand new\n    records, as well as to update existing records. You\n    can push in more than one type of object at once.\n    All objects should be in the format expected by the\n    serializer.\n\n    ```app/serializers/application.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n\n    export default class ApplicationSerializer extends RESTSerializer;\n    ```\n\n    ```js\n    let pushData = {\n      posts: [\n        { id: 1, postTitle: \"Great post\", commentIds: [2] }\n      ],\n      comments: [\n        { id: 2, commentBody: \"Insightful comment\" }\n      ]\n    }\n\n    store.pushPayload(pushData);\n    ```\n\n    By default, the data will be deserialized using a default\n    serializer (the application serializer if it exists).\n\n    Alternatively, `pushPayload` will accept a model type which\n    will determine which serializer will process the payload.\n\n    ```app/serializers/application.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n\n     export default class ApplicationSerializer extends RESTSerializer;\n    ```\n\n    ```app/serializers/post.js\n    import JSONSerializer from '@ember-data/serializer/json';\n\n    export default JSONSerializer;\n    ```\n\n    ```js\n    store.pushPayload(pushData); // Will use the application serializer\n    store.pushPayload('post', pushData); // Will use the post serializer\n    ```\n\n    @method pushPayload\n    @public\n    @param {String} modelName Optionally, a model type used to determine which serializer will be used\n    @param {Object} inputPayload\n  */\n// TODO @runspired @deprecate pushPayload in favor of looking up the serializer\nfunction pushPayload(modelName, inputPayload) {\n  ( true && !(!(this.isDestroying || this.isDestroyed)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Attempted to call store.pushPayload(), but the store instance has already been destroyed.`, !(this.isDestroying || this.isDestroyed)));\n  const payload = inputPayload || modelName;\n  const normalizedModelName = inputPayload ? (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__._deprecatingNormalize)(modelName) : 'application';\n  const serializer = this.serializerFor(normalizedModelName);\n  ( true && !(serializer && typeof serializer.pushPayload === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You cannot use 'store.pushPayload(<type>, <payload>)' unless the serializer for '${normalizedModelName}' defines 'pushPayload'`, serializer && typeof serializer.pushPayload === 'function'));\n  serializer.pushPayload(this, payload);\n}\n\n// TODO @runspired @deprecate records should implement their own serialization if desired\nfunction serializeRecord(record, options) {\n  // TODO we used to check if the record was destroyed here\n  if (!this._fetchManager) {\n    this._fetchManager = new _private_1aicprWG__WEBPACK_IMPORTED_MODULE_4__.F(this);\n  }\n  return this._fetchManager.createSnapshot((0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.recordIdentifierFor)(record)).serialize(options);\n}\nfunction cleanup() {\n  // enqueue destruction of any adapters/serializers we have created\n  for (const adapterName in this._adapterCache) {\n    const adapter = this._adapterCache[adapterName];\n    if (typeof adapter.destroy === 'function') {\n      adapter.destroy();\n    }\n  }\n  for (const serializerName in this._serializerCache) {\n    const serializer = this._serializerCache[serializerName];\n    if (typeof serializer.destroy === 'function') {\n      serializer.destroy();\n    }\n  }\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/legacy-compat.e84b6420/node_modules/@ember-data/legacy-compat/index.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/-private.js":
/*!***************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/-private.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Errors: () => (/* reexport safe */ _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_1__.E),\n/* harmony export */   LEGACY_SUPPORT: () => (/* reexport safe */ _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_1__.L),\n/* harmony export */   ManyArray: () => (/* reexport safe */ _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_1__.R),\n/* harmony export */   Model: () => (/* reexport safe */ _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_1__.M),\n/* harmony export */   PromiseBelongsTo: () => (/* reexport safe */ _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_1__.P),\n/* harmony export */   PromiseManyArray: () => (/* reexport safe */ _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_1__.a),\n/* harmony export */   attr: () => (/* reexport safe */ _has_many_PdQBns8a__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   belongsTo: () => (/* reexport safe */ _has_many_PdQBns8a__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   hasMany: () => (/* reexport safe */ _has_many_PdQBns8a__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   lookupLegacySupport: () => (/* reexport safe */ _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_1__.l)\n/* harmony export */ });\n/* harmony import */ var _has_many_PdQBns8a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./has-many-PdQBns8a */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/has-many-PdQBns8a.js\");\n/* harmony import */ var _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./model-YsOraZ6y */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/model-YsOraZ6y.js\");\n\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/-private.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/has-many-PdQBns8a.js":
/*!************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/has-many-PdQBns8a.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ attr$1),\n/* harmony export */   b: () => (/* binding */ belongsTo$1),\n/* harmony export */   h: () => (/* binding */ hasMany$1)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/object */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_object__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_data_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember-data/store */ \"../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/index.js\");\n/* harmony import */ var _ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember-data/store/-private */ \"../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/-private.js\");\n/* harmony import */ var _util_3DHZJC9h__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util-3DHZJC9h */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/util-3DHZJC9h.js\");\n/* harmony import */ var _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./model-YsOraZ6y */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/model-YsOraZ6y.js\");\n/* harmony import */ var _ember_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ember/string */ \"../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/index.js\");\n/* harmony import */ var ember_inflector__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ember-inflector */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/index.js\");\n\n\n\n\n\n\n\n\nfunction attr(type, options) {\n  if (typeof type === 'object') {\n    options = type;\n    type = undefined;\n  } else {\n    options = options || {};\n  }\n  const meta = {\n    type: type,\n    kind: 'attribute',\n    isAttribute: true,\n    options: options,\n    key: null\n  };\n  return (0,_ember_object__WEBPACK_IMPORTED_MODULE_1__.computed)({\n    get(key) {\n      {\n        if (['currentState'].indexOf(key) !== -1) {\n          throw new Error(`'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your attr on ${this.constructor.toString()}`);\n        }\n      }\n      if (this.isDestroyed || this.isDestroying) {\n        return;\n      }\n      return (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.peekCache)(this).getAttr((0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.recordIdentifierFor)(this), key);\n    },\n    set(key, value) {\n      {\n        if (['currentState'].indexOf(key) !== -1) {\n          throw new Error(`'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your attr on ${this.constructor.toString()}`);\n        }\n      }\n      ( true && !(!this.currentState.isDeleted) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Attempted to set '${key}' on the deleted record ${(0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.recordIdentifierFor)(this)}`, !this.currentState.isDeleted));\n      const identifier = (0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.recordIdentifierFor)(this);\n      const cache = (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.peekCache)(this);\n      const currentValue = cache.getAttr(identifier, key);\n      if (currentValue !== value) {\n        cache.setAttr(identifier, key, value);\n        if (!this.isValid) {\n          const {\n            errors\n          } = this;\n          if (errors.get(key)) {\n            errors.remove(key);\n            this.currentState.cleanErrorRequests();\n          }\n        }\n      }\n      return value;\n    }\n  }).meta(meta);\n}\nvar attr$1 = (0,_util_3DHZJC9h__WEBPACK_IMPORTED_MODULE_4__.c)(attr);\nfunction belongsTo(modelName, options) {\n  const opts = options;\n  const userEnteredModelName = modelName;\n  ( true && !(opts && typeof opts.async === 'boolean') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected options.async from @belongsTo('${userEnteredModelName}', options) to be a boolean`, opts && typeof opts.async === 'boolean'));\n  ( true && !(opts.inverse === null || typeof opts.inverse === 'string' && opts.inverse.length > 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected options.inverse from @belongsTo('${userEnteredModelName}', options) to be either null or the string type of the related resource.`, opts.inverse === null || typeof opts.inverse === 'string' && opts.inverse.length > 0));\n  const meta = {\n    type: (0,_util_3DHZJC9h__WEBPACK_IMPORTED_MODULE_4__.n)(userEnteredModelName),\n    isRelationship: true,\n    options: opts,\n    kind: 'belongsTo',\n    name: '<Unknown BelongsTo>',\n    key: null\n  };\n  return (0,_ember_object__WEBPACK_IMPORTED_MODULE_1__.computed)({\n    get(key) {\n      // this is a legacy behavior we may not carry into a new model setup\n      // it's better to error on disconnected records so users find errors\n      // in their logic.\n      if (this.isDestroying || this.isDestroyed) {\n        return null;\n      }\n      const support = (0,_model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_5__.l)(this);\n      {\n        if (['currentState'].indexOf(key) !== -1) {\n          throw new Error(`'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your belongsTo on ${this.constructor.toString()}`);\n        }\n        if (Object.prototype.hasOwnProperty.call(opts, 'serialize')) {\n          ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`You provided a serialize option on the \"${key}\" property in the \"${support.identifier.type}\" class, this belongs in the serializer. See Serializer and it's implementations https://api.emberjs.com/ember-data/release/classes/Serializer`, false, {\n            id: 'ds.model.serialize-option-in-belongs-to'\n          }));\n        }\n        if (Object.prototype.hasOwnProperty.call(opts, 'embedded')) {\n          ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`You provided an embedded option on the \"${key}\" property in the \"${support.identifier.type}\" class, this belongs in the serializer. See EmbeddedRecordsMixin https://api.emberjs.com/ember-data/release/classes/EmbeddedRecordsMixin`, false, {\n            id: 'ds.model.embedded-option-in-belongs-to'\n          }));\n        }\n      }\n      return support.getBelongsTo(key);\n    },\n    set(key, value) {\n      const support = (0,_model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_5__.l)(this);\n      {\n        if (['currentState'].indexOf(key) !== -1) {\n          throw new Error(`'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your belongsTo on ${this.constructor.toString()}`);\n        }\n      }\n      this.store._join(() => {\n        support.setDirtyBelongsTo(key, value);\n      });\n      return support.getBelongsTo(key);\n    }\n  }).meta(meta);\n}\nvar belongsTo$1 = (0,_util_3DHZJC9h__WEBPACK_IMPORTED_MODULE_4__.c)(belongsTo);\n\n/**\n  @module @ember-data/model\n*/\nfunction normalizeType(type) {\n  {\n    const result = (0,ember_inflector__WEBPACK_IMPORTED_MODULE_7__.singularize)((0,_ember_string__WEBPACK_IMPORTED_MODULE_6__.dasherize)(type));\n    ( true && !(result === type) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`The resource type '${type}' is not normalized. Update your application code to use '${result}' instead of '${type}'.`, result === type, {\n      id: 'ember-data:deprecate-non-strict-types',\n      until: '6.0',\n      for: 'ember-data',\n      since: {\n        available: '5.3',\n        enabled: '5.3'\n      }\n    }));\n    return result;\n  }\n  return type;\n}\n\n/**\n  `hasMany` is used to define One-To-Many and Many-To-Many\n  relationships on a [Model](/ember-data/release/classes/Model).\n\n  `hasMany` takes an optional hash as a second parameter, currently\n  supported options are:\n\n  - `async`: A boolean value used to explicitly declare this to be an async relationship. The default is true.\n  - `inverse`: A string used to identify the inverse property on a related model.\n  - `polymorphic` A boolean value to mark the relationship as polymorphic\n\n  #### One-To-Many\n  To declare a one-to-many relationship between two models, use\n  `belongsTo` in combination with `hasMany`, like this:\n\n  ```app/models/post.js\n  import Model, { hasMany } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @hasMany('comment') comments;\n  }\n  ```\n\n  ```app/models/comment.js\n  import Model, { belongsTo } from '@ember-data/model';\n\n  export default class CommentModel extends Model {\n    @belongsTo('post') post;\n  }\n  ```\n\n  #### Many-To-Many\n  To declare a many-to-many relationship between two models, use\n  `hasMany`:\n\n  ```app/models/post.js\n  import Model, { hasMany } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @hasMany('tag') tags;\n  }\n  ```\n\n  ```app/models/tag.js\n  import Model, { hasMany } from '@ember-data/model';\n\n  export default class TagModel extends Model {\n    @hasMany('post') posts;\n  }\n  ```\n\n  You can avoid passing a string as the first parameter. In that case Ember Data\n  will infer the type from the singularized key name.\n\n  ```app/models/post.js\n  import Model, { hasMany } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @hasMany tags;\n  }\n  ```\n\n  will lookup for a Tag type.\n\n  #### Explicit Inverses\n\n  Ember Data will do its best to discover which relationships map to\n  one another. In the one-to-many code above, for example, Ember Data\n  can figure out that changing the `comments` relationship should update\n  the `post` relationship on the inverse because post is the only\n  relationship to that model.\n\n  However, sometimes you may have multiple `belongsTo`/`hasMany` for the\n  same type. You can specify which property on the related model is\n  the inverse using `hasMany`'s `inverse` option:\n\n  ```app/models/comment.js\n  import Model, { belongsTo } from '@ember-data/model';\n\n  export default class CommentModel extends Model {\n    @belongsTo('post') onePost;\n    @belongsTo('post') twoPost\n    @belongsTo('post') redPost;\n    @belongsTo('post') bluePost;\n  }\n  ```\n\n  ```app/models/post.js\n  import Model, { hasMany } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @hasMany('comment', {\n      inverse: 'redPost'\n    })\n    comments;\n  }\n  ```\n\n  You can also specify an inverse on a `belongsTo`, which works how\n  you'd expect.\n\n  #### Sync relationships\n\n  Ember Data resolves sync relationships with the related resources\n  available in its local store, hence it is expected these resources\n  to be loaded before or along-side the primary resource.\n\n  ```app/models/post.js\n  import Model, { hasMany } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @hasMany('comment', {\n      async: false\n    })\n    comments;\n  }\n  ```\n\n  In contrast to async relationship, accessing a sync relationship\n  will always return a [ManyArray](/ember-data/release/classes/ManyArray) instance\n  containing the existing local resources. But it will error on access\n  when any of the known related resources have not been loaded.\n\n  ```\n  post.comments.forEach((comment) => {\n\n  });\n\n  ```\n\n  If you are using `links` with sync relationships, you have to use\n  `ref.reload` to fetch the resources.\n\n  @method hasMany\n  @public\n  @static\n  @for @ember-data/model\n  @param {String} type (optional) type of the relationship\n  @param {Object} options (optional) a hash of options\n  @return {Ember.computed} relationship\n*/\nfunction hasMany(type, options) {\n  ( true && !(options && typeof options.async === 'boolean') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected hasMany options.async to be a boolean`, options && typeof options.async === 'boolean')); // Metadata about relationships is stored on the meta of\n  // the relationship. This is used for introspection and\n  // serialization. Note that `key` is populated lazily\n  // the first time the CP is called.\n  const meta = {\n    type: normalizeType(type),\n    options,\n    isRelationship: true,\n    kind: 'hasMany',\n    name: '<Unknown BelongsTo>',\n    key: null\n  };\n  return (0,_ember_object__WEBPACK_IMPORTED_MODULE_1__.computed)({\n    get(key) {\n      {\n        if (['currentState'].indexOf(key) !== -1) {\n          throw new Error(`'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your hasMany on ${this.constructor.toString()}`);\n        }\n      }\n      if (this.isDestroying || this.isDestroyed) {\n        return [];\n      }\n      return (0,_model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_5__.l)(this).getHasMany(key);\n    },\n    set(key, records) {\n      {\n        if (['currentState'].indexOf(key) !== -1) {\n          throw new Error(`'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your hasMany on ${this.constructor.toString()}`);\n        }\n      }\n      const support = (0,_model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_5__.l)(this);\n      const manyArray = support.getManyArray(key);\n      ( true && !(Array.isArray(records)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You must pass an array of records to set a hasMany relationship`, Array.isArray(records)));\n      this.store._join(() => {\n        manyArray.splice(0, manyArray.length, ...records);\n      });\n      return support.getHasMany(key);\n    }\n  }).meta(meta);\n}\nvar hasMany$1 = (0,_util_3DHZJC9h__WEBPACK_IMPORTED_MODULE_4__.c)(hasMany);\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/has-many-PdQBns8a.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/hooks-dXmQbIOF.js":
/*!*********************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/hooks-dXmQbIOF.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   M: () => (/* binding */ ModelSchemaProvider),\n/* harmony export */   b: () => (/* binding */ buildSchema),\n/* harmony export */   i: () => (/* binding */ instantiateRecord),\n/* harmony export */   m: () => (/* binding */ modelFor),\n/* harmony export */   t: () => (/* binding */ teardownRecord)\n/* harmony export */ });\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/application */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fapplication&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_application__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_data_store_private__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember-data/store/-private */ \"../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/-private.js\");\n/* harmony import */ var _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model-YsOraZ6y */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/model-YsOraZ6y.js\");\n/* harmony import */ var _util_3DHZJC9h__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util-3DHZJC9h */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/util-3DHZJC9h.js\");\n\n\n\n\n\n\n/*\n    In case someone defined a relationship to a mixin, for example:\n    ```ts\n      class CommentModel extends Model {\n        @belongsTo('commentable', { polymorphic: true }) owner;\n      }\n\n      let Commentable = Mixin.create({\n        @hasMany('comment') comments;\n      });\n    ```\n    we want to look up a Commentable class which has all the necessary\n    relationship meta data. Thus, we look up the mixin and create a mock\n    Model, so we can access the relationship CPs of the mixin (`comments`)\n    in this case\n  */\nfunction modelForMixin(store, normalizedModelName) {\n  const owner = (0,_ember_application__WEBPACK_IMPORTED_MODULE_0__.getOwner)(store);\n  const MaybeMixin = owner.factoryFor(`mixin:${normalizedModelName}`);\n  const mixin = MaybeMixin && MaybeMixin.class;\n  if (mixin) {\n    const ModelForMixin = _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_3__.M.extend(mixin);\n    ModelForMixin.__isMixin = true;\n    ModelForMixin.__mixin = mixin;\n    //Cache the class as a model\n    owner.register(`model:${normalizedModelName}`, ModelForMixin);\n  }\n  return owner.factoryFor(`model:${normalizedModelName}`);\n}\nclass ModelSchemaProvider {\n  constructor(store) {\n    this.store = store;\n    this._relationshipsDefCache = Object.create(null);\n    this._attributesDefCache = Object.create(null);\n    this._fieldsDefCache = Object.create(null);\n  }\n  fields(identifier) {\n    const {\n      type\n    } = identifier;\n    let fieldDefs = this._fieldsDefCache[type];\n    if (fieldDefs === undefined) {\n      fieldDefs = new Map();\n      this._fieldsDefCache[type] = fieldDefs;\n      const attributes = this.attributesDefinitionFor(identifier);\n      const relationships = this.relationshipsDefinitionFor(identifier);\n      for (const attr of Object.values(attributes)) {\n        fieldDefs.set(attr.name, attr);\n      }\n      for (const rel of Object.values(relationships)) {\n        fieldDefs.set(rel.name, rel);\n      }\n    }\n    return fieldDefs;\n  }\n\n  // Following the existing RD implementation\n  attributesDefinitionFor(identifier) {\n    const {\n      type\n    } = identifier;\n    let attributes;\n    attributes = this._attributesDefCache[type];\n    if (attributes === undefined) {\n      const modelClass = this.store.modelFor(type);\n      const attributeMap = modelClass.attributes;\n      attributes = Object.create(null);\n      attributeMap.forEach((meta, name) => attributes[name] = meta);\n      this._attributesDefCache[type] = attributes;\n    }\n    return attributes;\n  }\n\n  // Following the existing RD implementation\n  relationshipsDefinitionFor(identifier) {\n    const {\n      type\n    } = identifier;\n    let relationships;\n    relationships = this._relationshipsDefCache[type];\n    if (relationships === undefined) {\n      const modelClass = this.store.modelFor(type);\n      relationships = modelClass.relationshipsObject || null;\n      this._relationshipsDefCache[type] = relationships;\n    }\n    return relationships;\n  }\n  doesTypeExist(modelName) {\n    const type = (0,_util_3DHZJC9h__WEBPACK_IMPORTED_MODULE_4__.n)(modelName);\n    const factory = getModelFactory(this.store, type);\n    return factory !== null;\n  }\n}\nfunction buildSchema(store) {\n  return new ModelSchemaProvider(store);\n}\nfunction getModelFactory(store, type) {\n  if (!store._modelFactoryCache) {\n    store._modelFactoryCache = Object.create(null);\n  }\n  const cache = store._modelFactoryCache;\n  let factory = cache[type];\n  if (!factory) {\n    const owner = (0,_ember_application__WEBPACK_IMPORTED_MODULE_0__.getOwner)(store);\n    factory = owner.factoryFor(`model:${type}`);\n    if (!factory) {\n      //Support looking up mixins as base types for polymorphic relationships\n      factory = modelForMixin(store, type);\n    }\n    if (!factory) {\n      // we don't cache misses in case someone wants to register a missing model\n      return null;\n    }\n    const klass = factory.class;\n    if (klass.isModel) {\n      const hasOwnModelNameSet = klass.modelName && Object.prototype.hasOwnProperty.call(klass, 'modelName');\n      if (!hasOwnModelNameSet) {\n        Object.defineProperty(klass, 'modelName', {\n          value: type\n        });\n      }\n    }\n    cache[type] = factory;\n  }\n  return factory;\n}\nfunction instantiateRecord(identifier, createRecordArgs) {\n  const type = identifier.type;\n  const cache = this.cache;\n  // TODO deprecate allowing unknown args setting\n  const createOptions = {\n    _createProps: createRecordArgs,\n    // TODO @deprecate consider deprecating accessing record properties during init which the below is necessary for\n    _secretInit: {\n      identifier,\n      cache,\n      store: this,\n      cb: secretInit\n    }\n  };\n\n  // ensure that `getOwner(this)` works inside a model instance\n  (0,_ember_application__WEBPACK_IMPORTED_MODULE_0__.setOwner)(createOptions, (0,_ember_application__WEBPACK_IMPORTED_MODULE_0__.getOwner)(this));\n  const factory = getModelFactory(this, type);\n  ( true && !(factory) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`No model was found for '${type}'`, factory));\n  return factory.class.create(createOptions);\n}\nfunction teardownRecord(record) {\n  ( true && !('destroy' in record) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`expected to receive an instance of Model from @ember-data/model. If using a custom model make sure you implement teardownRecord`, 'destroy' in record));\n  record.destroy();\n}\nfunction modelFor(modelName) {\n  ( true && !(!this.isDestroyed && !this.isDestroying) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Attempted to call store.modelFor(), but the store instance has already been destroyed.`, !this.isDestroyed && !this.isDestroying));\n  ( true && !(modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You need to pass a model name to the store's modelFor method`, modelName));\n  ( true && !(typeof modelName === 'string' && modelName.length) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Please pass a proper model name to the store's modelFor method`, typeof modelName === 'string' && modelName.length));\n  const type = (0,_util_3DHZJC9h__WEBPACK_IMPORTED_MODULE_4__.n)(modelName);\n  const maybeFactory = getModelFactory(this, type);\n  const klass = maybeFactory && maybeFactory.class ? maybeFactory.class : null;\n  const ignoreType = !klass || !klass.isModel || this._forceShim;\n  if (!ignoreType) {\n    return klass;\n  }\n  ( true && !(this.getSchemaDefinitionService().doesTypeExist(type)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`No model was found for '${type}' and no schema handles the type`, this.getSchemaDefinitionService().doesTypeExist(type)));\n}\nfunction secretInit(record, cache, identifier, store) {\n  (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_2__.setRecordIdentifier)(record, identifier);\n  _ember_data_store_private__WEBPACK_IMPORTED_MODULE_2__.StoreMap.set(record, store);\n  (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_2__.setCacheFor)(record, cache);\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/hooks-dXmQbIOF.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/hooks.js":
/*!************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/hooks.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildSchema: () => (/* reexport safe */ _hooks_dXmQbIOF__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   instantiateRecord: () => (/* reexport safe */ _hooks_dXmQbIOF__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   modelFor: () => (/* reexport safe */ _hooks_dXmQbIOF__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   teardownRecord: () => (/* reexport safe */ _hooks_dXmQbIOF__WEBPACK_IMPORTED_MODULE_0__.t)\n/* harmony export */ });\n/* harmony import */ var _hooks_dXmQbIOF__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hooks-dXmQbIOF */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/hooks-dXmQbIOF.js\");\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/hooks.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/index.js":
/*!************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModelSchemaProvider: () => (/* reexport safe */ _hooks_dXmQbIOF__WEBPACK_IMPORTED_MODULE_2__.M),\n/* harmony export */   attr: () => (/* reexport safe */ _has_many_PdQBns8a__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   belongsTo: () => (/* reexport safe */ _has_many_PdQBns8a__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   \"default\": () => (/* reexport safe */ _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_1__.M),\n/* harmony export */   hasMany: () => (/* reexport safe */ _has_many_PdQBns8a__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   instantiateRecord: () => (/* reexport safe */ _hooks_dXmQbIOF__WEBPACK_IMPORTED_MODULE_2__.i),\n/* harmony export */   modelFor: () => (/* reexport safe */ _hooks_dXmQbIOF__WEBPACK_IMPORTED_MODULE_2__.m),\n/* harmony export */   teardownRecord: () => (/* reexport safe */ _hooks_dXmQbIOF__WEBPACK_IMPORTED_MODULE_2__.t)\n/* harmony export */ });\n/* harmony import */ var _has_many_PdQBns8a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./has-many-PdQBns8a */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/has-many-PdQBns8a.js\");\n/* harmony import */ var _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./model-YsOraZ6y */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/model-YsOraZ6y.js\");\n/* harmony import */ var _hooks_dXmQbIOF__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hooks-dXmQbIOF */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/hooks-dXmQbIOF.js\");\n\n\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/index.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/migration-support.js":
/*!************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/migration-support.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   registerDerivations: () => (/* binding */ registerDerivations),\n/* harmony export */   withFields: () => (/* binding */ withFields)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/store */ \"../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/index.js\");\n/* harmony import */ var _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model-YsOraZ6y */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/model-YsOraZ6y.js\");\n\n\n\n// 'isDestroying', 'isDestroyed'\nconst LegacyFields = ['_createSnapshot', 'adapterError', 'belongsTo', 'changedAttributes', 'constructor', 'currentState', 'deleteRecord', 'destroyRecord', 'dirtyType', 'errors', 'hasDirtyAttributes', 'hasMany', 'isDeleted', 'isEmpty', 'isError', 'isLoaded', 'isLoading', 'isNew', 'isSaving', 'isValid', 'reload', 'rollbackAttributes', 'save', 'serialize', 'unloadRecord'];\nconst LegacySupport = new WeakMap();\nfunction legacySupport(record, options, prop) {\n  let state = LegacySupport.get(record);\n  if (!state) {\n    state = {};\n    LegacySupport.set(record, state);\n  }\n  switch (prop) {\n    case '_createSnapshot':\n      return _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_2__.j;\n    case 'adapterError':\n      return record.currentState.adapterError;\n    case 'belongsTo':\n      return _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_2__.i;\n    case 'changedAttributes':\n      return _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_2__.g;\n    case 'constructor':\n      return state._constructor = state._constructor || {\n        isModel: true,\n        name: `Record<${(0,_ember_data_store__WEBPACK_IMPORTED_MODULE_1__.recordIdentifierFor)(record).type}>`,\n        modelName: (0,_ember_data_store__WEBPACK_IMPORTED_MODULE_1__.recordIdentifierFor)(record).type\n      };\n    case 'currentState':\n      return state.recordState = state.recordState || new _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_2__.f(record);\n    case 'deleteRecord':\n      return _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_2__.e;\n    case 'destroyRecord':\n      return _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_2__.d;\n    case 'dirtyType':\n      return record.currentState.dirtyType;\n    case 'errors':\n      // @ts-expect-error\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      return state.errors = state.errors || _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_2__.E.create({\n        __record: record\n      });\n    case 'hasDirtyAttributes':\n      return record.currentState.isDirty;\n    case 'hasMany':\n      return _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_2__.h;\n    case 'isDeleted':\n      return record.currentState.isDeleted;\n    case 'isEmpty':\n      return record.currentState.isEmpty;\n    case 'isError':\n      return record.currentState.isError;\n    case 'isLoaded':\n      return record.currentState.isLoaded;\n    case 'isLoading':\n      return record.currentState.isLoading;\n    case 'isNew':\n      return record.currentState.isNew;\n    case 'isSaving':\n      return record.currentState.isSaving;\n    case 'isValid':\n      return record.currentState.isValid;\n    case 'reload':\n      return _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_2__.c;\n    case 'rollbackAttributes':\n      return _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_2__.r;\n    case 'save':\n      return _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_2__.b;\n    case 'serialize':\n      return _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_2__.s;\n    case 'unloadRecord':\n      return _model_YsOraZ6y__WEBPACK_IMPORTED_MODULE_2__.u;\n    default:\n      ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`${prop} is not a supported legacy field`, false));\n  }\n}\nfunction withFields(fields) {\n  LegacyFields.forEach(field => {\n    fields.push({\n      type: '@legacy',\n      name: field,\n      kind: 'derived'\n    });\n  });\n  fields.push({\n    name: 'id',\n    kind: '@id',\n    type: null\n  });\n  fields.push({\n    name: 'isReloading',\n    kind: '@local',\n    type: 'boolean',\n    options: {\n      defaultValue: false\n    }\n  });\n  fields.push({\n    name: 'isDestroying',\n    kind: '@local',\n    type: 'boolean',\n    options: {\n      defaultValue: false\n    }\n  });\n  fields.push({\n    name: 'isDestroyed',\n    kind: '@local',\n    type: 'boolean',\n    options: {\n      defaultValue: false\n    }\n  });\n  return fields;\n}\nfunction registerDerivations(schema) {\n  schema.registerDerivation('@legacy', legacySupport);\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/migration-support.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/model-YsOraZ6y.js":
/*!*********************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/model-YsOraZ6y.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   E: () => (/* binding */ Errors),\n/* harmony export */   L: () => (/* binding */ LEGACY_SUPPORT),\n/* harmony export */   M: () => (/* binding */ Model),\n/* harmony export */   P: () => (/* binding */ PromiseBelongsTo),\n/* harmony export */   R: () => (/* binding */ RelatedCollection),\n/* harmony export */   a: () => (/* binding */ PromiseManyArray),\n/* harmony export */   b: () => (/* binding */ save),\n/* harmony export */   c: () => (/* binding */ reload),\n/* harmony export */   d: () => (/* binding */ destroyRecord),\n/* harmony export */   e: () => (/* binding */ deleteRecord),\n/* harmony export */   f: () => (/* binding */ RecordState),\n/* harmony export */   g: () => (/* binding */ changedAttributes),\n/* harmony export */   h: () => (/* binding */ hasMany),\n/* harmony export */   i: () => (/* binding */ belongsTo),\n/* harmony export */   j: () => (/* binding */ createSnapshot),\n/* harmony export */   l: () => (/* binding */ lookupLegacySupport),\n/* harmony export */   r: () => (/* binding */ rollbackAttributes),\n/* harmony export */   s: () => (/* binding */ serialize),\n/* harmony export */   u: () => (/* binding */ unloadRecord)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/object */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_object__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_data_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember-data/store */ \"../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/index.js\");\n/* harmony import */ var _ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember-data/store/-private */ \"../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/-private.js\");\n/* harmony import */ var _ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember-data/tracking */ \"../rewritten-packages/@ember-data/tracking.bbb05d16/node_modules/@ember-data/tracking/index.js\");\n/* harmony import */ var _ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ember-data/tracking/-private */ \"../rewritten-packages/@ember-data/tracking.bbb05d16/node_modules/@ember-data/tracking/-private.js\");\n/* harmony import */ var _warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @warp-drive/core-types/symbols */ \"../rewritten-packages/@warp-drive/core-types.f90747f3/node_modules/@warp-drive/core-types/symbols.js\");\n/* harmony import */ var _ember_array__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ember/array */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Farray&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_array__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_ember_array__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _ember_array_proxy__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ember/array/proxy */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Farray%2Fproxy&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_array_proxy__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_ember_array_proxy__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _ember_object_computed__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ember/object/computed */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject%2Fcomputed&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object_computed__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_ember_object_computed__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _ember_data_legacy_compat_private__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ember-data/legacy-compat/-private */ \"../rewritten-packages/@ember-data/legacy-compat.e84b6420/node_modules/@ember-data/legacy-compat/-private.js\");\n/* harmony import */ var _ember_object_promise_proxy_mixin__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ember/object/promise-proxy-mixin */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject%2Fpromise-proxy-mixin&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object_promise_proxy_mixin__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_ember_object_promise_proxy_mixin__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _ember_object_proxy__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ember/object/proxy */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject%2Fproxy&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object_proxy__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_ember_object_proxy__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _ember_object_internals__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @ember/object/internals */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject%2Finternals&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object_internals__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_ember_object_internals__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../../../@embroider/macros/src/addon/es-compat2 */ \"../../@embroider/macros/src/addon/es-compat2.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n  @module @ember-data/store\n*/\n/**\n  A `ManyArray` is a `MutableArray` that represents the contents of a has-many\n  relationship.\n\n  The `ManyArray` is instantiated lazily the first time the relationship is\n  requested.\n\n  This class is not intended to be directly instantiated by consuming applications.\n\n  ### Inverses\n\n  Often, the relationships in Ember Data applications will have\n  an inverse. For example, imagine the following models are\n  defined:\n\n  ```app/models/post.js\n  import Model, { hasMany } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @hasMany('comment') comments;\n  }\n  ```\n\n  ```app/models/comment.js\n  import Model, { belongsTo } from '@ember-data/model';\n\n  export default class CommentModel extends Model {\n    @belongsTo('post') post;\n  }\n  ```\n\n  If you created a new instance of `Post` and added\n  a `Comment` record to its `comments` has-many\n  relationship, you would expect the comment's `post`\n  property to be set to the post that contained\n  the has-many.\n\n  We call the record to which a relationship belongs-to the\n  relationship's _owner_.\n\n  @class ManyArray\n  @public\n*/\n\nclass RelatedCollection extends _ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.RecordArray {\n  /**\n    The loading state of this array\n     @property {Boolean} isLoaded\n    @public\n    */\n\n  /**\n    `true` if the relationship is polymorphic, `false` otherwise.\n     @property {Boolean} isPolymorphic\n    @private\n    */\n\n  /**\n    Metadata associated with the request for async hasMany relationships.\n     Example\n     Given that the server returns the following JSON payload when fetching a\n    hasMany relationship:\n     ```js\n    {\n      \"comments\": [{\n        \"id\": 1,\n        \"comment\": \"This is the first comment\",\n      }, {\n    // ...\n      }],\n       \"meta\": {\n        \"page\": 1,\n        \"total\": 5\n      }\n    }\n    ```\n     You can then access the meta data via the `meta` property:\n     ```js\n    let comments = await post.comments;\n    let meta = comments.meta;\n     // meta.page => 1\n    // meta.total => 5\n    ```\n     @property {Object | null} meta\n    @public\n    */\n\n  /**\n     * Retrieve the links for this relationship\n     *\n     @property {Object | null} links\n     @public\n     */\n\n  // @ts-expect-error\n\n  constructor(options) {\n    super(options);\n    this.isLoaded = options.isLoaded || false;\n    this.isAsync = options.isAsync || false;\n    this.isPolymorphic = options.isPolymorphic || false;\n    this.identifier = options.identifier;\n    this.key = options.key;\n  }\n  [_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.MUTATE](target, receiver, prop, args, _SIGNAL) {\n    switch (prop) {\n      case 'length 0':\n        {\n          Reflect.set(target, 'length', 0);\n          mutateReplaceRelatedRecords(this, [], _SIGNAL);\n          return true;\n        }\n      case 'replace cell':\n        {\n          const [index, prior, value] = args;\n          target[index] = value;\n          mutateReplaceRelatedRecord(this, {\n            value,\n            prior,\n            index\n          }, _SIGNAL);\n          return true;\n        }\n      case 'push':\n        {\n          const newValues = extractIdentifiersFromRecords(args);\n          assertNoDuplicates(this, target, currentState => currentState.push(...newValues), `Cannot push duplicates to a hasMany's state.`);\n          {\n            // dedupe\n            const seen = new Set(target);\n            const unique = new Set();\n            args.forEach(item => {\n              const identifier = (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(item);\n              if (!seen.has(identifier)) {\n                seen.add(identifier);\n                unique.add(item);\n              }\n            });\n            const newArgs = Array.from(unique);\n            const result = Reflect.apply(target[prop], receiver, newArgs);\n            if (newArgs.length) {\n              mutateAddToRelatedRecords(this, {\n                value: extractIdentifiersFromRecords(newArgs)\n              }, _SIGNAL);\n            }\n            return result;\n          }\n\n          // else, no dedupe, error on duplicates\n          const result = Reflect.apply(target[prop], receiver, args);\n          if (newValues.length) {\n            mutateAddToRelatedRecords(this, {\n              value: newValues\n            }, _SIGNAL);\n          }\n          return result;\n        }\n      case 'pop':\n        {\n          const result = Reflect.apply(target[prop], receiver, args);\n          if (result) {\n            mutateRemoveFromRelatedRecords(this, {\n              value: (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(result)\n            }, _SIGNAL);\n          }\n          return result;\n        }\n      case 'unshift':\n        {\n          const newValues = extractIdentifiersFromRecords(args);\n          assertNoDuplicates(this, target, currentState => currentState.unshift(...newValues), `Cannot unshift duplicates to a hasMany's state.`);\n          {\n            // dedupe\n            const seen = new Set(target);\n            const unique = new Set();\n            args.forEach(item => {\n              const identifier = (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(item);\n              if (!seen.has(identifier)) {\n                seen.add(identifier);\n                unique.add(item);\n              }\n            });\n            const newArgs = Array.from(unique);\n            const result = Reflect.apply(target[prop], receiver, newArgs);\n            if (newArgs.length) {\n              mutateAddToRelatedRecords(this, {\n                value: extractIdentifiersFromRecords(newArgs),\n                index: 0\n              }, _SIGNAL);\n            }\n            return result;\n          }\n\n          // else, no dedupe, error on duplicates\n          const result = Reflect.apply(target[prop], receiver, args);\n          if (newValues.length) {\n            mutateAddToRelatedRecords(this, {\n              value: newValues,\n              index: 0\n            }, _SIGNAL);\n          }\n          return result;\n        }\n      case 'shift':\n        {\n          const result = Reflect.apply(target[prop], receiver, args);\n          if (result) {\n            mutateRemoveFromRelatedRecords(this, {\n              value: (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(result),\n              index: 0\n            }, _SIGNAL);\n          }\n          return result;\n        }\n      case 'sort':\n        {\n          const result = Reflect.apply(target[prop], receiver, args);\n          mutateSortRelatedRecords(this, result.map(_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor), _SIGNAL);\n          return result;\n        }\n      case 'splice':\n        {\n          const [start, deleteCount, ...adds] = args;\n\n          // detect a full replace\n          if (start === 0 && deleteCount === this[_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.SOURCE].length) {\n            const newValues = extractIdentifiersFromRecords(adds);\n            assertNoDuplicates(this, target, currentState => currentState.splice(start, deleteCount, ...newValues), `Cannot replace a hasMany's state with a new state that contains duplicates.`);\n            {\n              // dedupe\n              const current = new Set(adds);\n              const unique = Array.from(current);\n              const newArgs = [start, deleteCount].concat(unique);\n              const result = Reflect.apply(target[prop], receiver, newArgs);\n              mutateReplaceRelatedRecords(this, extractIdentifiersFromRecords(unique), _SIGNAL);\n              return result;\n            }\n\n            // else, no dedupe, error on duplicates\n            const result = Reflect.apply(target[prop], receiver, args);\n            mutateReplaceRelatedRecords(this, newValues, _SIGNAL);\n            return result;\n          }\n          const newValues = extractIdentifiersFromRecords(adds);\n          assertNoDuplicates(this, target, currentState => currentState.splice(start, deleteCount, ...newValues), `Cannot splice a hasMany's state with a new state that contains duplicates.`);\n          {\n            // dedupe\n            const currentState = target.slice();\n            currentState.splice(start, deleteCount);\n            const seen = new Set(currentState);\n            const unique = [];\n            adds.forEach(item => {\n              const identifier = (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(item);\n              if (!seen.has(identifier)) {\n                seen.add(identifier);\n                unique.push(item);\n              }\n            });\n            const newArgs = [start, deleteCount, ...unique];\n            const result = Reflect.apply(target[prop], receiver, newArgs);\n            if (deleteCount > 0) {\n              mutateRemoveFromRelatedRecords(this, {\n                value: result.map(_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor),\n                index: start\n              }, _SIGNAL);\n            }\n            if (unique.length > 0) {\n              mutateAddToRelatedRecords(this, {\n                value: extractIdentifiersFromRecords(unique),\n                index: start\n              }, _SIGNAL);\n            }\n            return result;\n          }\n\n          // else, no dedupe, error on duplicates\n          const result = Reflect.apply(target[prop], receiver, args);\n          if (deleteCount > 0) {\n            mutateRemoveFromRelatedRecords(this, {\n              value: result.map(_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor),\n              index: start\n            }, _SIGNAL);\n          }\n          if (newValues.length > 0) {\n            mutateAddToRelatedRecords(this, {\n              value: newValues,\n              index: start\n            }, _SIGNAL);\n          }\n          return result;\n        }\n      default:\n        ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`unable to convert ${prop} into a transaction that updates the cache state for this record array`));\n    }\n  }\n  notify() {\n    const signal = this[_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.ARRAY_SIGNAL];\n    signal.shouldReset = true;\n    // @ts-expect-error\n    (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.notifyArray)(this);\n  }\n\n  /**\n    Reloads all of the records in the manyArray. If the manyArray\n    holds a relationship that was originally fetched using a links url\n    Ember Data will revisit the original links url to repopulate the\n    relationship.\n     If the manyArray holds the result of a `store.query()` reload will\n    re-run the original query.\n     Example\n     ```javascript\n    let user = store.peekRecord('user', '1')\n    await login(user);\n     let permissions = await user.permissions;\n    await permissions.reload();\n    ```\n     @method reload\n    @public\n  */\n  reload(options) {\n    // TODO this is odd, we don't ask the store for anything else like this?\n    return this._manager.reloadHasMany(this.key, options);\n  }\n\n  /**\n    Saves all of the records in the `ManyArray`.\n     Example\n     ```javascript\n    let inbox = await store.findRecord('inbox', '1');\n    let messages = await inbox.messages;\n    messages.forEach((message) => {\n      message.isRead = true;\n    });\n    messages.save();\n    ```\n     @method save\n    @public\n    @return {PromiseArray} promise\n  */\n\n  /**\n    Create a child record within the owner\n     @method createRecord\n    @public\n    @param {Object} hash\n    @return {Model} record\n  */\n  createRecord(hash) {\n    const {\n      store\n    } = this;\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected modelName to be set`, this.modelName));\n    const record = store.createRecord(this.modelName, hash);\n    this.push(record);\n    return record;\n  }\n  destroy() {\n    super.destroy(false);\n  }\n}\nRelatedCollection.prototype.isAsync = false;\nRelatedCollection.prototype.isPolymorphic = false;\nRelatedCollection.prototype.identifier = null;\nRelatedCollection.prototype.cache = null;\nRelatedCollection.prototype._inverseIsAsync = false;\nRelatedCollection.prototype.key = '';\nRelatedCollection.prototype.DEPRECATED_CLASS_NAME = 'ManyArray';\nfunction assertRecordPassedToHasMany(record) {\n  ( true && !(function () {\n    try {\n      (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(record);\n      return true;\n    } catch {\n      return false;\n    }\n  }()) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`All elements of a hasMany relationship must be instances of Model, you passed $${typeof record}`, function () {\n    try {\n      (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(record);\n      return true;\n    } catch {\n      return false;\n    }\n  }()));\n}\nfunction extractIdentifiersFromRecords(records) {\n  return records.map(extractIdentifierFromRecord$1);\n}\nfunction extractIdentifierFromRecord$1(recordOrPromiseRecord) {\n  assertRecordPassedToHasMany(recordOrPromiseRecord);\n  return (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(recordOrPromiseRecord);\n}\nfunction assertNoDuplicates(collection, target, callback, reason) {\n  const state = target.slice();\n  callback(state);\n  if (state.length !== new Set(state).size) {\n    const duplicates = state.filter((currentValue, currentIndex) => state.indexOf(currentValue) !== currentIndex);\n    {\n      ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`${reason} This behavior is deprecated. Found duplicates for the following records within the new state provided to \\`<${collection.identifier.type}:${collection.identifier.id || collection.identifier.lid}>.${collection.key}\\`\\n\\t- ${Array.from(new Set(duplicates)).map(r => (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.isStableIdentifier)(r) ? r.lid : (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(r).lid).sort((a, b) => a.localeCompare(b)).join('\\n\\t- ')}`, false, {\n        id: 'ember-data:deprecate-many-array-duplicates',\n        for: 'ember-data',\n        until: '6.0',\n        since: {\n          enabled: '5.3',\n          available: '5.3'\n        }\n      }));\n    }\n  }\n}\nfunction mutateAddToRelatedRecords(collection, operationInfo, _SIGNAL) {\n  mutate(collection, {\n    op: 'addToRelatedRecords',\n    record: collection.identifier,\n    field: collection.key,\n    ...operationInfo\n  }, _SIGNAL);\n}\nfunction mutateRemoveFromRelatedRecords(collection, operationInfo, _SIGNAL) {\n  mutate(collection, {\n    op: 'removeFromRelatedRecords',\n    record: collection.identifier,\n    field: collection.key,\n    ...operationInfo\n  }, _SIGNAL);\n}\nfunction mutateReplaceRelatedRecord(collection, operationInfo, _SIGNAL) {\n  mutate(collection, {\n    op: 'replaceRelatedRecord',\n    record: collection.identifier,\n    field: collection.key,\n    ...operationInfo\n  }, _SIGNAL);\n}\nfunction mutateReplaceRelatedRecords(collection, value, _SIGNAL) {\n  mutate(collection, {\n    op: 'replaceRelatedRecords',\n    record: collection.identifier,\n    field: collection.key,\n    value\n  }, _SIGNAL);\n}\nfunction mutateSortRelatedRecords(collection, value, _SIGNAL) {\n  mutate(collection, {\n    op: 'sortRelatedRecords',\n    record: collection.identifier,\n    field: collection.key,\n    value\n  }, _SIGNAL);\n}\nfunction mutate(collection, mutation, _SIGNAL) {\n  collection._manager.mutate(mutation);\n  (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.addToTransaction)(_SIGNAL);\n}\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object.keys(descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object.defineProperty(target, property, desc);\n    desc = null;\n  }\n  return desc;\n}\nconst PromiseObject = _ember_object_proxy__WEBPACK_IMPORTED_MODULE_12___default().extend((_ember_object_promise_proxy_mixin__WEBPACK_IMPORTED_MODULE_11___default()));\nvar _dec$1, _class$6;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nconst Extended = PromiseObject;\n\n/**\n @module @ember-data/model\n */\n\n/**\n  A PromiseBelongsTo is a PromiseObject that also proxies certain method calls\n  to the underlying belongsTo model.\n  Right now we proxy:\n    * `reload()`\n  @class PromiseBelongsTo\n  @extends PromiseObject\n  @private\n*/\nlet PromiseBelongsTo = (_dec$1 = (0,_ember_object__WEBPACK_IMPORTED_MODULE_1__.computed)(), (_class$6 = class PromiseBelongsTo extends Extended {\n  get id() {\n    const {\n      key,\n      legacySupport\n    } = this._belongsToState;\n    const ref = legacySupport.referenceFor('belongsTo', key);\n    return ref.id();\n  }\n\n  // we don't proxy meta because we would need to proxy it to the relationship state container\n  //  however, meta on relationships does not trigger change notifications.\n  //  if you need relationship meta, you should do `record.belongsTo(relationshipName).meta()`\n  get meta() {\n    // eslint-disable-next-line no-constant-condition\n    {\n      ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('You attempted to access meta on the promise for the async belongsTo relationship ' + `${this._belongsToState.modelName}:${this._belongsToState.key}'.` + '\\nUse `record.belongsTo(relationshipName).meta()` instead.', false));\n    }\n    return;\n  }\n  async reload(options) {\n    ( true && !(this.content !== undefined) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('You are trying to reload an async belongsTo before it has been created', this.content !== undefined));\n    const {\n      key,\n      legacySupport\n    } = this._belongsToState;\n    await legacySupport.reloadBelongsTo(key, options);\n    return this;\n  }\n}, (_applyDecoratedDescriptor(_class$6.prototype, \"id\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.cached], Object.getOwnPropertyDescriptor(_class$6.prototype, \"id\"), _class$6.prototype), _applyDecoratedDescriptor(_class$6.prototype, \"meta\", [_dec$1], Object.getOwnPropertyDescriptor(_class$6.prototype, \"meta\"), _class$6.prototype)), _class$6));\nvar _class$5;\n/**\n @module @ember-data/model\n */\n/**\n  This class is returned as the result of accessing an async hasMany relationship\n  on an instance of a Model extending from `@ember-data/model`.\n\n  A PromiseManyArray is an iterable proxy that allows templates to consume related\n  ManyArrays and update once their contents are no longer pending.\n\n  In your JS code you should resolve the promise first.\n\n  ```js\n  const comments = await post.comments;\n  ```\n\n  @class PromiseManyArray\n  @public\n*/\nlet PromiseManyArray = (_class$5 = class PromiseManyArray {\n  constructor(promise, content) {\n    this._update(promise, content);\n    this.isDestroyed = false;\n  }\n\n  //---- Methods/Properties on ArrayProxy that we will keep as our API\n\n  /**\n   * Retrieve the length of the content\n   * @property length\n   * @public\n   */\n  get length() {\n    // shouldn't be needed, but ends up being needed\n    // for computed chains even in 4.x\n    {\n      this['[]'];\n    }\n    return this.content ? this.content.length : 0;\n  }\n\n  /**\n   * Iterate the proxied content. Called by the glimmer iterator in #each\n   * We do not guarantee that forEach will always be available. This\n   * may eventually be made to use Symbol.Iterator once glimmer supports it.\n   *\n   * @method forEach\n   * @param cb\n   * @return\n   * @private\n   */\n  forEach(cb) {\n    if (this.content && this.length) {\n      this.content.forEach(cb);\n    }\n  }\n\n  /**\n   * Reload the relationship\n   * @method reload\n   * @public\n   * @param options\n   * @return\n   */\n  reload(options) {\n    ( true && !(this.content) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('You are trying to reload an async manyArray before it has been created', this.content));\n    void this.content.reload(options);\n    return this;\n  }\n\n  //----  Properties/Methods from the PromiseProxyMixin that we will keep as our API\n\n  /**\n   * Whether the loading promise is still pending\n   *\n   * @property {boolean} isPending\n   * @public\n   */\n\n  /**\n   * Whether the loading promise rejected\n   *\n   * @property {boolean} isRejected\n   * @public\n   */\n\n  /**\n   * Whether the loading promise succeeded\n   *\n   * @property {boolean} isFulfilled\n   * @public\n   */\n\n  /**\n   * Whether the loading promise completed (resolved or rejected)\n   *\n   * @property {boolean} isSettled\n   * @public\n   */\n\n  /**\n   * chain this promise\n   *\n   * @method then\n   * @public\n   * @param success\n   * @param fail\n   * @return Promise\n   */\n  then(s, f) {\n    return this.promise.then(s, f);\n  }\n\n  /**\n   * catch errors thrown by this promise\n   * @method catch\n   * @public\n   * @param callback\n   * @return Promise\n   */\n  catch(cb) {\n    return this.promise.catch(cb);\n  }\n\n  /**\n   * run cleanup after this promise completes\n   *\n   * @method finally\n   * @public\n   * @param callback\n   * @return Promise\n   */\n  finally(cb) {\n    return this.promise.finally(cb);\n  }\n\n  //---- Methods on EmberObject that we should keep\n\n  destroy() {\n    this.isDestroyed = true;\n    this.content = null;\n    this.promise = null;\n  }\n\n  //---- Methods/Properties on ManyArray that we own and proxy to\n\n  /**\n   * Retrieve the links for this relationship\n   * @property links\n   * @public\n   */\n  get links() {\n    return this.content ? this.content.links : undefined;\n  }\n\n  /**\n   * Retrieve the meta for this relationship\n   * @property meta\n   * @public\n   */\n  get meta() {\n    return this.content ? this.content.meta : undefined;\n  }\n\n  //---- Our own stuff\n\n  _update(promise, content) {\n    if (content !== undefined) {\n      this.content = content;\n    }\n    this.promise = tapPromise(this, promise);\n  }\n  static create({\n    promise,\n    content\n  }) {\n    return new this(promise, content);\n  }\n}, (_applyDecoratedDescriptor(_class$5.prototype, \"length\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat], Object.getOwnPropertyDescriptor(_class$5.prototype, \"length\"), _class$5.prototype), _applyDecoratedDescriptor(_class$5.prototype, \"links\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat], Object.getOwnPropertyDescriptor(_class$5.prototype, \"links\"), _class$5.prototype), _applyDecoratedDescriptor(_class$5.prototype, \"meta\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat], Object.getOwnPropertyDescriptor(_class$5.prototype, \"meta\"), _class$5.prototype)), _class$5);\n(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(PromiseManyArray.prototype, 'content', null);\n(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(PromiseManyArray.prototype, 'isPending', false);\n(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(PromiseManyArray.prototype, 'isRejected', false);\n(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(PromiseManyArray.prototype, 'isFulfilled', false);\n(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(PromiseManyArray.prototype, 'isSettled', false);\n\n// this will error if someone tries to call\n// A(identifierArray) since it is not configurable\n// which is preferrable to the `meta` override we used\n// before which required importing all of Ember\n{\n  const desc = {\n    enumerable: true,\n    configurable: false,\n    get: function () {\n      return this.content?.length && this.content;\n    }\n  };\n  (0,_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat)(desc);\n\n  // ember-source < 3.23 (e.g. 3.20 lts)\n  // requires that the tag `'[]'` be notified\n  // on the ArrayProxy in order for `{{#each}}`\n  // to recompute. We entangle the '[]' tag from content\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  Object.defineProperty(PromiseManyArray.prototype, '[]', desc);\n}\nfunction tapPromise(proxy, promise) {\n  proxy.isPending = true;\n  proxy.isSettled = false;\n  proxy.isFulfilled = false;\n  proxy.isRejected = false;\n  return Promise.resolve(promise).then(content => {\n    proxy.isPending = false;\n    proxy.isFulfilled = true;\n    proxy.isSettled = true;\n    proxy.content = content;\n    return content;\n  }, error => {\n    proxy.isPending = false;\n    proxy.isFulfilled = false;\n    proxy.isRejected = true;\n    proxy.isSettled = true;\n    throw error;\n  });\n}\n\n/*\n  Assert that `addedRecord` has a valid type so it can be added to the\n  relationship of the `record`.\n\n  The assert basically checks if the `addedRecord` can be added to the\n  relationship (specified via `relationshipMeta`) of the `record`.\n\n  This utility should only be used internally, as both record parameters must\n  be stable record identifiers and the `relationshipMeta` needs to be the meta\n  information about the relationship, retrieved via\n  `record.relationshipFor(key)`.\n*/\nlet assertPolymorphicType;\n{\n  assertPolymorphicType = function assertPolymorphicType(parentIdentifier, parentDefinition, addedIdentifier, store) {\n    if (parentDefinition.inverseIsImplicit) {\n      return;\n    }\n    if (parentDefinition.isPolymorphic) {\n      let meta = store.getSchemaDefinitionService().relationshipsDefinitionFor(addedIdentifier)[parentDefinition.inverseKey];\n      ( true && !(meta?.options.as === parentDefinition.type) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`The schema for the relationship '${parentDefinition.inverseKey}' on '${addedIdentifier.type}' type does not implement '${parentDefinition.type}' and thus cannot be assigned to the '${parentDefinition.key}' relationship in '${parentIdentifier.type}'. The definition should specify 'as: \"${parentDefinition.type}\"' in options.`, meta?.options.as === parentDefinition.type));\n    }\n  };\n}\nvar _class$4;\n/**\n  @module @ember-data/model\n*/\nfunction isResourceIdentiferWithRelatedLinks$1(value) {\n  return Boolean(value && value.links && value.links.related);\n}\n/**\n A `HasManyReference` is a low-level API that allows access\n and manipulation of a hasMany relationship.\n\n It is especially useful when you're dealing with `async` relationships\n from `@ember-data/model` as it allows synchronous access to\n the relationship data if loaded, as well as APIs for loading, reloading\n the data or accessing available information without triggering a load.\n\n It may also be useful when using `sync` relationships with `@ember-data/model`\n that need to be loaded/reloaded with more precise timing than marking the\n relationship as `async` and relying on autofetch would have allowed.\n\n However,keep in mind that marking a relationship as `async: false` will introduce\n bugs into your application if the data is not always guaranteed to be available\n by the time the relationship is accessed. Ergo, it is recommended when using this\n approach to utilize `links` for unloaded relationship state instead of identifiers.\n\n Reference APIs are entangled with the relationship's underlying state,\n thus any getters or cached properties that utilize these will properly\n invalidate if the relationship state changes.\n\n References are \"stable\", meaning that multiple calls to retrieve the reference\n  for a given relationship will always return the same HasManyReference.\n\n @class HasManyReference\n @public\n */\nlet HasManyReference = (_class$4 = class HasManyReference {\n  constructor(store, graph, parentIdentifier, hasManyRelationship, key) {\n    /**\n     * The field name on the parent record for this has-many relationship.\n     *\n     * @property {String} key\n     * @public\n     */\n    /**\n     * The type of resource this relationship will contain.\n     *\n     * @property {String} type\n     * @public\n     */\n    // unsubscribe tokens given to us by the notification manager\n    this.___token = void 0;\n    this.___identifier = void 0;\n    this.___relatedTokenMap = void 0;\n    this.graph = graph;\n    this.key = key;\n    this.hasManyRelationship = hasManyRelationship;\n    this.type = hasManyRelationship.definition.type;\n    this.store = store;\n    this.___identifier = parentIdentifier;\n    this.___token = store.notifications.subscribe(parentIdentifier, (_, bucket, notifiedKey) => {\n      if (bucket === 'relationships' && notifiedKey === key) {\n        this._ref++;\n      }\n    });\n    this.___relatedTokenMap = new Map();\n    // TODO inverse\n  }\n\n  /**\n   * This method should never be called by user code.\n   *\n   * @internal\n   */\n  destroy() {\n    this.store.notifications.unsubscribe(this.___token);\n    this.___relatedTokenMap.forEach(token => {\n      this.store.notifications.unsubscribe(token);\n    });\n    this.___relatedTokenMap.clear();\n  }\n\n  /**\n   * An array of identifiers for the records that this reference refers to.\n   *\n   * @property {StableRecordIdentifier[]} identifiers\n   * @public\n   */\n  get identifiers() {\n    this._ref; // consume the tracked prop\n\n    const resource = this._resource();\n    const map = this.___relatedTokenMap;\n    this.___relatedTokenMap = new Map();\n    if (resource && resource.data) {\n      return resource.data.map(resourceIdentifier => {\n        const identifier = this.store.identifierCache.getOrCreateRecordIdentifier(resourceIdentifier);\n        let token = map.get(identifier);\n        if (token) {\n          map.delete(identifier);\n        } else {\n          token = this.store.notifications.subscribe(identifier, (_, bucket, notifiedKey) => {\n            if (bucket === 'identity' || bucket === 'attributes' && notifiedKey === 'id') {\n              this._ref++;\n            }\n          });\n        }\n        this.___relatedTokenMap.set(identifier, token);\n        return identifier;\n      });\n    }\n    map.forEach(token => {\n      this.store.notifications.unsubscribe(token);\n    });\n    map.clear();\n    return [];\n  }\n  _resource() {\n    const cache = this.store.cache;\n    return cache.getRelationship(this.___identifier, this.key);\n  }\n\n  /**\n   This returns a string that represents how the reference will be\n   looked up when it is loaded. If the relationship has a link it will\n   use the \"link\" otherwise it defaults to \"id\".\n    Example\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n    ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n    let commentsRef = post.hasMany('comments');\n    // get the identifier of the reference\n   if (commentsRef.remoteType() === \"ids\") {\n     let ids = commentsRef.ids();\n   } else if (commentsRef.remoteType() === \"link\") {\n     let link = commentsRef.link();\n   }\n   ```\n    @method remoteType\n   @public\n   @return {String} The name of the remote type. This should either be `link` or `ids`\n   */\n  remoteType() {\n    const value = this._resource();\n    if (value && value.links && value.links.related) {\n      return 'link';\n    }\n    return 'ids';\n  }\n\n  /**\n   `ids()` returns an array of the record IDs in this relationship.\n    Example\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n    ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n    let commentsRef = post.hasMany('comments');\n    commentsRef.ids(); // ['1']\n   ```\n    @method ids\n    @public\n   @return {Array} The ids in this has-many relationship\n   */\n  ids() {\n    return this.identifiers.map(identifier => identifier.id);\n  }\n\n  /**\n   The link Ember Data will use to fetch or reload this belongs-to\n   relationship. By default it uses only the \"related\" resource linkage.\n    Example\n    ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n   export default Model.extend({\n      user: belongsTo('user', { async: true, inverse: null })\n    });\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            links: {\n              related: '/articles/1/author'\n            }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n    // get the identifier of the reference\n   if (userRef.remoteType() === \"link\") {\n      let link = userRef.link();\n    }\n   ```\n    @method link\n   @public\n   @return {String} The link Ember Data will use to fetch or reload this belongs-to relationship.\n   */\n  link() {\n    const resource = this._resource();\n    if (isResourceIdentiferWithRelatedLinks$1(resource)) {\n      if (resource.links) {\n        const related = resource.links.related;\n        return !related || typeof related === 'string' ? related : related.href;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * any links that have been received for this relationship\n   *\n   * @method links\n   * @public\n   * @return\n   */\n  links() {\n    const resource = this._resource();\n    return resource && resource.links ? resource.links : null;\n  }\n\n  /**\n   The meta data for the has-many relationship.\n    Example\n    ```javascript\n   // models/blog.js\n   import Model, { hasMany } from '@ember-data/model';\n   export default Model.extend({\n      users: hasMany('user', { async: true, inverse: null })\n    });\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          users: {\n            links: {\n              related: {\n                href: '/articles/1/authors'\n              },\n            },\n            meta: {\n              lastUpdated: 1458014400000\n            }\n          }\n        }\n      }\n    });\n    let usersRef = blog.hasMany('user');\n    usersRef.meta() // { lastUpdated: 1458014400000 }\n   ```\n   @method meta\n  @public\n  @return {Object|null} The meta information for the belongs-to relationship.\n  */\n  meta() {\n    let meta = null;\n    const resource = this._resource();\n    if (resource && resource.meta && typeof resource.meta === 'object') {\n      meta = resource.meta;\n    }\n    return meta;\n  }\n\n  /**\n   `push` can be used to update the data in the relationship and EmberData\n   will treat the new data as the canonical value of this relationship on\n   the backend. An empty array will signify the canonical value should be\n   empty.\n    Example model\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n    Setup some initial state, note we haven't loaded the comments yet:\n    ```js\n   const post = store.push({\n     data: {\n       type: 'post',\n       id: '1',\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: '1' }]\n         }\n       }\n     }\n   });\n    const commentsRef = post.hasMany('comments');\n   commentsRef.ids(); // ['1']\n   ```\n    Update the state using `push`, note we can do this even without\n   having loaded these comments yet by providing resource identifiers.\n    Both full resources and resource identifiers are supported.\n    ```js\n   await commentsRef.push({\n    data: [\n     { type: 'comment', id: '2' },\n     { type: 'comment', id: '3' },\n    ]\n   });\n    commentsRef.ids(); // ['2', '3']\n   ```\n    For convenience, you can also pass in an array of resources or resource identifiers\n   without wrapping them in the `data` property:\n    ```js\n   await commentsRef.push([\n     { type: 'comment', id: '4' },\n     { type: 'comment', id: '5' },\n   ]);\n    commentsRef.ids(); // ['4', '5']\n   ```\n    When using the `data` property, you may also include other resource data via included,\n   as well as provide new links and meta to the relationship.\n    ```js\n   await commentsRef.push({\n     links: {\n       related: '/posts/1/comments'\n     },\n     meta: {\n       total: 2\n     },\n     data: [\n       { type: 'comment', id: '4' },\n       { type: 'comment', id: '5' },\n     ],\n     included: [\n       { type: 'other-thing', id: '1', attributes: { foo: 'bar' },\n     ]\n   });\n   ```\n    By default, the store will attempt to fetch any unloaded records before resolving\n   the returned promise with the ManyArray.\n    Alternatively, pass `true` as the second argument to avoid fetching unloaded records\n   and instead the promise will resolve with void without attempting to fetch. This is\n   particularly useful if you want to update the state of the relationship without\n   forcing the load of all of the associated records.\n    @method push\n   @public\n   @param {Array|Object} doc a JSONAPI document object describing the new value of this relationship.\n   @param {Boolean} [skipFetch] if `true`, do not attempt to fetch unloaded records\n   @return {Promise<ManyArray | void>}\n  */\n  async push(doc, skipFetch) {\n    const {\n      store\n    } = this;\n    const dataDoc = Array.isArray(doc) ? {\n      data: doc\n    } : doc;\n    const isResourceData = Array.isArray(dataDoc.data) && dataDoc.data.length > 0 && isMaybeResource(dataDoc.data[0]);\n\n    // enforce that one of links, meta or data is present\n    ( true && !('links' in dataDoc || 'meta' in dataDoc || 'data' in dataDoc) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You must provide at least one of 'links', 'meta' or 'data' when calling hasManyReference.push`, 'links' in dataDoc || 'meta' in dataDoc || 'data' in dataDoc));\n    const identifiers = !Array.isArray(dataDoc.data) ? [] : isResourceData ? store._push(dataDoc, true) : dataDoc.data.map(i => store.identifierCache.getOrCreateRecordIdentifier(i));\n    const {\n      identifier\n    } = this.hasManyRelationship;\n    {\n      const relationshipMeta = this.hasManyRelationship.definition;\n      identifiers.forEach(added => {\n        assertPolymorphicType(identifier, relationshipMeta, added, store);\n      });\n    }\n    const newData = {};\n    // only set data if it was passed in\n    if (Array.isArray(dataDoc.data)) {\n      newData.data = identifiers;\n    }\n    if ('links' in dataDoc) {\n      newData.links = dataDoc.links;\n    }\n    if ('meta' in dataDoc) {\n      newData.meta = dataDoc.meta;\n    }\n    store._join(() => {\n      this.graph.push({\n        op: 'updateRelationship',\n        record: identifier,\n        field: this.key,\n        value: newData\n      });\n    });\n    if (!skipFetch) return this.load();\n  }\n  _isLoaded() {\n    const hasRelationshipDataProperty = this.hasManyRelationship.state.hasReceivedData;\n    if (!hasRelationshipDataProperty) {\n      return false;\n    }\n    const relationship = this.graph.getData(this.hasManyRelationship.identifier, this.key);\n    return relationship.data?.every(identifier => {\n      return this.store._instanceCache.recordIsLoaded(identifier, true) === true;\n    });\n  }\n\n  /**\n   `value()` synchronously returns the current value of the has-many\n   relationship. Unlike `record.relationshipName`, calling\n   `value()` on a reference does not trigger a fetch if the async\n   relationship is not yet loaded. If the relationship is not loaded\n   it will always return `null`.\n    Example\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n    ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n    let commentsRef = post.hasMany('comments');\n    post.comments.then(function(comments) {\n     commentsRef.value() === comments\n   })\n   ```\n    @method value\n    @public\n   @return {ManyArray}\n   */\n  value() {\n    const support = LEGACY_SUPPORT.get(this.___identifier);\n    const loaded = this._isLoaded();\n    if (!loaded) {\n      // subscribe to changes\n      // for when we are not loaded yet\n      this._ref;\n      return null;\n    }\n    return support.getManyArray(this.key);\n  }\n\n  /**\n   Loads the relationship if it is not already loaded.  If the\n   relationship is already loaded this method does not trigger a new\n   load. This causes a request to the specified\n   relationship link or reloads all items currently in the relationship.\n    Example\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n    ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n    let commentsRef = post.hasMany('comments');\n    commentsRef.load().then(function(comments) {\n     //...\n   });\n   ```\n    You may also pass in an options object whose properties will be\n   fed forward. This enables you to pass `adapterOptions` into the\n   request given to the adapter via the reference.\n    Example\n    ```javascript\n   commentsRef.load({ adapterOptions: { isPrivate: true } })\n     .then(function(comments) {\n       //...\n     });\n   ```\n    ```app/adapters/comment.js\n   export default ApplicationAdapter.extend({\n     findMany(store, type, id, snapshots) {\n       // In the adapter you will have access to adapterOptions.\n       let adapterOptions = snapshots[0].adapterOptions;\n     }\n   });\n   ```\n    @method load\n   @public\n   @param {Object} options the options to pass in.\n   @return {Promise} a promise that resolves with the ManyArray in\n   this has-many relationship.\n   */\n  async load(options) {\n    const support = LEGACY_SUPPORT.get(this.___identifier);\n    const fetchSyncRel = !this.hasManyRelationship.definition.isAsync && !areAllInverseRecordsLoaded(this.store, this._resource());\n    return fetchSyncRel ? support.reloadHasMany(this.key, options) :\n    // we cast to fix the return type since typescript and eslint don't understand async functions\n    // properly\n    support.getHasMany(this.key, options);\n  }\n\n  /**\n   Reloads this has-many relationship. This causes a request to the specified\n   relationship link or reloads all items currently in the relationship.\n    Example\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n    ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n    let commentsRef = post.hasMany('comments');\n    commentsRef.reload().then(function(comments) {\n     //...\n   });\n   ```\n    You may also pass in an options object whose properties will be\n   fed forward. This enables you to pass `adapterOptions` into the\n   request given to the adapter via the reference. A full example\n   can be found in the `load` method.\n    Example\n    ```javascript\n   commentsRef.reload({ adapterOptions: { isPrivate: true } })\n   ```\n    @method reload\n    @public\n   @param {Object} options the options to pass in.\n   @return {Promise} a promise that resolves with the ManyArray in this has-many relationship.\n   */\n  reload(options) {\n    const support = LEGACY_SUPPORT.get(this.___identifier);\n    return support.reloadHasMany(this.key, options);\n  }\n}, _applyDecoratedDescriptor(_class$4.prototype, \"identifiers\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.cached, _ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat], Object.getOwnPropertyDescriptor(_class$4.prototype, \"identifiers\"), _class$4.prototype), _class$4);\n(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(HasManyReference.prototype, '_ref', 0);\nfunction isMaybeResource(object) {\n  const keys = Object.keys(object).filter(k => k !== 'id' && k !== 'type' && k !== 'lid');\n  return keys.length > 0;\n}\nvar _class$3;\nfunction isResourceIdentiferWithRelatedLinks(value) {\n  return Boolean(value && value.links && value.links.related);\n}\n\n/**\n A `BelongsToReference` is a low-level API that allows access\n and manipulation of a belongsTo relationship.\n\n It is especially useful when you're dealing with `async` relationships\n from `@ember-data/model` as it allows synchronous access to\n the relationship data if loaded, as well as APIs for loading, reloading\n the data or accessing available information without triggering a load.\n\n It may also be useful when using `sync` relationships with `@ember-data/model`\n that need to be loaded/reloaded with more precise timing than marking the\n relationship as `async` and relying on autofetch would have allowed.\n\n However,keep in mind that marking a relationship as `async: false` will introduce\n bugs into your application if the data is not always guaranteed to be available\n by the time the relationship is accessed. Ergo, it is recommended when using this\n approach to utilize `links` for unloaded relationship state instead of identifiers.\n\n Reference APIs are entangled with the relationship's underlying state,\n thus any getters or cached properties that utilize these will properly\n invalidate if the relationship state changes.\n\n References are \"stable\", meaning that multiple calls to retrieve the reference\n  for a given relationship will always return the same HasManyReference.\n\n @class BelongsToReference\n @public\n */\nlet BelongsToReference = (_class$3 = class BelongsToReference {\n  /**\n   * The field name on the parent record for this has-many relationship.\n   *\n   * @property {String} key\n   * @public\n   */\n\n  /**\n   * The type of resource this relationship will contain.\n   *\n   * @property {String} type\n   * @public\n   */\n\n  // unsubscribe tokens given to us by the notification manager\n\n  constructor(store, graph, parentIdentifier, belongsToRelationship, key) {\n    this.graph = graph;\n    this.key = key;\n    this.belongsToRelationship = belongsToRelationship;\n    this.type = belongsToRelationship.definition.type;\n    this.store = store;\n    this.___identifier = parentIdentifier;\n    this.___relatedToken = null;\n    this.___token = store.notifications.subscribe(parentIdentifier, (_, bucket, notifiedKey) => {\n      if (bucket === 'relationships' && notifiedKey === key) {\n        this._ref++;\n      }\n    });\n\n    // TODO inverse\n  }\n  destroy() {\n    // TODO @feature we need the notification manager often enough\n    // we should potentially just expose it fully public\n    this.store.notifications.unsubscribe(this.___token);\n    this.___token = null;\n    if (this.___relatedToken) {\n      this.store.notifications.unsubscribe(this.___relatedToken);\n      this.___relatedToken = null;\n    }\n  }\n\n  /**\n   * The identifier of the record that this reference refers to.\n   * `null` if no related record is known.\n   *\n   * @property {StableRecordIdentifier | null} identifier\n   * @public\n   */\n  get identifier() {\n    if (this.___relatedToken) {\n      this.store.notifications.unsubscribe(this.___relatedToken);\n      this.___relatedToken = null;\n    }\n    const resource = this._resource();\n    if (resource && resource.data) {\n      const identifier = this.store.identifierCache.getOrCreateRecordIdentifier(resource.data);\n      this.___relatedToken = this.store.notifications.subscribe(identifier, (_, bucket, notifiedKey) => {\n        if (bucket === 'identity' || bucket === 'attributes' && notifiedKey === 'id') {\n          this._ref++;\n        }\n      });\n      return identifier;\n    }\n    return null;\n  }\n\n  /**\n   The `id` of the record that this reference refers to. Together, the\n   `type()` and `id()` methods form a composite key for the identity\n   map. This can be used to access the id of an async relationship\n   without triggering a fetch that would normally happen if you\n   attempted to use `record.relationship.id`.\n    Example\n    ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n    export default class BlogModel extends Model {\n    @belongsTo('user', { async: true, inverse: null }) user;\n   }\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n    // get the identifier of the reference\n   if (userRef.remoteType() === \"id\") {\n      let id = userRef.id();\n    }\n   ```\n    @method id\n   @public\n   @return {String} The id of the record in this belongsTo relationship.\n   */\n  id() {\n    return this.identifier?.id || null;\n  }\n\n  /**\n   The link Ember Data will use to fetch or reload this belongs-to\n   relationship. By default it uses only the \"related\" resource linkage.\n    Example\n    ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n   export default Model.extend({\n      user: belongsTo('user', { async: true, inverse: null })\n    });\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            links: {\n              related: '/articles/1/author'\n            }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n    // get the identifier of the reference\n   if (userRef.remoteType() === \"link\") {\n      let link = userRef.link();\n    }\n   ```\n    @method link\n   @public\n   @return {String} The link Ember Data will use to fetch or reload this belongs-to relationship.\n   */\n  link() {\n    const resource = this._resource();\n    if (isResourceIdentiferWithRelatedLinks(resource)) {\n      if (resource.links) {\n        const related = resource.links.related;\n        return !related || typeof related === 'string' ? related : related.href;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * any links that have been received for this relationship\n   *\n   * @method links\n   * @public\n   * @return\n   */\n  links() {\n    const resource = this._resource();\n    return resource && resource.links ? resource.links : null;\n  }\n\n  /**\n   The meta data for the belongs-to relationship.\n    Example\n    ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n   export default Model.extend({\n      user: belongsTo('user', { async: true, inverse: null })\n    });\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            links: {\n              related: {\n                href: '/articles/1/author'\n              },\n            },\n            meta: {\n              lastUpdated: 1458014400000\n            }\n          }\n        }\n      }\n    });\n    let userRef = blog.belongsTo('user');\n    userRef.meta() // { lastUpdated: 1458014400000 }\n   ```\n    @method meta\n    @public\n   @return {Object} The meta information for the belongs-to relationship.\n   */\n  meta() {\n    let meta = null;\n    const resource = this._resource();\n    if (resource && resource.meta && typeof resource.meta === 'object') {\n      meta = resource.meta;\n    }\n    return meta;\n  }\n  _resource() {\n    this._ref; // subscribe\n    const cache = this.store.cache;\n    return cache.getRelationship(this.___identifier, this.key);\n  }\n\n  /**\n   This returns a string that represents how the reference will be\n   looked up when it is loaded. If the relationship has a link it will\n   use the \"link\" otherwise it defaults to \"id\".\n    Example\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n    ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n    let commentsRef = post.hasMany('comments');\n    // get the identifier of the reference\n   if (commentsRef.remoteType() === \"ids\") {\n     let ids = commentsRef.ids();\n   } else if (commentsRef.remoteType() === \"link\") {\n     let link = commentsRef.link();\n   }\n   ```\n    @method remoteType\n   @public\n   @return {String} The name of the remote type. This should either be `link` or `id`\n   */\n  remoteType() {\n    const value = this._resource();\n    if (isResourceIdentiferWithRelatedLinks(value)) {\n      return 'link';\n    }\n    return 'id';\n  }\n\n  /**\n   `push` can be used to update the data in the relationship and EmberData\n   will treat the new data as the canonical value of this relationship on\n   the backend. A value of `null` (e.g. `{ data: null }`) can be passed to\n   clear the relationship.\n    Example model\n    ```app/models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n    export default class BlogModel extends Model {\n      @belongsTo('user', { async: true, inverse: null }) user;\n    }\n   ```\n    Setup some initial state, note we haven't loaded the user yet:\n    ```js\n   const blog = store.push({\n      data: {\n        type: 'blog',\n        id: '1',\n        relationships: {\n          user: {\n            data: { type: 'user', id: '1' }\n          }\n        }\n      }\n   });\n    const userRef = blog.belongsTo('user');\n   userRef.id(); // '1'\n   ```\n    Update the state using `push`, note we can do this even without\n   having loaded the user yet by providing a resource-identifier.\n    Both full a resource and a resource-identifier are supported.\n    ```js\n   await userRef.push({\n      data: {\n        type: 'user',\n        id: '2',\n      }\n    });\n     userRef.id(); // '2'\n   ```\n    You may also pass in links and meta fore the relationship, and sideload\n   additional resources that might be required.\n    ```js\n    await userRef.push({\n        data: {\n          type: 'user',\n          id: '2',\n        },\n        links: {\n          related: '/articles/1/author'\n        },\n        meta: {\n          lastUpdated: Date.now()\n        },\n        included: [\n          {\n            type: 'user-preview',\n            id: '2',\n            attributes: {\n              username: '@runspired'\n            }\n          }\n        ]\n      });\n    ```\n    By default, the store will attempt to fetch the record if it is not loaded or its\n   resource data is not included in the call to `push` before resolving the returned\n   promise with the new state..\n    Alternatively, pass `true` as the second argument to avoid fetching unloaded records\n   and instead the promise will resolve with void without attempting to fetch. This is\n   particularly useful if you want to update the state of the relationship without\n   forcing the load of all of the associated record.\n    @method push\n   @public\n   @param {Object} doc a JSONAPI document object describing the new value of this relationship.\n   @param {Boolean} [skipFetch] if `true`, do not attempt to fetch unloaded records\n   @return {Promise<RecordInstance | null | void>}\n  */\n  async push(doc, skipFetch) {\n    const {\n      store\n    } = this;\n    const isResourceData = doc.data && isMaybeResource(doc.data);\n    const added = isResourceData ? store._push(doc, true) : doc.data ? store.identifierCache.getOrCreateRecordIdentifier(doc.data) : null;\n    const {\n      identifier\n    } = this.belongsToRelationship;\n    {\n      if (added) {\n        assertPolymorphicType(identifier, this.belongsToRelationship.definition, added, store);\n      }\n    }\n    const newData = {};\n\n    // only set data if it was passed in\n    if (doc.data || doc.data === null) {\n      newData.data = added;\n    }\n    if ('links' in doc) {\n      newData.links = doc.links;\n    }\n    if ('meta' in doc) {\n      newData.meta = doc.meta;\n    }\n    store._join(() => {\n      this.graph.push({\n        op: 'updateRelationship',\n        record: identifier,\n        field: this.key,\n        value: newData\n      });\n    });\n    if (!skipFetch) return this.load();\n  }\n\n  /**\n   `value()` synchronously returns the current value of the belongs-to\n   relationship. Unlike `record.relationshipName`, calling\n   `value()` on a reference does not trigger a fetch if the async\n   relationship is not yet loaded. If the relationship is not loaded\n   it will always return `null`.\n    Example\n    ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n    export default class BlogModel extends Model {\n     @belongsTo('user', { async: true, inverse: null }) user;\n   }\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n    userRef.value(); // null\n    // provide data for reference\n   userRef.push({\n      data: {\n        type: 'user',\n        id: 1,\n        attributes: {\n          username: \"@user\"\n        }\n      }\n    }).then(function(user) {\n      userRef.value(); // user\n    });\n   ```\n    @method value\n    @public\n   @return {Model} the record in this relationship\n   */\n  value() {\n    const resource = this._resource();\n    return resource && resource.data ? this.store.peekRecord(resource.data) : null;\n  }\n\n  /**\n   Loads a record in a belongs-to relationship if it is not already\n   loaded. If the relationship is already loaded this method does not\n   trigger a new load.\n    Example\n    ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n    export default class BlogModel extends Model {\n     @belongsTo('user', { async: true, inverse: null }) user;\n   }\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n    userRef.value(); // null\n    userRef.load().then(function(user) {\n      userRef.value() === user\n    });\n   ```\n    You may also pass in an options object whose properties will be\n   fed forward. This enables you to pass `adapterOptions` into the\n   request given to the adapter via the reference.\n    Example\n    ```javascript\n   userRef.load({ adapterOptions: { isPrivate: true } }).then(function(user) {\n     userRef.value() === user;\n   });\n   ```\n   ```app/adapters/user.js\n   import Adapter from '@ember-data/adapter';\n    export default class UserAdapter extends Adapter {\n     findRecord(store, type, id, snapshot) {\n       // In the adapter you will have access to adapterOptions.\n       let adapterOptions = snapshot.adapterOptions;\n     }\n   });\n   ```\n    @method load\n    @public\n   @param {Object} options the options to pass in.\n   @return {Promise} a promise that resolves with the record in this belongs-to relationship.\n   */\n  async load(options) {\n    const support = LEGACY_SUPPORT.get(this.___identifier);\n    const fetchSyncRel = !this.belongsToRelationship.definition.isAsync && !areAllInverseRecordsLoaded(this.store, this._resource());\n    return fetchSyncRel ? support.reloadBelongsTo(this.key, options).then(() => this.value()) :\n    // we cast to fix the return type since typescript and eslint don't understand async functions\n    // properly\n    support.getBelongsTo(this.key, options);\n  }\n\n  /**\n   Triggers a reload of the value in this relationship. If the\n   remoteType is `\"link\"` Ember Data will use the relationship link to\n   reload the relationship. Otherwise it will reload the record by its\n   id.\n    Example\n    ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n    export default class BlogModel extends Model {\n     @belongsTo('user', { async: true, inverse: null }) user;\n   }\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n    userRef.reload().then(function(user) {\n      userRef.value() === user\n    });\n   ```\n    You may also pass in an options object whose properties will be\n   fed forward. This enables you to pass `adapterOptions` into the\n   request given to the adapter via the reference. A full example\n   can be found in the `load` method.\n    Example\n    ```javascript\n   userRef.reload({ adapterOptions: { isPrivate: true } })\n   ```\n    @method reload\n    @public\n   @param {Object} options the options to pass in.\n   @return {Promise} a promise that resolves with the record in this belongs-to relationship after the reload has completed.\n   */\n  reload(options) {\n    const support = LEGACY_SUPPORT.get(this.___identifier);\n    return support.reloadBelongsTo(this.key, options).then(() => this.value());\n  }\n}, _applyDecoratedDescriptor(_class$3.prototype, \"identifier\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.cached, _ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat], Object.getOwnPropertyDescriptor(_class$3.prototype, \"identifier\"), _class$3.prototype), _class$3);\n(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(BelongsToReference.prototype, '_ref', 0);\nconst LEGACY_SUPPORT = new Map();\nfunction lookupLegacySupport(record) {\n  const identifier = (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(record);\n  ( true && !(identifier) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a record`, identifier));\n  let support = LEGACY_SUPPORT.get(identifier);\n  if (!support) {\n    ( true && !(!record.isDestroyed && !record.isDestroying) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Memory Leak Detected`, !record.isDestroyed && !record.isDestroying));\n    support = new LegacySupport(record);\n    LEGACY_SUPPORT.set(identifier, support);\n    LEGACY_SUPPORT.set(record, support);\n  }\n  return support;\n}\nclass LegacySupport {\n  constructor(record) {\n    this.record = record;\n    this.store = (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.storeFor)(record);\n    this.identifier = (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(record);\n    this.cache = (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.peekCache)(record);\n    {\n      const graphFor = (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(__webpack_require__(/*! @ember-data/graph/-private */ \"../rewritten-packages/@ember-data/graph.4c9e27df/node_modules/@ember-data/graph/-private.js\")).graphFor;\n      this.graph = graphFor(this.store);\n    }\n    this._manyArrayCache = Object.create(null);\n    this._relationshipPromisesCache = Object.create(null);\n    this._relationshipProxyCache = Object.create(null);\n    this._pending = Object.create(null);\n    this.references = Object.create(null);\n  }\n  _syncArray(array) {\n    // It’s possible the parent side of the relationship may have been destroyed by this point\n    if (this.isDestroyed || this.isDestroying) {\n      return;\n    }\n    const currentState = array[_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.SOURCE];\n    const identifier = this.identifier;\n    const [identifiers, jsonApi] = this._getCurrentState(identifier, array.key);\n    if (jsonApi.meta) {\n      array.meta = jsonApi.meta;\n    }\n    if (jsonApi.links) {\n      array.links = jsonApi.links;\n    }\n    currentState.length = 0;\n    (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.fastPush)(currentState, identifiers);\n  }\n  mutate(mutation) {\n    this.cache.mutate(mutation);\n  }\n  _findBelongsTo(key, resource, relationship, options) {\n    // TODO @runspired follow up if parent isNew then we should not be attempting load here\n    // TODO @runspired follow up on whether this should be in the relationship requests cache\n    return this._findBelongsToByJsonApiResource(resource, this.identifier, relationship, options).then(identifier => handleCompletedRelationshipRequest(this, key, relationship, identifier), e => handleCompletedRelationshipRequest(this, key, relationship, null, e));\n  }\n  reloadBelongsTo(key, options) {\n    const loadingPromise = this._relationshipPromisesCache[key];\n    if (loadingPromise) {\n      return loadingPromise;\n    }\n    const relationship = this.graph.get(this.identifier, key);\n    ( true && !(isBelongsTo(relationship)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected ${key} to be a belongs-to relationship`, isBelongsTo(relationship)));\n    const resource = this.cache.getRelationship(this.identifier, key);\n    relationship.state.hasFailedLoadAttempt = false;\n    relationship.state.shouldForceReload = true;\n    const promise = this._findBelongsTo(key, resource, relationship, options);\n    if (this._relationshipProxyCache[key]) {\n      // @ts-expect-error\n      return this._updatePromiseProxyFor('belongsTo', key, {\n        promise\n      });\n    }\n    return promise;\n  }\n  getBelongsTo(key, options) {\n    const {\n      identifier,\n      cache\n    } = this;\n    const resource = cache.getRelationship(this.identifier, key);\n    const relatedIdentifier = resource && resource.data ? resource.data : null;\n    ( true && !(!relatedIdentifier || (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.isStableIdentifier)(relatedIdentifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a stable identifier`, !relatedIdentifier || (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.isStableIdentifier)(relatedIdentifier)));\n    const store = this.store;\n    const relationship = this.graph.get(this.identifier, key);\n    ( true && !(isBelongsTo(relationship)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected ${key} to be a belongs-to relationship`, isBelongsTo(relationship)));\n    const isAsync = relationship.definition.isAsync;\n    const _belongsToState = {\n      key,\n      store,\n      legacySupport: this,\n      modelName: relationship.definition.type\n    };\n    if (isAsync) {\n      if (relationship.state.hasFailedLoadAttempt) {\n        return this._relationshipProxyCache[key];\n      }\n      const promise = this._findBelongsTo(key, resource, relationship, options);\n      const isLoaded = relatedIdentifier && store._instanceCache.recordIsLoaded(relatedIdentifier);\n      return this._updatePromiseProxyFor('belongsTo', key, {\n        promise,\n        content: isLoaded ? store._instanceCache.getRecord(relatedIdentifier) : null,\n        _belongsToState\n      });\n    } else {\n      if (relatedIdentifier === null) {\n        return null;\n      } else {\n        const toReturn = store._instanceCache.getRecord(relatedIdentifier);\n        ( true && !(toReturn === null || store._instanceCache.recordIsLoaded(relatedIdentifier, true)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You looked up the '${key}' relationship on a '${identifier.type}' with id ${identifier.id || 'null'} but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async (\\`belongsTo(<type>, { async: true, inverse: <inverse> })\\`)`, toReturn === null || store._instanceCache.recordIsLoaded(relatedIdentifier, true)));\n        return toReturn;\n      }\n    }\n  }\n  setDirtyBelongsTo(key, value) {\n    return this.cache.mutate({\n      op: 'replaceRelatedRecord',\n      record: this.identifier,\n      field: key,\n      value: extractIdentifierFromRecord(value)\n    },\n    // @ts-expect-error\n    true);\n  }\n  _getCurrentState(identifier, field) {\n    const jsonApi = this.cache.getRelationship(identifier, field);\n    const cache = this.store._instanceCache;\n    const identifiers = [];\n    if (jsonApi.data) {\n      for (let i = 0; i < jsonApi.data.length; i++) {\n        const relatedIdentifier = jsonApi.data[i];\n        ( true && !((0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.isStableIdentifier)(relatedIdentifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a stable identifier`, (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.isStableIdentifier)(relatedIdentifier)));\n        if (cache.recordIsLoaded(relatedIdentifier, true)) {\n          identifiers.push(relatedIdentifier);\n        }\n      }\n    }\n    return [identifiers, jsonApi];\n  }\n  getManyArray(key, definition) {\n    {\n      let manyArray = this._manyArrayCache[key];\n      if (!definition) {\n        definition = this.graph.get(this.identifier, key).definition;\n      }\n      if (!manyArray) {\n        const [identifiers, doc] = this._getCurrentState(this.identifier, key);\n        manyArray = new RelatedCollection({\n          store: this.store,\n          type: definition.type,\n          identifier: this.identifier,\n          cache: this.cache,\n          identifiers,\n          key,\n          meta: doc.meta || null,\n          links: doc.links || null,\n          isPolymorphic: definition.isPolymorphic,\n          isAsync: definition.isAsync,\n          _inverseIsAsync: definition.inverseIsAsync,\n          manager: this,\n          isLoaded: !definition.isAsync,\n          allowMutation: true\n        });\n        this._manyArrayCache[key] = manyArray;\n      }\n      return manyArray;\n    }\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('hasMany only works with the @ember-data/json-api package'));\n  }\n  fetchAsyncHasMany(key, relationship, manyArray, options) {\n    {\n      let loadingPromise = this._relationshipPromisesCache[key];\n      if (loadingPromise) {\n        return loadingPromise;\n      }\n      const jsonApi = this.cache.getRelationship(this.identifier, key);\n      const promise = this._findHasManyByJsonApiResource(jsonApi, this.identifier, relationship, options);\n      if (!promise) {\n        manyArray.isLoaded = true;\n        return Promise.resolve(manyArray);\n      }\n      loadingPromise = promise.then(() => handleCompletedRelationshipRequest(this, key, relationship, manyArray), e => handleCompletedRelationshipRequest(this, key, relationship, manyArray, e));\n      this._relationshipPromisesCache[key] = loadingPromise;\n      return loadingPromise;\n    }\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('hasMany only works with the @ember-data/json-api package'));\n  }\n  reloadHasMany(key, options) {\n    {\n      const loadingPromise = this._relationshipPromisesCache[key];\n      if (loadingPromise) {\n        return loadingPromise;\n      }\n      const relationship = this.graph.get(this.identifier, key);\n      const {\n        definition,\n        state\n      } = relationship;\n      state.hasFailedLoadAttempt = false;\n      state.shouldForceReload = true;\n      const manyArray = this.getManyArray(key, definition);\n      const promise = this.fetchAsyncHasMany(key, relationship, manyArray, options);\n      if (this._relationshipProxyCache[key]) {\n        return this._updatePromiseProxyFor('hasMany', key, {\n          promise\n        });\n      }\n      return promise;\n    }\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`hasMany only works with the @ember-data/json-api package`));\n  }\n  getHasMany(key, options) {\n    {\n      const relationship = this.graph.get(this.identifier, key);\n      const {\n        definition,\n        state\n      } = relationship;\n      const manyArray = this.getManyArray(key, definition);\n      if (definition.isAsync) {\n        if (state.hasFailedLoadAttempt) {\n          return this._relationshipProxyCache[key];\n        }\n        const promise = this.fetchAsyncHasMany(key, relationship, manyArray, options);\n        return this._updatePromiseProxyFor('hasMany', key, {\n          promise,\n          content: manyArray\n        });\n      } else {\n        ( true && !(!anyUnloaded(this.store, relationship)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You looked up the '${key}' relationship on a '${this.identifier.type}' with id ${this.identifier.id || 'null'} but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async ('hasMany(<type>, { async: true, inverse: <inverse> })')`, !anyUnloaded(this.store, relationship)));\n        return manyArray;\n      }\n    }\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`hasMany only works with the @ember-data/json-api package`));\n  }\n  _updatePromiseProxyFor(kind, key, args) {\n    let promiseProxy = this._relationshipProxyCache[key];\n    if (kind === 'hasMany') {\n      const {\n        promise,\n        content\n      } = args;\n      if (promiseProxy) {\n        ( true && !('_update' in promiseProxy) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a PromiseManyArray`, '_update' in promiseProxy));\n        promiseProxy._update(promise, content);\n      } else {\n        promiseProxy = this._relationshipProxyCache[key] = new PromiseManyArray(promise, content);\n      }\n      return promiseProxy;\n    }\n    if (promiseProxy) {\n      const {\n        promise,\n        content\n      } = args;\n      ( true && !('_belongsToState' in promiseProxy) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a PromiseBelongsTo`, '_belongsToState' in promiseProxy));\n      if (content !== undefined) {\n        promiseProxy.set('content', content);\n      }\n      void promiseProxy.set('promise', promise);\n    } else {\n      promiseProxy = PromiseBelongsTo.create(args);\n      this._relationshipProxyCache[key] = promiseProxy;\n    }\n    return promiseProxy;\n  }\n  referenceFor(kind, name) {\n    let reference = this.references[name];\n    if (!reference) {\n      const {\n        graph,\n        identifier\n      } = this;\n      const relationship = graph.get(identifier, name);\n      {\n        if (kind) {\n          const modelName = identifier.type;\n          const actualRelationshipKind = relationship.definition.kind;\n          ( true && !(actualRelationshipKind === kind) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You tried to get the '${name}' relationship on a '${modelName}' via record.${kind}('${name}'), but the relationship is of kind '${actualRelationshipKind}'. Use record.${actualRelationshipKind}('${name}') instead.`, actualRelationshipKind === kind));\n        }\n      }\n      const relationshipKind = relationship.definition.kind;\n      if (relationshipKind === 'belongsTo') {\n        reference = new BelongsToReference(this.store, graph, identifier, relationship, name);\n      } else if (relationshipKind === 'hasMany') {\n        reference = new HasManyReference(this.store, graph, identifier, relationship, name);\n      }\n      this.references[name] = reference;\n    }\n    return reference;\n  }\n  _findHasManyByJsonApiResource(resource, parentIdentifier, relationship, options = {}) {\n    {\n      if (!resource) {\n        return;\n      }\n      const {\n        definition,\n        state\n      } = relationship;\n      (0,_ember_data_legacy_compat_private__WEBPACK_IMPORTED_MODULE_10__.upgradeStore)(this.store);\n      const adapter = this.store.adapterFor(definition.type);\n      const {\n        isStale,\n        hasDematerializedInverse,\n        hasReceivedData,\n        isEmpty,\n        shouldForceReload\n      } = state;\n      const allInverseRecordsAreLoaded = areAllInverseRecordsLoaded(this.store, resource);\n      const identifiers = resource.data;\n      const shouldFindViaLink = resource.links && resource.links.related && (typeof adapter.findHasMany === 'function' || typeof identifiers === 'undefined') && (shouldForceReload || hasDematerializedInverse || isStale || !allInverseRecordsAreLoaded && !isEmpty);\n      const relationshipMeta = this.store.getSchemaDefinitionService().relationshipsDefinitionFor({\n        type: definition.inverseType\n      })[definition.key];\n      const request = {\n        useLink: shouldFindViaLink,\n        field: relationshipMeta,\n        links: resource.links,\n        meta: resource.meta,\n        options,\n        record: parentIdentifier\n      };\n\n      // fetch via link\n      if (shouldFindViaLink) {\n        ( true && !(!identifiers || Array.isArray(identifiers)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected collection to be an array`, !identifiers || Array.isArray(identifiers)));\n        ( true && !(!identifiers || identifiers.every(_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.isStableIdentifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected stable identifiers`, !identifiers || identifiers.every(_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.isStableIdentifier)));\n        return this.store.request({\n          op: 'findHasMany',\n          records: identifiers || [],\n          data: request,\n          cacheOptions: {\n            [Symbol.for('wd:skip-cache')]: true\n          }\n        });\n      }\n      const preferLocalCache = hasReceivedData && !isEmpty;\n      const hasLocalPartialData = hasDematerializedInverse || isEmpty && Array.isArray(identifiers) && identifiers.length > 0;\n      const attemptLocalCache = !shouldForceReload && !isStale && (preferLocalCache || hasLocalPartialData);\n      if (attemptLocalCache && allInverseRecordsAreLoaded) {\n        return;\n      }\n      const hasData = hasReceivedData && !isEmpty;\n      if (attemptLocalCache || hasData || hasLocalPartialData) {\n        ( true && !(Array.isArray(identifiers)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected collection to be an array`, Array.isArray(identifiers)));\n        ( true && !(identifiers.every(_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.isStableIdentifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected stable identifiers`, identifiers.every(_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.isStableIdentifier)));\n        options.reload = options.reload || !attemptLocalCache || undefined;\n        return this.store.request({\n          op: 'findHasMany',\n          records: identifiers,\n          data: request,\n          cacheOptions: {\n            [Symbol.for('wd:skip-cache')]: true\n          }\n        });\n      }\n\n      // we were explicitly told we have no data and no links.\n      //   TODO if the relationshipIsStale, should we hit the adapter anyway?\n      return;\n    }\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`hasMany only works with the @ember-data/json-api package`));\n  }\n  _findBelongsToByJsonApiResource(resource, parentIdentifier, relationship, options = {}) {\n    if (!resource) {\n      return Promise.resolve(null);\n    }\n    const key = relationship.definition.key;\n\n    // interleaved promises mean that we MUST cache this here\n    // in order to prevent infinite re-render if the request\n    // fails.\n    if (this._pending[key]) {\n      return this._pending[key];\n    }\n    const identifier = resource.data ? resource.data : null;\n    ( true && !(!identifier || (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.isStableIdentifier)(identifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a stable identifier`, !identifier || (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.isStableIdentifier)(identifier)));\n    const {\n      isStale,\n      hasDematerializedInverse,\n      hasReceivedData,\n      isEmpty,\n      shouldForceReload\n    } = relationship.state;\n    const allInverseRecordsAreLoaded = areAllInverseRecordsLoaded(this.store, resource);\n    const shouldFindViaLink = resource.links?.related && (shouldForceReload || hasDematerializedInverse || isStale || !allInverseRecordsAreLoaded && !isEmpty);\n    const relationshipMeta = this.store.getSchemaDefinitionService().relationshipsDefinitionFor(this.identifier)[relationship.definition.key];\n    ( true && !(relationshipMeta) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Attempted to access a belongsTo relationship but no definition exists for it`, relationshipMeta));\n    const request = {\n      useLink: shouldFindViaLink,\n      field: relationshipMeta,\n      links: resource.links,\n      meta: resource.meta,\n      options,\n      record: parentIdentifier\n    };\n\n    // fetch via link\n    if (shouldFindViaLink) {\n      const future = this.store.request({\n        op: 'findBelongsTo',\n        records: identifier ? [identifier] : [],\n        data: request,\n        cacheOptions: {\n          [Symbol.for('wd:skip-cache')]: true\n        }\n      });\n      this._pending[key] = future.then(doc => doc.content).finally(() => {\n        this._pending[key] = undefined;\n      });\n      return this._pending[key];\n    }\n    const preferLocalCache = hasReceivedData && allInverseRecordsAreLoaded && !isEmpty;\n    const hasLocalPartialData = hasDematerializedInverse || isEmpty && resource.data;\n    // null is explicit empty, undefined is \"we don't know anything\"\n    const localDataIsEmpty = !identifier;\n    const attemptLocalCache = !shouldForceReload && !isStale && (preferLocalCache || hasLocalPartialData);\n\n    // we dont need to fetch and are empty\n    if (attemptLocalCache && localDataIsEmpty) {\n      return Promise.resolve(null);\n    }\n\n    // we dont need to fetch because we are local state\n    const resourceIsLocal = identifier?.id === null;\n    if (attemptLocalCache && allInverseRecordsAreLoaded || resourceIsLocal) {\n      return Promise.resolve(identifier);\n    }\n\n    // we may need to fetch\n    if (identifier) {\n      ( true && !(identifier) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot fetch belongs-to relationship with no information`, identifier));\n      options.reload = options.reload || !attemptLocalCache || undefined;\n      this._pending[key] = this.store.request({\n        op: 'findBelongsTo',\n        records: [identifier],\n        data: request,\n        cacheOptions: {\n          [Symbol.for('wd:skip-cache')]: true\n        }\n      }).then(doc => doc.content).finally(() => {\n        this._pending[key] = undefined;\n      });\n      return this._pending[key];\n    }\n\n    // we were explicitly told we have no data and no links.\n    //   TODO if the relationshipIsStale, should we hit the adapter anyway?\n    return Promise.resolve(null);\n  }\n  destroy() {\n    this.isDestroying = true;\n    let cache = this._manyArrayCache;\n    this._manyArrayCache = Object.create(null);\n    Object.keys(cache).forEach(key => {\n      cache[key].destroy();\n    });\n    cache = this._relationshipProxyCache;\n    this._relationshipProxyCache = Object.create(null);\n    Object.keys(cache).forEach(key => {\n      const proxy = cache[key];\n      if (proxy.destroy) {\n        proxy.destroy();\n      }\n    });\n    cache = this.references;\n    this.references = Object.create(null);\n    Object.keys(cache).forEach(key => {\n      cache[key].destroy();\n    });\n    this.isDestroyed = true;\n  }\n}\nfunction handleCompletedRelationshipRequest(recordExt, key, relationship, value, error) {\n  delete recordExt._relationshipPromisesCache[key];\n  relationship.state.shouldForceReload = false;\n  const isHasMany = relationship.definition.kind === 'hasMany';\n  if (isHasMany) {\n    // we don't notify the record property here to avoid refetch\n    // only the many array\n    value.notify();\n  }\n  if (error) {\n    relationship.state.hasFailedLoadAttempt = true;\n    const proxy = recordExt._relationshipProxyCache[key];\n    // belongsTo relationships are sometimes unloaded\n    // when a load fails, in this case we need\n    // to make sure that we aren't proxying\n    // to destroyed content\n    // for the sync belongsTo reload case there will be no proxy\n    // for the async reload case there will be no proxy if the ui\n    // has never been accessed\n    if (proxy && !isHasMany) {\n      // @ts-expect-error unsure why this is not resolving the boolean but async belongsTo is weird\n      if (proxy.content && proxy.content.isDestroying) {\n        proxy.set('content', null);\n      }\n      recordExt.store.notifications._flush();\n    }\n    throw error;\n  }\n  if (isHasMany) {\n    value.isLoaded = true;\n  } else {\n    recordExt.store.notifications._flush();\n  }\n  relationship.state.hasFailedLoadAttempt = false;\n  // only set to not stale if no error is thrown\n  relationship.state.isStale = false;\n  return isHasMany || !value ? value : recordExt.store.peekRecord(value);\n}\nfunction extractIdentifierFromRecord(record) {\n  if (!record) {\n    return null;\n  }\n  return (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(record);\n}\nfunction anyUnloaded(store, relationship) {\n  const graph = store._graph;\n  ( true && !(graph) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a Graph instance to be available`, graph));\n  const relationshipData = graph.getData(relationship.identifier, relationship.definition.key);\n  const state = relationshipData.data;\n  const cache = store._instanceCache;\n  const unloaded = state?.find(s => {\n    const isLoaded = cache.recordIsLoaded(s, true);\n    return !isLoaded;\n  });\n  return unloaded || false;\n}\nfunction areAllInverseRecordsLoaded(store, resource) {\n  const instanceCache = store._instanceCache;\n  const identifiers = resource.data;\n  if (Array.isArray(identifiers)) {\n    ( true && !(identifiers.every(_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.isStableIdentifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected stable identifiers`, identifiers.every(_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.isStableIdentifier))); // treat as collection\n    // check for unloaded records\n    return identifiers.every(identifier => instanceCache.recordIsLoaded(identifier));\n  }\n\n  // treat as single resource\n  if (!identifiers) return true;\n  ( true && !((0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.isStableIdentifier)(identifiers)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected stable identifiers`, (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.isStableIdentifier)(identifiers)));\n  return instanceCache.recordIsLoaded(identifiers);\n}\nfunction isBelongsTo(relationship) {\n  return relationship.definition.kind === 'belongsTo';\n}\nfunction _initializerDefineProperty(target, property, descriptor, context) {\n  if (!descriptor) return;\n  Object.defineProperty(target, property, {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable,\n    writable: descriptor.writable,\n    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0\n  });\n}\nvar _dec, _dec2, _dec3, _dec4, _class$2, _descriptor, _descriptor2;\n\n/**\n  @module @ember-data/model\n*/\n\n// we force the type here to our own construct because mixin and extend patterns\n// lose generic signatures. We also do this because we need to Omit `clear` from\n// the type of ArrayProxy as we override it's signature.\nconst ArrayProxyWithCustomOverrides = (_ember_array_proxy__WEBPACK_IMPORTED_MODULE_8___default());\n\n/**\n  Holds validation errors for a given record, organized by attribute names.\n\n  This class is not directly instantiable.\n\n  Every `Model` has an `errors` property that is an instance of\n  `Errors`. This can be used to display validation error\n  messages returned from the server when a `record.save()` rejects.\n\n  For Example, if you had a `User` model that looked like this:\n\n  ```app/models/user.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('string') username;\n    @attr('string') email;\n  }\n  ```\n  And you attempted to save a record that did not validate on the backend:\n\n  ```javascript\n  let user = store.createRecord('user', {\n    username: 'tomster',\n    email: 'invalidEmail'\n  });\n  user.save();\n  ```\n\n  Your backend would be expected to return an error response that described\n  the problem, so that error messages can be generated on the app.\n\n  API responses will be translated into instances of `Errors` differently,\n  depending on the specific combination of adapter and serializer used. You\n  may want to check the documentation or the source code of the libraries\n  that you are using, to know how they expect errors to be communicated.\n\n  Errors can be displayed to the user by accessing their property name\n  to get an array of all the error objects for that property. Each\n  error object is a JavaScript object with two keys:\n\n  - `message` A string containing the error message from the backend\n  - `attribute` The name of the property associated with this error message\n\n  ```handlebars\n  <label>Username: <Input @value={{@model.username}} /> </label>\n  {{#each @model.errors.username as |error|}}\n    <div class=\"error\">\n      {{error.message}}\n    </div>\n  {{/each}}\n\n  <label>Email: <Input @value={{@model.email}} /> </label>\n  {{#each @model.errors.email as |error|}}\n    <div class=\"error\">\n      {{error.message}}\n    </div>\n  {{/each}}\n  ```\n\n  You can also access the special `messages` property on the error\n  object to get an array of all the error strings.\n\n  ```handlebars\n  {{#each @model.errors.messages as |message|}}\n    <div class=\"error\">\n      {{message}}\n    </div>\n  {{/each}}\n  ```\n\n  @class Errors\n  @public\n  @extends Ember.ArrayProxy\n */\nlet Errors = (_dec = (0,_ember_object__WEBPACK_IMPORTED_MODULE_1__.computed)(), _dec2 = (0,_ember_object_computed__WEBPACK_IMPORTED_MODULE_9__.mapBy)('content', 'message'), _dec3 = (0,_ember_object__WEBPACK_IMPORTED_MODULE_1__.computed)(), _dec4 = (0,_ember_object_computed__WEBPACK_IMPORTED_MODULE_9__.not)('length'), (_class$2 = class Errors extends ArrayProxyWithCustomOverrides {\n  constructor(...args) {\n    super(...args);\n    /**\n      An array containing all of the error messages for this\n      record. This is useful for displaying all errors to the user.\n       ```handlebars\n      {{#each @model.errors.messages as |message|}}\n        <div class=\"error\">\n          {{message}}\n        </div>\n      {{/each}}\n      ```\n       @property messages\n      @public\n      @type {Array}\n    */\n    _initializerDefineProperty(this, \"messages\", _descriptor, this);\n    /**\n      Total number of errors.\n       @property length\n      @type {Number}\n      @public\n      @readOnly\n    */\n    /**\n      `true` if we have no errors.\n       @property isEmpty\n      @type {Boolean}\n      @public\n      @readOnly\n    */\n    _initializerDefineProperty(this, \"isEmpty\", _descriptor2, this);\n  }\n  /**\n    @property errorsByAttributeName\n    @type {MapWithDefault}\n    @private\n  */\n  get errorsByAttributeName() {\n    return new Map();\n  }\n\n  /**\n    Returns errors for a given attribute\n     ```javascript\n    let user = store.createRecord('user', {\n      username: 'tomster',\n      email: 'invalidEmail'\n    });\n    user.save().catch(function(){\n      user.errors.errorsFor('email'); // returns:\n      // [{attribute: \"email\", message: \"Doesn't look like a valid email.\"}]\n    });\n    ```\n     @method errorsFor\n    @public\n    @param {String} attribute\n    @return {Array}\n  */\n  errorsFor(attribute) {\n    const map = this.errorsByAttributeName;\n    let errors = map.get(attribute);\n    if (errors === undefined) {\n      errors = (0,_ember_array__WEBPACK_IMPORTED_MODULE_7__.A)();\n      map.set(attribute, errors);\n    }\n\n    // Errors may be a native array with extensions turned on. Since we access\n    // the array via a method, and not a computed or using `Ember.get`, it does\n    // not entangle properly with autotracking, so we entangle manually by\n    // getting the `[]` property.\n    (0,_ember_object__WEBPACK_IMPORTED_MODULE_1__.get)(errors, '[]');\n    return errors;\n  }\n  /**\n    @property content\n    @type {Array}\n    @private\n  */\n  get content() {\n    return (0,_ember_array__WEBPACK_IMPORTED_MODULE_7__.A)();\n  }\n\n  /**\n    @method unknownProperty\n    @private\n  */\n  unknownProperty(attribute) {\n    const errors = this.errorsFor(attribute);\n    if (errors.length === 0) {\n      return undefined;\n    }\n    return errors;\n  }\n  /**\n   Manually adds errors to the record. This will trigger the `becameInvalid` event/ lifecycle method on\n    the record and transition the record into an `invalid` state.\n    Example\n   ```javascript\n    let errors = user.errors;\n     // add multiple errors\n    errors.add('password', [\n      'Must be at least 12 characters',\n      'Must contain at least one symbol',\n      'Cannot contain your name'\n    ]);\n     errors.errorsFor('password');\n    // =>\n    // [\n    //   { attribute: 'password', message: 'Must be at least 12 characters' },\n    //   { attribute: 'password', message: 'Must contain at least one symbol' },\n    //   { attribute: 'password', message: 'Cannot contain your name' },\n    // ]\n     // add a single error\n    errors.add('username', 'This field is required');\n     errors.errorsFor('username');\n    // =>\n    // [\n    //   { attribute: 'username', message: 'This field is required' },\n    // ]\n   ```\n    @method add\n    @public\n    @param {string} attribute - the property name of an attribute or relationship\n    @param {string[]|string} messages - an error message or array of error messages for the attribute\n   */\n  add(attribute, messages) {\n    const errors = this._findOrCreateMessages(attribute, messages);\n    this.addObjects(errors);\n    this.errorsFor(attribute).addObjects(errors);\n    this.__record.currentState.notify('isValid');\n    this.notifyPropertyChange(attribute);\n  }\n\n  /**\n    @method _findOrCreateMessages\n    @private\n  */\n  _findOrCreateMessages(attribute, messages) {\n    const errors = this.errorsFor(attribute);\n    const messagesArray = Array.isArray(messages) ? messages : [messages];\n    const _messages = new Array(messagesArray.length);\n    for (let i = 0; i < messagesArray.length; i++) {\n      const message = messagesArray[i];\n      const err = errors.findBy('message', message);\n      if (err) {\n        _messages[i] = err;\n      } else {\n        _messages[i] = {\n          attribute: attribute,\n          message\n        };\n      }\n    }\n    return _messages;\n  }\n\n  /**\n   Manually removes all errors for a given member from the record.\n     This will transition the record into a `valid` state, and\n    triggers the `becameValid` event and lifecycle method.\n    Example:\n    ```javascript\n    let errors = user.errors;\n    errors.add('phone', ['error-1', 'error-2']);\n     errors.errorsFor('phone');\n    // =>\n    // [\n    //   { attribute: 'phone', message: 'error-1' },\n    //   { attribute: 'phone', message: 'error-2' },\n    // ]\n     errors.remove('phone');\n     errors.errorsFor('phone');\n    // => undefined\n   ```\n   @method remove\n    @public\n   @param {string} member - the property name of an attribute or relationship\n   */\n  remove(attribute) {\n    if (this.isEmpty) {\n      return;\n    }\n    const content = this.rejectBy('attribute', attribute);\n    this.content.setObjects(content);\n\n    // Although errorsByAttributeName.delete is technically enough to sync errors state, we also\n    // must mutate the array as well for autotracking\n    const errors = this.errorsFor(attribute);\n    for (let i = 0; i < errors.length; i++) {\n      if (errors[i].attribute === attribute) {\n        // .replace from Ember.NativeArray is necessary. JS splice will not work.\n        errors.replace(i, 1);\n      }\n    }\n    this.errorsByAttributeName.delete(attribute);\n    this.__record.currentState.notify('isValid');\n    this.notifyPropertyChange(attribute);\n    this.notifyPropertyChange('length');\n  }\n\n  /**\n   Manually clears all errors for the record.\n     This will transition the record into a `valid` state, and\n     will trigger the `becameValid` event and lifecycle method.\n   Example:\n    ```javascript\n   let errors = user.errors;\n   errors.add('username', ['error-a']);\n   errors.add('phone', ['error-1', 'error-2']);\n    errors.errorsFor('username');\n   // =>\n   // [\n   //   { attribute: 'username', message: 'error-a' },\n   // ]\n    errors.errorsFor('phone');\n   // =>\n   // [\n   //   { attribute: 'phone', message: 'error-1' },\n   //   { attribute: 'phone', message: 'error-2' },\n   // ]\n    errors.clear();\n    errors.errorsFor('username');\n   // => undefined\n    errors.errorsFor('phone');\n   // => undefined\n    errors.messages\n   // => []\n   ```\n   @method clear\n   @public\n   */\n  clear() {\n    if (this.isEmpty) {\n      return;\n    }\n    const errorsByAttributeName = this.errorsByAttributeName;\n    const attributes = [];\n    errorsByAttributeName.forEach(function (_, attribute) {\n      attributes.push(attribute);\n    });\n    errorsByAttributeName.clear();\n    attributes.forEach(attribute => {\n      this.notifyPropertyChange(attribute);\n    });\n    this.__record.currentState.notify('isValid');\n    super.clear();\n  }\n\n  /**\n    Checks if there are error messages for the given attribute.\n     ```app/controllers/user/edit.js\n    import Controller from '@ember/controller';\n    import { action } from '@ember/object';\n     export default class UserEditController extends Controller {\n      @action\n      save(user) {\n        if (user.errors.has('email')) {\n          return alert('Please update your email before attempting to save.');\n        }\n        user.save();\n      }\n    }\n    ```\n     @method has\n    @public\n    @param {String} attribute\n    @return {Boolean} true if there some errors on given attribute\n  */\n  has(attribute) {\n    return this.errorsFor(attribute).length > 0;\n  }\n}, (_applyDecoratedDescriptor(_class$2.prototype, \"errorsByAttributeName\", [_dec], Object.getOwnPropertyDescriptor(_class$2.prototype, \"errorsByAttributeName\"), _class$2.prototype), _descriptor = _applyDecoratedDescriptor(_class$2.prototype, \"messages\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _applyDecoratedDescriptor(_class$2.prototype, \"content\", [_dec3], Object.getOwnPropertyDescriptor(_class$2.prototype, \"content\"), _class$2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class$2.prototype, \"isEmpty\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class$2));\nfunction rollbackAttributes() {\n  const {\n    currentState\n  } = this;\n  const {\n    isNew\n  } = currentState;\n  this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_6__.RecordStore]._join(() => {\n    (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.peekCache)(this).rollbackAttrs((0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.recordIdentifierFor)(this));\n    this.errors.clear();\n    currentState.cleanErrorRequests();\n    if (isNew) {\n      this.unloadRecord();\n    }\n  });\n}\nfunction unloadRecord() {\n  if (this.currentState.isNew && (this.isDestroyed || this.isDestroying)) {\n    return;\n  }\n  this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_6__.RecordStore].unloadRecord(this);\n}\nfunction belongsTo(prop) {\n  return lookupLegacySupport(this).referenceFor('belongsTo', prop);\n}\nfunction hasMany(prop) {\n  return lookupLegacySupport(this).referenceFor('hasMany', prop);\n}\nfunction reload(options = {}) {\n  options.isReloading = true;\n  options.reload = true;\n  const identifier = (0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.recordIdentifierFor)(this);\n  ( true && !(identifier.id) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You cannot reload a record without an ID`, identifier.id));\n  this.isReloading = true;\n  const promise = this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_6__.RecordStore].request({\n    op: 'findRecord',\n    data: {\n      options,\n      record: identifier\n    },\n    cacheOptions: {\n      [Symbol.for('wd:skip-cache')]: true\n    }\n  }).then(() => this).finally(() => {\n    this.isReloading = false;\n  });\n  return promise;\n}\nfunction changedAttributes() {\n  return (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.peekCache)(this).changedAttrs((0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.recordIdentifierFor)(this));\n}\nfunction serialize(options) {\n  (0,_ember_data_legacy_compat_private__WEBPACK_IMPORTED_MODULE_10__.upgradeStore)(this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_6__.RecordStore]);\n  return this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_6__.RecordStore].serializeRecord(this, options);\n}\nfunction deleteRecord() {\n  // ensure we've populated currentState prior to deleting a new record\n  if (this.currentState) {\n    this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_6__.RecordStore].deleteRecord(this);\n  }\n}\nfunction save(options) {\n  let promise;\n  if (this.currentState.isNew && this.currentState.isDeleted) {\n    promise = Promise.resolve(this);\n  } else {\n    this.errors.clear();\n    promise = this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_6__.RecordStore].saveRecord(this, options);\n  }\n  return promise;\n}\nfunction destroyRecord(options) {\n  const {\n    isNew\n  } = this.currentState;\n  this.deleteRecord();\n  if (isNew) {\n    return Promise.resolve(this);\n  }\n  return this.save(options).then(_ => {\n    this.unloadRecord();\n    return this;\n  });\n}\nfunction createSnapshot() {\n  const store = this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_6__.RecordStore];\n  (0,_ember_data_legacy_compat_private__WEBPACK_IMPORTED_MODULE_10__.upgradeStore)(store);\n  if (!store._fetchManager) {\n    const FetchManager = (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(__webpack_require__(/*! @ember-data/legacy-compat/-private */ \"../rewritten-packages/@ember-data/legacy-compat.e84b6420/node_modules/@ember-data/legacy-compat/-private.js\")).FetchManager;\n    store._fetchManager = new FetchManager(store);\n  }\n  return store._fetchManager.createSnapshot((0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.recordIdentifierFor)(this));\n}\nfunction notifyChanges(identifier, value, key, record, store) {\n  if (value === 'attributes') {\n    if (key) {\n      notifyAttribute(store, identifier, key, record);\n    } else {\n      record.eachAttribute(name => {\n        notifyAttribute(store, identifier, name, record);\n      });\n    }\n  } else if (value === 'relationships') {\n    if (key) {\n      const meta = record.constructor.relationshipsByName.get(key);\n      ( true && !(meta) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected to find a relationship for ${key} on ${identifier.type}`, meta));\n      notifyRelationship(identifier, key, record, meta);\n    } else {\n      record.eachRelationship((name, meta) => {\n        notifyRelationship(identifier, name, record, meta);\n      });\n    }\n  } else if (value === 'identity') {\n    record.notifyPropertyChange('id');\n  }\n}\nfunction notifyRelationship(identifier, key, record, meta) {\n  if (meta.kind === 'belongsTo') {\n    record.notifyPropertyChange(key);\n  } else if (meta.kind === 'hasMany') {\n    const support = LEGACY_SUPPORT.get(identifier);\n    const manyArray = support && support._manyArrayCache[key];\n    const hasPromise = support && support._relationshipPromisesCache[key];\n    if (manyArray && hasPromise) {\n      // do nothing, we will notify the ManyArray directly\n      // once the fetch has completed.\n      return;\n    }\n    if (manyArray) {\n      manyArray.notify();\n\n      //We need to notifyPropertyChange in the adding case because we need to make sure\n      //we fetch the newly added record in case it is unloaded\n      //TODO(Igor): Consider whether we could do this only if the record state is unloaded\n      ( true && !(meta.options) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected options to exist on relationship meta`, meta.options));\n      ( true && !('async' in meta.options) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected async to exist on relationship meta options`, 'async' in meta.options));\n      if (meta.options.async) {\n        record.notifyPropertyChange(key);\n      }\n    }\n  }\n}\nfunction notifyAttribute(store, identifier, key, record) {\n  const currentValue = (0,_ember_object_internals__WEBPACK_IMPORTED_MODULE_13__.cacheFor)(record, key);\n  const cache = store.cache;\n  if (currentValue !== cache.getAttr(identifier, key)) {\n    record.notifyPropertyChange(key);\n  }\n}\nvar _class$1;\nconst SOURCE_POINTER_REGEXP = /^\\/?data\\/(attributes|relationships)\\/(.*)/;\nconst SOURCE_POINTER_PRIMARY_REGEXP = /^\\/?data/;\nconst PRIMARY_ATTRIBUTE_KEY = 'base';\nfunction isInvalidError(error) {\n  return !!error && error instanceof Error && 'isAdapterError' in error && error.isAdapterError === true && 'code' in error && error.code === 'InvalidError';\n}\n\n/**\n * A decorator that caches a getter while\n * providing the ability to bust that cache\n * when we so choose in a way that notifies\n * tracking systems.\n *\n * @internal\n */\nfunction tagged(_target, key, desc) {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const getter = desc.get;\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const setter = desc.set;\n  desc.get = function () {\n    const signal = (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.getSignal)(this, key, true);\n    (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(signal);\n    if (signal.shouldReset) {\n      signal.shouldReset = false;\n      signal.lastValue = getter.call(this);\n    }\n    return signal.lastValue;\n  };\n  desc.set = function (v) {\n    (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.getSignal)(this, key, true); // ensure signal is setup in case we want to use it.\n    // probably notify here but not yet.\n    setter.call(this, v);\n  };\n  (0,_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat)(desc);\n  return desc;\n}\nfunction notifySignal(obj, key) {\n  const signal = (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.peekSignal)(obj, key);\n  if (signal) {\n    signal.shouldReset = true;\n    (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.addToTransaction)(signal);\n  }\n}\n\n/**\nHistorically EmberData managed a state machine\nfor each record, the localState for which\nwas reflected onto Model.\n\nThis implements the flags and stateName for backwards compat\nwith the state tree that used to be possible (listed below).\n\nstateName and dirtyType are candidates for deprecation.\n\nroot\n  empty\n    deleted    // hidden from stateName\n    preloaded  // hidden from stateName\n\n  loading\n     empty     // hidden from stateName\n     preloaded // hidden from stateName\n\n  loaded\n    saved\n    updated\n      uncommitted\n      invalid\n      inFlight\n    created\n      uncommitted\n      invalid\n      inFlight\n\n  deleted\n    saved\n      new      // hidden from stateName\n    uncommitted\n    invalid\n    inFlight\n\n  @internal\n*/\nlet RecordState = (_class$1 = class RecordState {\n  constructor(record) {\n    const store = (0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.storeFor)(record);\n    const identity = (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.recordIdentifierFor)(record);\n    this.identifier = identity;\n    this.record = record;\n    this.cache = store.cache;\n    this.pendingCount = 0;\n    this.fulfilledCount = 0;\n    this.rejectedCount = 0;\n    this._errorRequests = [];\n    this._lastError = null;\n    const requests = store.getRequestStateService();\n    const notifications = store.notifications;\n    const handleRequest = req => {\n      if (req.type === 'mutation') {\n        switch (req.state) {\n          case 'pending':\n            this.isSaving = true;\n            break;\n          case 'rejected':\n            this.isSaving = false;\n            this._lastError = req;\n            if (!(req.response && isInvalidError(req.response.data))) {\n              this._errorRequests.push(req);\n            }\n            notifyErrorsStateChanged(this);\n            break;\n          case 'fulfilled':\n            this._errorRequests = [];\n            this._lastError = null;\n            this.isSaving = false;\n            this.notify('isDirty');\n            notifyErrorsStateChanged(this);\n            break;\n        }\n      } else {\n        switch (req.state) {\n          case 'pending':\n            this.pendingCount++;\n            this.notify('isLoading');\n            break;\n          case 'rejected':\n            this.pendingCount--;\n            this._lastError = req;\n            if (!(req.response && isInvalidError(req.response.data))) {\n              this._errorRequests.push(req);\n            }\n            this.notify('isLoading');\n            notifyErrorsStateChanged(this);\n            break;\n          case 'fulfilled':\n            this.pendingCount--;\n            this.fulfilledCount++;\n            this.notify('isLoading');\n            this.notify('isDirty');\n            notifyErrorsStateChanged(this);\n            this._errorRequests = [];\n            this._lastError = null;\n            break;\n        }\n      }\n    };\n    requests.subscribeForRecord(identity, handleRequest);\n\n    // we instantiate lazily\n    // so we grab anything we don't have yet\n    const lastRequest = requests.getLastRequestForRecord(identity);\n    if (lastRequest) {\n      handleRequest(lastRequest);\n    }\n    this.handler = notifications.subscribe(identity, (identifier, type, key) => {\n      switch (type) {\n        case 'state':\n          this.notify('isSaved');\n          this.notify('isNew');\n          this.notify('isDeleted');\n          this.notify('isDirty');\n          break;\n        case 'attributes':\n          this.notify('isEmpty');\n          this.notify('isDirty');\n          break;\n        case 'errors':\n          this.updateInvalidErrors(this.record.errors);\n          this.notify('isValid');\n          break;\n      }\n    });\n  }\n  destroy() {\n    (0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.storeFor)(this.record).notifications.unsubscribe(this.handler);\n  }\n  notify(key) {\n    notifySignal(this, key);\n  }\n  updateInvalidErrors(errors) {\n    ( true && !(typeof this.cache.getErrors === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected the Cache instance for ${this.identifier.lid}  to implement getErrors(identifier)`, typeof this.cache.getErrors === 'function'));\n    const jsonApiErrors = this.cache.getErrors(this.identifier);\n    errors.clear();\n    for (let i = 0; i < jsonApiErrors.length; i++) {\n      const error = jsonApiErrors[i];\n      if (error.source && error.source.pointer) {\n        const keyMatch = error.source.pointer.match(SOURCE_POINTER_REGEXP);\n        let key;\n        if (keyMatch) {\n          key = keyMatch[2];\n        } else if (error.source.pointer.search(SOURCE_POINTER_PRIMARY_REGEXP) !== -1) {\n          key = PRIMARY_ATTRIBUTE_KEY;\n        }\n        if (key) {\n          const errMsg = error.detail || error.title;\n          ( true && !(errMsg) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected field error to have a detail or title to use as the message`, errMsg));\n          errors.add(key, errMsg);\n        }\n      }\n    }\n  }\n  cleanErrorRequests() {\n    this.notify('isValid');\n    this.notify('isError');\n    this.notify('adapterError');\n    this._errorRequests = [];\n    this._lastError = null;\n  }\n  get isLoading() {\n    return !this.isLoaded && this.pendingCount > 0 && this.fulfilledCount === 0;\n  }\n  get isLoaded() {\n    if (this.isNew) {\n      return true;\n    }\n    return this.fulfilledCount > 0 || !this.isEmpty;\n  }\n  get isSaved() {\n    const rd = this.cache;\n    if (this.isDeleted) {\n      ( true && !(typeof rd.isDeletionCommitted === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected Cache to implement isDeletionCommitted()`, typeof rd.isDeletionCommitted === 'function'));\n      return rd.isDeletionCommitted(this.identifier);\n    }\n    if (this.isNew || this.isEmpty || !this.isValid || this.isDirty || this.isLoading) {\n      return false;\n    }\n    return true;\n  }\n  get isEmpty() {\n    const rd = this.cache;\n    // TODO this is not actually an RFC'd concept. Determine the\n    // correct heuristic to replace this with.\n    ( true && !(typeof rd.isEmpty === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected Cache to implement isEmpty()`, typeof rd.isEmpty === 'function'));\n    return !this.isNew && rd.isEmpty(this.identifier);\n  }\n  get isNew() {\n    const rd = this.cache;\n    ( true && !(typeof rd.isNew === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected Cache to implement isNew()`, typeof rd.isNew === 'function'));\n    return rd.isNew(this.identifier);\n  }\n  get isDeleted() {\n    const rd = this.cache;\n    ( true && !(typeof rd.isDeleted === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected Cache to implement isDeleted()`, typeof rd.isDeleted === 'function'));\n    return rd.isDeleted(this.identifier);\n  }\n  get isValid() {\n    return this.record.errors.length === 0;\n  }\n  get isDirty() {\n    const rd = this.cache;\n    if (this.isEmpty || rd.isDeletionCommitted(this.identifier) || this.isDeleted && this.isNew) {\n      return false;\n    }\n    return this.isDeleted || this.isNew || rd.hasChangedAttrs(this.identifier);\n  }\n  get isError() {\n    const errorReq = this._errorRequests[this._errorRequests.length - 1];\n    if (!errorReq) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  get adapterError() {\n    const request = this._lastError;\n    if (!request) {\n      return null;\n    }\n    return request.state === 'rejected' && request.response.data;\n  }\n  get isPreloaded() {\n    return !this.isEmpty && this.isLoading;\n  }\n  get stateName() {\n    // we might be empty while loading so check this first\n    if (this.isLoading) {\n      return 'root.loading';\n\n      // got nothing yet or were unloaded\n    } else if (this.isEmpty) {\n      return 'root.empty';\n\n      // deleted substates\n    } else if (this.isDeleted) {\n      if (this.isSaving) {\n        return 'root.deleted.inFlight';\n      } else if (this.isSaved) {\n        // TODO ensure isSaved isn't true from previous requests\n        return 'root.deleted.saved';\n      } else if (!this.isValid) {\n        return 'root.deleted.invalid';\n      } else {\n        return 'root.deleted.uncommitted';\n      }\n\n      // loaded.created substates\n    } else if (this.isNew) {\n      if (this.isSaving) {\n        return 'root.loaded.created.inFlight';\n      } else if (!this.isValid) {\n        return 'root.loaded.created.invalid';\n      }\n      return 'root.loaded.created.uncommitted';\n\n      // loaded.updated substates\n    } else if (this.isSaving) {\n      return 'root.loaded.updated.inFlight';\n    } else if (!this.isValid) {\n      return 'root.loaded.updated.invalid';\n    } else if (this.isDirty) {\n      return 'root.loaded.updated.uncommitted';\n\n      // if nothing remains, we are loaded saved!\n    } else {\n      return 'root.loaded.saved';\n    }\n  }\n  get dirtyType() {\n    // we might be empty while loading so check this first\n    if (this.isLoading || this.isEmpty) {\n      return '';\n\n      // deleted substates\n    } else if (this.isDirty && this.isDeleted) {\n      return 'deleted';\n\n      // loaded.created substates\n    } else if (this.isNew) {\n      return 'created';\n\n      // loaded.updated substates\n    } else if (this.isSaving || !this.isValid || this.isDirty) {\n      return 'updated';\n\n      // if nothing remains, we are loaded saved!\n    } else {\n      return '';\n    }\n  }\n}, (_applyDecoratedDescriptor(_class$1.prototype, \"isLoading\", [tagged], Object.getOwnPropertyDescriptor(_class$1.prototype, \"isLoading\"), _class$1.prototype), _applyDecoratedDescriptor(_class$1.prototype, \"isLoaded\", [tagged], Object.getOwnPropertyDescriptor(_class$1.prototype, \"isLoaded\"), _class$1.prototype), _applyDecoratedDescriptor(_class$1.prototype, \"isSaved\", [tagged], Object.getOwnPropertyDescriptor(_class$1.prototype, \"isSaved\"), _class$1.prototype), _applyDecoratedDescriptor(_class$1.prototype, \"isEmpty\", [tagged], Object.getOwnPropertyDescriptor(_class$1.prototype, \"isEmpty\"), _class$1.prototype), _applyDecoratedDescriptor(_class$1.prototype, \"isNew\", [tagged], Object.getOwnPropertyDescriptor(_class$1.prototype, \"isNew\"), _class$1.prototype), _applyDecoratedDescriptor(_class$1.prototype, \"isDeleted\", [tagged], Object.getOwnPropertyDescriptor(_class$1.prototype, \"isDeleted\"), _class$1.prototype), _applyDecoratedDescriptor(_class$1.prototype, \"isValid\", [tagged], Object.getOwnPropertyDescriptor(_class$1.prototype, \"isValid\"), _class$1.prototype), _applyDecoratedDescriptor(_class$1.prototype, \"isDirty\", [tagged], Object.getOwnPropertyDescriptor(_class$1.prototype, \"isDirty\"), _class$1.prototype), _applyDecoratedDescriptor(_class$1.prototype, \"isError\", [tagged], Object.getOwnPropertyDescriptor(_class$1.prototype, \"isError\"), _class$1.prototype), _applyDecoratedDescriptor(_class$1.prototype, \"adapterError\", [tagged], Object.getOwnPropertyDescriptor(_class$1.prototype, \"adapterError\"), _class$1.prototype), _applyDecoratedDescriptor(_class$1.prototype, \"isPreloaded\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.cached], Object.getOwnPropertyDescriptor(_class$1.prototype, \"isPreloaded\"), _class$1.prototype), _applyDecoratedDescriptor(_class$1.prototype, \"stateName\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.cached], Object.getOwnPropertyDescriptor(_class$1.prototype, \"stateName\"), _class$1.prototype), _applyDecoratedDescriptor(_class$1.prototype, \"dirtyType\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.cached], Object.getOwnPropertyDescriptor(_class$1.prototype, \"dirtyType\"), _class$1.prototype)), _class$1);\n(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(RecordState.prototype, 'isSaving', false);\nfunction notifyErrorsStateChanged(state) {\n  state.notify('isValid');\n  state.notify('isError');\n  state.notify('adapterError');\n}\nvar _class, _class2;\nfunction findPossibleInverses(type, inverseType, name, relationshipsSoFar) {\n  const possibleRelationships = relationshipsSoFar || [];\n  const relationshipMap = inverseType.relationships;\n  if (!relationshipMap) {\n    return possibleRelationships;\n  }\n  const relationshipsForType = relationshipMap.get(type.modelName);\n  const relationships = Array.isArray(relationshipsForType) ? relationshipsForType.filter(relationship => {\n    const optionsForRelationship = relationship.options;\n    if (!optionsForRelationship.inverse && optionsForRelationship.inverse !== null) {\n      return true;\n    }\n    return name === optionsForRelationship.inverse;\n  }) : null;\n  if (relationships) {\n    possibleRelationships.push.apply(possibleRelationships, relationships);\n  }\n\n  //Recurse to support polymorphism\n  if (type.superclass) {\n    findPossibleInverses(type.superclass, inverseType, name, possibleRelationships);\n  }\n  return possibleRelationships;\n}\n\n/*\n * This decorator allows us to lazily compute\n * an expensive getter on first-access and thereafter\n * never recompute it.\n */\nfunction computeOnce(target, propertyName, desc) {\n  const cache = new WeakMap();\n  const getter = desc.get;\n  desc.get = function () {\n    let meta = cache.get(this);\n    if (!meta) {\n      meta = {\n        hasComputed: false,\n        value: undefined\n      };\n      cache.set(this, meta);\n    }\n    if (!meta.hasComputed) {\n      meta.value = getter.call(this);\n      meta.hasComputed = true;\n    }\n    return meta.value;\n  };\n  return desc;\n}\n\n/**\n  Base class from which Models can be defined.\n\n  ```js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class User extends Model {\n    @attr name;\n  }\n  ```\n\n  Models are used both to define the static schema for a\n  particular resource type as well as the class to instantiate\n  to present that data from cache.\n\n  @class Model\n  @public\n  @extends Ember.EmberObject\n*/\nlet Model = (_class = (_class2 = class Model extends (_ember_object__WEBPACK_IMPORTED_MODULE_1___default()) {\n  constructor(...args) {\n    super(...args);\n    this.___private_notifications = void 0;\n  }\n  init(options = {}) {\n    {\n      if (!options._secretInit && !options._createProps) {\n        throw new Error('You should not call `create` on a model. Instead, call `store.createRecord` with the attributes you would like to set.');\n      }\n    }\n    const createProps = options._createProps;\n    const _secretInit = options._secretInit;\n    options._createProps = null;\n    options._secretInit = null;\n    const store = this.store = _secretInit.store;\n    super.init(options);\n    this[_warp_drive_core_types_symbols__WEBPACK_IMPORTED_MODULE_6__.RecordStore] = store;\n    const identity = _secretInit.identifier;\n    _secretInit.cb(this, _secretInit.cache, identity, _secretInit.store);\n    this.___recordState = new RecordState(this);\n    this.setProperties(createProps);\n    const notifications = store.notifications;\n    this.___private_notifications = notifications.subscribe(identity, (identifier, type, field) => {\n      notifyChanges(identifier, type, field, this, store);\n    });\n  }\n  destroy() {\n    const identifier = (0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.recordIdentifierFor)(this);\n    this.___recordState?.destroy();\n    const store = (0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.storeFor)(this);\n    store.notifications.unsubscribe(this.___private_notifications);\n    // Legacy behavior is to notify the relationships on destroy\n    // such that they \"clear\". It's uncertain this behavior would\n    // be good for a new model paradigm, likely cheaper and safer\n    // to simply not notify, for this reason the store does not itself\n    // notify individual changes once the delete has been signaled,\n    // this decision is left to model instances.\n\n    this.eachRelationship((name, meta) => {\n      if (meta.kind === 'belongsTo') {\n        this.notifyPropertyChange(name);\n      }\n    });\n    LEGACY_SUPPORT.get(this)?.destroy();\n    LEGACY_SUPPORT.delete(this);\n    LEGACY_SUPPORT.delete(identifier);\n    super.destroy();\n  }\n\n  /**\n    If this property is `true` the record is in the `empty`\n    state. Empty is the first state all records enter after they have\n    been created. Most records created by the store will quickly\n    transition to the `loading` state if data needs to be fetched from\n    the server or the `created` state if the record is created on the\n    client. A record can also enter the empty state if the adapter is\n    unable to locate the record.\n     @property isEmpty\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  get isEmpty() {\n    return this.currentState.isEmpty;\n  }\n\n  /**\n    If this property is `true` the record is in the `loading` state. A\n    record enters this state when the store asks the adapter for its\n    data. It remains in this state until the adapter provides the\n    requested data.\n     @property isLoading\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  get isLoading() {\n    return this.currentState.isLoading;\n  }\n\n  /**\n    If this property is `true` the record is in the `loaded` state. A\n    record enters this state when its data is populated. Most of a\n    record's lifecycle is spent inside substates of the `loaded`\n    state.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.isLoaded; // true\n     store.findRecord('model', 1).then(function(model) {\n      model.isLoaded; // true\n    });\n    ```\n     @property isLoaded\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  get isLoaded() {\n    return this.currentState.isLoaded;\n  }\n\n  /**\n    If this property is `true` the record is in the `dirty` state. The\n    record has local changes that have not yet been saved by the\n    adapter. This includes records that have been created (but not yet\n    saved) or deleted.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.hasDirtyAttributes; // true\n     store.findRecord('model', 1).then(function(model) {\n      model.hasDirtyAttributes; // false\n      model.set('foo', 'some value');\n      model.hasDirtyAttributes; // true\n    });\n    ```\n     @since 1.13.0\n    @property hasDirtyAttributes\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  get hasDirtyAttributes() {\n    return this.currentState.isDirty;\n  }\n\n  /**\n    If this property is `true` the record is in the `saving` state. A\n    record enters the saving state when `save` is called, but the\n    adapter has not yet acknowledged that the changes have been\n    persisted to the backend.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.isSaving; // false\n    let promise = record.save();\n    record.isSaving; // true\n    promise.then(function() {\n      record.isSaving; // false\n    });\n    ```\n     @property isSaving\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  get isSaving() {\n    return this.currentState.isSaving;\n  }\n\n  /**\n    If this property is `true` the record is in the `deleted` state\n    and has been marked for deletion. When `isDeleted` is true and\n    `hasDirtyAttributes` is true, the record is deleted locally but the deletion\n    was not yet persisted. When `isSaving` is true, the change is\n    in-flight. When both `hasDirtyAttributes` and `isSaving` are false, the\n    change has persisted.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.isDeleted;    // false\n    record.deleteRecord();\n     // Locally deleted\n    record.isDeleted;           // true\n    record.hasDirtyAttributes;  // true\n    record.isSaving;            // false\n     // Persisting the deletion\n    let promise = record.save();\n    record.isDeleted;    // true\n    record.isSaving;     // true\n     // Deletion Persisted\n    promise.then(function() {\n      record.isDeleted;          // true\n      record.isSaving;           // false\n      record.hasDirtyAttributes; // false\n    });\n    ```\n     @property isDeleted\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  get isDeleted() {\n    return this.currentState.isDeleted;\n  }\n\n  /**\n    If this property is `true` the record is in the `new` state. A\n    record will be in the `new` state when it has been created on the\n    client and the adapter has not yet report that it was successfully\n    saved.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.isNew; // true\n     record.save().then(function(model) {\n      model.isNew; // false\n    });\n    ```\n     @property isNew\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  get isNew() {\n    return this.currentState.isNew;\n  }\n\n  /**\n    If this property is `true` the record is in the `valid` state.\n     A record will be in the `valid` state when the adapter did not report any\n    server-side validation failures.\n     @property isValid\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  get isValid() {\n    return this.currentState.isValid;\n  }\n\n  /**\n    If the record is in the dirty state this property will report what\n    kind of change has caused it to move into the dirty\n    state. Possible values are:\n     - `created` The record has been created by the client and not yet saved to the adapter.\n    - `updated` The record has been updated by the client and not yet saved to the adapter.\n    - `deleted` The record has been deleted by the client and not yet saved to the adapter.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.dirtyType; // 'created'\n    ```\n     @property dirtyType\n    @public\n    @type {String}\n    @readOnly\n  */\n  get dirtyType() {\n    return this.currentState.dirtyType;\n  }\n\n  /**\n    If `true` the adapter reported that it was unable to save local\n    changes to the backend for any reason other than a server-side\n    validation error.\n     Example\n     ```javascript\n    record.isError; // false\n    record.set('foo', 'valid value');\n    record.save().then(null, function() {\n      record.isError; // true\n    });\n    ```\n     @property isError\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  get isError() {\n    return this.currentState.isError;\n  }\n  set isError(v) {\n    {\n      throw new Error(`isError is not directly settable`);\n    }\n  }\n\n  /**\n    If `true` the store is attempting to reload the record from the adapter.\n     Example\n     ```javascript\n    record.isReloading; // false\n    record.reload();\n    record.isReloading; // true\n    ```\n     @property isReloading\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n\n  /**\n    All ember models have an id property. This is an identifier\n    managed by an external source. These are always coerced to be\n    strings before being used internally. Note when declaring the\n    attributes for a model it is an error to declare an id\n    attribute.\n     ```javascript\n    let record = store.createRecord('model');\n    record.id; // null\n     store.findRecord('model', 1).then(function(model) {\n      model.id; // '1'\n    });\n    ```\n     @property id\n    @public\n    @type {String}\n  */\n  get id() {\n    // this guard exists, because some dev-only deprecation code\n    // (addListener via validatePropertyInjections) invokes toString before the\n    // object is real.\n    {\n      try {\n        return (0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.recordIdentifierFor)(this).id;\n      } catch {\n        return void 0;\n      }\n    }\n    return (0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.recordIdentifierFor)(this).id;\n  }\n  set id(id) {\n    const normalizedId = (0,_ember_data_store_private__WEBPACK_IMPORTED_MODULE_3__.coerceId)(id);\n    const identifier = (0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.recordIdentifierFor)(this);\n    const didChange = normalizedId !== identifier.id;\n    ( true && !(!didChange || identifier.id === null) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot set ${identifier.type} record's id to ${id}, because id is already ${identifier.id}`, !didChange || identifier.id === null));\n    if (normalizedId !== null && didChange) {\n      this.store._instanceCache.setRecordId(identifier, normalizedId);\n      this.store.notifications.notify(identifier, 'identity');\n    }\n  }\n  toString() {\n    return `<model::${this.constructor.modelName}:${this.id}>`;\n  }\n\n  /**\n    @property currentState\n    @private\n    @type {Object}\n  */\n  // TODO we can probably make this a computeOnce\n  // we likely do not need to notify the currentState root anymore\n  get currentState() {\n    // descriptors are called with the wrong `this` context during mergeMixins\n    // when using legacy/classic ember classes. Basically: lazy in prod and eager in dev.\n    // so we do this to try to steer folks to the nicer \"dont user currentState\"\n    // error.\n\n    return this.___recordState;\n  }\n  set currentState(_v) {\n    throw new Error('cannot set currentState');\n  }\n\n  /**\n    The store service instance which created this record instance\n    @property store\n    @public\n   */\n\n  /**\n    When the record is in the `invalid` state this object will contain\n    any errors returned by the adapter. When present the errors hash\n    contains keys corresponding to the invalid property names\n    and values which are arrays of Javascript objects with two keys:\n     - `message` A string containing the error message from the backend\n    - `attribute` The name of the property associated with this error message\n     ```javascript\n    record.errors.length; // 0\n    record.set('foo', 'invalid value');\n    record.save().catch(function() {\n      record.errors.foo;\n      // [{message: 'foo should be a number.', attribute: 'foo'}]\n    });\n    ```\n     The `errors` property is useful for displaying error messages to\n    the user.\n     ```handlebars\n    <label>Username: <Input @value={{@model.username}} /> </label>\n    {{#each @model.errors.username as |error|}}\n      <div class=\"error\">\n        {{error.message}}\n      </div>\n    {{/each}}\n    <label>Email: <Input @value={{@model.email}} /> </label>\n    {{#each @model.errors.email as |error|}}\n      <div class=\"error\">\n        {{error.message}}\n      </div>\n    {{/each}}\n    ```\n      You can also access the special `messages` property on the error\n    object to get an array of all the error strings.\n     ```handlebars\n    {{#each @model.errors.messages as |message|}}\n      <div class=\"error\">\n        {{message}}\n      </div>\n    {{/each}}\n    ```\n     @property errors\n    @public\n    @type {Errors}\n  */\n  get errors() {\n    const errors = Errors.create({\n      __record: this\n    });\n    this.currentState.updateInvalidErrors(errors);\n    return errors;\n  }\n\n  /**\n    This property holds the `AdapterError` object with which\n    last adapter operation was rejected.\n     @property adapterError\n    @public\n    @type {AdapterError}\n  */\n  get adapterError() {\n    return this.currentState.adapterError;\n  }\n  set adapterError(v) {\n    throw new Error(`adapterError is not directly settable`);\n  }\n\n  /**\n    Create a JSON representation of the record, using the serialization\n    strategy of the store's adapter.\n    `serialize` takes an optional hash as a parameter, currently\n    supported options are:\n    - `includeId`: `true` if the record's ID should be included in the\n      JSON representation.\n     @method serialize\n    @public\n    @param {Object} options\n    @return {Object} an object whose values are primitive JSON values only\n  */\n\n  /*\n    We hook the default implementation to ensure\n    our tagged properties are properly notified\n    as well. We still super for everything because\n    sync observers require a direct call occuring\n    to trigger their flush. We wouldn't need to\n    super in 4.0+ where sync observers are removed.\n   */\n  notifyPropertyChange(prop) {\n    notifySignal(this, prop);\n    super.notifyPropertyChange(prop);\n  }\n\n  /**\n    Marks the record as deleted but does not save it. You must call\n    `save` afterwards if you want to persist it. You might use this\n    method if you want to allow the user to still `rollbackAttributes()`\n    after a delete was made.\n     Example\n     ```js\n    import Component from '@glimmer/component';\n     export default class extends Component {\n      softDelete = () => {\n        this.args.model.deleteRecord();\n      }\n       confirm = () => {\n        this.args.model.save();\n      }\n       undo = () => {\n        this.args.model.rollbackAttributes();\n      }\n    }\n    ```\n     @method deleteRecord\n    @public\n  */\n\n  /**\n    Same as `deleteRecord`, but saves the record immediately.\n     Example\n     ```js\n    import Component from '@glimmer/component';\n     export default class extends Component {\n      delete = () => {\n        this.args.model.destroyRecord().then(function() {\n          this.transitionToRoute('model.index');\n        });\n      }\n    }\n    ```\n     If you pass an object on the `adapterOptions` property of the options\n    argument it will be passed to your adapter via the snapshot\n     ```js\n    record.destroyRecord({ adapterOptions: { subscribe: false } });\n    ```\n     ```app/adapters/post.js\n    import MyCustomAdapter from './custom-adapter';\n     export default class PostAdapter extends MyCustomAdapter {\n      deleteRecord(store, type, snapshot) {\n        if (snapshot.adapterOptions.subscribe) {\n          // ...\n        }\n        // ...\n      }\n    }\n    ```\n     @method destroyRecord\n    @public\n    @param {Object} options\n    @return {Promise} a promise that will be resolved when the adapter returns\n    successfully or rejected if the adapter returns with an error.\n  */\n\n  /**\n    Unloads the record from the store. This will not send a delete request\n    to your server, it just unloads the record from memory.\n     @method unloadRecord\n    @public\n  */\n\n  /**\n    Returns an object, whose keys are changed properties, and value is\n    an [oldProp, newProp] array.\n     The array represents the diff of the canonical state with the local state\n    of the model. Note: if the model is created locally, the canonical state is\n    empty since the adapter hasn't acknowledged the attributes yet:\n     Example\n     ```app/models/mascot.js\n    import Model, { attr } from '@ember-data/model';\n     export default class MascotModel extends Model {\n      @attr('string') name;\n      @attr('boolean', {\n        defaultValue: false\n      })\n      isAdmin;\n    }\n    ```\n     ```javascript\n    let mascot = store.createRecord('mascot');\n     mascot.changedAttributes(); // {}\n     mascot.set('name', 'Tomster');\n    mascot.changedAttributes(); // { name: [undefined, 'Tomster'] }\n     mascot.set('isAdmin', true);\n    mascot.changedAttributes(); // { isAdmin: [undefined, true], name: [undefined, 'Tomster'] }\n     mascot.save().then(function() {\n      mascot.changedAttributes(); // {}\n       mascot.set('isAdmin', false);\n      mascot.changedAttributes(); // { isAdmin: [true, false] }\n    });\n    ```\n     @method changedAttributes\n    @public\n    @return {Object} an object, whose keys are changed properties,\n      and value is an [oldProp, newProp] array.\n  */\n\n  /**\n    If the model `hasDirtyAttributes` this function will discard any unsaved\n    changes. If the model `isNew` it will be removed from the store.\n     Example\n     ```javascript\n    record.name; // 'Untitled Document'\n    record.set('name', 'Doc 1');\n    record.name; // 'Doc 1'\n    record.rollbackAttributes();\n    record.name; // 'Untitled Document'\n    ```\n     @since 1.13.0\n    @method rollbackAttributes\n    @public\n  */\n\n  /**\n    @method _createSnapshot\n    @private\n  */\n  // TODO @deprecate in favor of a public API or examples of how to test successfully\n\n  /**\n    Save the record and persist any changes to the record to an\n    external source via the adapter.\n     Example\n     ```javascript\n    record.set('name', 'Tomster');\n    record.save().then(function() {\n      // Success callback\n    }, function() {\n      // Error callback\n    });\n    ```\n    If you pass an object using the `adapterOptions` property of the options\n   argument it will be passed to your adapter via the snapshot.\n     ```js\n    record.save({ adapterOptions: { subscribe: false } });\n    ```\n     ```app/adapters/post.js\n    import MyCustomAdapter from './custom-adapter';\n     export default class PostAdapter extends MyCustomAdapter {\n      updateRecord(store, type, snapshot) {\n        if (snapshot.adapterOptions.subscribe) {\n          // ...\n        }\n        // ...\n      }\n    }\n    ```\n     @method save\n    @public\n    @param {Object} options\n    @return {Promise} a promise that will be resolved when the adapter returns\n    successfully or rejected if the adapter returns with an error.\n  */\n\n  /**\n    Reload the record from the adapter.\n     This will only work if the record has already finished loading.\n     Example\n     ```js\n    import Component from '@glimmer/component';\n     export default class extends Component {\n      async reload = () => {\n        await this.args.model.reload();\n        // do something with the reloaded model\n      }\n    }\n    ```\n     @method reload\n    @public\n    @param {Object} options optional, may include `adapterOptions` hash which will be passed to adapter request\n    @return {Promise} a promise that will be resolved with the record when the\n    adapter returns successfully or rejected if the adapter returns\n    with an error.\n  */\n\n  attr() {\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('The `attr` method is not available on Model, a Snapshot was probably expected. Are you passing a Model instead of a Snapshot to your serializer?', false));\n  }\n\n  /**\n    Get the reference for the specified belongsTo relationship.\n     For instance, given the following model\n     ```app/models/blog-post.js\n    import Model, { belongsTo } from '@ember-data/model';\n     export default class BlogPost extends Model {\n      @belongsTo('user', { async: true, inverse: null }) author;\n    }\n    ```\n     Then the reference for the author relationship would be\n    retrieved from a record instance like so:\n     ```js\n    blogPost.belongsTo('author');\n    ```\n     A `BelongsToReference` is a low-level API that allows access\n    and manipulation of a belongsTo relationship.\n     It is especially useful when you're dealing with `async` relationships\n    as it allows synchronous access to the relationship data if loaded, as\n    well as APIs for loading, reloading the data or accessing available\n    information without triggering a load.\n     It may also be useful when using `sync` relationships that need to be\n    loaded/reloaded with more precise timing than marking the\n    relationship as `async` and relying on autofetch would have allowed.\n     However,keep in mind that marking a relationship as `async: false` will introduce\n    bugs into your application if the data is not always guaranteed to be available\n    by the time the relationship is accessed. Ergo, it is recommended when using this\n    approach to utilize `links` for unloaded relationship state instead of identifiers.\n     Reference APIs are entangled with the relationship's underlying state,\n    thus any getters or cached properties that utilize these will properly\n    invalidate if the relationship state changes.\n     References are \"stable\", meaning that multiple calls to retrieve the reference\n    for a given relationship will always return the same HasManyReference.\n     @method belongsTo\n    @public\n    @param {String} name of the relationship\n    @since 2.5.0\n    @return {BelongsToReference} reference for this relationship\n  */\n\n  /**\n    Get the reference for the specified hasMany relationship.\n     For instance, given the following model\n     ```app/models/blog-post.js\n    import Model, { hasMany } from '@ember-data/model';\n     export default class BlogPost extends Model {\n      @hasMany('comment', { async: true, inverse: null }) comments;\n    }\n    ```\n     Then the reference for the comments relationship would be\n    retrieved from a record instance like so:\n     ```js\n    blogPost.hasMany('comments');\n    ```\n     A `HasManyReference` is a low-level API that allows access\n    and manipulation of a hasMany relationship.\n     It is especially useful when you are dealing with `async` relationships\n    as it allows synchronous access to the relationship data if loaded, as\n    well as APIs for loading, reloading the data or accessing available\n    information without triggering a load.\n     It may also be useful when using `sync` relationships with `@ember-data/model`\n    that need to be loaded/reloaded with more precise timing than marking the\n    relationship as `async` and relying on autofetch would have allowed.\n     However,keep in mind that marking a relationship as `async: false` will introduce\n    bugs into your application if the data is not always guaranteed to be available\n    by the time the relationship is accessed. Ergo, it is recommended when using this\n    approach to utilize `links` for unloaded relationship state instead of identifiers.\n     Reference APIs are entangled with the relationship's underlying state,\n    thus any getters or cached properties that utilize these will properly\n    invalidate if the relationship state changes.\n     References are \"stable\", meaning that multiple calls to retrieve the reference\n    for a given relationship will always return the same HasManyReference.\n     @method hasMany\n    @public\n    @param {String} name of the relationship\n    @since 2.5.0\n    @return {HasManyReference} reference for this relationship\n  */\n\n  /**\n   Given a callback, iterates over each of the relationships in the model,\n   invoking the callback with the name of each relationship and its relationship\n   descriptor.\n     The callback method you provide should have the following signature (all\n   parameters are optional):\n    ```javascript\n   function(name, descriptor);\n   ```\n    - `name` the name of the current property in the iteration\n   - `descriptor` the meta object that describes this relationship\n    The relationship descriptor argument is an object with the following properties.\n    - **name** <span class=\"type\">String</span> the name of this relationship on the Model\n   - **kind** <span class=\"type\">String</span> \"hasMany\" or \"belongsTo\"\n   - **options** <span class=\"type\">Object</span> the original options hash passed when the relationship was declared\n   - **parentType** <span class=\"type\">Model</span> the type of the Model that owns this relationship\n   - **type** <span class=\"type\">String</span> the type name of the related Model\n    Note that in addition to a callback, you can also pass an optional target\n   object that will be set as `this` on the context.\n    Example\n    ```app/serializers/application.js\n   import JSONSerializer from '@ember-data/serializer/json';\n    export default class ApplicationSerializer extends JSONSerializer {\n      serialize(record, options) {\n      let json = {};\n       record.eachRelationship(function(name, descriptor) {\n        if (descriptor.kind === 'hasMany') {\n          let serializedHasManyName = name.toUpperCase() + '_IDS';\n          json[serializedHasManyName] = record.get(name).map(r => r.id);\n        }\n      });\n       return json;\n    }\n  }\n   ```\n    @method eachRelationship\n    @public\n   @param {Function} callback the callback to invoke\n   @param {any} binding the value to which the callback's `this` should be bound\n   */\n  eachRelationship(callback, binding) {\n    this.constructor.eachRelationship(callback, binding);\n  }\n  relationshipFor(name) {\n    return this.constructor.relationshipsByName.get(name);\n  }\n  inverseFor(name) {\n    return this.constructor.inverseFor(name, (0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.storeFor)(this));\n  }\n  eachAttribute(callback, binding) {\n    this.constructor.eachAttribute(callback, binding);\n  }\n  /*\n   These class methods below provide relationship\n   introspection abilities about relationships.\n    A note about the computed properties contained here:\n    **These properties are effectively sealed once called for the first time.**\n   To avoid repeatedly doing expensive iteration over a model's fields, these\n   values are computed once and then cached for the remainder of the runtime of\n   your application.\n    If your application needs to modify a class after its initial definition\n   (for example, using `reopen()` to add additional attributes), make sure you\n   do it before using your model with the store, which uses these properties\n   extensively.\n   */\n\n  /**\n   For a given relationship name, returns the model type of the relationship.\n    For example, if you define a model like this:\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n     @hasMany('comment') comments;\n   }\n   ```\n    Calling `store.modelFor('post').typeForRelationship('comments', store)` will return `Comment`.\n    @method typeForRelationship\n    @public\n   @static\n   @param {String} name the name of the relationship\n   @param {store} store an instance of Store\n   @return {Model} the type of the relationship, or undefined\n   */\n  static typeForRelationship(name, store) {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    const relationship = this.relationshipsByName.get(name);\n    return relationship && store.modelFor(relationship.type);\n  }\n  static get inverseMap() {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    return Object.create(null);\n  }\n\n  /**\n   Find the relationship which is the inverse of the one asked for.\n    For example, if you define models like this:\n    ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n    export default class PostModel extends Model {\n      @hasMany('message') comments;\n    }\n   ```\n    ```app/models/message.js\n   import Model, { belongsTo } from '@ember-data/model';\n    export default class MessageModel extends Model {\n      @belongsTo('post') owner;\n    }\n   ```\n    ``` js\n   store.modelFor('post').inverseFor('comments', store) // { type: App.Message, name: 'owner', kind: 'belongsTo' }\n   store.modelFor('message').inverseFor('owner', store) // { type: App.Post, name: 'comments', kind: 'hasMany' }\n   ```\n    @method inverseFor\n    @public\n   @static\n   @param {String} name the name of the relationship\n   @param {Store} store\n   @return {Object} the inverse relationship, or null\n   */\n  static inverseFor(name, store) {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    const inverseMap = this.inverseMap;\n    if (inverseMap[name]) {\n      return inverseMap[name];\n    } else {\n      const inverse = this._findInverseFor(name, store);\n      inverseMap[name] = inverse;\n      return inverse;\n    }\n  }\n\n  //Calculate the inverse, ignoring the cache\n  static _findInverseFor(name, store) {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    const relationship = this.relationshipsByName.get(name);\n    const {\n      options\n    } = relationship;\n    const isPolymorphic = options.polymorphic;\n\n    //If inverse is manually specified to be null, like  `comments: hasMany('message', { inverse: null })`\n    const isExplicitInverseNull = options.inverse === null;\n    const isAbstractType = !isExplicitInverseNull && isPolymorphic && !store.getSchemaDefinitionService().doesTypeExist(relationship.type);\n    if (isExplicitInverseNull || isAbstractType) {\n      ( true && !(!isPolymorphic || isExplicitInverseNull) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`No schema for the abstract type '${relationship.type}' for the polymorphic relationship '${name}' on '${this.modelName}' was provided by the SchemaDefinitionService.`, !isPolymorphic || isExplicitInverseNull));\n      return null;\n    }\n    let fieldOnInverse, inverseKind, inverseRelationship, inverseOptions;\n    const inverseSchema = this.typeForRelationship(name, store);\n\n    // if the type does not exist and we are not polymorphic\n    //If inverse is specified manually, return the inverse\n    if (options.inverse !== undefined) {\n      fieldOnInverse = options.inverse;\n      inverseRelationship = inverseSchema && inverseSchema.relationshipsByName.get(fieldOnInverse);\n      ( true && !(inverseRelationship) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`We found no field named '${fieldOnInverse}' on the schema for '${inverseSchema.modelName}' to be the inverse of the '${name}' relationship on '${this.modelName}'. This is most likely due to a missing field on your model definition.`, inverseRelationship)); // TODO probably just return the whole inverse here\n      inverseKind = inverseRelationship.kind;\n      inverseOptions = inverseRelationship.options;\n    } else {\n      //No inverse was specified manually, we need to use a heuristic to guess one\n      if (relationship.type === relationship.parentModelName) {\n        ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`Detected a reflexive relationship named '${name}' on the schema for '${relationship.type}' without an inverse option. Look at https://guides.emberjs.com/current/models/relationships/#toc_reflexive-relations for how to explicitly specify inverses.`, false, {\n          id: 'ds.model.reflexive-relationship-without-inverse'\n        }));\n      }\n      let possibleRelationships = findPossibleInverses(this, inverseSchema, name);\n      if (possibleRelationships.length === 0) {\n        return null;\n      }\n      {\n        const filteredRelationships = possibleRelationships.filter(possibleRelationship => {\n          const optionsForRelationship = possibleRelationship.options;\n          return name === optionsForRelationship.inverse;\n        });\n        ( true && !(filteredRelationships.length < 2) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(\"You defined the '\" + name + \"' relationship on \" + this + ', but you defined the inverse relationships of type ' + inverseSchema.toString() + ' multiple times. Look at https://guides.emberjs.com/current/models/relationships/#toc_explicit-inverses for how to explicitly specify inverses', filteredRelationships.length < 2));\n      }\n      const explicitRelationship = possibleRelationships.find(relationship => relationship.options.inverse === name);\n      if (explicitRelationship) {\n        possibleRelationships = [explicitRelationship];\n      }\n      ( true && !(possibleRelationships.length === 1) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(\"You defined the '\" + name + \"' relationship on \" + this + ', but multiple possible inverse relationships of type ' + this + ' were found on ' + inverseSchema + '. Look at https://guides.emberjs.com/current/models/relationships/#toc_explicit-inverses for how to explicitly specify inverses', possibleRelationships.length === 1));\n      fieldOnInverse = possibleRelationships[0].name;\n      inverseKind = possibleRelationships[0].kind;\n      inverseOptions = possibleRelationships[0].options;\n    }\n\n    // ensure inverse is properly configured\n    {\n      if (isPolymorphic) {\n        ( true && !(inverseOptions.as) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Relationships that satisfy polymorphic relationships MUST define which abstract-type they are satisfying using 'as'. The field '${fieldOnInverse}' on type '${inverseSchema.modelName}' is misconfigured.`, inverseOptions.as));\n        ( true && !(!!inverseOptions.as && relationship.type === inverseOptions.as) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`options.as should match the expected type of the polymorphic relationship. Expected field '${fieldOnInverse}' on type '${inverseSchema.modelName}' to specify '${relationship.type}' but found '${inverseOptions.as}'`, !!inverseOptions.as && relationship.type === inverseOptions.as));\n      }\n    }\n\n    // ensure we are properly configured\n    {\n      if (inverseOptions.polymorphic) {\n        ( true && !(options.as) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Relationships that satisfy polymorphic relationships MUST define which abstract-type they are satisfying using 'as'. The field '${name}' on type '${this.modelName}' is misconfigured.`, options.as));\n        ( true && !(!!options.as && inverseRelationship.type === options.as) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`options.as should match the expected type of the polymorphic relationship. Expected field '${name}' on type '${this.modelName}' to specify '${inverseRelationship.type}' but found '${options.as}'`, !!options.as && inverseRelationship.type === options.as));\n      }\n    }\n    ( true && !(inverseOptions.inverse !== null) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`The ${inverseSchema.modelName}:${fieldOnInverse} relationship declares 'inverse: null', but it was resolved as the inverse for ${this.modelName}:${name}.`, inverseOptions.inverse !== null));\n    return {\n      type: inverseSchema,\n      name: fieldOnInverse,\n      kind: inverseKind,\n      options: inverseOptions\n    };\n  }\n\n  /**\n   The model's relationships as a map, keyed on the type of the\n   relationship. The value of each entry is an array containing a descriptor\n   for each relationship with that type, describing the name of the relationship\n   as well as the type.\n    For example, given the following model definition:\n    ```app/models/blog.js\n   import Model, { belongsTo, hasMany } from '@ember-data/model';\n    export default class BlogModel extends Model {\n      @hasMany('user') users;\n      @belongsTo('user') owner;\n      @hasMany('post') posts;\n    }\n   ```\n    This computed property would return a map describing these\n   relationships, like this:\n    ```javascript\n   import Blog from 'app/models/blog';\n   import User from 'app/models/user';\n   import Post from 'app/models/post';\n    let relationships = Blog.relationships;\n   relationships.user;\n   //=> [ { name: 'users', kind: 'hasMany' },\n   //     { name: 'owner', kind: 'belongsTo' } ]\n   relationships.post;\n   //=> [ { name: 'posts', kind: 'hasMany' } ]\n   ```\n    @property relationships\n    @public\n   @static\n   @type Map\n   @readOnly\n   */\n\n  static get relationships() {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    const map = new Map();\n    const relationshipsByName = this.relationshipsByName;\n\n    // Loop through each computed property on the class\n    relationshipsByName.forEach(desc => {\n      const {\n        type\n      } = desc;\n      if (!map.has(type)) {\n        map.set(type, []);\n      }\n      map.get(type).push(desc);\n    });\n    return map;\n  }\n\n  /**\n   A hash containing lists of the model's relationships, grouped\n   by the relationship kind. For example, given a model with this\n   definition:\n    ```app/models/blog.js\n   import Model, { belongsTo, hasMany } from '@ember-data/model';\n    export default class BlogModel extends Model {\n      @hasMany('user') users;\n      @belongsTo('user') owner;\n       @hasMany('post') posts;\n    }\n   ```\n    This property would contain the following:\n    ```javascript\n   import Blog from 'app/models/blog';\n    let relationshipNames = Blog.relationshipNames;\n   relationshipNames.hasMany;\n   //=> ['users', 'posts']\n   relationshipNames.belongsTo;\n   //=> ['owner']\n   ```\n    @property relationshipNames\n    @public\n   @static\n   @type Object\n   @readOnly\n   */\n  static get relationshipNames() {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    const names = {\n      hasMany: [],\n      belongsTo: []\n    };\n    this.eachComputedProperty((name, meta) => {\n      if (meta.kind === 'hasMany' || meta.kind === 'belongsTo') {\n        names[meta.kind].push(name);\n      }\n    });\n    return names;\n  }\n\n  /**\n   An array of types directly related to a model. Each type will be\n   included once, regardless of the number of relationships it has with\n   the model.\n    For example, given a model with this definition:\n    ```app/models/blog.js\n   import Model, { belongsTo, hasMany } from '@ember-data/model';\n    export default class BlogModel extends Model {\n      @hasMany('user') users;\n      @belongsTo('user') owner;\n       @hasMany('post') posts;\n    }\n   ```\n    This property would contain the following:\n    ```javascript\n   import Blog from 'app/models/blog';\n    let relatedTypes = Blog.relatedTypes');\n   //=> ['user', 'post']\n   ```\n    @property relatedTypes\n   @public\n   @static\n   @type Array\n   @readOnly\n   */\n  static get relatedTypes() {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    const types = [];\n    const rels = this.relationshipsObject;\n    const relationships = Object.keys(rels);\n\n    // create an array of the unique types involved\n    // in relationships\n    for (let i = 0; i < relationships.length; i++) {\n      const name = relationships[i];\n      const meta = rels[name];\n      const modelName = meta.type;\n      if (types.indexOf(modelName) === -1) {\n        types.push(modelName);\n      }\n    }\n    return types;\n  }\n\n  /**\n   A map whose keys are the relationships of a model and whose values are\n   relationship descriptors.\n    For example, given a model with this\n   definition:\n    ```app/models/blog.js\n   import Model, { belongsTo, hasMany } from '@ember-data/model';\n    export default class BlogModel extends Model {\n      @hasMany('user') users;\n      @belongsTo('user') owner;\n       @hasMany('post') posts;\n    }\n   ```\n    This property would contain the following:\n    ```javascript\n   import Blog from 'app/models/blog';\n    let relationshipsByName = Blog.relationshipsByName;\n   relationshipsByName.users;\n   //=> { name: 'users', kind: 'hasMany', type: 'user', options: Object }\n   relationshipsByName.owner;\n   //=> { name: 'owner', kind: 'belongsTo', type: 'user', options: Object }\n   ```\n    @property relationshipsByName\n    @public\n   @static\n   @type Map\n   @readOnly\n   */\n  static get relationshipsByName() {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    const map = new Map();\n    const rels = this.relationshipsObject;\n    const relationships = Object.keys(rels);\n    for (let i = 0; i < relationships.length; i++) {\n      const name = relationships[i];\n      const value = rels[name];\n      map.set(value.name, value);\n    }\n    return map;\n  }\n  static get relationshipsObject() {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    const relationships = Object.create(null);\n    const modelName = this.modelName;\n    this.eachComputedProperty((name, meta) => {\n      if (meta.kind === 'hasMany' || meta.kind === 'belongsTo') {\n        // TODO deprecate key being here\n        meta.key = name;\n        meta.name = name;\n        meta.parentModelName = modelName;\n        relationships[name] = meta;\n        ( true && !(!(meta.options.inverse === null && meta.options.as?.length > 0)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You should not specify both options.as and options.inverse as null on ${modelName}.${meta.name}, as if there is no inverse field there is no abstract type to conform to. You may have intended for this relationship to be polymorphic, or you may have mistakenly set inverse to null.`, !(meta.options.inverse === null && meta.options.as?.length > 0)));\n      }\n    });\n    return relationships;\n  }\n\n  /**\n   A map whose keys are the fields of the model and whose values are strings\n   describing the kind of the field. A model's fields are the union of all of its\n   attributes and relationships.\n    For example:\n    ```app/models/blog.js\n   import Model, { attr, belongsTo, hasMany } from '@ember-data/model';\n    export default class BlogModel extends Model {\n      @hasMany('user') users;\n      @belongsTo('user') owner;\n       @hasMany('post') posts;\n       @attr('string') title;\n    }\n   ```\n    ```js\n   import Blog from 'app/models/blog'\n    let fields = Blog.fields;\n   fields.forEach(function(kind, field) {\n      // do thing\n    });\n    // prints:\n   // users, hasMany\n   // owner, belongsTo\n   // posts, hasMany\n   // title, attribute\n   ```\n    @property fields\n    @public\n   @static\n   @type Map\n   @readOnly\n   */\n  static get fields() {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    const map = new Map();\n    this.eachComputedProperty((name, meta) => {\n      if (meta.kind === 'hasMany' || meta.kind === 'belongsTo') {\n        map.set(name, meta.kind);\n      } else if (meta.kind === 'attribute') {\n        map.set(name, 'attribute');\n      }\n    });\n    return map;\n  }\n\n  /**\n   Given a callback, iterates over each of the relationships in the model,\n   invoking the callback with the name of each relationship and its relationship\n   descriptor.\n    @method eachRelationship\n    @public\n   @static\n   @param {Function} callback the callback to invoke\n   @param {any} binding the value to which the callback's `this` should be bound\n   */\n  static eachRelationship(callback, binding) {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    this.relationshipsByName.forEach((relationship, name) => {\n      callback.call(binding, name, relationship);\n    });\n  }\n\n  /**\n   Given a callback, iterates over each of the types related to a model,\n   invoking the callback with the related type's class. Each type will be\n   returned just once, regardless of how many different relationships it has\n   with a model.\n    @method eachRelatedType\n    @public\n   @static\n   @param {Function} callback the callback to invoke\n   @param {any} binding the value to which the callback's `this` should be bound\n   */\n  static eachRelatedType(callback, binding) {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    const relationshipTypes = this.relatedTypes;\n    for (let i = 0; i < relationshipTypes.length; i++) {\n      const type = relationshipTypes[i];\n      callback.call(binding, type);\n    }\n  }\n  static determineRelationshipType(knownSide, store) {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    const knownKey = knownSide.name;\n    const knownKind = knownSide.kind;\n    const inverse = this.inverseFor(knownKey, store);\n    // let key;\n\n    if (!inverse) {\n      return knownKind === 'belongsTo' ? 'oneToNone' : 'manyToNone';\n    }\n\n    // key = inverse.name;\n    const otherKind = inverse.kind;\n    if (otherKind === 'belongsTo') {\n      return knownKind === 'belongsTo' ? 'oneToOne' : 'manyToOne';\n    } else {\n      return knownKind === 'belongsTo' ? 'oneToMany' : 'manyToMany';\n    }\n  }\n\n  /**\n   A map whose keys are the attributes of the model (properties\n   described by attr) and whose values are the meta object for the\n   property.\n    Example\n    ```app/models/person.js\n   import Model, { attr } from '@ember-data/model';\n    export default class PersonModel extends Model {\n      @attr('string') firstName;\n      @attr('string') lastName;\n      @attr('date') birthday;\n    }\n   ```\n    ```javascript\n   import Person from 'app/models/person'\n    let attributes = Person.attributes\n    attributes.forEach(function(meta, name) {\n      // do thing\n    });\n    // prints:\n   // firstName {type: \"string\", kind: 'attribute', options: Object, parentType: function, name: \"firstName\"}\n   // lastName {type: \"string\", kind: 'attribute', options: Object, parentType: function, name: \"lastName\"}\n   // birthday {type: \"date\", kind: 'attribute', options: Object, parentType: function, name: \"birthday\"}\n   ```\n    @property attributes\n    @public\n   @static\n   @type {Map}\n   @readOnly\n   */\n  static get attributes() {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    const map = new Map();\n    this.eachComputedProperty((name, meta) => {\n      if (meta.kind === 'attribute') {\n        ( true && !(name !== 'id') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(\"You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: attr('<type>')` from \" + this.toString(), name !== 'id')); // TODO deprecate key being here\n        meta.key = name;\n        meta.name = name;\n        map.set(name, meta);\n      }\n    });\n    return map;\n  }\n\n  /**\n   A map whose keys are the attributes of the model (properties\n   described by attr) and whose values are type of transformation\n   applied to each attribute. This map does not include any\n   attributes that do not have an transformation type.\n    Example\n    ```app/models/person.js\n   import Model, { attr } from '@ember-data/model';\n    export default class PersonModel extends Model {\n      @attr firstName;\n      @attr('string') lastName;\n      @attr('date') birthday;\n    }\n   ```\n    ```javascript\n   import Person from 'app/models/person';\n    let transformedAttributes = Person.transformedAttributes\n    transformedAttributes.forEach(function(field, type) {\n      // do thing\n    });\n    // prints:\n   // lastName string\n   // birthday date\n   ```\n    @property transformedAttributes\n    @public\n   @static\n   @type {Map}\n   @readOnly\n   */\n  static get transformedAttributes() {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    const map = new Map();\n    this.eachAttribute((name, meta) => {\n      if (meta.type) {\n        map.set(name, meta.type);\n      }\n    });\n    return map;\n  }\n\n  /**\n   Iterates through the attributes of the model, calling the passed function on each\n   attribute.\n    The callback method you provide should have the following signature (all\n   parameters are optional):\n    ```javascript\n   function(name, meta);\n   ```\n    - `name` the name of the current property in the iteration\n   - `meta` the meta object for the attribute property in the iteration\n    Note that in addition to a callback, you can also pass an optional target\n   object that will be set as `this` on the context.\n    Example\n    ```javascript\n   import Model, { attr } from '@ember-data/model';\n    class PersonModel extends Model {\n      @attr('string') firstName;\n      @attr('string') lastName;\n      @attr('date') birthday;\n    }\n    PersonModel.eachAttribute(function(name, meta) {\n      // do thing\n    });\n    // prints:\n   // firstName {type: \"string\", kind: 'attribute', options: Object, parentType: function, name: \"firstName\"}\n   // lastName {type: \"string\", kind: 'attribute', options: Object, parentType: function, name: \"lastName\"}\n   // birthday {type: \"date\", kind: 'attribute', options: Object, parentType: function, name: \"birthday\"}\n   ```\n    @method eachAttribute\n    @public\n   @param {Function} callback The callback to execute\n   @param {Object} [binding] the value to which the callback's `this` should be bound\n   @static\n   */\n  static eachAttribute(callback, binding) {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    this.attributes.forEach((meta, name) => {\n      callback.call(binding, name, meta);\n    });\n  }\n\n  /**\n   Iterates through the transformedAttributes of the model, calling\n   the passed function on each attribute. Note the callback will not be\n   called for any attributes that do not have an transformation type.\n    The callback method you provide should have the following signature (all\n   parameters are optional):\n    ```javascript\n   function(name, type);\n   ```\n    - `name` the name of the current property in the iteration\n   - `type` a string containing the name of the type of transformed\n   applied to the attribute\n    Note that in addition to a callback, you can also pass an optional target\n   object that will be set as `this` on the context.\n    Example\n    ```javascript\n   import Model, { attr } from '@ember-data/model';\n    let Person = Model.extend({\n      firstName: attr(),\n      lastName: attr('string'),\n      birthday: attr('date')\n    });\n    Person.eachTransformedAttribute(function(name, type) {\n      // do thing\n    });\n    // prints:\n   // lastName string\n   // birthday date\n   ```\n    @method eachTransformedAttribute\n    @public\n   @param {Function} callback The callback to execute\n   @param {Object} [binding] the value to which the callback's `this` should be bound\n   @static\n   */\n  static eachTransformedAttribute(callback, binding) {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    this.transformedAttributes.forEach((type, name) => {\n      callback.call(binding, name, type);\n    });\n  }\n\n  /**\n   Returns the name of the model class.\n    @method toString\n    @public\n   @static\n   */\n  static toString() {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Accessing schema information on Models without looking up the model via the store is disallowed.`, this.modelName));\n    return `model:${this.modelName}`;\n  }\n}, _class2.isModel = true, _class2.modelName = null, _class2), (_applyDecoratedDescriptor(_class.prototype, \"isEmpty\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat], Object.getOwnPropertyDescriptor(_class.prototype, \"isEmpty\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isLoading\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat], Object.getOwnPropertyDescriptor(_class.prototype, \"isLoading\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isLoaded\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat], Object.getOwnPropertyDescriptor(_class.prototype, \"isLoaded\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"hasDirtyAttributes\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat], Object.getOwnPropertyDescriptor(_class.prototype, \"hasDirtyAttributes\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isSaving\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat], Object.getOwnPropertyDescriptor(_class.prototype, \"isSaving\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isDeleted\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat], Object.getOwnPropertyDescriptor(_class.prototype, \"isDeleted\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isNew\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat], Object.getOwnPropertyDescriptor(_class.prototype, \"isNew\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isValid\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat], Object.getOwnPropertyDescriptor(_class.prototype, \"isValid\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"dirtyType\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat], Object.getOwnPropertyDescriptor(_class.prototype, \"dirtyType\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isError\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat], Object.getOwnPropertyDescriptor(_class.prototype, \"isError\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"id\", [tagged], Object.getOwnPropertyDescriptor(_class.prototype, \"id\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"currentState\", [tagged], Object.getOwnPropertyDescriptor(_class.prototype, \"currentState\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"errors\", [computeOnce], Object.getOwnPropertyDescriptor(_class.prototype, \"errors\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"adapterError\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_4__.compat], Object.getOwnPropertyDescriptor(_class.prototype, \"adapterError\"), _class.prototype), _applyDecoratedDescriptor(_class, \"inverseMap\", [computeOnce], Object.getOwnPropertyDescriptor(_class, \"inverseMap\"), _class), _applyDecoratedDescriptor(_class, \"relationships\", [computeOnce], Object.getOwnPropertyDescriptor(_class, \"relationships\"), _class), _applyDecoratedDescriptor(_class, \"relationshipNames\", [computeOnce], Object.getOwnPropertyDescriptor(_class, \"relationshipNames\"), _class), _applyDecoratedDescriptor(_class, \"relatedTypes\", [computeOnce], Object.getOwnPropertyDescriptor(_class, \"relatedTypes\"), _class), _applyDecoratedDescriptor(_class, \"relationshipsByName\", [computeOnce], Object.getOwnPropertyDescriptor(_class, \"relationshipsByName\"), _class), _applyDecoratedDescriptor(_class, \"relationshipsObject\", [computeOnce], Object.getOwnPropertyDescriptor(_class, \"relationshipsObject\"), _class), _applyDecoratedDescriptor(_class, \"fields\", [computeOnce], Object.getOwnPropertyDescriptor(_class, \"fields\"), _class), _applyDecoratedDescriptor(_class, \"attributes\", [computeOnce], Object.getOwnPropertyDescriptor(_class, \"attributes\"), _class), _applyDecoratedDescriptor(_class, \"transformedAttributes\", [computeOnce], Object.getOwnPropertyDescriptor(_class, \"transformedAttributes\"), _class)), _class);\nModel.prototype.save = save;\nModel.prototype.destroyRecord = destroyRecord;\nModel.prototype.unloadRecord = unloadRecord;\nModel.prototype.hasMany = hasMany;\nModel.prototype.belongsTo = belongsTo;\nModel.prototype.serialize = serialize;\nModel.prototype._createSnapshot = createSnapshot;\nModel.prototype.deleteRecord = deleteRecord;\nModel.prototype.changedAttributes = changedAttributes;\nModel.prototype.rollbackAttributes = rollbackAttributes;\nModel.prototype.reload = reload;\n(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(Model.prototype, 'isReloading', false);\n\n// this is required to prevent `init` from passing\n// the values initialized during create to `setUnknownProperty`\nModel.prototype._createProps = null;\nModel.prototype._secretInit = null;\n{\n  /**\n   Provides info about the model for debugging purposes\n   by grouping the properties into more semantic groups.\n    Meant to be used by debugging tools such as the Chrome Ember Extension.\n    - Groups all attributes in \"Attributes\" group.\n   - Groups all belongsTo relationships in \"Belongs To\" group.\n   - Groups all hasMany relationships in \"Has Many\" group.\n   - Groups all flags in \"Flags\" group.\n   - Flags relationship CPs as expensive properties.\n    @method _debugInfo\n   @for Model\n   @private\n   */\n  Model.prototype._debugInfo = function () {\n    const relationships = {};\n    const expensiveProperties = [];\n    const identifier = (0,_ember_data_store__WEBPACK_IMPORTED_MODULE_2__.recordIdentifierFor)(this);\n    const schema = this.store.getSchemaDefinitionService();\n    const attrDefs = schema.attributesDefinitionFor(identifier);\n    const relDefs = schema.relationshipsDefinitionFor(identifier);\n    const attributes = Object.keys(attrDefs);\n    attributes.unshift('id');\n    const groups = [{\n      name: 'Attributes',\n      properties: attributes,\n      expand: true\n    }];\n    Object.keys(relDefs).forEach(name => {\n      const relationship = relDefs[name];\n      let properties = relationships[relationship.kind];\n      if (properties === undefined) {\n        properties = relationships[relationship.kind] = [];\n        groups.push({\n          name: relationship.kind,\n          properties,\n          expand: true\n        });\n      }\n      properties.push(name);\n      expensiveProperties.push(name);\n    });\n    groups.push({\n      name: 'Flags',\n      properties: ['isLoaded', 'hasDirtyAttributes', 'isSaving', 'isDeleted', 'isError', 'isNew', 'isValid']\n    });\n    return {\n      propertyInfo: {\n        // include all other mixins / properties (not just the grouped ones)\n        includeOtherProperties: true,\n        groups: groups,\n        // don't pre-calculate unless cached\n        expensiveProperties: expensiveProperties\n      }\n    };\n  };\n}\n{\n  const lookupDescriptor = function lookupDescriptor(obj, keyName) {\n    let current = obj;\n    do {\n      const descriptor = Object.getOwnPropertyDescriptor(current, keyName);\n      if (descriptor !== undefined) {\n        return descriptor;\n      }\n      current = Object.getPrototypeOf(current);\n    } while (current !== null);\n    return null;\n  };\n  Model.reopen({\n    init() {\n      this._super(...arguments);\n      const ourDescriptor = lookupDescriptor(Model.prototype, 'currentState');\n      const theirDescriptor = lookupDescriptor(this, 'currentState');\n      const realState = this.___recordState;\n      if (ourDescriptor.get !== theirDescriptor.get || realState !== this.currentState) {\n        throw new Error(`'currentState' is a reserved property name on instances of classes extending Model. Please choose a different property name for ${this.constructor.toString()}`);\n      }\n      const ID_DESCRIPTOR = lookupDescriptor(Model.prototype, 'id');\n      const idDesc = lookupDescriptor(this, 'id');\n      if (idDesc.get !== ID_DESCRIPTOR.get) {\n        throw new Error(`You may not set 'id' as an attribute on your model. Please remove any lines that look like: \\`id: attr('<type>')\\` from ${this.constructor.toString()}`);\n      }\n    }\n  });\n  Model.reopen = function deprecatedReopen() {\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Model.reopen is deprecated. Use Foo extends Model to extend your class instead.`));\n  };\n  Model.reopenClass = function deprecatedReopenClass() {\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Model.reopenClass is deprecated. Use Foo extends Model to add static methods and properties to your class instead.`));\n  };\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/model-YsOraZ6y.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/util-3DHZJC9h.js":
/*!********************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/util-3DHZJC9h.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ computedMacroWithOptionalParams),\n/* harmony export */   n: () => (/* binding */ normalizeModelName)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/string */ \"../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/index.js\");\n\n\nfunction isElementDescriptor(args) {\n  const [maybeTarget, maybeKey, maybeDesc] = args;\n  return (\n    // Ensure we have the right number of args\n    args.length === 3 && (\n    // Make sure the target is a class or object (prototype)\n    typeof maybeTarget === 'function' || typeof maybeTarget === 'object' && maybeTarget !== null) &&\n    // Make sure the key is a string\n    typeof maybeKey === 'string' && (\n    // Make sure the descriptor is the right shape\n    typeof maybeDesc === 'object' && maybeDesc !== null && 'enumerable' in maybeDesc && 'configurable' in maybeDesc ||\n    // TS compatibility\n    maybeDesc === undefined)\n  );\n}\nfunction computedMacroWithOptionalParams(fn) {\n  return (...maybeDesc) => isElementDescriptor(maybeDesc) ? fn()(...maybeDesc) : fn(...maybeDesc);\n}\nfunction normalizeModelName(type) {\n  {\n    const result = (0,_ember_string__WEBPACK_IMPORTED_MODULE_1__.dasherize)(type);\n    ( true && !(result === type) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`The resource type '${type}' is not normalized. Update your application code to use '${result}' instead of '${type}'.`, result === type, {\n      id: 'ember-data:deprecate-non-strict-types',\n      until: '6.0',\n      for: 'ember-data',\n      since: {\n        available: '5.3',\n        enabled: '5.3'\n      }\n    }));\n    return result;\n  }\n  return type;\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/util-3DHZJC9h.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/request-utils.d2e97183/node_modules/@ember-data/request-utils/index.js":
/*!****************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/request-utils.d2e97183/node_modules/@ember-data/request-utils/index.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LifetimesService: () => (/* binding */ LifetimesService),\n/* harmony export */   buildBaseURL: () => (/* binding */ buildBaseURL),\n/* harmony export */   buildQueryParams: () => (/* binding */ buildQueryParams),\n/* harmony export */   filterEmpty: () => (/* binding */ filterEmpty),\n/* harmony export */   parseCacheControl: () => (/* binding */ parseCacheControl),\n/* harmony export */   setBuildURLConfig: () => (/* binding */ setBuildURLConfig),\n/* harmony export */   sortQueryParams: () => (/* binding */ sortQueryParams)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/**\n * Simple utility function to assist in url building,\n * query params, and other common request operations.\n *\n * These primitives may be used directly or composed\n * by request builders to provide a consistent interface\n * for building requests.\n *\n * For instance:\n *\n * ```ts\n * import { buildBaseURL, buildQueryParams } from '@ember-data/request-utils';\n *\n * const baseURL = buildBaseURL({\n *   host: 'https://api.example.com',\n *   namespace: 'api/v1',\n *   resourcePath: 'emberDevelopers',\n *   op: 'query',\n *   identifier: { type: 'ember-developer' }\n * });\n * const url = `${baseURL}?${buildQueryParams({ name: 'Chris', include:['pets'] })}`;\n * // => 'https://api.example.com/api/v1/emberDevelopers?include=pets&name=Chris'\n * ```\n *\n * This is useful, but not as useful as the REST request builder for query which is sugar\n * over this (and more!):\n *\n * ```ts\n * import { query } from '@ember-data/rest/request';\n *\n * const options = query('ember-developer', { name: 'Chris', include:['pets'] });\n * // => { url: 'https://api.example.com/api/v1/emberDevelopers?include=pets&name=Chris' }\n * // Note: options will also include other request options like headers, method, etc.\n * ```\n *\n * @module @ember-data/request-utils\n * @main @ember-data/request-utils\n * @public\n */\n\n// prevents the final constructed object from needing to add\n// host and namespace which are provided by the final consuming\n// class to the prototype which can result in overwrite errors\n\nconst CONFIG = {\n  host: '',\n  namespace: ''\n};\n\n/**\n * Sets the global configuration for `buildBaseURL`\n * for host and namespace values for the application.\n *\n * These values may still be overridden by passing\n * them to buildBaseURL directly.\n *\n * This method may be called as many times as needed.\n * host values of `''` or `'/'` are equivalent.\n *\n * Except for the value of `/` as host, host should not\n * end with `/`.\n *\n * namespace should not start or end with a `/`.\n *\n * ```ts\n * type BuildURLConfig = {\n *   host: string;\n *   namespace: string'\n * }\n * ```\n *\n * Example:\n *\n * ```ts\n * import { setBuildURLConfig } from '@ember-data/request-utils';\n *\n * setBuildURLConfig({\n *   host: 'https://api.example.com',\n *   namespace: 'api/v1'\n * });\n * ```\n *\n * @method setBuildURLConfig\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param {BuildURLConfig} config\n * @return void\n */\nfunction setBuildURLConfig(config) {\n  ( true && !(config) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`setBuildURLConfig: You must pass a config object`, config));\n  ( true && !('host' in config || 'namespace' in config) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`setBuildURLConfig: You must pass a config object with a 'host' or 'namespace' property`, 'host' in config || 'namespace' in config));\n  CONFIG.host = config.host || '';\n  CONFIG.namespace = config.namespace || '';\n  ( true && !(CONFIG.host === '/' || !CONFIG.host.endsWith('/')) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: host must NOT end with '/', received '${CONFIG.host}'`, CONFIG.host === '/' || !CONFIG.host.endsWith('/')));\n  ( true && !(!CONFIG.namespace.startsWith('/')) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: namespace must NOT start with '/', received '${CONFIG.namespace}'`, !CONFIG.namespace.startsWith('/')));\n  ( true && !(!CONFIG.namespace.endsWith('/')) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: namespace must NOT end with '/', received '${CONFIG.namespace}'`, !CONFIG.namespace.endsWith('/')));\n}\nconst OPERATIONS_WITH_PRIMARY_RECORDS = new Set(['findRecord', 'findRelatedRecord', 'findRelatedCollection', 'updateRecord', 'deleteRecord']);\nfunction isOperationWithPrimaryRecord(options) {\n  return 'op' in options && OPERATIONS_WITH_PRIMARY_RECORDS.has(options.op);\n}\nfunction hasResourcePath(options) {\n  return 'resourcePath' in options && typeof options.resourcePath === 'string' && options.resourcePath.length > 0;\n}\nfunction resourcePathForType(options) {\n  ( true && !('op' in options && typeof options.op === 'string') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`resourcePathForType: You must pass a valid op as part of options`, 'op' in options && typeof options.op === 'string'));\n  return options.op === 'findMany' ? options.identifiers[0].type : options.identifier.type;\n}\n\n/**\n * Builds a URL for a request based on the provided options.\n * Does not include support for building query params (see `buildQueryParams`)\n * so that it may be composed cleanly with other query-params strategies.\n *\n * Usage:\n *\n * ```ts\n * import { buildBaseURL } from '@ember-data/request-utils';\n *\n * const url = buildBaseURL({\n *   host: 'https://api.example.com',\n *   namespace: 'api/v1',\n *   resourcePath: 'emberDevelopers',\n *   op: 'query',\n *   identifier: { type: 'ember-developer' }\n * });\n *\n * // => 'https://api.example.com/api/v1/emberDevelopers'\n * ```\n *\n * On the surface this may seem like a lot of work to do something simple, but\n * it is designed to be composable with other utilities and interfaces that the\n * average product engineer will never need to see or use.\n *\n * A few notes:\n *\n * - `resourcePath` is optional, but if it is not provided, `identifier.type` will be used.\n * - `host` and `namespace` are optional, but if they are not provided, the values globally\n *    configured via `setBuildURLConfig` will be used.\n * - `op` is required and must be one of the following:\n *   - 'findRecord' 'query' 'findMany' 'findRelatedCollection' 'findRelatedRecord'` 'createRecord' 'updateRecord' 'deleteRecord'\n * - Depending on the value of `op`, `identifier` or `identifiers` will be required.\n *\n * @method buildBaseURL\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param urlOptions\n * @return string\n */\nfunction buildBaseURL(urlOptions) {\n  const options = Object.assign({\n    host: CONFIG.host,\n    namespace: CONFIG.namespace\n  }, urlOptions);\n  ( true && !(hasResourcePath(options) || typeof options.op === 'string' && options.op.length > 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: You must pass \\`op\\` as part of options`, hasResourcePath(options) || typeof options.op === 'string' && options.op.length > 0));\n  ( true && !(hasResourcePath(options) || options.op === 'findMany' || options.identifier && typeof options.identifier === 'object') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: You must pass \\`identifier\\` as part of options`, hasResourcePath(options) || options.op === 'findMany' || options.identifier && typeof options.identifier === 'object'));\n  ( true && !(hasResourcePath(options) || options.op !== 'findMany' || options.identifiers && Array.isArray(options.identifiers) && options.identifiers.length > 0 && options.identifiers.every(i => i && typeof i === 'object')) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: You must pass \\`identifiers\\` as part of options`, hasResourcePath(options) || options.op !== 'findMany' || options.identifiers && Array.isArray(options.identifiers) && options.identifiers.length > 0 && options.identifiers.every(i => i && typeof i === 'object')));\n  ( true && !(hasResourcePath(options) || !isOperationWithPrimaryRecord(options) || typeof options.identifier.id === 'string' && options.identifier.id.length > 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: You must pass valid \\`identifier\\` as part of options, expected 'id'`, hasResourcePath(options) || !isOperationWithPrimaryRecord(options) || typeof options.identifier.id === 'string' && options.identifier.id.length > 0));\n  ( true && !(hasResourcePath(options) || options.op !== 'findMany' || options.identifiers.every(i => typeof i.id === 'string' && i.id.length > 0)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: You must pass \\`identifiers\\` as part of options`, hasResourcePath(options) || options.op !== 'findMany' || options.identifiers.every(i => typeof i.id === 'string' && i.id.length > 0)));\n  ( true && !(hasResourcePath(options) || options.op === 'findMany' || typeof options.identifier.type === 'string' && options.identifier.type.length > 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: You must pass valid \\`identifier\\` as part of options, expected 'type'`, hasResourcePath(options) || options.op === 'findMany' || typeof options.identifier.type === 'string' && options.identifier.type.length > 0));\n  ( true && !(hasResourcePath(options) || options.op !== 'findMany' || typeof options.identifiers[0].type === 'string' && options.identifiers[0].type.length > 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: You must pass valid \\`identifiers\\` as part of options, expected 'type'`, hasResourcePath(options) || options.op !== 'findMany' || typeof options.identifiers[0].type === 'string' && options.identifiers[0].type.length > 0)); // prettier-ignore\n  const idPath = isOperationWithPrimaryRecord(options) ? encodeURIComponent(options.identifier.id) : '';\n  const resourcePath = options.resourcePath || resourcePathForType(options);\n  const {\n    host,\n    namespace\n  } = options;\n  const fieldPath = 'fieldPath' in options ? options.fieldPath : '';\n  ( true && !(hasResourcePath(options) || ['findRecord', 'query', 'findMany', 'findRelatedCollection', 'findRelatedRecord', 'createRecord', 'updateRecord', 'deleteRecord'].includes(options.op)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: You tried to build a url for a ${String('op' in options ? options.op + ' ' : '')}request to ${resourcePath} but resourcePath must be set or op must be one of \"${['findRecord', 'findRelatedRecord', 'findRelatedCollection', 'updateRecord', 'deleteRecord', 'createRecord', 'query', 'findMany'].join('\",\"')}\".`, hasResourcePath(options) || ['findRecord', 'query', 'findMany', 'findRelatedCollection', 'findRelatedRecord', 'createRecord', 'updateRecord', 'deleteRecord'].includes(options.op)));\n  ( true && !(host === '/' || !host.endsWith('/')) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: host must NOT end with '/', received '${host}'`, host === '/' || !host.endsWith('/')));\n  ( true && !(!namespace.startsWith('/')) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: namespace must NOT start with '/', received '${namespace}'`, !namespace.startsWith('/')));\n  ( true && !(!namespace.endsWith('/')) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: namespace must NOT end with '/', received '${namespace}'`, !namespace.endsWith('/')));\n  ( true && !(!resourcePath.startsWith('/')) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: resourcePath must NOT start with '/', received '${resourcePath}'`, !resourcePath.startsWith('/')));\n  ( true && !(!resourcePath.endsWith('/')) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: resourcePath must NOT end with '/', received '${resourcePath}'`, !resourcePath.endsWith('/')));\n  ( true && !(!fieldPath.startsWith('/')) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: fieldPath must NOT start with '/', received '${fieldPath}'`, !fieldPath.startsWith('/')));\n  ( true && !(!fieldPath.endsWith('/')) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: fieldPath must NOT end with '/', received '${fieldPath}'`, !fieldPath.endsWith('/')));\n  ( true && !(!idPath.startsWith('/')) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: idPath must NOT start with '/', received '${idPath}'`, !idPath.startsWith('/')));\n  ( true && !(!idPath.endsWith('/')) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`buildBaseURL: idPath must NOT end with '/', received '${idPath}'`, !idPath.endsWith('/')));\n  const hasHost = host !== '' && host !== '/';\n  const url = [hasHost ? host : '', namespace, resourcePath, idPath, fieldPath].filter(Boolean).join('/');\n  return hasHost ? url : `/${url}`;\n}\nconst DEFAULT_QUERY_PARAMS_SERIALIZATION_OPTIONS = {\n  arrayFormat: 'comma'\n};\nfunction handleInclude(include) {\n  ( true && !(typeof include === 'string' || Array.isArray(include)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected include to be a string or array, got ${typeof include}`, typeof include === 'string' || Array.isArray(include)));\n  return typeof include === 'string' ? include.split(',') : include;\n}\n\n/**\n * filter out keys of an object that have falsy values or point to empty arrays\n * returning a new object with only those keys that have truthy values / non-empty arrays\n *\n * @method filterEmpty\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param {Record<string, Serializable>} source object to filter keys with empty values from\n * @return {Record<string, Serializable>} A new object with the keys that contained empty values removed\n */\nfunction filterEmpty(source) {\n  const result = {};\n  for (const key in source) {\n    const value = source[key];\n    // Allow `0` and `false` but filter falsy values that indicate \"empty\"\n    if (value !== undefined && value !== null && value !== '') {\n      if (!Array.isArray(value) || value.length > 0) {\n        result[key] = source[key];\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Sorts query params by both key and value returning a new URLSearchParams\n * object with the keys inserted in sorted order.\n *\n * Treats `included` specially, splicing it into an array if it is a string and sorting the array.\n *\n * Options:\n * - arrayFormat: 'bracket' | 'indices' | 'repeat' | 'comma'\n *\n * 'bracket': appends [] to the key for every value e.g. `&ids[]=1&ids[]=2`\n * 'indices': appends [i] to the key for every value e.g. `&ids[0]=1&ids[1]=2`\n * 'repeat': appends the key for every value e.g. `&ids=1&ids=2`\n * 'comma' (default): appends the key once with a comma separated list of values e.g. `&ids=1,2`\n *\n * @method sortQueryParams\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param {URLSearchParams | object} params\n * @param {object} options\n * @return {URLSearchParams} A URLSearchParams with keys inserted in sorted order\n */\nfunction sortQueryParams(params, options) {\n  const opts = Object.assign({}, DEFAULT_QUERY_PARAMS_SERIALIZATION_OPTIONS, options);\n  const paramsIsObject = !(params instanceof URLSearchParams);\n  const urlParams = new URLSearchParams();\n  const dictionaryParams = paramsIsObject ? params : {};\n  if (!paramsIsObject) {\n    params.forEach((value, key) => {\n      const hasExisting = (key in dictionaryParams);\n      if (!hasExisting) {\n        dictionaryParams[key] = value;\n      } else {\n        const existingValue = dictionaryParams[key];\n        if (Array.isArray(existingValue)) {\n          existingValue.push(value);\n        } else {\n          dictionaryParams[key] = [existingValue, value];\n        }\n      }\n    });\n  }\n  if ('include' in dictionaryParams) {\n    dictionaryParams.include = handleInclude(dictionaryParams.include);\n  }\n  const sortedKeys = Object.keys(dictionaryParams).sort();\n  sortedKeys.forEach(key => {\n    const value = dictionaryParams[key];\n    if (Array.isArray(value)) {\n      value.sort();\n      switch (opts.arrayFormat) {\n        case 'indices':\n          value.forEach((v, i) => {\n            urlParams.append(`${key}[${i}]`, String(v));\n          });\n          return;\n        case 'bracket':\n          value.forEach(v => {\n            urlParams.append(`${key}[]`, String(v));\n          });\n          return;\n        case 'repeat':\n          value.forEach(v => {\n            urlParams.append(key, String(v));\n          });\n          return;\n        case 'comma':\n        default:\n          urlParams.append(key, value.join(','));\n          return;\n      }\n    } else {\n      urlParams.append(key, String(value));\n    }\n  });\n  return urlParams;\n}\n\n/**\n * Sorts query params by both key and value, returning a query params string\n *\n * Treats `included` specially, splicing it into an array if it is a string and sorting the array.\n *\n * Options:\n * - arrayFormat: 'bracket' | 'indices' | 'repeat' | 'comma'\n *\n * 'bracket': appends [] to the key for every value e.g. `ids[]=1&ids[]=2`\n * 'indices': appends [i] to the key for every value e.g. `ids[0]=1&ids[1]=2`\n * 'repeat': appends the key for every value e.g. `ids=1&ids=2`\n * 'comma' (default): appends the key once with a comma separated list of values e.g. `ids=1,2`\n *\n * @method buildQueryParams\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param {URLSearchParams | object} params\n * @param {object} [options]\n * @return {string} A sorted query params string without the leading `?`\n */\nfunction buildQueryParams(params, options) {\n  return sortQueryParams(params, options).toString();\n}\nconst NUMERIC_KEYS = new Set(['max-age', 's-maxage', 'stale-if-error', 'stale-while-revalidate']);\n\n/**\n *  Parses a string Cache-Control header value into an object with the following structure:\n *\n * ```ts\n * interface CacheControlValue {\n *   immutable?: boolean;\n *   'max-age'?: number;\n *   'must-revalidate'?: boolean;\n *   'must-understand'?: boolean;\n *   'no-cache'?: boolean;\n *   'no-store'?: boolean;\n *   'no-transform'?: boolean;\n *   'only-if-cached'?: boolean;\n *   private?: boolean;\n *   'proxy-revalidate'?: boolean;\n *   public?: boolean;\n *   's-maxage'?: number;\n *   'stale-if-error'?: number;\n *   'stale-while-revalidate'?: number;\n * }\n * ```\n * @method parseCacheControl\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param {string} header\n * @return {CacheControlValue}\n */\nfunction parseCacheControl(header) {\n  let key = '';\n  let value = '';\n  let isParsingKey = true;\n  const cacheControlValue = {};\n  function parseCacheControlValue(stringToParse) {\n    const parsedValue = Number.parseInt(stringToParse);\n    ( true && !(!Number.isNaN(parsedValue)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Invalid Cache-Control value, expected a number but got - ${stringToParse}`, !Number.isNaN(parsedValue)));\n    return parsedValue;\n  }\n  for (let i = 0; i < header.length; i++) {\n    const char = header.charAt(i);\n    if (char === ',') {\n      ( true && !(!isParsingKey || !NUMERIC_KEYS.has(key)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Invalid Cache-Control value, expected a value`, !isParsingKey || !NUMERIC_KEYS.has(key)));\n      ( true && !(i === 0 || header.charAt(i - 1) !== '=') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Invalid Cache-Control value, expected a value after \"=\" but got \",\"`, i === 0 || header.charAt(i - 1) !== '='));\n      isParsingKey = true;\n      // @ts-expect-error TS incorrectly thinks that optional keys must have a type that includes undefined\n      cacheControlValue[key] = NUMERIC_KEYS.has(key) ? parseCacheControlValue(value) : true;\n      key = '';\n      value = '';\n      continue;\n    } else if (char === '=') {\n      ( true && !(i + 1 !== header.length) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Invalid Cache-Control value, expected a value after \"=\"`, i + 1 !== header.length));\n      isParsingKey = false;\n    } else if (char === ' ' || char === `\\t` || char === `\\n`) {\n      continue;\n    } else if (isParsingKey) {\n      key += char;\n    } else {\n      value += char;\n    }\n    if (i === header.length - 1) {\n      // @ts-expect-error TS incorrectly thinks that optional keys must have a type that includes undefined\n      cacheControlValue[key] = NUMERIC_KEYS.has(key) ? parseCacheControlValue(value) : true;\n    }\n  }\n  return cacheControlValue;\n}\nfunction isStale(headers, expirationTime) {\n  // const age = headers.get('age');\n  // const cacheControl = parseCacheControl(headers.get('cache-control') || '');\n  // const expires = headers.get('expires');\n  // const lastModified = headers.get('last-modified');\n  const date = headers.get('date');\n  if (!date) {\n    return true;\n  }\n  const time = new Date(date).getTime();\n  const now = Date.now();\n  const deadline = time + expirationTime;\n  const result = now > deadline;\n  return result;\n}\n/**\n * A basic LifetimesService that can be added to the Store service.\n *\n * Determines staleness based on time since the request was last received from the API\n * using the `date` header.\n *\n * Invalidates any request for which `cacheOptions.types` was provided when a createRecord\n * request for that type is successful.\n *\n * This allows the Store's CacheHandler to determine if a request is expired and\n * should be refetched upon next request.\n *\n * The `Fetch` handler provided by `@ember-data/request/fetch` will automatically\n * add the `date` header to responses if it is not present.\n *\n * Note: Date headers do not have millisecond precision, so expiration times should\n * generally be larger than 1000ms.\n *\n * Usage:\n *\n * ```ts\n * import { LifetimesService } from '@ember-data/request-utils';\n * import DataStore from '@ember-data/store';\n *\n * // ...\n *\n * export class Store extends DataStore {\n *   constructor(args) {\n *     super(args);\n *     this.lifetimes = new LifetimesService({ apiCacheSoftExpires: 30_000, apiCacheHardExpires: 60_000 });\n *   }\n * }\n * ```\n *\n * @class LifetimesService\n * @public\n * @module @ember-data/request-utils\n */\nclass LifetimesService {\n  _getStore(store) {\n    let set = this._stores.get(store);\n    if (!set) {\n      set = {\n        invalidated: new Set(),\n        types: new Map()\n      };\n      this._stores.set(store, set);\n    }\n    return set;\n  }\n  constructor(config) {\n    this._stores = new WeakMap();\n    const _config = arguments.length === 1 ? config : arguments[1];\n    ( true && !(arguments.length === 1) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`Passing a Store to the LifetimesService is deprecated, please pass only a config instead.`, arguments.length === 1, {\n      id: 'ember-data:request-utils:lifetimes-service-store-arg',\n      since: {\n        enabled: '5.4',\n        available: '5.4'\n      },\n      for: '@ember-data/request-utils',\n      until: '6.0'\n    }));\n    ( true && !(_config) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You must pass a config to the LifetimesService`, _config));\n    ( true && !(typeof _config.apiCacheSoftExpires === 'number') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You must pass a apiCacheSoftExpires to the LifetimesService`, typeof _config.apiCacheSoftExpires === 'number'));\n    ( true && !(typeof _config.apiCacheHardExpires === 'number') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You must pass a apiCacheHardExpires to the LifetimesService`, typeof _config.apiCacheHardExpires === 'number'));\n    this.config = _config;\n  }\n\n  /**\n   * Invalidate a request by its identifier for a given store instance.\n   *\n   * While the store argument may seem redundant, the lifetimes service\n   * is designed to be shared across multiple stores / forks\n   * of the store.\n   *\n   * ```ts\n   * store.lifetimes.invalidateRequest(store, identifier);\n   * ```\n   *\n   * @method invalidateRequest\n   * @public\n   * @param {StableDocumentIdentifier} identifier\n   * @param {Store} store\n   */\n  invalidateRequest(identifier, store) {\n    this._getStore(store).invalidated.add(identifier.lid);\n  }\n\n  /**\n   * Invalidate all requests associated to a specific type\n   * for a given store instance.\n   *\n   * While the store argument may seem redundant, the lifetimes service\n   * is designed to be shared across multiple stores / forks\n   * of the store.\n   *\n   * This invalidation is done automatically when using this service\n   * for both the CacheHandler and the LegacyNetworkHandler.\n   *\n   * ```ts\n   * store.lifetimes.invalidateRequestsForType(store, 'person');\n   * ```\n   *\n   * @method invalidateRequestsForType\n   * @public\n   * @param {string} type\n   * @param {Store} store\n   */\n  invalidateRequestsForType(type, store) {\n    const storeCache = this._getStore(store);\n    const set = storeCache.types.get(type);\n    if (set) {\n      set.forEach(id => {\n        storeCache.invalidated.add(id);\n      });\n    }\n  }\n\n  /**\n   * Invoked when a request has been fulfilled from the configured request handlers.\n   * This is invoked by the CacheHandler for both foreground and background requests\n   * once the cache has been updated.\n   *\n   * Note, this is invoked by the CacheHandler regardless of whether\n   * the request has a cache-key.\n   *\n   * This method should not be invoked directly by consumers.\n   *\n   * @method didRequest\n   * @public\n   * @param {ImmutableRequestInfo} request\n   * @param {ImmutableResponse} response\n   * @param {Store} store\n   * @param {StableDocumentIdentifier | null} identifier\n   * @return {void}\n   */\n  didRequest(request, response, identifier, store) {\n    // if this is a successful createRecord request, invalidate the cacheKey for the type\n    if (request.op === 'createRecord') {\n      const statusNumber = response?.status ?? 0;\n      if (statusNumber >= 200 && statusNumber < 400) {\n        const types = new Set(request.records?.map(r => r.type));\n        types.forEach(type => {\n          this.invalidateRequestsForType(type, store);\n        });\n      }\n\n      // add this document's cacheKey to a map for all associated types\n      // it is recommended to only use this for queries\n    } else if (identifier && request.cacheOptions?.types?.length) {\n      const storeCache = this._getStore(store);\n      request.cacheOptions?.types.forEach(type => {\n        const set = storeCache.types.get(type);\n        if (set) {\n          set.add(identifier.lid);\n          storeCache.invalidated.delete(identifier.lid);\n        } else {\n          storeCache.types.set(type, new Set([identifier.lid]));\n        }\n      });\n    }\n  }\n\n  /**\n   * Invoked to determine if the request may be fulfilled from cache\n   * if possible.\n   *\n   * Note, this is only invoked by the CacheHandler if the request has\n   * a cache-key.\n   *\n   * If no cache entry is found or the entry is hard expired,\n   * the request will be fulfilled from the configured request handlers\n   * and the cache will be updated before returning the response.\n   *\n   * @method isHardExpired\n   * @public\n   * @param {StableDocumentIdentifier} identifier\n   * @param {Store} store\n   * @return {boolean} true if the request is considered hard expired\n   */\n  isHardExpired(identifier, store) {\n    // if we are explicitly invalidated, we are hard expired\n    const storeCache = this._getStore(store);\n    if (storeCache.invalidated.has(identifier.lid)) {\n      return true;\n    }\n    const cache = store.cache;\n    const cached = cache.peekRequest(identifier);\n    return !cached || !cached.response || isStale(cached.response.headers, this.config.apiCacheHardExpires);\n  }\n\n  /**\n   * Invoked if `isHardExpired` is false to determine if the request\n   * should be update behind the scenes if cache data is already available.\n   *\n   * Note, this is only invoked by the CacheHandler if the request has\n   * a cache-key.\n   *\n   * If true, the request will be fulfilled from cache while a backgrounded\n   * request is made to update the cache via the configured request handlers.\n   *\n   * @method isSoftExpired\n   * @public\n   * @param {StableDocumentIdentifier} identifier\n   * @param {Store} store\n   * @return {boolean} true if the request is considered soft expired\n   */\n  isSoftExpired(identifier, store) {\n    const cache = store.cache;\n    const cached = cache.peekRequest(identifier);\n    return !cached || !cached.response || isStale(cached.response.headers, this.config.apiCacheSoftExpires);\n  }\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/request-utils.d2e97183/node_modules/@ember-data/request-utils/index.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/request.7c2e6d52/node_modules/@ember-data/request/context-g9X123os.js":
/*!***************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/request.7c2e6d52/node_modules/@ember-data/request/context-g9X123os.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ _classPrivateFieldBase),\n/* harmony export */   a: () => (/* binding */ assertValidRequest),\n/* harmony export */   b: () => (/* binding */ _classPrivateFieldKey),\n/* harmony export */   c: () => (/* binding */ cloneResponseProperties),\n/* harmony export */   d: () => (/* binding */ createDeferred),\n/* harmony export */   e: () => (/* binding */ executeNextHandler),\n/* harmony export */   u: () => (/* binding */ upgradePromise)\n/* harmony export */ });\n/* harmony import */ var _warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @warp-drive/core-types/request */ \"../rewritten-packages/@warp-drive/core-types.f90747f3/node_modules/@warp-drive/core-types/request.js\");\n\nfunction _classPrivateFieldBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\nconst BODY_TYPES = {\n  type: 'string',\n  klass: ['Blob', 'ArrayBuffer', 'TypedArray', 'DataView', 'FormData', 'URLSearchParams', 'ReadableStream']\n};\nconst ValidKeys = new Map([['records', 'array'], ['data', 'json'], ['body', BODY_TYPES], ['disableTestWaiter', 'boolean'], ['options', 'object'], ['cacheOptions', 'object'], ['op', 'string'], ['store', 'object'], ['url', 'string'], ['cache', ['default', 'force-cache', 'no-cache', 'no-store', 'only-if-cached', 'reload']], ['credentials', ['include', 'omit', 'same-origin']], ['destination', ['', 'object', 'audio', 'audioworklet', 'document', 'embed', 'font', 'frame', 'iframe', 'image', 'manifest', 'paintworklet', 'report', 'script', 'sharedworker', 'style', 'track', 'video', 'worker', 'xslt']], ['headers', 'headers'], ['integrity', 'string'], ['keepalive', 'boolean'], ['method', ['GET', 'PUT', 'PATCH', 'DELETE', 'POST', 'OPTIONS']], ['mode', ['same-origin', 'cors', 'navigate', 'no-cors']], ['redirect', ['error', 'follow', 'manual']], ['referrer', 'string'], ['signal', 'AbortSignal'], ['controller', 'AbortController'], ['referrerPolicy', ['', 'same-origin', 'no-referrer', 'no-referrer-when-downgrade', 'origin', 'origin-when-cross-origin', 'strict-origin', 'strict-origin-when-cross-origin', 'unsafe-url']]]);\nconst IS_FROZEN = Symbol('FROZEN');\nconst IS_COLLECTION = Symbol.for('Collection');\nfunction freezeHeaders(headers) {\n  headers.delete = headers.set = headers.append = () => {\n    throw new Error(`Cannot Mutate Immutatable Headers, use headers.clone to get a copy`);\n  };\n  upgradeHeaders(headers);\n  return headers;\n}\nfunction deepFreeze(value) {\n  if (value && value[IS_FROZEN]) {\n    return value;\n  }\n  const _type = typeof value;\n  switch (_type) {\n    case 'boolean':\n    case 'string':\n    case 'number':\n    case 'symbol':\n    case 'undefined':\n    case 'bigint':\n      return value;\n    case 'function':\n      throw new Error(`Cannot deep-freeze a function`);\n    case 'object':\n      {\n        const _niceType = niceTypeOf(value);\n        switch (_niceType) {\n          case 'array':\n            {\n              if (value[IS_COLLECTION]) {\n                return value;\n              }\n              const arr = value.map(deepFreeze);\n              arr[IS_FROZEN] = true;\n              return Object.freeze(arr);\n            }\n          case 'null':\n            return value;\n          case 'object':\n            Object.keys(value).forEach(key => {\n              try {\n                value[key] = deepFreeze(value[key]);\n              } catch {\n                // continue\n              }\n            });\n            value[IS_FROZEN] = true;\n            return Object.freeze(value);\n          case 'headers':\n            return freezeHeaders(value);\n          case 'Collection':\n          case 'Store':\n          case 'AbortSignal':\n            return value;\n          case 'date':\n          case 'map':\n          case 'set':\n          case 'error':\n          case 'stream':\n          default:\n            // eslint-disable-next-line no-console\n            // console.log(`Cannot deep-freeze ${_niceType}`);\n            return value;\n        }\n      }\n  }\n}\nfunction isMaybeContext(request) {\n  if (request && typeof request === 'object') {\n    const keys = Object.keys(request);\n    if (keys.length === 1 && keys[0] === 'request') {\n      return true;\n    }\n  }\n  return false;\n}\nfunction niceTypeOf(v) {\n  if (v === null) {\n    return 'null';\n  }\n  if (typeof v === 'string') {\n    return v ? 'non-empty-string' : 'empty-string';\n  }\n  if (!v) {\n    return typeof v;\n  }\n  if (Array.isArray(v)) {\n    return 'array';\n  }\n  if (v instanceof Date) {\n    return 'date';\n  }\n  if (v instanceof Map) {\n    return 'map';\n  }\n  if (v instanceof Set) {\n    return 'set';\n  }\n  if (v instanceof Error) {\n    return 'error';\n  }\n  if (v instanceof ReadableStream || v instanceof WritableStream || v instanceof TransformStream) {\n    return 'stream';\n  }\n  if (v instanceof Headers) {\n    return 'headers';\n  }\n  if (typeof v === 'object' && v.constructor && v.constructor.name !== 'Object') {\n    return v.constructor.name;\n  }\n  return typeof v;\n}\nfunction validateKey(key, value, errors) {\n  const schema = ValidKeys.get(key);\n  if (!schema && !IgnoredKeys.has(key)) {\n    errors.push(`InvalidKey: '${key}'`);\n    return;\n  }\n  if (schema) {\n    if (schema === BODY_TYPES) {\n      if (typeof value === 'string' || value instanceof ReadableStream) {\n        return;\n      }\n      let type = niceTypeOf(value);\n      if (schema.klass.includes(type)) {\n        return;\n      }\n      errors.push(`InvalidValue: key 'body' should be a string or one of '${schema.klass.join(\"', '\")}', received ${'<a value of type ' + niceTypeOf(value) + '>'}`);\n      return;\n    }\n    if (Array.isArray(schema)) {\n      if (!schema.includes(value)) {\n        errors.push(`InvalidValue: key ${key} should be a one of '${schema.join(\"', '\")}', received ${typeof value === 'string' ? value : '<a value of type ' + niceTypeOf(value) + '>'}`);\n      }\n      return;\n    } else if (schema === 'json') {\n      try {\n        JSON.stringify(value);\n      } catch (e) {\n        errors.push(`InvalidValue: key ${key} should be a JSON serializable value, but failed to serialize with Error - ${e.message}`);\n      }\n      return;\n    } else if (schema === 'headers') {\n      if (!(value instanceof Headers)) {\n        errors.push(`InvalidValue: key ${key} should be an instance of Headers, received ${niceTypeOf(value)}`);\n      }\n      return;\n    } else if (schema === 'record') {\n      const _type = typeof value;\n      // record must extend plain object or Object.create(null)\n      if (!value || _type !== 'object' || value.constructor && value.constructor !== Object) {\n        errors.push(`InvalidValue: key ${key} should be a dictionary of string keys to string values, received ${niceTypeOf(value)}`);\n        return;\n      }\n      const keys = Object.keys(value);\n      keys.forEach(k => {\n        let v = value[k];\n        if (typeof k !== 'string') {\n          errors.push(`\\tThe key ${String(k)} on ${key} should be a string key`);\n        } else if (typeof v !== 'string') {\n          errors.push(`\\tThe value of ${key}.${k} should be a string not ${niceTypeOf(v)}`);\n        }\n      });\n      return;\n    } else if (schema === 'string') {\n      if (typeof value !== 'string' || value.length === 0) {\n        errors.push(`InvalidValue: key ${key} should be a non-empty string, received ${typeof value === 'string' ? \"''\" : typeof value}`);\n      }\n      return;\n    } else if (schema === 'object') {\n      if (!value || Array.isArray(value) || typeof value !== 'object') {\n        errors.push(`InvalidValue: key ${key} should be an object`);\n      }\n      return;\n    } else if (schema === 'boolean') {\n      if (typeof value !== 'boolean') {\n        errors.push(`InvalidValue: key ${key} should be a boolean, received ${typeof value}`);\n      }\n      return;\n    } else if (schema === 'array') {\n      if (!Array.isArray(value)) {\n        errors.push(`InvalidValue: key ${key} should be an array, received ${typeof value}`);\n      }\n      return;\n    }\n  }\n}\nconst IgnoredKeys = new Set([]);\nfunction assertValidRequest(request, isTopLevel) {\n  {\n    // handle basic shape\n    if (!request) {\n      throw new Error(`Expected ${isTopLevel ? 'RequestManager.request' : 'next'}(<request>) to be called with a request, but none was provided.`);\n    }\n    if (Array.isArray(request) || typeof request !== 'object') {\n      throw new Error(`The \\`request\\` passed to \\`${isTopLevel ? 'RequestManager.request' : 'next'}(<request>)\\` should be an object, received \\`${niceTypeOf(request)}\\``);\n    }\n    if (Object.keys(request).length === 0) {\n      throw new Error(`The \\`request\\` passed to \\`${isTopLevel ? 'RequestManager.request' : 'next'}(<request>)\\` was empty (\\`{}\\`). Requests need at least one valid key.`);\n    }\n\n    // handle accidentally passing context entirely\n    if (request instanceof Context) {\n      throw new Error(`Expected a request passed to \\`${isTopLevel ? 'RequestManager.request' : 'next'}(<request>)\\` but received the previous handler's context instead`);\n    }\n    // handle Object.assign({}, context);\n    if (isMaybeContext(request)) {\n      throw new Error(`Expected a request passed to \\`${isTopLevel ? 'RequestManager.request' : 'next'}(<request>)\\` but received an object with a request key instead.`);\n    }\n\n    // handle schema\n    const keys = Object.keys(request);\n    const validationErrors = [];\n    const isLegacyRequest = Boolean('op' in request && !request.url);\n    keys.forEach(key => {\n      if (isLegacyRequest && key === 'data') {\n        return;\n      }\n      validateKey(key, request[key], validationErrors);\n    });\n    if (validationErrors.length) {\n      const error = new Error(`Invalid Request passed to \\`${isTopLevel ? 'RequestManager.request' : 'next'}(<request>)\\`.\\n\\nThe following issues were found:\\n\\n\\t${validationErrors.join('\\n\\t')}`);\n      error.errors = validationErrors;\n      throw error;\n    }\n  }\n}\nfunction curryFuture(owner, inbound, outbound) {\n  owner.setStream(inbound.getStream());\n  inbound.then(doc => {\n    const document = {\n      [_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_0__.STRUCTURED]: true,\n      request: owner.request,\n      response: doc.response,\n      content: doc.content\n    };\n    outbound.resolve(document);\n  }, error => {\n    if (isDoc(error)) {\n      owner.setStream(owner.god.stream);\n    }\n    if (!error || !(error instanceof Error)) {\n      try {\n        throw new Error(error ? error : `Request Rejected with an Unknown Error`);\n      } catch (e) {\n        if (error && typeof error === 'object') {\n          Object.assign(e, error);\n          e.message = error.message || `Request Rejected with an Unknown Error`;\n        }\n        error = e;\n      }\n    }\n    error[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_0__.STRUCTURED] = true;\n    error.request = owner.request;\n    error.response = owner.getResponse();\n    error.error = error.error || error.message;\n    outbound.reject(error);\n  });\n  return outbound.promise;\n}\nfunction isDoc(doc) {\n  return doc && doc[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_0__.STRUCTURED] === true;\n}\nfunction enhanceReason(reason) {\n  return new DOMException(reason || 'The user aborted a request.', 'AbortError');\n}\nfunction handleOutcome(owner, inbound, outbound) {\n  inbound.then(content => {\n    if (owner.controller.signal.aborted) {\n      // the next function did not respect the signal, we handle it here\n      outbound.reject(enhanceReason(owner.controller.signal.reason));\n      return;\n    }\n    if (isDoc(content)) {\n      owner.setStream(owner.god.stream);\n      content = content.content;\n    }\n    const document = {\n      [_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_0__.STRUCTURED]: true,\n      request: owner.request,\n      response: owner.getResponse(),\n      content\n    };\n    outbound.resolve(document);\n  }, error => {\n    if (isDoc(error)) {\n      owner.setStream(owner.god.stream);\n    }\n    if (!error) {\n      try {\n        throw new Error(`Request Rejected with an Unknown Error`);\n      } catch (e) {\n        error = e;\n      }\n    }\n    error[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_0__.STRUCTURED] = true;\n    error.request = owner.request;\n    error.response = owner.getResponse();\n    error.error = error.error || error.message;\n    outbound.reject(error);\n  });\n  return outbound.promise;\n}\nfunction executeNextHandler(wares, request, i, god) {\n  {\n    if (i === wares.length) {\n      throw new Error(`No handler was able to handle this request.`);\n    }\n    assertValidRequest(request, false);\n  }\n  const owner = new ContextOwner(request, god);\n  function next(r) {\n    owner.nextCalled++;\n    return executeNextHandler(wares, r, i + 1, god);\n  }\n  const context = new Context(owner);\n  let outcome;\n  try {\n    outcome = wares[i].request(context, next);\n    {\n      if (!outcome || !(outcome instanceof Promise) && !(typeof outcome === 'object' && 'then' in outcome)) {\n        // eslint-disable-next-line no-console\n        console.log({\n          request,\n          handler: wares[i],\n          outcome\n        });\n        if (outcome === undefined) {\n          throw new Error(`Expected handler.request to return a promise, instead received undefined.`);\n        }\n        throw new Error(`Expected handler.request to return a promise, instead received a synchronous value.`);\n      }\n    }\n  } catch (e) {\n    outcome = Promise.reject(e);\n  }\n  const future = createFuture(owner);\n  if (isFuture(outcome)) {\n    return curryFuture(owner, outcome, future);\n  }\n  return handleOutcome(owner, outcome, future);\n}\nfunction isFuture(maybe) {\n  return Boolean(maybe && maybe instanceof Promise && maybe[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_0__.IS_FUTURE] === true);\n}\nfunction createDeferred() {\n  let resolve;\n  let reject;\n  const promise = new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  return {\n    resolve,\n    reject,\n    promise\n  };\n}\nfunction upgradePromise(promise, future) {\n  promise[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_0__.IS_FUTURE] = true;\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  promise.getStream = future.getStream;\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  promise.abort = future.abort;\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  promise.onFinalize = future.onFinalize;\n  return promise;\n}\nfunction createFuture(owner) {\n  const deferred = createDeferred();\n  let {\n    promise\n  } = deferred;\n  let cbs;\n  promise = promise.finally(() => {\n    owner.resolveStream();\n    if (cbs) {\n      cbs.forEach(cb => cb());\n    }\n  });\n  promise.onFinalize = fn => {\n    cbs = cbs || [];\n    cbs.push(fn);\n  };\n  promise[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_0__.IS_FUTURE] = true;\n  promise.getStream = () => {\n    return owner.getStream();\n  };\n  promise.abort = reason => {\n    owner.abort(enhanceReason(reason));\n  };\n  deferred.promise = promise;\n  return deferred;\n}\nfunction upgradeHeaders(headers) {\n  headers.clone = () => {\n    return new Headers(headers);\n  };\n  headers.toJSON = () => {\n    return Array.from(headers);\n  };\n  return headers;\n}\nfunction cloneResponseProperties(response) {\n  const {\n    headers,\n    ok,\n    redirected,\n    status,\n    statusText,\n    type,\n    url\n  } = response;\n  upgradeHeaders(headers);\n  return {\n    headers: headers,\n    ok,\n    redirected,\n    status,\n    statusText,\n    type,\n    url\n  };\n}\nclass ContextOwner {\n  constructor(request, god) {\n    this.hasSetStream = false;\n    this.hasSetResponse = false;\n    this.hasSubscribers = false;\n    this.stream = createDeferred();\n    this.response = null;\n    this.nextCalled = 0;\n    this.requestId = god.id;\n    this.controller = request.controller || god.controller;\n    if (request.controller) {\n      if (request.controller !== god.controller) {\n        god.controller.signal.addEventListener('abort', () => {\n          this.controller.abort(god.controller.signal.reason);\n        });\n      }\n      delete request.controller;\n    }\n    let enhancedRequest = Object.assign({\n      signal: this.controller.signal\n    }, request);\n    {\n      if (!request?.cacheOptions?.[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_0__.SkipCache]) {\n        request = deepFreeze(request);\n        enhancedRequest = deepFreeze(enhancedRequest);\n      }\n    }\n    this.enhancedRequest = enhancedRequest;\n    this.request = request;\n    this.god = god;\n    this.stream.promise = this.stream.promise.then(stream => {\n      if (this.god.stream === stream && this.hasSubscribers) {\n        this.god.stream = null;\n      }\n      return stream;\n    });\n  }\n  getResponse() {\n    if (this.hasSetResponse) {\n      return this.response;\n    }\n    if (this.nextCalled === 1) {\n      return this.god.response;\n    }\n    return null;\n  }\n  getStream() {\n    this.hasSubscribers = true;\n    return this.stream.promise;\n  }\n  abort(reason) {\n    this.controller.abort(reason);\n  }\n  setStream(stream) {\n    if (!this.hasSetStream) {\n      this.hasSetStream = true;\n      if (!(stream instanceof Promise)) {\n        this.god.stream = stream;\n      }\n      // @ts-expect-error\n      this.stream.resolve(stream);\n    }\n  }\n  resolveStream() {\n    this.setStream(this.nextCalled === 1 ? this.god.stream : null);\n  }\n  setResponse(response) {\n    if (this.hasSetResponse) {\n      {\n        throw new Error(`Cannot setResponse when a response has already been set`);\n      }\n      return;\n    }\n    this.hasSetResponse = true;\n    if (response instanceof Response) {\n      let responseData = cloneResponseProperties(response);\n      {\n        responseData = deepFreeze(responseData);\n      }\n      this.response = responseData;\n      this.god.response = responseData;\n    } else {\n      this.response = response;\n      this.god.response = response;\n    }\n  }\n}\nvar _owner = /*#__PURE__*/_classPrivateFieldKey(\"owner\");\nclass Context {\n  constructor(owner) {\n    Object.defineProperty(this, _owner, {\n      writable: true,\n      value: void 0\n    });\n    this.id = owner.requestId;\n    _classPrivateFieldBase(this, _owner)[_owner] = owner;\n    this.request = owner.enhancedRequest;\n  }\n  setStream(stream) {\n    _classPrivateFieldBase(this, _owner)[_owner].setStream(stream);\n  }\n  setResponse(response) {\n    _classPrivateFieldBase(this, _owner)[_owner].setResponse(response);\n  }\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/request.7c2e6d52/node_modules/@ember-data/request/context-g9X123os.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/request.7c2e6d52/node_modules/@ember-data/request/fetch.js":
/*!****************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/request.7c2e6d52/node_modules/@ember-data/request/fetch.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Fetch)\n/* harmony export */ });\n/* harmony import */ var _context_g9X123os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context-g9X123os */ \"../rewritten-packages/@ember-data/request.7c2e6d52/node_modules/@ember-data/request/context-g9X123os.js\");\n\n\n/**\n * A basic Fetch Handler which converts a request into a\n * `fetch` call presuming the response to be `json`.\n *\n * ```ts\n * import Fetch from '@ember-data/request/fetch';\n *\n * manager.use([Fetch]);\n * ```\n *\n * @module @ember-data/request/fetch\n * @main @ember-data/request/fetch\n */\n// Lazily close over fetch to avoid breaking Mirage\nconst _fetch = typeof fetch !== 'undefined' ? (...args) => fetch(...args) : typeof FastBoot !== 'undefined' ? (...args) => FastBoot.require('node-fetch')(...args) : () => {\n  throw new Error('No Fetch Implementation Found');\n};\n\n// clones a response in a way that should still\n// allow it to stream\nfunction cloneResponse(response, overrides) {\n  const props = (0,_context_g9X123os__WEBPACK_IMPORTED_MODULE_0__.c)(response);\n  return new Response(response.body, Object.assign(props, overrides));\n}\nlet IS_MAYBE_MIRAGE = () => false;\n{\n  IS_MAYBE_MIRAGE = () => Boolean(typeof window !== 'undefined' && window.server?.pretender);\n}\nconst MUTATION_OPS = new Set(['updateRecord', 'createRecord', 'deleteRecord']);\nconst ERROR_STATUS_CODE_FOR = new Map([[400, 'Bad Request'], [401, 'Unauthorized'], [402, 'Payment Required'], [403, 'Forbidden'], [404, 'Not Found'], [405, 'Method Not Allowed'], [406, 'Not Acceptable'], [407, 'Proxy Authentication Required'], [408, 'Request Timeout'], [409, 'Conflict'], [410, 'Gone'], [411, 'Length Required'], [412, 'Precondition Failed'], [413, 'Payload Too Large'], [414, 'URI Too Long'], [415, 'Unsupported Media Type'], [416, 'Range Not Satisfiable'], [417, 'Expectation Failed'], [419, 'Page Expired'], [420, 'Enhance Your Calm'], [421, 'Misdirected Request'], [422, 'Unprocessable Entity'], [423, 'Locked'], [424, 'Failed Dependency'], [425, 'Too Early'], [426, 'Upgrade Required'], [428, 'Precondition Required'], [429, 'Too Many Requests'], [430, 'Request Header Fields Too Large'], [431, 'Request Header Fields Too Large'], [450, 'Blocked By Windows Parental Controls'], [451, 'Unavailable For Legal Reasons'], [500, 'Internal Server Error'], [501, 'Not Implemented'], [502, 'Bad Gateway'], [503, 'Service Unavailable'], [504, 'Gateway Timeout'], [505, 'HTTP Version Not Supported'], [506, 'Variant Also Negotiates'], [507, 'Insufficient Storage'], [508, 'Loop Detected'], [509, 'Bandwidth Limit Exceeded'], [510, 'Not Extended'], [511, 'Network Authentication Required']]);\n\n/**\n * A basic handler which converts a request into a\n * `fetch` call presuming the response to be `json`.\n *\n * ```ts\n * import Fetch from '@ember-data/request/fetch';\n *\n * manager.use([Fetch]);\n * ```\n *\n * @class Fetch\n * @public\n */\nconst Fetch = {\n  async request(context) {\n    let response;\n    try {\n      response = await _fetch(context.request.url, context.request);\n    } catch (e) {\n      if (e instanceof DOMException && e.name === 'AbortError') {\n        e.statusText = 'Aborted';\n        e.status = 20;\n        e.isRequestError = true;\n      } else {\n        e.statusText = 'Unknown Network Error';\n        e.status = 0;\n        e.isRequestError = true;\n      }\n      throw e;\n    }\n    const isError = !response.ok || response.status >= 400;\n    const op = context.request.op;\n    const isMutationOp = Boolean(op && MUTATION_OPS.has(op));\n    if (!isError && !isMutationOp && response.status !== 204 && !response.headers.has('date')) {\n      if (IS_MAYBE_MIRAGE()) {\n        response.headers.set('date', new Date().toUTCString());\n      } else {\n        const headers = new Headers(response.headers);\n        headers.set('date', new Date().toUTCString());\n        response = cloneResponse(response, {\n          headers\n        });\n      }\n    }\n    context.setResponse(response);\n\n    // if we are an error, we will want to throw\n    if (isError) {\n      const text = await response.text();\n      let errorPayload;\n      try {\n        errorPayload = JSON.parse(text);\n      } catch {\n        // void;\n      }\n      // attempt errors discovery\n      const errors = Array.isArray(errorPayload) ? errorPayload : isDict(errorPayload) && Array.isArray(errorPayload.errors) ? errorPayload.errors : null;\n      const statusText = response.statusText || ERROR_STATUS_CODE_FOR.get(response.status) || 'Unknown Request Error';\n      const msg = `[${response.status} ${statusText}] ${context.request.method ?? 'GET'} (${response.type}) - ${response.url}`;\n      const error = errors ? new AggregateError(errors, msg) : new Error(msg);\n      error.status = response.status;\n      error.statusText = statusText;\n      error.isRequestError = true;\n      error.code = error.status;\n      error.name = error.statusText.replaceAll(' ', '') + 'Error';\n      error.content = errorPayload;\n      throw error;\n    } else {\n      return response.status === 204 ? null : response.json();\n    }\n  }\n};\nfunction isDict(v) {\n  return v !== null && typeof v === 'object';\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/request.7c2e6d52/node_modules/@ember-data/request/fetch.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/request.7c2e6d52/node_modules/@ember-data/request/index.js":
/*!****************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/request.7c2e6d52/node_modules/@ember-data/request/index.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDeferred: () => (/* reexport safe */ _context_g9X123os__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   \"default\": () => (/* binding */ RequestManager)\n/* harmony export */ });\n/* harmony import */ var _context_g9X123os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context-g9X123os */ \"../rewritten-packages/@ember-data/request.7c2e6d52/node_modules/@ember-data/request/context-g9X123os.js\");\n/* harmony import */ var _embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../../@embroider/macros/src/addon/es-compat2 */ \"../../@embroider/macros/src/addon/es-compat2.js\");\n\n\n\nlet REQ_ID = 0;\n/**\n * ```js\n * import RequestManager from '@ember-data/request';\n * ```\n *\n * A RequestManager provides a request/response flow in which configured\n * handlers are successively given the opportunity to handle, modify, or\n * pass-along a request.\n *\n * ```ts\n * interface RequestManager {\n *   request<T>(req: RequestInfo): Future<T>;\n * }\n * ```\n *\n * For example:\n *\n * ```ts\n * import RequestManager from '@ember-data/request';\n * import Fetch from '@ember-data/request/fetch';\n * import Auth from 'ember-simple-auth/ember-data-handler';\n * import Config from './config';\n *\n * const { apiUrl } = Config;\n *\n * // ... create manager\n * const manager = new RequestManager();\n * manager.use([Auth, Fetch]);\n *\n * // ... execute a request\n * const response = await manager.request({\n *   url: `${apiUrl}/users`\n * });\n * ```\n *\n * ### Futures\n *\n * The return value of `manager.request` is a `Future`, which allows\n * access to limited information about the request while it is still\n * pending and fulfills with the final state when the request completes.\n *\n * A `Future` is cancellable via `abort`.\n *\n * Handlers may optionally expose a `ReadableStream` to the `Future` for\n * streaming data; however, when doing so the future should not resolve\n * until the response stream is fully read.\n *\n * ```ts\n * interface Future<T> extends Promise<StructuredDocument<T>> {\n *   abort(): void;\n *\n *   async getStream(): ReadableStream | null;\n * }\n * ```\n *\n * ### StructuredDocuments\n *\n * A Future resolves with a `StructuredDataDocument` or rejects with a `StructuredErrorDocument`.\n *\n * ```ts\n * interface StructuredDataDocument<T> {\n *   request: ImmutableRequestInfo;\n *   response: ImmutableResponseInfo;\n *   content: T;\n * }\n * interface StructuredErrorDocument extends Error {\n *   request: ImmutableRequestInfo;\n *   response: ImmutableResponseInfo;\n *   error: string | object;\n * }\n * type StructuredDocument<T> = StructuredDataDocument<T> | StructuredErrorDocument;\n * ```\n *\n * @class RequestManager\n * @public\n */\nvar _handlers = /*#__PURE__*/(0,_context_g9X123os__WEBPACK_IMPORTED_MODULE_0__.b)(\"handlers\");\nclass RequestManager {\n  constructor(options) {\n    Object.defineProperty(this, _handlers, {\n      writable: true,\n      value: []\n    });\n    Object.assign(this, options);\n    this._pending = new Map();\n  }\n\n  /**\n   * Register a handler to use for primary cache intercept.\n   *\n   * Only one such handler may exist. If using the same\n   * RequestManager as the Store instance the Store\n   * registers itself as a Cache handler.\n   *\n   * @method useCache\n   * @public\n   * @param {Handler[]} cacheHandler\n   * @return {void}\n   */\n  useCache(cacheHandler) {\n    {\n      if (this._hasCacheHandler) {\n        throw new Error(`\\`RequestManager.useCache(<handler>)\\` May only be invoked once.`);\n      }\n      if (Object.isFrozen((0,_context_g9X123os__WEBPACK_IMPORTED_MODULE_0__._)(this, _handlers)[_handlers])) {\n        throw new Error(`\\`RequestManager.useCache(<handler>)\\` May only be invoked prior to any request having been made.`);\n      }\n      this._hasCacheHandler = true;\n    }\n    (0,_context_g9X123os__WEBPACK_IMPORTED_MODULE_0__._)(this, _handlers)[_handlers].unshift(cacheHandler);\n  }\n\n  /**\n   * Register handler(s) to use when a request is issued.\n   *\n   * Handlers will be invoked in the order they are registered.\n   * Each Handler is given the opportunity to handle the request,\n   * curry the request, or pass along a modified request.\n   *\n   * @method use\n   * @public\n   * @param {Handler[]} newHandlers\n   * @return {void}\n   */\n  use(newHandlers) {\n    const handlers = (0,_context_g9X123os__WEBPACK_IMPORTED_MODULE_0__._)(this, _handlers)[_handlers];\n    {\n      if (Object.isFrozen(handlers)) {\n        throw new Error(`Cannot add a Handler to a RequestManager after a request has been made`);\n      }\n      if (!Array.isArray(newHandlers)) {\n        throw new Error(`\\`RequestManager.use(<Handler[]>)\\` expects an array of handlers, but was called with \\`${typeof newHandlers}\\``);\n      }\n      newHandlers.forEach((handler, index) => {\n        if (!handler || typeof handler !== 'object' || typeof handler.request !== 'function') {\n          throw new Error(`\\`RequestManager.use(<Handler[]>)\\` expected to receive an array of handler objects with request methods, by the handler at index ${index} does not conform.`);\n        }\n      });\n    }\n    handlers.push(...newHandlers);\n  }\n\n  /**\n   * Issue a Request.\n   *\n   * Returns a Future that fulfills with a StructuredDocument\n   *\n   * @method request\n   * @public\n   * @param {RequestInfo} request\n   * @return {Future}\n   */\n  request(request) {\n    const handlers = (0,_context_g9X123os__WEBPACK_IMPORTED_MODULE_0__._)(this, _handlers)[_handlers];\n    {\n      if (!Object.isFrozen(handlers)) {\n        Object.freeze(handlers);\n      }\n      (0,_context_g9X123os__WEBPACK_IMPORTED_MODULE_0__.a)(request, true);\n    }\n    const controller = request.controller || new AbortController();\n    if (request.controller) {\n      delete request.controller;\n    }\n    const promise = (0,_context_g9X123os__WEBPACK_IMPORTED_MODULE_0__.e)(handlers, request, 0, {\n      controller,\n      response: null,\n      stream: null,\n      id: REQ_ID++\n    });\n    {\n      if (!request.disableTestWaiter) {\n        const {\n          waitForPromise\n        } = (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(__webpack_require__(/*! @ember/test-waiters */ \"../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/index.js\"));\n        const newPromise = waitForPromise(promise);\n        return (0,_context_g9X123os__WEBPACK_IMPORTED_MODULE_0__.u)(newPromise, promise);\n      }\n    }\n    return promise;\n  }\n  static create(options) {\n    return new this(options);\n  }\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/request.7c2e6d52/node_modules/@ember-data/request/index.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/-private.js":
/*!*************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/-private.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BooleanTransform: () => (/* reexport safe */ _string_A02hFTMo__WEBPACK_IMPORTED_MODULE_1__.B),\n/* harmony export */   DateTransform: () => (/* reexport safe */ _string_A02hFTMo__WEBPACK_IMPORTED_MODULE_1__.D),\n/* harmony export */   EmbeddedRecordsMixin: () => (/* reexport safe */ _embedded_records_mixin_HTw8JJT1__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   NumberTransform: () => (/* reexport safe */ _string_A02hFTMo__WEBPACK_IMPORTED_MODULE_1__.N),\n/* harmony export */   StringTransform: () => (/* reexport safe */ _string_A02hFTMo__WEBPACK_IMPORTED_MODULE_1__.S),\n/* harmony export */   Transform: () => (/* reexport safe */ _string_A02hFTMo__WEBPACK_IMPORTED_MODULE_1__.T),\n/* harmony export */   coerceId: () => (/* reexport safe */ _utils_N1ERF6HN__WEBPACK_IMPORTED_MODULE_2__.c)\n/* harmony export */ });\n/* harmony import */ var _embedded_records_mixin_HTw8JJT1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./embedded-records-mixin-HTw8JJT1 */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/embedded-records-mixin-HTw8JJT1.js\");\n/* harmony import */ var _string_A02hFTMo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./string-A02hFTMo */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/string-A02hFTMo.js\");\n/* harmony import */ var _utils_N1ERF6HN__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils-N1ERF6HN */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/utils-N1ERF6HN.js\");\n\n\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/-private.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/embedded-records-mixin-HTw8JJT1.js":
/*!************************************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/embedded-records-mixin-HTw8JJT1.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: () => (/* binding */ embeddedRecordsMixin)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_object_mixin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/object/mixin */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject%2Fmixin&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object_mixin__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_object_mixin__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/string */ \"../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/index.js\");\n\n\n\n\n/**\n  @module @ember-data/serializer/rest\n*/\n\n/**\n  ## Using Embedded Records\n\n  `EmbeddedRecordsMixin` supports serializing embedded records.\n\n  To set up embedded records, include the mixin when extending a serializer,\n  then define and configure embedded (model) relationships.\n\n  Note that embedded records will serialize with the serializer for their model instead of the serializer in which they are defined.\n\n  Note also that this mixin does not work with JSONAPISerializer because the JSON:API specification does not describe how to format embedded resources.\n\n  Below is an example of a per-type serializer (`post` type).\n\n  ```app/serializers/post.js\n  import RESTSerializer, { EmbeddedRecordsMixin } from '@ember-data/serializer/rest';\n\n  export default class PostSerializer extends RESTSerializer.extend(EmbeddedRecordsMixin) {\n    attrs = {\n      author: { embedded: 'always' },\n      comments: { serialize: 'ids' }\n    }\n  }\n  ```\n  Note that this use of `{ embedded: 'always' }` is unrelated to\n  the `{ embedded: 'always' }` that is defined as an option on `attr` as part of\n  defining a model while working with the `ActiveModelSerializer`.  Nevertheless,\n  using `{ embedded: 'always' }` as an option to `attr` is not a valid way to set up\n  embedded records.\n\n  The `attrs` option for a resource `{ embedded: 'always' }` is shorthand for:\n\n  ```js\n  {\n    serialize: 'records',\n    deserialize: 'records'\n  }\n  ```\n\n  ### Configuring Attrs\n\n  A resource's `attrs` option may be set to use `ids`, `records` or false for the\n  `serialize`  and `deserialize` settings.\n\n  The `attrs` property can be set on the `ApplicationSerializer` or a per-type\n  serializer.\n\n  In the case where embedded JSON is expected while extracting a payload (reading)\n  the setting is `deserialize: 'records'`, there is no need to use `ids` when\n  extracting as that is the default behaviour without this mixin if you are using\n  the vanilla `EmbeddedRecordsMixin`. Likewise, to embed JSON in the payload while\n  serializing `serialize: 'records'` is the setting to use. There is an option of\n  not embedding JSON in the serialized payload by using `serialize: 'ids'`. If you\n  do not want the relationship sent at all, you can use `serialize: false`.\n\n\n  ### EmbeddedRecordsMixin defaults\n  If you do not overwrite `attrs` for a specific relationship, the `EmbeddedRecordsMixin`\n  will behave in the following way:\n\n  BelongsTo: `{ serialize: 'id', deserialize: 'id' }`\n  HasMany:   `{ serialize: false, deserialize: 'ids' }`\n\n  ### Model Relationships\n\n  Embedded records must have a model defined to be extracted and serialized. Note that\n  when defining any relationships on your model such as `belongsTo` and `hasMany`, you\n  should not both specify `async: true` and also indicate through the serializer's\n  `attrs` attribute that the related model should be embedded for deserialization.\n  If a model is declared embedded for deserialization (`embedded: 'always'` or `deserialize: 'records'`),\n  then do not use `async: true`.\n\n  To successfully extract and serialize embedded records the model relationships\n  must be set up correctly. See the\n  [defining relationships](https://guides.emberjs.com/current/models/relationships)\n  section of the **Defining Models** guide page.\n\n  Records without an `id` property are not considered embedded records, model\n  instances must have an `id` property to be used with Ember Data.\n\n  ### Example JSON payloads, Models and Serializers\n\n  **When customizing a serializer it is important to grok what the customizations\n  are. Please read the docs for the methods this mixin provides, in case you need\n  to modify it to fit your specific needs.**\n\n  For example, review the docs for each method of this mixin:\n  * [normalize](/ember-data/release/classes/EmbeddedRecordsMixin/methods/normalize?anchor=normalize)\n  * [serializeBelongsTo](/ember-data/release/classes/EmbeddedRecordsMixin/methods/serializeBelongsTo?anchor=serializeBelongsTo)\n  * [serializeHasMany](/ember-data/release/classes/EmbeddedRecordsMixin/methods/serializeHasMany?anchor=serializeHasMany)\n\n  @class EmbeddedRecordsMixin\n  @public\n*/\nvar embeddedRecordsMixin = _ember_object_mixin__WEBPACK_IMPORTED_MODULE_1___default().create({\n  /**\n    Normalize the record and recursively normalize/extract all the embedded records\n    while pushing them into the store as they are encountered\n     A payload with an attr configured for embedded records needs to be extracted:\n     ```js\n    {\n      \"post\": {\n        \"id\": \"1\"\n        \"title\": \"Rails is omakase\",\n        \"comments\": [{\n          \"id\": \"1\",\n          \"body\": \"Rails is unagi\"\n        }, {\n          \"id\": \"2\",\n          \"body\": \"Omakase O_o\"\n        }]\n      }\n    }\n    ```\n   @method normalize\n    @public\n   @param {Model} typeClass\n   @param {Object} hash to be normalized\n   @param {String} prop the hash has been referenced by\n   @return {Object} the normalized hash\n  **/\n  normalize(typeClass, hash, prop) {\n    const normalizedHash = this._super(typeClass, hash, prop);\n    return this._extractEmbeddedRecords(this, this.store, typeClass, normalizedHash);\n  },\n  keyForRelationship(key, typeClass, method) {\n    if (method === 'serialize' && this.hasSerializeRecordsOption(key) || method === 'deserialize' && this.hasDeserializeRecordsOption(key)) {\n      return this.keyForAttribute(key, method);\n    } else {\n      return this._super(key, typeClass, method) || key;\n    }\n  },\n  /**\n    Serialize `belongsTo` relationship when it is configured as an embedded object.\n     This example of an author model belongs to a post model:\n     ```js\n    import Model, { attr, belongsTo } from '@ember-data/model';\n     Post = Model.extend({\n      title:    attr('string'),\n      body:     attr('string'),\n      author:   belongsTo('author')\n    });\n     Author = Model.extend({\n      name:     attr('string'),\n      post:     belongsTo('post')\n    });\n    ```\n     Use a custom (type) serializer for the post model to configure embedded author\n     ```app/serializers/post.js\n    import RESTSerializer, { EmbeddedRecordsMixin } from '@ember-data/serializer/rest';\n     export default class PostSerializer extends RESTSerializer.extend(EmbeddedRecordsMixin) {\n      attrs = {\n        author: { embedded: 'always' }\n      }\n    }\n    ```\n     A payload with an attribute configured for embedded records can serialize\n    the records together under the root attribute's payload:\n     ```js\n    {\n      \"post\": {\n        \"id\": \"1\"\n        \"title\": \"Rails is omakase\",\n        \"author\": {\n          \"id\": \"2\"\n          \"name\": \"dhh\"\n        }\n      }\n    }\n    ```\n     @method serializeBelongsTo\n    @public\n    @param {Snapshot} snapshot\n    @param {Object} json\n    @param {Object} relationship\n  */\n  serializeBelongsTo(snapshot, json, relationship) {\n    const attr = relationship.name;\n    if (this.noSerializeOptionSpecified(attr)) {\n      this._super(snapshot, json, relationship);\n      return;\n    }\n    const includeIds = this.hasSerializeIdsOption(attr);\n    const includeRecords = this.hasSerializeRecordsOption(attr);\n    const embeddedSnapshot = snapshot.belongsTo(attr);\n    if (includeIds) {\n      const schema = this.store.modelFor(snapshot.modelName);\n      let serializedKey = this._getMappedKey(relationship.name, schema);\n      if (serializedKey === relationship.name && this.keyForRelationship) {\n        serializedKey = this.keyForRelationship(relationship.name, relationship.kind, 'serialize');\n      }\n      if (!embeddedSnapshot) {\n        json[serializedKey] = null;\n      } else {\n        json[serializedKey] = embeddedSnapshot.id;\n        if (relationship.options.polymorphic) {\n          this.serializePolymorphicType(snapshot, json, relationship);\n        }\n      }\n    } else if (includeRecords) {\n      this._serializeEmbeddedBelongsTo(snapshot, json, relationship);\n    }\n  },\n  _serializeEmbeddedBelongsTo(snapshot, json, relationship) {\n    const embeddedSnapshot = snapshot.belongsTo(relationship.name);\n    const schema = this.store.modelFor(snapshot.modelName);\n    let serializedKey = this._getMappedKey(relationship.name, schema);\n    if (serializedKey === relationship.name && this.keyForRelationship) {\n      serializedKey = this.keyForRelationship(relationship.name, relationship.kind, 'serialize');\n    }\n    if (!embeddedSnapshot) {\n      json[serializedKey] = null;\n    } else {\n      json[serializedKey] = embeddedSnapshot.serialize({\n        includeId: true\n      });\n      this.removeEmbeddedForeignKey(snapshot, embeddedSnapshot, relationship, json[serializedKey]);\n      if (relationship.options.polymorphic) {\n        this.serializePolymorphicType(snapshot, json, relationship);\n      }\n    }\n  },\n  /**\n    Serializes `hasMany` relationships when it is configured as embedded objects.\n     This example of a post model has many comments:\n     ```js\n    import Model, { attr, belongsTo, hasMany } from '@ember-data/model';\n     Post = Model.extend({\n      title:    attr('string'),\n      body:     attr('string'),\n      comments: hasMany('comment')\n    });\n     Comment = Model.extend({\n      body:     attr('string'),\n      post:     belongsTo('post')\n    });\n    ```\n     Use a custom (type) serializer for the post model to configure embedded comments\n     ```app/serializers/post.js\n    import RESTSerializer, { EmbeddedRecordsMixin } from '@ember-data/serializer/rest';\n     export default class PostSerializer extends RESTSerializer.extend(EmbeddedRecordsMixin) {\n      attrs = {\n        comments: { embedded: 'always' }\n      }\n    }\n    ```\n     A payload with an attribute configured for embedded records can serialize\n    the records together under the root attribute's payload:\n     ```js\n    {\n      \"post\": {\n        \"id\": \"1\"\n        \"title\": \"Rails is omakase\",\n        \"body\": \"I want this for my ORM, I want that for my template language...\"\n        \"comments\": [{\n          \"id\": \"1\",\n          \"body\": \"Rails is unagi\"\n        }, {\n          \"id\": \"2\",\n          \"body\": \"Omakase O_o\"\n        }]\n      }\n    }\n    ```\n     The attrs options object can use more specific instruction for extracting and\n    serializing. When serializing, an option to embed `ids`, `ids-and-types` or `records` can be set.\n    When extracting the only option is `records`.\n     So `{ embedded: 'always' }` is shorthand for:\n    `{ serialize: 'records', deserialize: 'records' }`\n     To embed the `ids` for a related object (using a hasMany relationship):\n     ```app/serializers/post.js\n    import RESTSerializer, { EmbeddedRecordsMixin } from '@ember-data/serializer/rest';\n     export default class PostSerializer extends RESTSerializer.extend(EmbeddedRecordsMixin) {\n      attrs = {\n        comments: { serialize: 'ids', deserialize: 'records' }\n      }\n    }\n    ```\n     ```js\n    {\n      \"post\": {\n        \"id\": \"1\"\n        \"title\": \"Rails is omakase\",\n        \"body\": \"I want this for my ORM, I want that for my template language...\"\n        \"comments\": [\"1\", \"2\"]\n      }\n    }\n    ```\n     To embed the relationship as a collection of objects with `id` and `type` keys, set\n    `ids-and-types` for the related object.\n     This is particularly useful for polymorphic relationships where records don't share\n    the same table and the `id` is not enough information.\n     For example having a user that has many pets:\n     ```js\n    User = Model.extend({\n      name: attr('string'),\n      pets: hasMany('pet', { polymorphic: true })\n    });\n     Pet = Model.extend({\n      name: attr('string'),\n    });\n     Cat = Pet.extend({\n      // ...\n    });\n     Parrot = Pet.extend({\n      // ...\n    });\n    ```\n     ```app/serializers/user.js\n    import RESTSerializer, { EmbeddedRecordsMixin } from '@ember-data/serializer/rest';\n     export default class UserSerializer extends RESTSerializer.extend(EmbeddedRecordsMixin) {\n      attrs = {\n        pets: { serialize: 'ids-and-types', deserialize: 'records' }\n      }\n    }\n    ```\n     ```js\n    {\n      \"user\": {\n        \"id\": \"1\"\n        \"name\": \"Bertin Osborne\",\n        \"pets\": [\n          { \"id\": \"1\", \"type\": \"Cat\" },\n          { \"id\": \"1\", \"type\": \"Parrot\"}\n        ]\n      }\n    }\n    ```\n     @method serializeHasMany\n    @public\n    @param {Snapshot} snapshot\n    @param {Object} json\n    @param {Object} relationship\n  */\n  serializeHasMany(snapshot, json, relationship) {\n    const attr = relationship.name;\n    if (this.noSerializeOptionSpecified(attr)) {\n      this._super(snapshot, json, relationship);\n      return;\n    }\n    if (this.hasSerializeIdsOption(attr)) {\n      const schema = this.store.modelFor(snapshot.modelName);\n      let serializedKey = this._getMappedKey(relationship.name, schema);\n      if (serializedKey === relationship.name && this.keyForRelationship) {\n        serializedKey = this.keyForRelationship(relationship.name, relationship.kind, 'serialize');\n      }\n      json[serializedKey] = snapshot.hasMany(attr, {\n        ids: true\n      });\n    } else if (this.hasSerializeRecordsOption(attr)) {\n      this._serializeEmbeddedHasMany(snapshot, json, relationship);\n    } else {\n      if (this.hasSerializeIdsAndTypesOption(attr)) {\n        this._serializeHasManyAsIdsAndTypes(snapshot, json, relationship);\n      }\n    }\n  },\n  /*\n    Serializes a hasMany relationship as an array of objects containing only `id` and `type`\n    keys.\n    This has its use case on polymorphic hasMany relationships where the server is not storing\n    all records in the same table using STI, and therefore the `id` is not enough information\n     TODO: Make the default in Ember-data 3.0??\n  */\n  _serializeHasManyAsIdsAndTypes(snapshot, json, relationship) {\n    const serializedKey = this.keyForAttribute(relationship.name, 'serialize');\n    const hasMany = snapshot.hasMany(relationship.name) || [];\n    json[serializedKey] = hasMany.map(function (recordSnapshot) {\n      //\n      // I'm sure I'm being utterly naive here. Probably id is a configurable property and\n      // type too, and the modelName has to be normalized somehow.\n      //\n      return {\n        id: recordSnapshot.id,\n        type: recordSnapshot.modelName\n      };\n    });\n  },\n  _serializeEmbeddedHasMany(snapshot, json, relationship) {\n    const schema = this.store.modelFor(snapshot.modelName);\n    let serializedKey = this._getMappedKey(relationship.name, schema);\n    if (serializedKey === relationship.name && this.keyForRelationship) {\n      serializedKey = this.keyForRelationship(relationship.name, relationship.kind, 'serialize');\n    }\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`The embedded relationship '${serializedKey}' is undefined for '${snapshot.modelName}' with id '${snapshot.id}'. Please include it in your original payload.`, typeof snapshot.hasMany(relationship.name) !== 'undefined', {\n      id: 'ds.serializer.embedded-relationship-undefined'\n    }));\n    json[serializedKey] = this._generateSerializedHasMany(snapshot, relationship);\n  },\n  /*\n    Returns an array of embedded records serialized to JSON\n  */\n  _generateSerializedHasMany(snapshot, relationship) {\n    const hasMany = snapshot.hasMany(relationship.name) || [];\n    const ret = new Array(hasMany.length);\n    for (let i = 0; i < hasMany.length; i++) {\n      const embeddedSnapshot = hasMany[i];\n      const embeddedJson = embeddedSnapshot.serialize({\n        includeId: true\n      });\n      this.removeEmbeddedForeignKey(snapshot, embeddedSnapshot, relationship, embeddedJson);\n      ret[i] = embeddedJson;\n    }\n    return ret;\n  },\n  /**\n    When serializing an embedded record, modify the property (in the `JSON` payload)\n    that refers to the parent record (foreign key for the relationship).\n     Serializing a `belongsTo` relationship removes the property that refers to the\n    parent record\n     Serializing a `hasMany` relationship does not remove the property that refers to\n    the parent record.\n     @method removeEmbeddedForeignKey\n    @public\n    @param {Snapshot} snapshot\n    @param {Snapshot} embeddedSnapshot\n    @param {Object} relationship\n    @param {Object} json\n  */\n  removeEmbeddedForeignKey(snapshot, embeddedSnapshot, relationship, json) {\n    if (relationship.kind === 'belongsTo') {\n      const schema = this.store.modelFor(snapshot.modelName);\n      const parentRecord = schema.inverseFor(relationship.name, this.store);\n      if (parentRecord) {\n        const name = parentRecord.name;\n        const embeddedSerializer = this.store.serializerFor(embeddedSnapshot.modelName);\n        const parentKey = embeddedSerializer.keyForRelationship(name, parentRecord.kind, 'deserialize');\n        if (parentKey) {\n          delete json[parentKey];\n        }\n      }\n    } /*else if (relationship.kind === 'hasMany') {\n      return;\n      }*/\n  },\n  // checks config for attrs option to embedded (always) - serialize and deserialize\n  hasEmbeddedAlwaysOption(attr) {\n    const option = this.attrsOption(attr);\n    return option && option.embedded === 'always';\n  },\n  // checks config for attrs option to serialize ids\n  hasSerializeRecordsOption(attr) {\n    const alwaysEmbed = this.hasEmbeddedAlwaysOption(attr);\n    const option = this.attrsOption(attr);\n    return alwaysEmbed || option && option.serialize === 'records';\n  },\n  // checks config for attrs option to serialize records\n  hasSerializeIdsOption(attr) {\n    const option = this.attrsOption(attr);\n    return option && (option.serialize === 'ids' || option.serialize === 'id');\n  },\n  // checks config for attrs option to serialize records as objects containing id and types\n  hasSerializeIdsAndTypesOption(attr) {\n    const option = this.attrsOption(attr);\n    return option && (option.serialize === 'ids-and-types' || option.serialize === 'id-and-type');\n  },\n  // checks config for attrs option to serialize records\n  noSerializeOptionSpecified(attr) {\n    const option = this.attrsOption(attr);\n    return !(option && (option.serialize || option.embedded));\n  },\n  // checks config for attrs option to deserialize records\n  // a defined option object for a resource is treated the same as\n  // `deserialize: 'records'`\n  hasDeserializeRecordsOption(attr) {\n    const alwaysEmbed = this.hasEmbeddedAlwaysOption(attr);\n    const option = this.attrsOption(attr);\n    return alwaysEmbed || option && option.deserialize === 'records';\n  },\n  attrsOption(attr) {\n    const attrs = this.attrs;\n    return attrs && (attrs[(0,_ember_string__WEBPACK_IMPORTED_MODULE_2__.camelize)(attr)] || attrs[attr]);\n  },\n  /**\n   @method _extractEmbeddedRecords\n   @private\n  */\n  _extractEmbeddedRecords(serializer, store, typeClass, partial) {\n    typeClass.eachRelationship((key, relationship) => {\n      if (serializer.hasDeserializeRecordsOption(key)) {\n        if (relationship.kind === 'hasMany') {\n          this._extractEmbeddedHasMany(store, key, partial, relationship);\n        }\n        if (relationship.kind === 'belongsTo') {\n          this._extractEmbeddedBelongsTo(store, key, partial, relationship);\n        }\n      }\n    });\n    return partial;\n  },\n  /**\n   @method _extractEmbeddedHasMany\n   @private\n  */\n  _extractEmbeddedHasMany(store, key, hash, relationshipMeta) {\n    const relationshipHash = hash.data?.relationships?.[key]?.data;\n    if (!relationshipHash) {\n      return;\n    }\n    const hasMany = new Array(relationshipHash.length);\n    for (let i = 0; i < relationshipHash.length; i++) {\n      const item = relationshipHash[i];\n      const {\n        data,\n        included\n      } = this._normalizeEmbeddedRelationship(store, relationshipMeta, item);\n      hash.included = hash.included || [];\n      hash.included.push(data);\n      if (included) {\n        hash.included = hash.included.concat(included);\n      }\n      hasMany[i] = {\n        id: data.id,\n        type: data.type\n      };\n    }\n    const relationship = {\n      data: hasMany\n    };\n    hash.data.relationships[key] = relationship;\n  },\n  /**\n   @method _extractEmbeddedBelongsTo\n   @private\n  */\n  _extractEmbeddedBelongsTo(store, key, hash, relationshipMeta) {\n    const relationshipHash = hash.data?.relationships?.[key]?.data;\n    if (!relationshipHash) {\n      return;\n    }\n    const {\n      data,\n      included\n    } = this._normalizeEmbeddedRelationship(store, relationshipMeta, relationshipHash);\n    hash.included = hash.included || [];\n    hash.included.push(data);\n    if (included) {\n      hash.included = hash.included.concat(included);\n    }\n    const belongsTo = {\n      id: data.id,\n      type: data.type\n    };\n    const relationship = {\n      data: belongsTo\n    };\n    hash.data.relationships[key] = relationship;\n  },\n  /**\n   @method _normalizeEmbeddedRelationship\n   @private\n  */\n  _normalizeEmbeddedRelationship(store, relationshipMeta, relationshipHash) {\n    let modelName = relationshipMeta.type;\n    if (relationshipMeta.options.polymorphic) {\n      modelName = relationshipHash.type;\n    }\n    const modelClass = store.modelFor(modelName);\n    const serializer = store.serializerFor(modelName);\n    return serializer.normalize(modelClass, relationshipHash, null);\n  },\n  isEmbeddedRecordsMixin: true\n});\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/embedded-records-mixin-HTw8JJT1.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/index.js":
/*!**********************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/index.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _class)\n/* harmony export */ });\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/object */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_object__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/service */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fservice&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_service__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction _initializerDefineProperty(target, property, descriptor, context) {\n  if (!descriptor) return;\n  Object.defineProperty(target, property, {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable,\n    writable: descriptor.writable,\n    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0\n  });\n}\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object.keys(descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object.defineProperty(target, property, desc);\n    desc = null;\n  }\n  return desc;\n}\nvar _class2, _descriptor;\n/**\n  > ⚠️ CAUTION you likely want the docs for [<Interface> Serializer](/ember-data/release/classes/%3CInterface%3E%20Serializer)\n  > as extending this abstract class is unnecessary.\n\n  `Serializer` is an abstract base class that you may override in your\n  application to customize it for your backend. The minimum set of methods\n  that you should implement is:\n\n    * `normalizeResponse()`\n    * `serialize()`\n\n  And you can optionally override the following methods:\n\n    * `normalize()`\n\n  For an example implementation, see\n  [JSONSerializer](JSONSerializer), the included JSON serializer.\n\n  @class Serializer\n  @public\n  @extends Ember.EmberObject\n*/\nlet _class = (_class2 = class _class2 extends (_ember_object__WEBPACK_IMPORTED_MODULE_0___default()) {\n  constructor(...args) {\n    super(...args);\n    _initializerDefineProperty(this, \"store\", _descriptor, this);\n  }\n  /**\n    The `store` property is the application's `store` that contains\n    all records. It can be used to look up serializers for other model\n    types that may be nested inside the payload response.\n     Example:\n     ```js\n    Serializer.extend({\n      extractRelationship(relationshipModelName, relationshipHash) {\n        let modelClass = this.store.modelFor(relationshipModelName);\n        let relationshipSerializer = this.store.serializerFor(relationshipModelName);\n        return relationshipSerializer.normalize(modelClass, relationshipHash);\n      }\n    });\n    ```\n     @property store\n    @type {Store}\n    @public\n  */\n\n  /**\n    The `normalizeResponse` method is used to normalize a payload from the\n    server to a JSON-API Document.\n     http://jsonapi.org/format/#document-structure\n     Example:\n     ```js\n    Serializer.extend({\n      normalizeResponse(store, primaryModelClass, payload, id, requestType) {\n        if (requestType === 'findRecord') {\n          return this.normalize(primaryModelClass, payload);\n        } else {\n          return payload.reduce(function(documentHash, item) {\n            let { data, included } = this.normalize(primaryModelClass, item);\n            documentHash.included.push(...included);\n            documentHash.data.push(data);\n            return documentHash;\n          }, { data: [], included: [] })\n        }\n      }\n    });\n    ```\n     @since 1.13.0\n    @method normalizeResponse\n    @public\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @return {Object} JSON-API Document\n  */\n\n  /**\n    The `serialize` method is used when a record is saved in order to convert\n    the record into the form that your external data source expects.\n     `serialize` takes an optional `options` hash with a single option:\n     - `includeId`: If this is `true`, `serialize` should include the ID\n      in the serialized object it builds.\n     Example:\n     ```js\n    Serializer.extend({\n      serialize(snapshot, options) {\n        let json = {\n          id: snapshot.id\n        };\n         snapshot.eachAttribute((key, attribute) => {\n          json[key] = snapshot.attr(key);\n        });\n         snapshot.eachRelationship((key, relationship) => {\n          if (relationship.kind === 'belongsTo') {\n            json[key] = snapshot.belongsTo(key, { id: true });\n          } else if (relationship.kind === 'hasMany') {\n            json[key] = snapshot.hasMany(key, { ids: true });\n          }\n        });\n         return json;\n      },\n    });\n    ```\n     @method serialize\n    @public\n    @param {Snapshot} snapshot\n    @param {Object} [options]\n    @return {Object}\n  */\n\n  /**\n    The `normalize` method is used to convert a payload received from your\n    external data source into the normalized form `store.push()` expects. You\n    should override this method, munge the hash and return the normalized\n    payload.\n     Example:\n     ```js\n    Serializer.extend({\n      normalize(modelClass, resourceHash) {\n        let data = {\n          id:            resourceHash.id,\n          type:          modelClass.modelName,\n          attributes:    resourceHash\n        };\n        return { data: data };\n      }\n    })\n    ```\n     @method normalize\n    @public\n    @param {Model} typeClass\n    @param {Object} hash\n    @return {Object}\n  */\n  normalize(_typeClass, hash) {\n    return hash;\n  }\n}, _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"store\", [_ember_service__WEBPACK_IMPORTED_MODULE_1__.inject], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2);\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/index.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/json-api.js":
/*!*************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/json-api.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ JSONAPISerializer)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/string */ \"../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/index.js\");\n/* harmony import */ var ember_inflector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ember-inflector */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/index.js\");\n/* harmony import */ var _json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./json */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/json.js\");\n\n\n\n\n/**\n * @module @ember-data/serializer/json-api\n */\nconst JSONAPISerializer = _json__WEBPACK_IMPORTED_MODULE_3__[\"default\"].extend({\n  /**\n    @method _normalizeDocumentHelper\n    @param {Object} documentHash\n    @return {Object}\n    @private\n  */\n  _normalizeDocumentHelper(documentHash) {\n    if (Array.isArray(documentHash.data)) {\n      const ret = new Array(documentHash.data.length);\n      for (let i = 0; i < documentHash.data.length; i++) {\n        const data = documentHash.data[i];\n        ret[i] = this._normalizeResourceHelper(data);\n      }\n      documentHash.data = ret;\n    } else if (documentHash.data && typeof documentHash.data === 'object') {\n      documentHash.data = this._normalizeResourceHelper(documentHash.data);\n    }\n    if (Array.isArray(documentHash.included)) {\n      const ret = new Array();\n      for (let i = 0; i < documentHash.included.length; i++) {\n        const included = documentHash.included[i];\n        const normalized = this._normalizeResourceHelper(included);\n        if (normalized !== null) {\n          // can be null when unknown type is encountered\n          ret.push(normalized);\n        }\n      }\n      documentHash.included = ret;\n    }\n    return documentHash;\n  },\n  /**\n    @method _normalizeRelationshipDataHelper\n    @param {Object} relationshipDataHash\n    @return {Object}\n    @private\n  */\n  _normalizeRelationshipDataHelper(relationshipDataHash) {\n    relationshipDataHash.type = this.modelNameFromPayloadKey(relationshipDataHash.type);\n    return relationshipDataHash;\n  },\n  /**\n    @method _normalizeResourceHelper\n    @param {Object} resourceHash\n    @return {Object}\n    @private\n  */\n  _normalizeResourceHelper(resourceHash) {\n    ( true && !(resourceHash.type) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(this.warnMessageForUndefinedType(), resourceHash.type));\n    const modelName = this.modelNameFromPayloadKey(resourceHash.type);\n    if (!this.store.getSchemaDefinitionService().doesTypeExist(modelName)) {\n      ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(this.warnMessageNoModelForType(modelName, resourceHash.type, 'modelNameFromPayloadKey'), false, {\n        id: 'ds.serializer.model-for-type-missing'\n      }));\n      return null;\n    }\n    const modelClass = this.store.modelFor(modelName);\n    const serializer = this.store.serializerFor(modelName);\n    const {\n      data\n    } = serializer.normalize(modelClass, resourceHash);\n    return data;\n  },\n  /**\n    Normalize some data and push it into the store.\n     @method pushPayload\n    @public\n    @param {Store} store\n    @param {Object} payload\n  */\n  pushPayload(store, payload) {\n    const normalizedPayload = this._normalizeDocumentHelper(payload);\n    store.push(normalizedPayload);\n  },\n  /**\n    @method _normalizeResponse\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @param {Boolean} isSingle\n    @return {Object} JSON-API Document\n    @private\n  */\n  _normalizeResponse(store, primaryModelClass, payload, id, requestType, isSingle) {\n    const normalizedPayload = this._normalizeDocumentHelper(payload);\n    return normalizedPayload;\n  },\n  normalizeQueryRecordResponse() {\n    const normalized = this._super(...arguments);\n    ( true && !(!Array.isArray(normalized.data)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('Expected the primary data returned by the serializer for a `queryRecord` response to be a single object but instead it was an array.', !Array.isArray(normalized.data)));\n    return normalized;\n  },\n  extractAttributes(modelClass, resourceHash) {\n    const attributes = {};\n    if (resourceHash.attributes) {\n      modelClass.eachAttribute(key => {\n        const attributeKey = this.keyForAttribute(key, 'deserialize');\n        if (resourceHash.attributes[attributeKey] !== undefined) {\n          attributes[key] = resourceHash.attributes[attributeKey];\n        }\n        {\n          if (resourceHash.attributes[attributeKey] === undefined && resourceHash.attributes[key] !== undefined) {\n            ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Your payload for '${modelClass.modelName}' contains '${key}', but your serializer is setup to look for '${attributeKey}'. This is most likely because Ember Data's JSON API serializer dasherizes attribute keys by default. You should subclass JSONAPISerializer and implement 'keyForAttribute(key) { return key; }' to prevent Ember Data from customizing your attribute keys.`, false));\n          }\n        }\n      });\n    }\n    return attributes;\n  },\n  /**\n     Returns a relationship formatted as a JSON-API \"relationship object\".\n      http://jsonapi.org/format/#document-resource-object-relationships\n      @method extractRelationship\n    @public\n     @param {Object} relationshipHash\n     @return {Object}\n  */\n  extractRelationship(relationshipHash) {\n    if (Array.isArray(relationshipHash.data)) {\n      const ret = new Array(relationshipHash.data.length);\n      for (let i = 0; i < relationshipHash.data.length; i++) {\n        const data = relationshipHash.data[i];\n        ret[i] = this._normalizeRelationshipDataHelper(data);\n      }\n      relationshipHash.data = ret;\n    } else if (relationshipHash.data && typeof relationshipHash.data === 'object') {\n      relationshipHash.data = this._normalizeRelationshipDataHelper(relationshipHash.data);\n    }\n    return relationshipHash;\n  },\n  /**\n     Returns the resource's relationships formatted as a JSON-API \"relationships object\".\n      http://jsonapi.org/format/#document-resource-object-relationships\n      @method extractRelationships\n    @public\n     @param {Object} modelClass\n     @param {Object} resourceHash\n     @return {Object}\n  */\n  extractRelationships(modelClass, resourceHash) {\n    const relationships = {};\n    if (resourceHash.relationships) {\n      modelClass.eachRelationship((key, relationshipMeta) => {\n        const relationshipKey = this.keyForRelationship(key, relationshipMeta.kind, 'deserialize');\n        if (resourceHash.relationships[relationshipKey] !== undefined) {\n          const relationshipHash = resourceHash.relationships[relationshipKey];\n          relationships[key] = this.extractRelationship(relationshipHash);\n        }\n        {\n          if (resourceHash.relationships[relationshipKey] === undefined && resourceHash.relationships[key] !== undefined) {\n            ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Your payload for '${modelClass.modelName}' contains '${key}', but your serializer is setup to look for '${relationshipKey}'. This is most likely because Ember Data's JSON API serializer dasherizes relationship keys by default. You should subclass JSONAPISerializer and implement 'keyForRelationship(key) { return key; }' to prevent Ember Data from customizing your relationship keys.`, false));\n          }\n        }\n      });\n    }\n    return relationships;\n  },\n  /**\n    @method _extractType\n    @param {Model} modelClass\n    @param {Object} resourceHash\n    @return {String}\n    @private\n  */\n  _extractType(modelClass, resourceHash) {\n    return this.modelNameFromPayloadKey(resourceHash.type);\n  },\n  /**\n    Dasherizes and singularizes the model name in the payload to match\n    the format Ember Data uses internally for the model name.\n     For example the key `posts` would be converted to `post` and the\n    key `studentAssesments` would be converted to `student-assesment`.\n     @method modelNameFromPayloadKey\n    @public\n    @param {String} key\n    @return {String} the model's modelName\n  */\n  modelNameFromPayloadKey(key) {\n    return (0,_ember_string__WEBPACK_IMPORTED_MODULE_1__.dasherize)((0,ember_inflector__WEBPACK_IMPORTED_MODULE_2__.singularize)(key));\n  },\n  /**\n    Converts the model name to a pluralized version of the model name.\n     For example `post` would be converted to `posts` and\n    `student-assesment` would be converted to `student-assesments`.\n     @method payloadKeyFromModelName\n    @public\n    @param {String} modelName\n    @return {String}\n  */\n  payloadKeyFromModelName(modelName) {\n    return (0,ember_inflector__WEBPACK_IMPORTED_MODULE_2__.pluralize)(modelName);\n  },\n  normalize(modelClass, resourceHash) {\n    if (resourceHash.attributes) {\n      this.normalizeUsingDeclaredMapping(modelClass, resourceHash.attributes);\n    }\n    if (resourceHash.relationships) {\n      this.normalizeUsingDeclaredMapping(modelClass, resourceHash.relationships);\n    }\n    const data = {\n      id: this.extractId(modelClass, resourceHash),\n      type: this._extractType(modelClass, resourceHash),\n      attributes: this.extractAttributes(modelClass, resourceHash),\n      relationships: this.extractRelationships(modelClass, resourceHash)\n    };\n    this.applyTransforms(modelClass, data.attributes);\n    return {\n      data\n    };\n  },\n  /**\n    `keyForAttribute` can be used to define rules for how to convert an\n    attribute name in your model to a key in your JSON.\n    By default `JSONAPISerializer` follows the format used on the examples of\n    http://jsonapi.org/format and uses dashes as the word separator in the JSON\n    attribute keys.\n     This behaviour can be easily customized by extending this method.\n     Example\n     ```app/serializers/application.js\n    import JSONAPISerializer from '@ember-data/serializer/json-api';\n    import { dasherize } from '<app-name>/utils/string-utils';\n     export default class ApplicationSerializer extends JSONAPISerializer {\n      keyForAttribute(attr, method) {\n        return dasherize(attr).toUpperCase();\n      }\n    }\n    ```\n     @method keyForAttribute\n    @public\n    @param {String} key\n    @param {String} method\n    @return {String} normalized key\n  */\n  keyForAttribute(key, method) {\n    return (0,_ember_string__WEBPACK_IMPORTED_MODULE_1__.dasherize)(key);\n  },\n  /**\n   `keyForRelationship` can be used to define a custom key when\n   serializing and deserializing relationship properties.\n   By default `JSONAPISerializer` follows the format used on the examples of\n   http://jsonapi.org/format and uses dashes as word separators in\n   relationship properties.\n    This behaviour can be easily customized by extending this method.\n    Example\n     ```app/serializers/post.js\n    import JSONAPISerializer from '@ember-data/serializer/json-api';\n    import { underscore } from '<app-name>/utils/string-utils';\n     export default class ApplicationSerializer extends JSONAPISerializer {\n      keyForRelationship(key, relationship, method) {\n        return underscore(key);\n      }\n    }\n    ```\n   @method keyForRelationship\n    @public\n   @param {String} key\n   @param {String} typeClass\n   @param {String} method\n   @return {String} normalized key\n  */\n  keyForRelationship(key, typeClass, method) {\n    return (0,_ember_string__WEBPACK_IMPORTED_MODULE_1__.dasherize)(key);\n  },\n  /**\n    Called when a record is saved in order to convert the\n    record into JSON.\n     For example, consider this model:\n     ```app/models/comment.js\n    import Model, { attr, belongsTo } from '@ember-data/model';\n     export default class CommentModel extends Model {\n      @attr title;\n      @attr body;\n       @belongsTo('user', { async: false, inverse: null })\n      author;\n    }\n    ```\n     The default serialization would create a JSON-API resource object like:\n     ```javascript\n    {\n      \"data\": {\n        \"type\": \"comments\",\n        \"attributes\": {\n          \"title\": \"Rails is unagi\",\n          \"body\": \"Rails? Omakase? O_O\",\n        },\n        \"relationships\": {\n          \"author\": {\n            \"data\": {\n              \"id\": \"12\",\n              \"type\": \"users\"\n            }\n          }\n        }\n      }\n    }\n    ```\n     By default, attributes are passed through as-is, unless\n    you specified an attribute type (`attr('date')`). If\n    you specify a transform, the JavaScript value will be\n    serialized when inserted into the attributes hash.\n     Belongs-to relationships are converted into JSON-API\n    resource identifier objects.\n     ## IDs\n     `serialize` takes an options hash with a single option:\n    `includeId`. If this option is `true`, `serialize` will,\n    by default include the ID in the JSON object it builds.\n     The JSONAPIAdapter passes in `includeId: true` when serializing a record\n    for `createRecord` or `updateRecord`.\n     ## Customization\n     Your server may expect data in a different format than the\n    built-in serialization format.\n     In that case, you can implement `serialize` yourself and\n    return data formatted to match your API's expectations, or override\n    the invoked adapter method and do the serialization in the adapter directly\n    by using the provided snapshot.\n     If your API's format differs greatly from the JSON:API spec, you should\n    consider authoring your own adapter and serializer instead of extending\n    this class.\n     ```app/serializers/post.js\n    import JSONAPISerializer from '@ember-data/serializer/json-api';\n     export default class PostSerializer extends JSONAPISerializer {\n      serialize(snapshot, options) {\n        let json = {\n          POST_TTL: snapshot.attr('title'),\n          POST_BDY: snapshot.attr('body'),\n          POST_CMS: snapshot.hasMany('comments', { ids: true })\n        };\n         if (options.includeId) {\n          json.POST_ID_ = snapshot.id;\n        }\n         return json;\n      }\n    }\n    ```\n     ## Customizing an App-Wide Serializer\n     If you want to define a serializer for your entire\n    application, you'll probably want to use `eachAttribute`\n    and `eachRelationship` on the record.\n     ```app/serializers/application.js\n    import JSONAPISerializer from '@ember-data/serializer/json-api';\n    import { underscore, singularize } from '<app-name>/utils/string-utils';\n     export default class ApplicationSerializer extends JSONAPISerializer {\n      serialize(snapshot, options) {\n        let json = {};\n         snapshot.eachAttribute((name) => {\n          json[serverAttributeName(name)] = snapshot.attr(name);\n        });\n         snapshot.eachRelationship((name, relationship) => {\n          if (relationship.kind === 'hasMany') {\n            json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });\n          }\n        });\n         if (options.includeId) {\n          json.ID_ = snapshot.id;\n        }\n         return json;\n      }\n    }\n     function serverAttributeName(attribute) {\n      return underscore(attribute).toUpperCase();\n    }\n     function serverHasManyName(name) {\n      return serverAttributeName(singularize(name)) + '_IDS';\n    }\n    ```\n     This serializer will generate JSON that looks like this:\n     ```javascript\n    {\n      \"TITLE\": \"Rails is omakase\",\n      \"BODY\": \"Yep. Omakase.\",\n      \"COMMENT_IDS\": [ \"1\", \"2\", \"3\" ]\n    }\n    ```\n     ## Tweaking the Default Formatting\n     If you just want to do some small tweaks on the default JSON:API formatted response,\n    you can call `super.serialize` first and make the tweaks\n    on the returned object.\n     ```app/serializers/post.js\n    import JSONAPISerializer from '@ember-data/serializer/json-api';\n     export default class PostSerializer extends JSONAPISerializer {\n      serialize(snapshot, options) {\n        let json = super.serialize(...arguments);\n         json.data.attributes.subject = json.data.attributes.title;\n        delete json.data.attributes.title;\n         return json;\n      }\n    }\n    ```\n     @method serialize\n    @public\n    @param {Snapshot} snapshot\n    @param {Object} options\n    @return {Object} json\n  */\n  serialize(snapshot, options) {\n    const data = this._super(...arguments);\n    data.type = this.payloadKeyFromModelName(snapshot.modelName);\n    return {\n      data\n    };\n  },\n  serializeAttribute(snapshot, json, key, attribute) {\n    const type = attribute.type;\n    if (this._canSerialize(key)) {\n      json.attributes = json.attributes || {};\n      let value = snapshot.attr(key);\n      if (type) {\n        const transform = this.transformFor(type);\n        value = transform.serialize(value, attribute.options);\n      }\n      const schema = this.store.modelFor(snapshot.modelName);\n      let payloadKey = this._getMappedKey(key, schema);\n      if (payloadKey === key) {\n        payloadKey = this.keyForAttribute(key, 'serialize');\n      }\n      json.attributes[payloadKey] = value;\n    }\n  },\n  serializeBelongsTo(snapshot, json, relationship) {\n    const name = relationship.name;\n    if (this._canSerialize(name)) {\n      const belongsTo = snapshot.belongsTo(name);\n      const belongsToIsNotNew = belongsTo && !belongsTo.isNew;\n      if (belongsTo === null || belongsToIsNotNew) {\n        json.relationships = json.relationships || {};\n        const schema = this.store.modelFor(snapshot.modelName);\n        let payloadKey = this._getMappedKey(name, schema);\n        if (payloadKey === name) {\n          payloadKey = this.keyForRelationship(name, 'belongsTo', 'serialize');\n        }\n        let data = null;\n        if (belongsTo) {\n          const payloadType = this.payloadKeyFromModelName(belongsTo.modelName);\n          data = {\n            type: payloadType,\n            id: belongsTo.id\n          };\n        }\n        json.relationships[payloadKey] = {\n          data\n        };\n      }\n    }\n  },\n  serializeHasMany(snapshot, json, relationship) {\n    const name = relationship.name;\n    if (this.shouldSerializeHasMany(snapshot, name, relationship)) {\n      const hasMany = snapshot.hasMany(name);\n      if (hasMany !== undefined) {\n        json.relationships = json.relationships || {};\n        const schema = this.store.modelFor(snapshot.modelName);\n        let payloadKey = this._getMappedKey(name, schema);\n        if (payloadKey === name && this.keyForRelationship) {\n          payloadKey = this.keyForRelationship(name, 'hasMany', 'serialize');\n        }\n\n        // only serialize has many relationships that are not new\n        const nonNewHasMany = hasMany.filter(item => !item.isNew);\n        const data = new Array(nonNewHasMany.length);\n        for (let i = 0; i < nonNewHasMany.length; i++) {\n          const item = hasMany[i];\n          const payloadType = this.payloadKeyFromModelName(item.modelName);\n          data[i] = {\n            type: payloadType,\n            id: item.id\n          };\n        }\n        json.relationships[payloadKey] = {\n          data\n        };\n      }\n    }\n  }\n});\n{\n  JSONAPISerializer.reopen({\n    init(...args) {\n      this._super(...args);\n      ( true && !(!this.isEmbeddedRecordsMixin || this.isEmbeddedRecordsMixinCompatible === true) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You've used the EmbeddedRecordsMixin in ${this.toString()} which is not fully compatible with the JSON:API specification. Please confirm that this works for your specific API and add \\`this.isEmbeddedRecordsMixinCompatible = true\\` to your serializer.`, !this.isEmbeddedRecordsMixin || this.isEmbeddedRecordsMixinCompatible === true));\n      const constructor = this.constructor;\n      ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`You've defined 'extractMeta' in ${constructor.toString()} which is not used for serializers extending JSONAPISerializer. Read more at https://api.emberjs.com/ember-data/release/classes/JSONAPISerializer on how to customize meta when using JSON API.`, this.extractMeta === _json__WEBPACK_IMPORTED_MODULE_3__[\"default\"].prototype.extractMeta, {\n        id: 'ds.serializer.json-api.extractMeta'\n      }));\n    },\n    warnMessageForUndefinedType() {\n      return 'Encountered a resource object with an undefined type (resolved resource using ' + this.constructor.toString() + ')';\n    },\n    warnMessageNoModelForType(modelName, originalType, usedLookup) {\n      return `Encountered a resource object with type \"${originalType}\", but no model was found for model name \"${modelName}\" (resolved model name using '${this.constructor.toString()}.${usedLookup}(\"${originalType}\")').`;\n    }\n  });\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/json-api.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/json.js":
/*!*********************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/json.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ JSONSerializer)\n/* harmony export */ });\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/application */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fapplication&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_application__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/string */ \"../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/index.js\");\n/* harmony import */ var ember_inflector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ember-inflector */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/index.js\");\n/* harmony import */ var _utils_N1ERF6HN__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils-N1ERF6HN */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/utils-N1ERF6HN.js\");\n\n\n\n\n\n\n\n/**\n * @module @ember-data/serializer/json\n */\nconst SOURCE_POINTER_REGEXP = /^\\/?data\\/(attributes|relationships)\\/(.*)/;\nconst SOURCE_POINTER_PRIMARY_REGEXP = /^\\/?data/;\nconst PRIMARY_ATTRIBUTE_KEY = 'base';\n\n/**\n * <blockquote style=\"margin: 1em; padding: .1em 1em .1em 1em; border-left: solid 1em #E34C32; background: #e0e0e0;\">\n  <p>\n    ⚠️ <strong>This is LEGACY documentation</strong> for a feature that is no longer encouraged to be used.\n    If starting a new app or thinking of implementing a new adapter, consider writing a\n    <a href=\"/ember-data/release/classes/%3CInterface%3E%20Handler\">Handler</a> instead to be used with the <a href=\"https://github.com/emberjs/data/tree/main/packages/request#readme\">RequestManager</a>\n  </p>\n  </blockquote>\n\n  In EmberData a Serializer is used to serialize and deserialize\n  records when they are transferred in and out of an external source.\n  This process involves normalizing property names, transforming\n  attribute values and serializing relationships.\n\n  By default, EmberData uses and recommends the `JSONAPISerializer`.\n\n  `JSONSerializer` is useful for simpler or legacy backends that may\n  not support the http://jsonapi.org/ spec.\n\n  For example, given the following `User` model and JSON payload:\n\n  ```app/models/user.js\n  import Model, { attr, belongsTo, hasMany } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @hasMany('user') friends;\n    @belongsTo('location') house;\n\n    @attr('string') name;\n  }\n  ```\n\n  ```js\n  {\n    id: 1,\n    name: 'Sebastian',\n    friends: [3, 4],\n    links: {\n      house: '/houses/lefkada'\n    }\n  }\n  ```\n\n  `JSONSerializer` will normalize the JSON payload to the JSON API format that the\n  Ember Data store expects.\n\n  You can customize how JSONSerializer processes its payload by passing options in\n  the `attrs` hash or by subclassing the `JSONSerializer` and overriding hooks:\n\n    - To customize how a single record is normalized, use the `normalize` hook.\n    - To customize how `JSONSerializer` normalizes the whole server response, use the\n      `normalizeResponse` hook.\n    - To customize how `JSONSerializer` normalizes a specific response from the server,\n      use one of the many specific `normalizeResponse` hooks.\n    - To customize how `JSONSerializer` normalizes your id, attributes or relationships,\n      use the `extractId`, `extractAttributes` and `extractRelationships` hooks.\n\n  The `JSONSerializer` normalization process follows these steps:\n\n    1. `normalizeResponse`\n        - entry method to the serializer.\n    2. `normalizeCreateRecordResponse`\n        - a `normalizeResponse` for a specific operation is called.\n    3. `normalizeSingleResponse`|`normalizeArrayResponse`\n        - for methods like `createRecord` we expect a single record back, while for methods like `findAll` we expect multiple records back.\n    4. `normalize`\n        - `normalizeArrayResponse` iterates and calls `normalize` for each of its records while `normalizeSingle`\n          calls it once. This is the method you most likely want to subclass.\n    5. `extractId` | `extractAttributes` | `extractRelationships`\n        - `normalize` delegates to these methods to\n          turn the record payload into the JSON API format.\n\n  @main @ember-data/serializer/json\n  @class JSONSerializer\n  @public\n  @extends Serializer\n*/\nconst JSONSerializer = _index__WEBPACK_IMPORTED_MODULE_4__[\"default\"].extend({\n  /**\n    The `primaryKey` is used when serializing and deserializing\n    data. Ember Data always uses the `id` property to store the id of\n    the record. The external source may not always follow this\n    convention. In these cases it is useful to override the\n    `primaryKey` property to match the `primaryKey` of your external\n    store.\n     Example\n     ```app/serializers/application.js\n    import JSONSerializer from '@ember-data/serializer/json';\n     export default class ApplicationSerializer extends JSONSerializer {\n      primaryKey = '_id'\n    }\n    ```\n     @property primaryKey\n    @type {String}\n    @public\n    @default 'id'\n  */\n  primaryKey: 'id',\n  /**\n    The `attrs` object can be used to declare a simple mapping between\n    property names on `Model` records and payload keys in the\n    serialized JSON object representing the record. An object with the\n    property `key` can also be used to designate the attribute's key on\n    the response payload.\n     Example\n     ```app/models/person.js\n    import Model, { attr } from '@ember-data/model';\n     export default class PersonModel extends Model {\n      @attr('string') firstName;\n      @attr('string') lastName;\n      @attr('string') occupation;\n      @attr('boolean') admin;\n    }\n    ```\n     ```app/serializers/person.js\n    import JSONSerializer from '@ember-data/serializer/json';\n     export default class PersonSerializer extends JSONSerializer {\n      attrs = {\n        admin: 'is_admin',\n        occupation: { key: 'career' }\n      }\n    }\n    ```\n     You can also remove attributes and relationships by setting the `serialize`\n    key to `false` in your mapping object.\n     Example\n     ```app/serializers/person.js\n    import JSONSerializer from '@ember-data/serializer/json';\n     export default class PostSerializer extends JSONSerializer {\n      attrs = {\n        admin: { serialize: false },\n        occupation: { key: 'career' }\n      }\n    }\n    ```\n     When serialized:\n     ```javascript\n    {\n      \"firstName\": \"Harry\",\n      \"lastName\": \"Houdini\",\n      \"career\": \"magician\"\n    }\n    ```\n     Note that the `admin` is now not included in the payload.\n     Setting `serialize` to `true` enforces serialization for hasMany\n    relationships even if it's neither a many-to-many nor many-to-none\n    relationship.\n     @property attrs\n    @public\n    @type {Object}\n  */\n  mergedProperties: ['attrs'],\n  /**\n   Given a subclass of `Model` and a JSON object this method will\n   iterate through each attribute of the `Model` and invoke the\n   `Transform#deserialize` method on the matching property of the\n   JSON object.  This method is typically called after the\n   serializer's `normalize` method.\n    @method applyTransforms\n   @private\n   @param {Model} typeClass\n   @param {Object} data The data to transform\n   @return {Object} data The transformed data object\n  */\n  applyTransforms(typeClass, data) {\n    const attributes = typeClass.attributes;\n    typeClass.eachTransformedAttribute((key, typeClass) => {\n      if (data[key] === undefined) {\n        return;\n      }\n      const transform = this.transformFor(typeClass);\n      const transformMeta = attributes.get(key);\n      data[key] = transform.deserialize(data[key], transformMeta.options);\n    });\n    return data;\n  },\n  /**\n    The `normalizeResponse` method is used to normalize a payload from the\n    server to a JSON-API Document.\n     http://jsonapi.org/format/#document-structure\n     This method delegates to a more specific normalize method based on\n    the `requestType`.\n     To override this method with a custom one, make sure to call\n    `return super.normalizeResponse(store, primaryModelClass, payload, id, requestType)` with your\n    pre-processed data.\n     Here's an example of using `normalizeResponse` manually:\n     ```javascript\n    socket.on('message', function(message) {\n      let data = message.data;\n      let modelClass = store.modelFor(data.modelName);\n      let serializer = store.serializerFor(data.modelName);\n      let normalized = serializer.normalizeSingleResponse(store, modelClass, data, data.id);\n       store.push(normalized);\n    });\n    ```\n     @since 1.13.0\n    @method normalizeResponse\n    @public\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @return {Object} JSON-API Document\n  */\n  normalizeResponse(store, primaryModelClass, payload, id, requestType) {\n    switch (requestType) {\n      case 'findRecord':\n        return this.normalizeFindRecordResponse(...arguments);\n      case 'queryRecord':\n        return this.normalizeQueryRecordResponse(...arguments);\n      case 'findAll':\n        return this.normalizeFindAllResponse(...arguments);\n      case 'findBelongsTo':\n        return this.normalizeFindBelongsToResponse(...arguments);\n      case 'findHasMany':\n        return this.normalizeFindHasManyResponse(...arguments);\n      case 'findMany':\n        return this.normalizeFindManyResponse(...arguments);\n      case 'query':\n        return this.normalizeQueryResponse(...arguments);\n      case 'createRecord':\n        return this.normalizeCreateRecordResponse(...arguments);\n      case 'deleteRecord':\n        return this.normalizeDeleteRecordResponse(...arguments);\n      case 'updateRecord':\n        return this.normalizeUpdateRecordResponse(...arguments);\n    }\n  },\n  /**\n    Called by the default normalizeResponse implementation when the\n    type of request is `findRecord`\n     @since 1.13.0\n    @method normalizeFindRecordResponse\n    @public\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @return {Object} JSON-API Document\n  */\n  normalizeFindRecordResponse(store, primaryModelClass, payload, id, requestType) {\n    return this.normalizeSingleResponse(...arguments);\n  },\n  /**\n    Called by the default normalizeResponse implementation when the\n    type of request is `queryRecord`\n     @since 1.13.0\n    @method normalizeQueryRecordResponse\n    @public\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @return {Object} JSON-API Document\n  */\n  normalizeQueryRecordResponse(store, primaryModelClass, payload, id, requestType) {\n    return this.normalizeSingleResponse(...arguments);\n  },\n  /**\n    Called by the default normalizeResponse implementation when the\n    type of request is `findAll`\n     @since 1.13.0\n    @method normalizeFindAllResponse\n    @public\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @return {Object} JSON-API Document\n  */\n  normalizeFindAllResponse(store, primaryModelClass, payload, id, requestType) {\n    return this.normalizeArrayResponse(...arguments);\n  },\n  /**\n    Called by the default normalizeResponse implementation when the\n    type of request is `findBelongsTo`\n     @since 1.13.0\n    @method normalizeFindBelongsToResponse\n    @public\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @return {Object} JSON-API Document\n  */\n  normalizeFindBelongsToResponse(store, primaryModelClass, payload, id, requestType) {\n    return this.normalizeSingleResponse(...arguments);\n  },\n  /**\n    Called by the default normalizeResponse implementation when the\n    type of request is `findHasMany`\n     @since 1.13.0\n    @method normalizeFindHasManyResponse\n    @public\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @return {Object} JSON-API Document\n  */\n  normalizeFindHasManyResponse(store, primaryModelClass, payload, id, requestType) {\n    return this.normalizeArrayResponse(...arguments);\n  },\n  /**\n    Called by the default normalizeResponse implementation when the\n    type of request is `findMany`\n     @since 1.13.0\n    @method normalizeFindManyResponse\n    @public\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @return {Object} JSON-API Document\n  */\n  normalizeFindManyResponse(store, primaryModelClass, payload, id, requestType) {\n    return this.normalizeArrayResponse(...arguments);\n  },\n  /**\n    Called by the default normalizeResponse implementation when the\n    type of request is `query`\n     @since 1.13.0\n    @method normalizeQueryResponse\n    @public\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @return {Object} JSON-API Document\n  */\n  normalizeQueryResponse(store, primaryModelClass, payload, id, requestType) {\n    return this.normalizeArrayResponse(...arguments);\n  },\n  /**\n    Called by the default normalizeResponse implementation when the\n    type of request is `createRecord`\n     @since 1.13.0\n    @method normalizeCreateRecordResponse\n    @public\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @return {Object} JSON-API Document\n  */\n  normalizeCreateRecordResponse(store, primaryModelClass, payload, id, requestType) {\n    return this.normalizeSaveResponse(...arguments);\n  },\n  /**\n    Called by the default normalizeResponse implementation when the\n    type of request is `deleteRecord`\n     @since 1.13.0\n    @method normalizeDeleteRecordResponse\n    @public\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @return {Object} JSON-API Document\n  */\n  normalizeDeleteRecordResponse(store, primaryModelClass, payload, id, requestType) {\n    return this.normalizeSaveResponse(...arguments);\n  },\n  /**\n    Called by the default normalizeResponse implementation when the\n    type of request is `updateRecord`\n     @since 1.13.0\n    @method normalizeUpdateRecordResponse\n    @public\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @return {Object} JSON-API Document\n  */\n  normalizeUpdateRecordResponse(store, primaryModelClass, payload, id, requestType) {\n    return this.normalizeSaveResponse(...arguments);\n  },\n  /**\n    normalizeUpdateRecordResponse, normalizeCreateRecordResponse and\n    normalizeDeleteRecordResponse delegate to this method by default.\n     @since 1.13.0\n    @method normalizeSaveResponse\n    @public\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @return {Object} JSON-API Document\n  */\n  normalizeSaveResponse(store, primaryModelClass, payload, id, requestType) {\n    return this.normalizeSingleResponse(...arguments);\n  },\n  /**\n    normalizeQueryResponse and normalizeFindRecordResponse delegate to this\n    method by default.\n     @since 1.13.0\n    @method normalizeSingleResponse\n    @public\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @return {Object} JSON-API Document\n  */\n  normalizeSingleResponse(store, primaryModelClass, payload, id, requestType) {\n    return this._normalizeResponse(store, primaryModelClass, payload, id, requestType, true);\n  },\n  /**\n    normalizeQueryResponse, normalizeFindManyResponse, and normalizeFindHasManyResponse delegate\n    to this method by default.\n     @since 1.13.0\n    @method normalizeArrayResponse\n    @public\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @return {Object} JSON-API Document\n  */\n  normalizeArrayResponse(store, primaryModelClass, payload, id, requestType) {\n    return this._normalizeResponse(store, primaryModelClass, payload, id, requestType, false);\n  },\n  /**\n    @method _normalizeResponse\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @param {Boolean} isSingle\n    @return {Object} JSON-API Document\n    @private\n  */\n  _normalizeResponse(store, primaryModelClass, payload, id, requestType, isSingle) {\n    const documentHash = {\n      data: null,\n      included: []\n    };\n    const meta = this.extractMeta(store, primaryModelClass, payload);\n    if (meta) {\n      ( true && !(typeof meta === 'object') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)('The `meta` returned from `extractMeta` has to be an object, not \"' + typeof meta + '\".', typeof meta === 'object'));\n      documentHash.meta = meta;\n    }\n    if (isSingle) {\n      const {\n        data,\n        included\n      } = this.normalize(primaryModelClass, payload);\n      documentHash.data = data;\n      if (included) {\n        documentHash.included = included;\n      }\n    } else {\n      const ret = new Array(payload.length);\n      for (let i = 0, l = payload.length; i < l; i++) {\n        const item = payload[i];\n        const {\n          data,\n          included\n        } = this.normalize(primaryModelClass, item);\n        if (included) {\n          documentHash.included = documentHash.included.concat(included);\n        }\n        ret[i] = data;\n      }\n      documentHash.data = ret;\n    }\n    return documentHash;\n  },\n  /**\n    Normalizes a part of the JSON payload returned by\n    the server. You should override this method, munge the hash\n    and call super if you have generic normalization to do.\n     It takes the type of the record that is being normalized\n    (as a Model class), the property where the hash was\n    originally found, and the hash to normalize.\n     You can use this method, for example, to normalize underscored keys to camelized\n    or other general-purpose normalizations.\n     Example\n     ```app/serializers/application.js\n    import JSONSerializer from '@ember-data/serializer/json';\n    import { underscore } from '<app-name>/utils/string-utils';\n    import { get } from '@ember/object';\n     export default class ApplicationSerializer extends JSONSerializer {\n      normalize(typeClass, hash) {\n        let fields = typeClass.fields;\n         fields.forEach(function(type, field) {\n          let payloadField = underscore(field);\n          if (field === payloadField) { return; }\n           hash[field] = hash[payloadField];\n          delete hash[payloadField];\n        });\n         return super.normalize(...arguments);\n      }\n    }\n    ```\n     @method normalize\n    @public\n    @param {Model} typeClass\n    @param {Object} hash\n    @return {Object}\n  */\n  normalize(modelClass, resourceHash) {\n    let data = null;\n    if (resourceHash) {\n      this.normalizeUsingDeclaredMapping(modelClass, resourceHash);\n      if (typeof resourceHash.links === 'object') {\n        this.normalizeUsingDeclaredMapping(modelClass, resourceHash.links);\n      }\n      data = {\n        id: this.extractId(modelClass, resourceHash),\n        type: modelClass.modelName,\n        attributes: this.extractAttributes(modelClass, resourceHash),\n        relationships: this.extractRelationships(modelClass, resourceHash)\n      };\n      this.applyTransforms(modelClass, data.attributes);\n    }\n    return {\n      data\n    };\n  },\n  /**\n    Returns the resource's ID.\n     @method extractId\n    @public\n    @param {Object} modelClass\n    @param {Object} resourceHash\n    @return {String}\n  */\n  extractId(modelClass, resourceHash) {\n    const primaryKey = this.primaryKey;\n    const id = resourceHash[primaryKey];\n    return (0,_utils_N1ERF6HN__WEBPACK_IMPORTED_MODULE_5__.c)(id);\n  },\n  /**\n    Returns the resource's attributes formatted as a JSON-API \"attributes object\".\n     http://jsonapi.org/format/#document-resource-object-attributes\n     @method extractAttributes\n    @public\n    @param {Object} modelClass\n    @param {Object} resourceHash\n    @return {Object}\n  */\n  extractAttributes(modelClass, resourceHash) {\n    let attributeKey;\n    const attributes = {};\n    modelClass.eachAttribute(key => {\n      attributeKey = this.keyForAttribute(key, 'deserialize');\n      if (resourceHash[attributeKey] !== undefined) {\n        attributes[key] = resourceHash[attributeKey];\n      }\n    });\n    return attributes;\n  },\n  /**\n    Returns a relationship formatted as a JSON-API \"relationship object\".\n     http://jsonapi.org/format/#document-resource-object-relationships\n     @method extractRelationship\n    @public\n    @param {Object} relationshipModelName\n    @param {Object} relationshipHash\n    @return {Object}\n  */\n  extractRelationship(relationshipModelName, relationshipHash) {\n    if (!relationshipHash) {\n      return null;\n    }\n    /*\n      When `relationshipHash` is an object it usually means that the relationship\n      is polymorphic. It could however also be embedded resources that the\n      EmbeddedRecordsMixin has be able to process.\n    */\n    if (relationshipHash && typeof relationshipHash === 'object' && !Array.isArray(relationshipHash)) {\n      if (relationshipHash.id) {\n        relationshipHash.id = (0,_utils_N1ERF6HN__WEBPACK_IMPORTED_MODULE_5__.c)(relationshipHash.id);\n      }\n      const modelClass = this.store.modelFor(relationshipModelName);\n      if (relationshipHash.type && !modelClass.fields.has('type')) {\n        relationshipHash.type = this.modelNameFromPayloadKey(relationshipHash.type);\n      }\n      return relationshipHash;\n    }\n    return {\n      id: (0,_utils_N1ERF6HN__WEBPACK_IMPORTED_MODULE_5__.c)(relationshipHash),\n      type: (0,_ember_string__WEBPACK_IMPORTED_MODULE_2__.dasherize)((0,ember_inflector__WEBPACK_IMPORTED_MODULE_3__.singularize)(relationshipModelName))\n    };\n  },\n  /**\n    Returns a polymorphic relationship formatted as a JSON-API \"relationship object\".\n     http://jsonapi.org/format/#document-resource-object-relationships\n     `relationshipOptions` is a hash which contains more information about the\n    polymorphic relationship which should be extracted:\n      - `resourceHash` complete hash of the resource the relationship should be\n        extracted from\n      - `relationshipKey` key under which the value for the relationship is\n        extracted from the resourceHash\n      - `relationshipMeta` meta information about the relationship\n     @method extractPolymorphicRelationship\n    @public\n    @param {Object} relationshipModelName\n    @param {Object} relationshipHash\n    @param {Object} relationshipOptions\n    @return {Object}\n  */\n  extractPolymorphicRelationship(relationshipModelName, relationshipHash, relationshipOptions) {\n    return this.extractRelationship(relationshipModelName, relationshipHash);\n  },\n  /**\n    Returns the resource's relationships formatted as a JSON-API \"relationships object\".\n     http://jsonapi.org/format/#document-resource-object-relationships\n     @method extractRelationships\n    @public\n    @param {Object} modelClass\n    @param {Object} resourceHash\n    @return {Object}\n  */\n  extractRelationships(modelClass, resourceHash) {\n    const relationships = {};\n    modelClass.eachRelationship((key, relationshipMeta) => {\n      let relationship = null;\n      const relationshipKey = this.keyForRelationship(key, relationshipMeta.kind, 'deserialize');\n      if (resourceHash[relationshipKey] !== undefined) {\n        let data = null;\n        const relationshipHash = resourceHash[relationshipKey];\n        if (relationshipMeta.kind === 'belongsTo') {\n          if (relationshipMeta.options.polymorphic) {\n            // extracting a polymorphic belongsTo may need more information\n            // than the type and the hash (which might only be an id) for the\n            // relationship, hence we pass the key, resource and\n            // relationshipMeta too\n            data = this.extractPolymorphicRelationship(relationshipMeta.type, relationshipHash, {\n              key,\n              resourceHash,\n              relationshipMeta\n            });\n          } else {\n            data = this.extractRelationship(relationshipMeta.type, relationshipHash);\n          }\n        } else if (relationshipMeta.kind === 'hasMany') {\n          if (relationshipHash) {\n            data = new Array(relationshipHash.length);\n            if (relationshipMeta.options.polymorphic) {\n              for (let i = 0, l = relationshipHash.length; i < l; i++) {\n                const item = relationshipHash[i];\n                data[i] = this.extractPolymorphicRelationship(relationshipMeta.type, item, {\n                  key,\n                  resourceHash,\n                  relationshipMeta\n                });\n              }\n            } else {\n              for (let i = 0, l = relationshipHash.length; i < l; i++) {\n                const item = relationshipHash[i];\n                data[i] = this.extractRelationship(relationshipMeta.type, item);\n              }\n            }\n          }\n        }\n        relationship = {\n          data\n        };\n      }\n      const linkKey = this.keyForLink(key, relationshipMeta.kind);\n      if (resourceHash.links && resourceHash.links[linkKey] !== undefined) {\n        const related = resourceHash.links[linkKey];\n        relationship = relationship || {};\n        relationship.links = {\n          related\n        };\n      }\n      if (relationship) {\n        relationships[key] = relationship;\n      }\n    });\n    return relationships;\n  },\n  /**\n    Dasherizes the model name in the payload\n     @method modelNameFromPayloadKey\n    @public\n    @param {String} key\n    @return {String} the model's modelName\n  */\n  modelNameFromPayloadKey(key) {\n    return (0,_ember_string__WEBPACK_IMPORTED_MODULE_2__.dasherize)((0,ember_inflector__WEBPACK_IMPORTED_MODULE_3__.singularize)(key));\n  },\n  /**\n    @method normalizeRelationships\n    @private\n  */\n  normalizeRelationships(typeClass, hash) {\n    let payloadKey;\n    if (this.keyForRelationship) {\n      typeClass.eachRelationship((key, relationship) => {\n        payloadKey = this.keyForRelationship(key, relationship.kind, 'deserialize');\n        if (key === payloadKey) {\n          return;\n        }\n        if (hash[payloadKey] === undefined) {\n          return;\n        }\n        hash[key] = hash[payloadKey];\n        delete hash[payloadKey];\n      });\n    }\n  },\n  /**\n    @method normalizeUsingDeclaredMapping\n    @private\n  */\n  normalizeUsingDeclaredMapping(modelClass, hash) {\n    const attrs = this.attrs;\n    let normalizedKey;\n    let payloadKey;\n    if (attrs) {\n      for (const key in attrs) {\n        normalizedKey = payloadKey = this._getMappedKey(key, modelClass);\n        if (hash[payloadKey] === undefined) {\n          continue;\n        }\n        if (modelClass.attributes.has(key)) {\n          normalizedKey = this.keyForAttribute(key, 'deserialize');\n        }\n        if (modelClass.relationshipsByName.has(key)) {\n          normalizedKey = this.keyForRelationship(key, modelClass, 'deserialize');\n        }\n        if (payloadKey !== normalizedKey) {\n          hash[normalizedKey] = hash[payloadKey];\n          delete hash[payloadKey];\n        }\n      }\n    }\n  },\n  /**\n    Looks up the property key that was set by the custom `attr` mapping\n    passed to the serializer.\n     @method _getMappedKey\n    @private\n    @param {String} key\n    @return {String} key\n  */\n  _getMappedKey(key, modelClass) {\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.warn)('There is no attribute or relationship with the name `' + key + '` on `' + modelClass.modelName + '`. Check your serializers attrs hash.', modelClass.attributes.has(key) || modelClass.relationshipsByName.has(key), {\n      id: 'ds.serializer.no-mapped-attrs-key'\n    }));\n    const attrs = this.attrs;\n    let mappedKey;\n    if (attrs && attrs[key]) {\n      mappedKey = attrs[key];\n      //We need to account for both the { title: 'post_title' } and\n      //{ title: { key: 'post_title' }} forms\n      if (mappedKey.key) {\n        mappedKey = mappedKey.key;\n      }\n      if (typeof mappedKey === 'string') {\n        key = mappedKey;\n      }\n    }\n    return key;\n  },\n  /**\n    Check attrs.key.serialize property to inform if the `key`\n    can be serialized\n     @method _canSerialize\n    @private\n    @param {String} key\n    @return {boolean} true if the key can be serialized\n  */\n  _canSerialize(key) {\n    const attrs = this.attrs;\n    return !attrs || !attrs[key] || attrs[key].serialize !== false;\n  },\n  /**\n    When attrs.key.serialize is set to true then\n    it takes priority over the other checks and the related\n    attribute/relationship will be serialized\n     @method _mustSerialize\n    @private\n    @param {String} key\n    @return {boolean} true if the key must be serialized\n  */\n  _mustSerialize(key) {\n    const attrs = this.attrs;\n    return attrs && attrs[key] && attrs[key].serialize === true;\n  },\n  /**\n    Check if the given hasMany relationship should be serialized\n     By default only many-to-many and many-to-none relationships are serialized.\n    This could be configured per relationship by Serializer's `attrs` object.\n     @method shouldSerializeHasMany\n    @public\n    @param {Snapshot} snapshot\n    @param {String} key\n    @param {RelationshipSchema} relationship\n    @return {boolean} true if the hasMany relationship should be serialized\n  */\n  shouldSerializeHasMany(snapshot, key, relationship) {\n    const schema = this.store.modelFor(snapshot.modelName);\n    const relationshipType = schema.determineRelationshipType(relationship, this.store);\n    if (this._mustSerialize(key)) {\n      return true;\n    }\n    return this._canSerialize(key) && (relationshipType === 'manyToNone' || relationshipType === 'manyToMany');\n  },\n  // SERIALIZE\n  /**\n    Called when a record is saved in order to convert the\n    record into JSON.\n     By default, it creates a JSON object with a key for\n    each attribute and belongsTo relationship.\n     For example, consider this model:\n     ```app/models/comment.js\n    import Model, { attr, belongsTo } from '@ember-data/model';\n     export default class CommentModel extends Model {\n      @attr title;\n      @attr body;\n       @belongsTo('user') author;\n    }\n    ```\n     The default serialization would create a JSON object like:\n     ```javascript\n    {\n      \"title\": \"Rails is unagi\",\n      \"body\": \"Rails? Omakase? O_O\",\n      \"author\": 12\n    }\n    ```\n     By default, attributes are passed through as-is, unless\n    you specified an attribute type (`attr('date')`). If\n    you specify a transform, the JavaScript value will be\n    serialized when inserted into the JSON hash.\n     By default, belongs-to relationships are converted into\n    IDs when inserted into the JSON hash.\n     ## IDs\n     `serialize` takes an options hash with a single option:\n    `includeId`. If this option is `true`, `serialize` will,\n    by default include the ID in the JSON object it builds.\n     The adapter passes in `includeId: true` when serializing\n    a record for `createRecord`, but not for `updateRecord`.\n     ## Customization\n     Your server may expect a different JSON format than the\n    built-in serialization format.\n     In that case, you can implement `serialize` yourself and\n    return a JSON hash of your choosing.\n     ```app/serializers/post.js\n    import JSONSerializer from '@ember-data/serializer/json';\n     export default class PostSerializer extends JSONSerializer {\n      serialize(snapshot, options) {\n        let json = {\n          POST_TTL: snapshot.attr('title'),\n          POST_BDY: snapshot.attr('body'),\n          POST_CMS: snapshot.hasMany('comments', { ids: true })\n        };\n         if (options.includeId) {\n          json.POST_ID_ = snapshot.id;\n        }\n         return json;\n      }\n    }\n    ```\n     ## Customizing an App-Wide Serializer\n     If you want to define a serializer for your entire\n    application, you'll probably want to use `eachAttribute`\n    and `eachRelationship` on the record.\n     ```app/serializers/application.js\n    import JSONSerializer from '@ember-data/serializer/json';\n    import { singularize } from '<app-name>/utils/string-utils';\n     export default class ApplicationSerializer extends JSONSerializer {\n      serialize(snapshot, options) {\n        let json = {};\n         snapshot.eachAttribute((name) => {\n          json[serverAttributeName(name)] = snapshot.attr(name);\n        });\n         snapshot.eachRelationship((name, relationship) => {\n          if (relationship.kind === 'hasMany') {\n            json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });\n          }\n        });\n         if (options.includeId) {\n          json.ID_ = snapshot.id;\n        }\n         return json;\n      }\n    }\n     function serverAttributeName(attribute) {\n      return attribute.underscore().toUpperCase();\n    }\n     function serverHasManyName(name) {\n      return serverAttributeName(singularize(name)) + \"_IDS\";\n    }\n    ```\n     This serializer will generate JSON that looks like this:\n     ```javascript\n    {\n      \"TITLE\": \"Rails is omakase\",\n      \"BODY\": \"Yep. Omakase.\",\n      \"COMMENT_IDS\": [ \"1\", \"2\", \"3\" ]\n    }\n    ```\n     ## Tweaking the Default JSON\n     If you just want to do some small tweaks on the default JSON,\n    you can call `super.serialize` first and make the tweaks on\n    the returned JSON.\n     ```app/serializers/post.js\n    import JSONSerializer from '@ember-data/serializer/json';\n     export default class PostSerializer extends JSONSerializer {\n      serialize(snapshot, options) {\n        let json = super.serialize(...arguments);\n         json.subject = json.title;\n        delete json.title;\n         return json;\n      }\n    }\n    ```\n     @method serialize\n    @public\n    @param {Snapshot} snapshot\n    @param {Object} options\n    @return {Object} json\n  */\n  serialize(snapshot, options) {\n    const json = {};\n    if (options && options.includeId) {\n      const id = snapshot.id;\n      if (id) {\n        json[this.primaryKey] = id;\n      }\n    }\n    snapshot.eachAttribute((key, attribute) => {\n      this.serializeAttribute(snapshot, json, key, attribute);\n    });\n    snapshot.eachRelationship((key, relationship) => {\n      if (relationship.kind === 'belongsTo') {\n        this.serializeBelongsTo(snapshot, json, relationship);\n      } else if (relationship.kind === 'hasMany') {\n        this.serializeHasMany(snapshot, json, relationship);\n      }\n    });\n    return json;\n  },\n  /**\n    You can use this method to customize how a serialized record is added to the complete\n    JSON hash to be sent to the server. By default the JSON Serializer does not namespace\n    the payload and just sends the raw serialized JSON object.\n    If your server expects namespaced keys, you should consider using the RESTSerializer.\n    Otherwise you can override this method to customize how the record is added to the hash.\n    The hash property should be modified by reference.\n     For example, your server may expect underscored root objects.\n     ```app/serializers/application.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n    import { decamelize } from '<app-name>/utils/string-utils';\n     export default class ApplicationSerializer extends RESTSerializer {\n      serializeIntoHash(data, type, snapshot, options) {\n        let root = decamelize(type.modelName);\n        data[root] = this.serialize(snapshot, options);\n      }\n    }\n    ```\n     @method serializeIntoHash\n    @public\n    @param {Object} hash\n    @param {Model} typeClass\n    @param {Snapshot} snapshot\n    @param {Object} options\n  */\n  serializeIntoHash(hash, typeClass, snapshot, options) {\n    Object.assign(hash, this.serialize(snapshot, options));\n  },\n  /**\n    `serializeAttribute` can be used to customize how `attr`\n    properties are serialized\n     For example if you wanted to ensure all your attributes were always\n    serialized as properties on an `attributes` object you could\n    write:\n     ```app/serializers/application.js\n    import JSONSerializer from '@ember-data/serializer/json';\n     export default class ApplicationSerializer extends JSONSerializer {\n      serializeAttribute(snapshot, json, key, attributes) {\n        json.attributes = json.attributes || {};\n        super.serializeAttribute(snapshot, json.attributes, key, attributes);\n      }\n    }\n    ```\n     @method serializeAttribute\n    @public\n    @param {Snapshot} snapshot\n    @param {Object} json\n    @param {String} key\n    @param {Object} attribute\n  */\n  serializeAttribute(snapshot, json, key, attribute) {\n    if (this._canSerialize(key)) {\n      const type = attribute.type;\n      let value = snapshot.attr(key);\n      if (type) {\n        const transform = this.transformFor(type);\n        value = transform.serialize(value, attribute.options);\n      }\n\n      // if provided, use the mapping provided by `attrs` in\n      // the serializer\n      const schema = this.store.modelFor(snapshot.modelName);\n      let payloadKey = this._getMappedKey(key, schema);\n      if (payloadKey === key && this.keyForAttribute) {\n        payloadKey = this.keyForAttribute(key, 'serialize');\n      }\n      json[payloadKey] = value;\n    }\n  },\n  /**\n    `serializeBelongsTo` can be used to customize how `belongsTo`\n    properties are serialized.\n     Example\n     ```app/serializers/post.js\n    import JSONSerializer from '@ember-data/serializer/json';\n     export default class PostSerializer extends JSONSerializer {\n      serializeBelongsTo(snapshot, json, relationship) {\n        let key = relationship.name;\n        let belongsTo = snapshot.belongsTo(key);\n         key = this.keyForRelationship ? this.keyForRelationship(key, \"belongsTo\", \"serialize\") : key;\n         json[key] = !belongsTo ? null : belongsTo.record.toJSON();\n      }\n    }\n    ```\n     @method serializeBelongsTo\n    @public\n    @param {Snapshot} snapshot\n    @param {Object} json\n    @param {Object} relationship\n  */\n  serializeBelongsTo(snapshot, json, relationship) {\n    const name = relationship.name;\n    if (this._canSerialize(name)) {\n      const belongsToId = snapshot.belongsTo(name, {\n        id: true\n      });\n\n      // if provided, use the mapping provided by `attrs` in\n      // the serializer\n      const schema = this.store.modelFor(snapshot.modelName);\n      let payloadKey = this._getMappedKey(name, schema);\n      if (payloadKey === name && this.keyForRelationship) {\n        payloadKey = this.keyForRelationship(name, 'belongsTo', 'serialize');\n      }\n\n      //Need to check whether the id is there for new&async records\n      if (!belongsToId) {\n        json[payloadKey] = null;\n      } else {\n        json[payloadKey] = belongsToId;\n      }\n      if (relationship.options.polymorphic) {\n        this.serializePolymorphicType(snapshot, json, relationship);\n      }\n    }\n  },\n  /**\n   `serializeHasMany` can be used to customize how `hasMany`\n   properties are serialized.\n    Example\n    ```app/serializers/post.js\n   import JSONSerializer from '@ember-data/serializer/json';\n    export default class PostSerializer extends JSONSerializer {\n     serializeHasMany(snapshot, json, relationship) {\n       let key = relationship.name;\n       if (key === 'comments') {\n         return;\n       } else {\n         super.serializeHasMany(...arguments);\n       }\n     }\n   }\n   ```\n    @method serializeHasMany\n    @public\n   @param {Snapshot} snapshot\n   @param {Object} json\n   @param {Object} relationship\n  */\n  serializeHasMany(snapshot, json, relationship) {\n    const name = relationship.name;\n    if (this.shouldSerializeHasMany(snapshot, name, relationship)) {\n      const hasMany = snapshot.hasMany(name, {\n        ids: true\n      });\n      if (hasMany !== undefined) {\n        // if provided, use the mapping provided by `attrs` in\n        // the serializer\n        const schema = this.store.modelFor(snapshot.modelName);\n        let payloadKey = this._getMappedKey(name, schema);\n        if (payloadKey === name && this.keyForRelationship) {\n          payloadKey = this.keyForRelationship(name, 'hasMany', 'serialize');\n        }\n        json[payloadKey] = hasMany;\n        // TODO support for polymorphic manyToNone and manyToMany relationships\n      }\n    }\n  },\n  /**\n    You can use this method to customize how polymorphic objects are\n    serialized. Objects are considered to be polymorphic if\n    `{ polymorphic: true }` is pass as the second argument to the\n    `belongsTo` function.\n     Example\n     ```app/serializers/comment.js\n    import JSONSerializer from '@ember-data/serializer/json';\n     export default class CommentSerializer extends JSONSerializer {\n      serializePolymorphicType(snapshot, json, relationship) {\n        let key = relationship.name;\n        let belongsTo = snapshot.belongsTo(key);\n         key = this.keyForAttribute ? this.keyForAttribute(key, 'serialize') : key;\n         if (!belongsTo) {\n          json[key + '_type'] = null;\n        } else {\n          json[key + '_type'] = belongsTo.modelName;\n        }\n      }\n    }\n    ```\n     @method serializePolymorphicType\n    @public\n    @param {Snapshot} snapshot\n    @param {Object} json\n    @param {Object} relationship\n  */\n  serializePolymorphicType() {},\n  /**\n    `extractMeta` is used to deserialize any meta information in the\n    adapter payload. By default Ember Data expects meta information to\n    be located on the `meta` property of the payload object.\n     Example\n     ```app/serializers/post.js\n    import JSONSerializer from '@ember-data/serializer/json';\n     export default class PostSerializer extends JSONSerializer {\n      extractMeta(store, typeClass, payload) {\n        if (payload && payload.hasOwnProperty('_pagination')) {\n          let meta = payload._pagination;\n          delete payload._pagination;\n          return meta;\n        }\n      }\n    }\n    ```\n     @method extractMeta\n    @public\n    @param {Store} store\n    @param {Model} modelClass\n    @param {Object} payload\n  */\n  extractMeta(store, modelClass, payload) {\n    if (payload && payload['meta'] !== undefined) {\n      const meta = payload.meta;\n      delete payload.meta;\n      return meta;\n    }\n  },\n  /**\n    `extractErrors` is used to extract model errors when a call\n    to `Model#save` fails with an `InvalidError`. By default\n    Ember Data expects error information to be located on the `errors`\n    property of the payload object.\n     This serializer expects this `errors` object to be an Array similar\n    to the following, compliant with the https://jsonapi.org/format/#errors specification:\n     ```js\n    {\n      \"errors\": [\n        {\n          \"detail\": \"This username is already taken!\",\n          \"source\": {\n            \"pointer\": \"data/attributes/username\"\n          }\n        }, {\n          \"detail\": \"Doesn't look like a valid email.\",\n          \"source\": {\n            \"pointer\": \"data/attributes/email\"\n          }\n        }\n      ]\n    }\n    ```\n     The key `detail` provides a textual description of the problem.\n    Alternatively, the key `title` can be used for the same purpose.\n     The nested keys `source.pointer` detail which specific element\n    of the request data was invalid.\n     Note that JSON-API also allows for object-level errors to be placed\n    in an object with pointer `data`, signifying that the problem\n    cannot be traced to a specific attribute:\n     ```javascript\n    {\n      \"errors\": [\n        {\n          \"detail\": \"Some generic non property error message\",\n          \"source\": {\n            \"pointer\": \"data\"\n          }\n        }\n      ]\n    }\n    ```\n     When turn into a `Errors` object, you can read these errors\n    through the property `base`:\n     ```handlebars\n    {{#each @model.errors.base as |error|}}\n      <div class=\"error\">\n        {{error.message}}\n      </div>\n    {{/each}}\n    ```\n     Example of alternative implementation, overriding the default\n    behavior to deal with a different format of errors:\n     ```app/serializers/post.js\n    import JSONSerializer from '@ember-data/serializer/json';\n     export default class PostSerializer extends JSONSerializer {\n      extractErrors(store, typeClass, payload, id) {\n        if (payload && typeof payload === 'object' && payload._problems) {\n          payload = payload._problems;\n          this.normalizeErrors(typeClass, payload);\n        }\n        return payload;\n      }\n    }\n    ```\n     @method extractErrors\n    @public\n    @param {Store} store\n    @param {Model} typeClass\n    @param {Object} payload\n    @param {(String|Number)} id\n    @return {Object} json The deserialized errors\n  */\n  extractErrors(store, typeClass, payload, id) {\n    if (payload && typeof payload === 'object' && payload.errors) {\n      // the default assumption is that errors is already in JSON:API format\n      const extracted = {};\n      payload.errors.forEach(error => {\n        if (error.source && error.source.pointer) {\n          let key = error.source.pointer.match(SOURCE_POINTER_REGEXP);\n          if (key) {\n            key = key[2];\n          } else if (error.source.pointer.search(SOURCE_POINTER_PRIMARY_REGEXP) !== -1) {\n            key = PRIMARY_ATTRIBUTE_KEY;\n          }\n          if (key) {\n            extracted[key] = extracted[key] || [];\n            extracted[key].push(error.detail || error.title);\n          }\n        }\n      });\n\n      // if the user has an attrs hash, convert keys using it\n      this.normalizeUsingDeclaredMapping(typeClass, extracted);\n\n      // for each attr and relationship, make sure that we use\n      // the normalized key\n      typeClass.eachAttribute(name => {\n        const key = this.keyForAttribute(name, 'deserialize');\n        if (key !== name && extracted[key] !== undefined) {\n          extracted[name] = extracted[key];\n          delete extracted[key];\n        }\n      });\n      typeClass.eachRelationship(name => {\n        const key = this.keyForRelationship(name, 'deserialize');\n        if (key !== name && extracted[key] !== undefined) {\n          extracted[name] = extracted[key];\n          delete extracted[key];\n        }\n      });\n      return extracted;\n    }\n    return payload;\n  },\n  /**\n    `keyForAttribute` can be used to define rules for how to convert an\n    attribute name in your model to a key in your JSON.\n     Example\n     ```app/serializers/application.js\n    import JSONSerializer from '@ember-data/serializer/json';\n    import { underscore } from '<app-name>/utils/string-utils';\n     export default class ApplicationSerializer extends JSONSerializer {\n      keyForAttribute(attr, method) {\n        return underscore(attr).toUpperCase();\n      }\n    }\n    ```\n     @method keyForAttribute\n    @public\n    @param {String} key\n    @param {String} method\n    @return {String} normalized key\n  */\n  keyForAttribute(key, method) {\n    return key;\n  },\n  /**\n    `keyForRelationship` can be used to define a custom key when\n    serializing and deserializing relationship properties. By default\n    `JSONSerializer` does not provide an implementation of this method.\n     Example\n       ```app/serializers/post.js\n      import JSONSerializer from '@ember-data/serializer/json';\n      import { underscore } from '<app-name>/utils/string-utils';\n       export default class PostSerializer extends JSONSerializer {\n        keyForRelationship(key, relationship, method) {\n          return `rel_${underscore(key)}`;\n        }\n      }\n      ```\n     @method keyForRelationship\n    @public\n    @param {String} key\n    @param {String} typeClass\n    @param {String} method\n    @return {String} normalized key\n  */\n  keyForRelationship(key, typeClass, method) {\n    return key;\n  },\n  /**\n   `keyForLink` can be used to define a custom key when deserializing link\n   properties.\n    @method keyForLink\n    @public\n   @param {String} key\n   @param {String} kind `belongsTo` or `hasMany`\n   @return {String} normalized key\n  */\n  keyForLink(key, kind) {\n    return key;\n  },\n  // HELPERS\n\n  /**\n   @method transformFor\n   @private\n   @param {String} attributeType\n   @param {Boolean} skipAssertion\n   @return {Transform} transform\n  */\n  transformFor(attributeType, skipAssertion) {\n    const transform = (0,_ember_application__WEBPACK_IMPORTED_MODULE_0__.getOwner)(this).lookup('transform:' + attributeType);\n    ( true && !(skipAssertion || !!transform) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`Unable to find the transform for \\`attr('${attributeType}')\\``, skipAssertion || !!transform));\n    return transform;\n  }\n});\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/json.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/rest.js":
/*!*********************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/rest.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmbeddedRecordsMixin: () => (/* reexport safe */ _embedded_records_mixin_HTw8JJT1__WEBPACK_IMPORTED_MODULE_3__.e),\n/* harmony export */   \"default\": () => (/* binding */ RESTSerializer)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/string */ \"../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/index.js\");\n/* harmony import */ var ember_inflector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ember-inflector */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/index.js\");\n/* harmony import */ var _embedded_records_mixin_HTw8JJT1__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./embedded-records-mixin-HTw8JJT1 */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/embedded-records-mixin-HTw8JJT1.js\");\n/* harmony import */ var _utils_N1ERF6HN__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils-N1ERF6HN */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/utils-N1ERF6HN.js\");\n/* harmony import */ var _json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./json */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/json.js\");\n\n\n\n\n\n\n/**\n * @module @ember-data/serializer/rest\n */\nfunction makeArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n\n/**\n * <blockquote style=\"margin: 1em; padding: .1em 1em .1em 1em; border-left: solid 1em #E34C32; background: #e0e0e0;\">\n  <p>\n    ⚠️ <strong>This is LEGACY documentation</strong> for a feature that is no longer encouraged to be used.\n    If starting a new app or thinking of implementing a new adapter, consider writing a\n    <a href=\"/ember-data/release/classes/%3CInterface%3E%20Handler\">Handler</a> instead to be used with the <a href=\"https://github.com/emberjs/data/tree/main/packages/request#readme\">RequestManager</a>\n  </p>\n  </blockquote>\n\n  Normally, applications will use the `RESTSerializer` by implementing\n  the `normalize` method.\n\n  This allows you to do whatever kind of munging you need and is\n  especially useful if your server is inconsistent and you need to\n  do munging differently for many different kinds of responses.\n\n  See the `normalize` documentation for more information.\n\n  ## Across the Board Normalization\n\n  There are also a number of hooks that you might find useful to define\n  across-the-board rules for your payload. These rules will be useful\n  if your server is consistent, or if you're building an adapter for\n  an infrastructure service, like Firebase, and want to encode service\n  conventions.\n\n  For example, if all of your keys are underscored and all-caps, but\n  otherwise consistent with the names you use in your models, you\n  can implement across-the-board rules for how to convert an attribute\n  name in your model to a key in your JSON.\n\n  ```app/serializers/application.js\n  import RESTSerializer from '@ember-data/serializer/rest';\n  import { underscore } from '<app-name>/utils/string-utils';\n\n  export default class ApplicationSerializer extends RESTSerializer {\n    keyForAttribute(attr, method) {\n      return underscore(attr).toUpperCase();\n    }\n  }\n  ```\n\n  You can also implement `keyForRelationship`, which takes the name\n  of the relationship as the first parameter, the kind of\n  relationship (`hasMany` or `belongsTo`) as the second parameter, and\n  the method (`serialize` or `deserialize`) as the third parameter.\n\n  @class RESTSerializer\n  @main @ember-data/serializer/rest\n  @public\n  @extends JSONSerializer\n*/\nconst RESTSerializer = _json__WEBPACK_IMPORTED_MODULE_5__[\"default\"].extend({\n  /**\n   `keyForPolymorphicType` can be used to define a custom key when\n   serializing and deserializing a polymorphic type. By default, the\n   returned key is `${key}Type`.\n    Example\n     ```app/serializers/post.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n     export default class ApplicationSerializer extends RESTSerializer {\n      keyForPolymorphicType(key, relationship) {\n        let relationshipKey = this.keyForRelationship(key);\n         return 'type-' + relationshipKey;\n      }\n    }\n    ```\n    @method keyForPolymorphicType\n    @public\n   @param {String} key\n   @param {String} typeClass\n   @param {String} method\n   @return {String} normalized key\n  */\n  keyForPolymorphicType(key, typeClass, method) {\n    const relationshipKey = this.keyForRelationship(key);\n    return `${relationshipKey}Type`;\n  },\n  /**\n    Normalizes a part of the JSON payload returned by\n    the server. You should override this method, munge the hash\n    and call super if you have generic normalization to do.\n     It takes the type of the record that is being normalized\n    (as a Model class), the property where the hash was\n    originally found, and the hash to normalize.\n     For example, if you have a payload that looks like this:\n     ```js\n    {\n      \"post\": {\n        \"id\": 1,\n        \"title\": \"Rails is omakase\",\n        \"comments\": [ 1, 2 ]\n      },\n      \"comments\": [{\n        \"id\": 1,\n        \"body\": \"FIRST\"\n      }, {\n        \"id\": 2,\n        \"body\": \"Rails is unagi\"\n      }]\n    }\n    ```\n     The `normalize` method will be called three times:\n     * With `App.Post`, `\"posts\"` and `{ id: 1, title: \"Rails is omakase\", ... }`\n    * With `App.Comment`, `\"comments\"` and `{ id: 1, body: \"FIRST\" }`\n    * With `App.Comment`, `\"comments\"` and `{ id: 2, body: \"Rails is unagi\" }`\n     You can use this method, for example, to normalize underscored keys to camelized\n    or other general-purpose normalizations. You will only need to implement\n    `normalize` and manipulate the payload as desired.\n     For example, if the `IDs` under `\"comments\"` are provided as `_id` instead of\n    `id`, you can specify how to normalize just the comments:\n     ```app/serializers/post.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n     export default class ApplicationSerializer extends RESTSerializer {\n      normalize(model, hash, prop) {\n        if (prop === 'comments') {\n          hash.id = hash._id;\n          delete hash._id;\n        }\n         return super.normalize(...arguments);\n      }\n    }\n    ```\n     On each call to the `normalize` method, the third parameter (`prop`) is always\n    one of the keys that were in the original payload or in the result of another\n    normalization as `normalizeResponse`.\n     @method normalize\n    @public\n    @param {Model} modelClass\n    @param {Object} resourceHash\n    @param {String} prop\n    @return {Object}\n  */\n\n  /**\n    Normalizes an array of resource payloads and returns a JSON-API Document\n    with primary data and, if any, included data as `{ data, included }`.\n     @method _normalizeArray\n    @param {Store} store\n    @param {String} modelName\n    @param {Object} arrayHash\n    @param {String} prop\n    @return {Object}\n    @private\n  */\n  _normalizeArray(store, modelName, arrayHash, prop) {\n    const documentHash = {\n      data: [],\n      included: []\n    };\n    const modelClass = store.modelFor(modelName);\n    const serializer = store.serializerFor(modelName);\n    makeArray(arrayHash).forEach(hash => {\n      const {\n        data,\n        included\n      } = this._normalizePolymorphicRecord(store, hash, prop, modelClass, serializer);\n      documentHash.data.push(data);\n      if (included) {\n        documentHash.included = documentHash.included.concat(included);\n      }\n    });\n    return documentHash;\n  },\n  _normalizePolymorphicRecord(store, hash, prop, primaryModelClass, primarySerializer) {\n    let serializer = primarySerializer;\n    let modelClass = primaryModelClass;\n    const primaryHasTypeAttribute = primaryModelClass.fields.has('type');\n    if (!primaryHasTypeAttribute && hash.type) {\n      // Support polymorphic records in async relationships\n      const modelName = this.modelNameFromPayloadKey(hash.type);\n      if (store.getSchemaDefinitionService().doesTypeExist(modelName)) {\n        serializer = store.serializerFor(modelName);\n        modelClass = store.modelFor(modelName);\n      }\n    }\n    return serializer.normalize(modelClass, hash, prop);\n  },\n  /**\n    @method _normalizeResponse\n    @param {Store} store\n    @param {Model} primaryModelClass\n    @param {Object} payload\n    @param {String|Number} id\n    @param {String} requestType\n    @param {Boolean} isSingle\n    @return {Object} JSON-API Document\n    @private\n  */\n  _normalizeResponse(store, primaryModelClass, payload, id, requestType, isSingle) {\n    const documentHash = {\n      data: null,\n      included: []\n    };\n    const meta = this.extractMeta(store, primaryModelClass, payload);\n    if (meta) {\n      ( true && !(typeof meta === 'object') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('The `meta` returned from `extractMeta` has to be an object, not \"' + typeof meta + '\".', typeof meta === 'object'));\n      documentHash.meta = meta;\n    }\n    const keys = Object.keys(payload);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var prop = keys[i];\n      var modelName = prop;\n      var forcedSecondary = false;\n\n      /*\n        If you want to provide sideloaded records of the same type that the\n        primary data you can do that by prefixing the key with `_`.\n         Example\n         ```\n        {\n          users: [\n            { id: 1, title: 'Tom', manager: 3 },\n            { id: 2, title: 'Yehuda', manager: 3 }\n          ],\n          _users: [\n            { id: 3, title: 'Tomster' }\n          ]\n        }\n        ```\n         This forces `_users` to be added to `included` instead of `data`.\n       */\n      if (prop.charAt(0) === '_') {\n        forcedSecondary = true;\n        modelName = prop.substr(1);\n      }\n      var typeName = this.modelNameFromPayloadKey(modelName);\n      if (!store.getSchemaDefinitionService().doesTypeExist(typeName)) {\n        ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(this.warnMessageNoModelForKey(modelName, typeName), false, {\n          id: 'ds.serializer.model-for-key-missing'\n        }));\n        continue;\n      }\n      var isPrimary = !forcedSecondary && this.isPrimaryType(store, typeName, primaryModelClass);\n      var value = payload[prop];\n      if (value === null) {\n        continue;\n      }\n      ( true && !(!(requestType === 'queryRecord' && isPrimary && Array.isArray(value))) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('The adapter returned an array for the primary data of a `queryRecord` response. `queryRecord` should return a single record.', !(requestType === 'queryRecord' && isPrimary && Array.isArray(value))));\n      /*\n        Support primary data as an object instead of an array.\n         Example\n         ```\n        {\n          user: { id: 1, title: 'Tom', manager: 3 }\n        }\n        ```\n       */\n      if (isPrimary && !Array.isArray(value)) {\n        const {\n          data,\n          included\n        } = this._normalizePolymorphicRecord(store, value, prop, primaryModelClass, this);\n        documentHash.data = data;\n        if (included) {\n          documentHash.included = documentHash.included.concat(included);\n        }\n        continue;\n      }\n      const {\n        data,\n        included\n      } = this._normalizeArray(store, typeName, value, prop);\n      if (included) {\n        documentHash.included = documentHash.included.concat(included);\n      }\n      if (isSingle) {\n        data.forEach(resource => {\n          /*\n            Figures out if this is the primary record or not.\n             It's either:\n             1. The record with the same ID as the original request\n            2. If it's a newly created record without an ID, the first record\n               in the array\n           */\n          const isUpdatedRecord = isPrimary && (0,_utils_N1ERF6HN__WEBPACK_IMPORTED_MODULE_4__.c)(resource.id) === id;\n          const isFirstCreatedRecord = isPrimary && !id && !documentHash.data;\n          if (isFirstCreatedRecord || isUpdatedRecord) {\n            documentHash.data = resource;\n          } else {\n            documentHash.included.push(resource);\n          }\n        });\n      } else {\n        if (isPrimary) {\n          documentHash.data = data;\n        } else {\n          if (data) {\n            documentHash.included = documentHash.included.concat(data);\n          }\n        }\n      }\n    }\n    return documentHash;\n  },\n  isPrimaryType(store, modelName, primaryModelClass) {\n    return (0,_ember_string__WEBPACK_IMPORTED_MODULE_1__.dasherize)(modelName) === primaryModelClass.modelName;\n  },\n  /**\n    This method allows you to push a payload containing top-level\n    collections of records organized per type.\n     ```js\n    {\n      \"posts\": [{\n        \"id\": \"1\",\n        \"title\": \"Rails is omakase\",\n        \"author\", \"1\",\n        \"comments\": [ \"1\" ]\n      }],\n      \"comments\": [{\n        \"id\": \"1\",\n        \"body\": \"FIRST\"\n      }],\n      \"users\": [{\n        \"id\": \"1\",\n        \"name\": \"@d2h\"\n      }]\n    }\n    ```\n     It will first normalize the payload, so you can use this to push\n    in data streaming in from your server structured the same way\n    that fetches and saves are structured.\n     @method pushPayload\n    @public\n    @param {Store} store\n    @param {Object} payload\n  */\n  pushPayload(store, payload) {\n    const documentHash = {\n      data: [],\n      included: []\n    };\n    for (var prop in payload) {\n      var modelName = this.modelNameFromPayloadKey(prop);\n      if (!store.getSchemaDefinitionService().doesTypeExist(modelName)) {\n        ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(this.warnMessageNoModelForKey(prop, modelName), false, {\n          id: 'ds.serializer.model-for-key-missing'\n        }));\n        continue;\n      }\n      var type = store.modelFor(modelName);\n      var typeSerializer = store.serializerFor(type.modelName);\n      makeArray(payload[prop]).forEach(hash => {\n        const {\n          data,\n          included\n        } = typeSerializer.normalize(type, hash, prop);\n        documentHash.data.push(data);\n        if (included) {\n          documentHash.included = documentHash.included.concat(included);\n        }\n      });\n    }\n    store.push(documentHash);\n  },\n  /**\n    This method is used to convert each JSON root key in the payload\n    into a modelName that it can use to look up the appropriate model for\n    that part of the payload.\n     For example, your server may send a model name that does not correspond with\n    the name of the model in your app. Let's take a look at an example model,\n    and an example payload:\n     ```app/models/post.js\n    import Model from '@ember-data/model';\n     export default class Post extends Model {}\n    ```\n     ```javascript\n      {\n        \"blog/post\": {\n          \"id\": \"1\n        }\n      }\n    ```\n     Ember Data is going to normalize the payload's root key for the modelName. As a result,\n    it will try to look up the \"blog/post\" model. Since we don't have a model called \"blog/post\"\n    (or a file called app/models/blog/post.js in ember-cli), Ember Data will throw an error\n    because it cannot find the \"blog/post\" model.\n     Since we want to remove this namespace, we can define a serializer for the application that will\n    remove \"blog/\" from the payload key whenver it's encountered by Ember Data:\n     ```app/serializers/application.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n     export default class ApplicationSerializer extends RESTSerializer {\n      modelNameFromPayloadKey(payloadKey) {\n        if (payloadKey === 'blog/post') {\n          return super.modelNameFromPayloadKey(payloadKey.replace('blog/', ''));\n        } else {\n         return super.modelNameFromPayloadKey(payloadKey);\n        }\n      }\n    }\n    ```\n     After refreshing, Ember Data will appropriately look up the \"post\" model.\n     By default the modelName for a model is its\n    name in dasherized form. This means that a payload key like \"blogPost\" would be\n    normalized to \"blog-post\" when Ember Data looks up the model. Usually, Ember Data\n    can use the correct inflection to do this for you. Most of the time, you won't\n    need to override `modelNameFromPayloadKey` for this purpose.\n     @method modelNameFromPayloadKey\n    @public\n    @param {String} key\n    @return {String} the model's modelName\n  */\n  modelNameFromPayloadKey(key) {\n    return (0,_ember_string__WEBPACK_IMPORTED_MODULE_1__.dasherize)((0,ember_inflector__WEBPACK_IMPORTED_MODULE_2__.singularize)(key));\n  },\n  // SERIALIZE\n\n  /**\n    Called when a record is saved in order to convert the\n    record into JSON.\n     By default, it creates a JSON object with a key for\n    each attribute and belongsTo relationship.\n     For example, consider this model:\n     ```app/models/comment.js\n    import Model, { attr, belongsTo } from '@ember-data/model';\n     export default class Comment extends Model {\n      @attr title\n      @attr body\n       @belongsTo('user') author\n    }\n    ```\n     The default serialization would create a JSON object like:\n     ```js\n    {\n      \"title\": \"Rails is unagi\",\n      \"body\": \"Rails? Omakase? O_O\",\n      \"author\": 12\n    }\n    ```\n     By default, attributes are passed through as-is, unless\n    you specified an attribute type (`attr('date')`). If\n    you specify a transform, the JavaScript value will be\n    serialized when inserted into the JSON hash.\n     By default, belongs-to relationships are converted into\n    IDs when inserted into the JSON hash.\n     ## IDs\n     `serialize` takes an options hash with a single option:\n    `includeId`. If this option is `true`, `serialize` will,\n    by default include the ID in the JSON object it builds.\n     The adapter passes in `includeId: true` when serializing\n    a record for `createRecord`, but not for `updateRecord`.\n     ## Customization\n     Your server may expect a different JSON format than the\n    built-in serialization format.\n     In that case, you can implement `serialize` yourself and\n    return a JSON hash of your choosing.\n     ```app/serializers/post.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n     export default class ApplicationSerializer extends RESTSerializer {\n      serialize(snapshot, options) {\n        let json = {\n          POST_TTL: snapshot.attr('title'),\n          POST_BDY: snapshot.attr('body'),\n          POST_CMS: snapshot.hasMany('comments', { ids: true })\n        };\n         if (options.includeId) {\n          json.POST_ID_ = snapshot.id;\n        }\n         return json;\n      }\n    }\n    ```\n     ## Customizing an App-Wide Serializer\n     If you want to define a serializer for your entire\n    application, you'll probably want to use `eachAttribute`\n    and `eachRelationship` on the record.\n     ```app/serializers/application.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n    import { pluralize } from '<app-name>/utils/string-utils';\n     export default class ApplicationSerializer extends RESTSerializer {\n      serialize(snapshot, options) {\n        let json = {};\n         snapshot.eachAttribute(function(name) {\n          json[serverAttributeName(name)] = snapshot.attr(name);\n        });\n         snapshot.eachRelationship(function(name, relationship) {\n          if (relationship.kind === 'hasMany') {\n            json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });\n          }\n        });\n         if (options.includeId) {\n          json.ID_ = snapshot.id;\n        }\n         return json;\n      }\n    }\n     function serverAttributeName(attribute) {\n      return attribute.underscore().toUpperCase();\n    }\n     function serverHasManyName(name) {\n      return serverAttributeName(singularize(name)) + \"_IDS\";\n    }\n    ```\n     This serializer will generate JSON that looks like this:\n     ```js\n    {\n      \"TITLE\": \"Rails is omakase\",\n      \"BODY\": \"Yep. Omakase.\",\n      \"COMMENT_IDS\": [ 1, 2, 3 ]\n    }\n    ```\n     ## Tweaking the Default JSON\n     If you just want to do some small tweaks on the default JSON,\n    you can call super first and make the tweaks on the returned\n    JSON.\n     ```app/serializers/post.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n     export default class ApplicationSerializer extends RESTSerializer {\n      serialize(snapshot, options) {\n        let json = super.serialize(snapshot, options);\n         json.subject = json.title;\n        delete json.title;\n         return json;\n      }\n    }\n    ```\n     @method serialize\n    @public\n    @param {Snapshot} snapshot\n    @param {Object} options\n    @return {Object} json\n  */\n  serialize(snapshot, options) {\n    return this._super(...arguments);\n  },\n  /**\n    You can use this method to customize the root keys serialized into the JSON.\n    The hash property should be modified by reference (possibly using something like _.extend)\n    By default the REST Serializer sends the modelName of a model, which is a camelized\n    version of the name.\n     For example, your server may expect underscored root objects.\n     ```app/serializers/application.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n    import { decamelize } from '<app-name>/utils/string-utils';\n     export default class ApplicationSerializer extends RESTSerializer {\n      serializeIntoHash(data, type, record, options) {\n        let root = decamelize(type.modelName);\n        data[root] = this.serialize(record, options);\n      }\n    }\n    ```\n     @method serializeIntoHash\n    @public\n    @param {Object} hash\n    @param {Model} typeClass\n    @param {Snapshot} snapshot\n    @param {Object} options\n  */\n  serializeIntoHash(hash, typeClass, snapshot, options) {\n    const normalizedRootKey = this.payloadKeyFromModelName(typeClass.modelName);\n    hash[normalizedRootKey] = this.serialize(snapshot, options);\n  },\n  /**\n    You can use `payloadKeyFromModelName` to override the root key for an outgoing\n    request. By default, the RESTSerializer returns a camelized version of the\n    model's name.\n     For a model called TacoParty, its `modelName` would be the string `taco-party`. The RESTSerializer\n    will send it to the server with `tacoParty` as the root key in the JSON payload:\n     ```js\n    {\n      \"tacoParty\": {\n        \"id\": \"1\",\n        \"location\": \"Matthew Beale's House\"\n      }\n    }\n    ```\n     For example, your server may expect dasherized root objects:\n     ```app/serializers/application.js\n    import RESTSerializer from '@ember-data/serializer/rest';\n    import { dasherize } from '<app-name>/utils/string-utils';\n     export default class ApplicationSerializer extends RESTSerializer {\n      payloadKeyFromModelName(modelName) {\n        return dasherize(modelName);\n      }\n    }\n    ```\n     Given a `TacoParty` model, calling `save` on it would produce an outgoing\n    request like:\n     ```js\n    {\n      \"taco-party\": {\n        \"id\": \"1\",\n        \"location\": \"Matthew Beale's House\"\n      }\n    }\n    ```\n     @method payloadKeyFromModelName\n    @public\n    @param {String} modelName\n    @return {String}\n  */\n  payloadKeyFromModelName(modelName) {\n    return (0,_ember_string__WEBPACK_IMPORTED_MODULE_1__.camelize)(modelName);\n  },\n  /**\n    You can use this method to customize how polymorphic objects are serialized.\n    By default the REST Serializer creates the key by appending `Type` to\n    the attribute and value from the model's camelcased model name.\n     @method serializePolymorphicType\n    @public\n    @param {Snapshot} snapshot\n    @param {Object} json\n    @param {Object} relationship\n  */\n  serializePolymorphicType(snapshot, json, relationship) {\n    const name = relationship.name;\n    const typeKey = this.keyForPolymorphicType(name, relationship.type, 'serialize');\n    const belongsTo = snapshot.belongsTo(name);\n    if (!belongsTo) {\n      json[typeKey] = null;\n    } else {\n      json[typeKey] = (0,_ember_string__WEBPACK_IMPORTED_MODULE_1__.camelize)(belongsTo.modelName);\n    }\n  },\n  /**\n    You can use this method to customize how a polymorphic relationship should\n    be extracted.\n     @method extractPolymorphicRelationship\n    @public\n    @param {Object} relationshipType\n    @param {Object} relationshipHash\n    @param {Object} relationshipOptions\n    @return {Object}\n   */\n  extractPolymorphicRelationship(relationshipType, relationshipHash, relationshipOptions) {\n    const {\n      key,\n      resourceHash,\n      relationshipMeta\n    } = relationshipOptions;\n\n    // A polymorphic belongsTo relationship can be present in the payload\n    // either in the form where the `id` and the `type` are given:\n    //\n    //   {\n    //     message: { id: 1, type: 'post' }\n    //   }\n    //\n    // or by the `id` and a `<relationship>Type` attribute:\n    //\n    //   {\n    //     message: 1,\n    //     messageType: 'post'\n    //   }\n    //\n    // The next code checks if the latter case is present and returns the\n    // corresponding JSON-API representation. The former case is handled within\n    // the base class JSONSerializer.\n    const isPolymorphic = relationshipMeta.options.polymorphic;\n    const typeProperty = this.keyForPolymorphicType(key, relationshipType, 'deserialize');\n    if (isPolymorphic && resourceHash[typeProperty] !== undefined && typeof relationshipHash !== 'object') {\n      const type = this.modelNameFromPayloadKey(resourceHash[typeProperty]);\n      return {\n        id: (0,_utils_N1ERF6HN__WEBPACK_IMPORTED_MODULE_4__.c)(relationshipHash),\n        type: type\n      };\n    }\n    return this._super(...arguments);\n  }\n});\n{\n  RESTSerializer.reopen({\n    warnMessageNoModelForKey(prop, typeKey) {\n      return 'Encountered \"' + prop + '\" in payload, but no model was found for model name \"' + typeKey + '\" (resolved model name using ' + this.constructor.toString() + '.modelNameFromPayloadKey(\"' + prop + '\"))';\n    }\n  });\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/rest.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/string-A02hFTMo.js":
/*!********************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/string-A02hFTMo.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: () => (/* binding */ BooleanTransform),\n/* harmony export */   D: () => (/* binding */ DateTransform),\n/* harmony export */   N: () => (/* binding */ NumberTransform),\n/* harmony export */   S: () => (/* binding */ StringTransform),\n/* harmony export */   T: () => (/* binding */ Transform)\n/* harmony export */ });\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/object */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_object__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/**\n  @module @ember-data/serializer\n*/\n\n/**\n  The `Transform` class is used to serialize and deserialize model\n  attributes when they are saved or loaded from an\n  adapter. Subclassing `Transform` is useful for creating custom\n  attributes. All subclasses of `Transform` must implement a\n  `serialize` and a `deserialize` method.\n\n  Example\n\n  ```app/transforms/temperature.js\n\n  // Converts centigrade in the JSON to fahrenheit in the app\n  export default class TemperatureTransform {\n    deserialize(serialized, options) {\n      return (serialized *  1.8) + 32;\n    }\n\n    serialize(deserialized, options) {\n      return (deserialized - 32) / 1.8;\n    }\n\n    static create() {\n      return new this();\n    }\n  }\n  ```\n\n  Usage\n\n  ```app/models/requirement.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class RequirementModel extends Model {\n    @attr('string') name;\n    @attr('temperature') temperature;\n  }\n  ```\n\n  The options passed into the `attr` function when the attribute is\n  declared on the model is also available in the transform.\n\n  ```app/models/post.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @attr('string') title;\n    @attr('markdown', {\n      markdown: {\n        gfm: false,\n        sanitize: true\n      }\n    })\n    markdown;\n  }\n  ```\n\n  ```app/transforms/markdown.js\n  export default class MarkdownTransform {\n    serialize(deserialized, options) {\n      return deserialized.raw;\n    }\n\n    deserialize(serialized, options) {\n      let markdownOptions = options.markdown || {};\n\n      return marked(serialized, markdownOptions);\n    }\n\n    static create() {\n      return new this();\n    }\n  }\n  ```\n\n  @class Transform\n  @public\n */\n/**\n  When given a deserialized value from a record attribute this\n  method must return the serialized value.\n\n  Example\n\n  ```javascript\n  serialize(deserialized, options) {\n    return deserialized ? null : Number(deserialized);\n  }\n  ```\n\n  @method serialize\n  @public\n  @param deserialized The deserialized value\n  @param options hash of options passed to `attr`\n  @return The serialized value\n*/\n/**\n  When given a serialized value from a JSON object this method must\n  return the deserialized value for the record attribute.\n\n  Example\n\n  ```javascript\n  deserialize(serialized, options) {\n    return empty(serialized) ? null : Number(serialized);\n  }\n  ```\n\n  @method deserialize\n  @public\n  @param serialized The serialized value\n  @param options hash of options passed to `attr`\n  @return The deserialized value\n*/\n\nconst Transform = (_ember_object__WEBPACK_IMPORTED_MODULE_0___default());\n\n/**\n  @module @ember-data/serializer\n*/\n\n/**\n  The `BooleanTransform` class is used to serialize and deserialize\n  boolean attributes on Ember Data record objects. This transform is\n  used when `boolean` is passed as the type parameter to the\n  [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.\n\n  Usage\n\n  ```app/models/user.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('boolean') isAdmin;\n    @attr('string') name;\n    @attr('string') email;\n  }\n  ```\n\n  By default, the boolean transform only allows for values of `true` or\n  `false`. You can opt into allowing `null` values for\n  boolean attributes via `attr('boolean', { allowNull: true })`\n\n  ```app/models/user.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('string') email;\n    @attr('string') username;\n    @attr('boolean', { allowNull: true }) wantsWeeklyEmail;\n  }\n  ```\n\n  @class BooleanTransform\n  @public\n */\nclass BooleanTransform {\n  deserialize(serialized, options) {\n    if ((serialized === null || serialized === undefined) && options?.allowNull === true) {\n      return null;\n    }\n    if (typeof serialized === 'boolean') {\n      return serialized;\n    } else if (typeof serialized === 'string') {\n      return /^(true|t|1)$/i.test(serialized);\n    } else if (typeof serialized === 'number') {\n      return serialized === 1;\n    } else {\n      return false;\n    }\n  }\n  serialize(deserialized, options) {\n    if ((deserialized === null || deserialized === undefined) && options?.allowNull === true) {\n      return null;\n    }\n    return Boolean(deserialized);\n  }\n  static create() {\n    return new this();\n  }\n}\n\n/**\n  @module @ember-data/serializer\n*/\n\n/**\n The `DateTransform` class is used to serialize and deserialize\n date attributes on Ember Data record objects. This transform is used\n when `date` is passed as the type parameter to the\n [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function. It uses the [`ISO 8601`](https://en.wikipedia.org/wiki/ISO_8601)\n standard.\n\n ```app/models/score.js\n import Model, { attr, belongsTo } from '@ember-data/model';\n\n export default class ScoreModel extends Model {\n    @attr('number') value;\n    @belongsTo('player') player;\n    @attr('date') date;\n  }\n ```\n\n @class DateTransform\n  @public\n */\n\nclass DateTransform {\n  deserialize(serialized, _options) {\n    if (typeof serialized === 'string') {\n      let offset = serialized.indexOf('+');\n      if (offset !== -1 && serialized.length - 5 === offset) {\n        offset += 3;\n        return new Date(serialized.slice(0, offset) + ':' + serialized.slice(offset));\n      }\n      return new Date(serialized);\n    } else if (typeof serialized === 'number') {\n      return new Date(serialized);\n    } else if (serialized === null || serialized === undefined) {\n      // if the value is null return null\n      // if the value is not present in the data return undefined\n      return serialized;\n    } else {\n      return null;\n    }\n  }\n  serialize(date, _options) {\n    // @ts-expect-error isNaN accepts date as it is coercible\n    if (date instanceof Date && !isNaN(date)) {\n      return date.toISOString();\n    } else {\n      return null;\n    }\n  }\n  static create() {\n    return new this();\n  }\n}\n\n/**\n  @module @ember-data/serializer\n*/\n\nfunction isNumber(value) {\n  return value === value && value !== Infinity && value !== -Infinity;\n}\n\n/**\n  The `NumberTransform` class is used to serialize and deserialize\n  numeric attributes on Ember Data record objects. This transform is\n  used when `number` is passed as the type parameter to the\n  [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.\n\n  Usage\n\n  ```app/models/score.js\n  import Model, { attr, belongsTo } from '@ember-data/model';\n\n  export default class ScoreModel extends Model {\n    @attr('number') value;\n    @belongsTo('player') player;\n    @attr('date') date;\n  }\n  ```\n\n  @class NumberTransform\n  @public\n */\nclass NumberTransform {\n  deserialize(serialized, _options) {\n    if (serialized === '' || serialized === null || serialized === undefined) {\n      return null;\n    } else {\n      const transformed = Number(serialized);\n      return isNumber(transformed) ? transformed : null;\n    }\n  }\n  serialize(deserialized, _options) {\n    if (deserialized === '' || deserialized === null || deserialized === undefined) {\n      return null;\n    } else {\n      const transformed = Number(deserialized);\n      return isNumber(transformed) ? transformed : null;\n    }\n  }\n  static create() {\n    return new this();\n  }\n}\n\n/**\n  @module @ember-data/serializer\n*/\n\n/**\n  The `StringTransform` class is used to serialize and deserialize\n  string attributes on Ember Data record objects. This transform is\n  used when `string` is passed as the type parameter to the\n  [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.\n\n  Usage\n\n  ```app/models/user.js\n  import Model, { attr, belongsTo } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('boolean') isAdmin;\n    @attr('string') name;\n    @attr('string') email;\n  }\n  ```\n\n  @class StringTransform\n  @public\n */\nclass StringTransform {\n  deserialize(serialized, _options) {\n    return !serialized && serialized !== '' ? null : String(serialized);\n  }\n  serialize(deserialized, _options) {\n    return !deserialized && deserialized !== '' ? null : String(deserialized);\n  }\n  static create() {\n    return new this();\n  }\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/string-A02hFTMo.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/transform.js":
/*!**************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/transform.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BooleanTransform: () => (/* reexport safe */ _string_A02hFTMo__WEBPACK_IMPORTED_MODULE_0__.B),\n/* harmony export */   DateTransform: () => (/* reexport safe */ _string_A02hFTMo__WEBPACK_IMPORTED_MODULE_0__.D),\n/* harmony export */   NumberTransform: () => (/* reexport safe */ _string_A02hFTMo__WEBPACK_IMPORTED_MODULE_0__.N),\n/* harmony export */   StringTransform: () => (/* reexport safe */ _string_A02hFTMo__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   \"default\": () => (/* reexport safe */ _string_A02hFTMo__WEBPACK_IMPORTED_MODULE_0__.T)\n/* harmony export */ });\n/* harmony import */ var _string_A02hFTMo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./string-A02hFTMo */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/string-A02hFTMo.js\");\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/transform.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/utils-N1ERF6HN.js":
/*!*******************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/utils-N1ERF6HN.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ coerceId)\n/* harmony export */ });\nfunction coerceId(id) {\n  if (id === null || id === undefined || id === '') {\n    return null;\n  } else if (typeof id === 'string') {\n    return id;\n  } else if (typeof id === 'symbol') {\n    return id.toString();\n  } else {\n    return String(id);\n  }\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/utils-N1ERF6HN.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/-private.js":
/*!***************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/-private.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARRAY_SIGNAL: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   AdapterPopulatedRecordArray: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   CacheHandler: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   IdentifierArray: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.I),\n/* harmony export */   MUTATE: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.M),\n/* harmony export */   RecordArray: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.I),\n/* harmony export */   RecordArrayManager: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.R),\n/* harmony export */   SOURCE: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   Store: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   StoreMap: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   _clearCaches: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__._),\n/* harmony export */   _deprecatingNormalize: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   coerceId: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   fastPush: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   isStableIdentifier: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   notifyArray: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   peekCache: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   recordIdentifierFor: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   removeRecordDataFor: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   setCacheFor: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   setIdentifierForgetMethod: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   setIdentifierGenerationMethod: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   setIdentifierResetMethod: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   setIdentifierUpdateMethod: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   setRecordIdentifier: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   storeFor: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.s)\n/* harmony export */ });\n/* harmony import */ var _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cache-handler-XLbbNJdo */ \"../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/cache-handler-XLbbNJdo.js\");\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/-private.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/cache-handler-XLbbNJdo.js":
/*!*****************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/cache-handler-XLbbNJdo.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ ARRAY_SIGNAL),\n/* harmony export */   C: () => (/* binding */ CacheHandler),\n/* harmony export */   I: () => (/* binding */ IdentifierArray),\n/* harmony export */   M: () => (/* binding */ MUTATE),\n/* harmony export */   R: () => (/* binding */ RecordArrayManager),\n/* harmony export */   S: () => (/* binding */ Store),\n/* harmony export */   _: () => (/* binding */ _clearCaches),\n/* harmony export */   a: () => (/* binding */ setIdentifierGenerationMethod),\n/* harmony export */   b: () => (/* binding */ setIdentifierUpdateMethod),\n/* harmony export */   c: () => (/* binding */ setIdentifierForgetMethod),\n/* harmony export */   d: () => (/* binding */ setIdentifierResetMethod),\n/* harmony export */   e: () => (/* binding */ coerceId),\n/* harmony export */   f: () => (/* binding */ Collection),\n/* harmony export */   g: () => (/* binding */ SOURCE),\n/* harmony export */   h: () => (/* binding */ fastPush),\n/* harmony export */   i: () => (/* binding */ isStableIdentifier),\n/* harmony export */   j: () => (/* binding */ removeRecordDataFor),\n/* harmony export */   k: () => (/* binding */ setRecordIdentifier),\n/* harmony export */   l: () => (/* binding */ StoreMap),\n/* harmony export */   m: () => (/* binding */ setCacheFor),\n/* harmony export */   n: () => (/* binding */ notifyArray),\n/* harmony export */   o: () => (/* binding */ normalizeModelName),\n/* harmony export */   p: () => (/* binding */ peekCache),\n/* harmony export */   r: () => (/* binding */ recordIdentifierFor),\n/* harmony export */   s: () => (/* binding */ storeFor)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/object */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_object__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @warp-drive/core-types/request */ \"../rewritten-packages/@warp-drive/core-types.f90747f3/node_modules/@warp-drive/core-types/request.js\");\n/* harmony import */ var _warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @warp-drive/core-types/identifier */ \"../rewritten-packages/@warp-drive/core-types.f90747f3/node_modules/@warp-drive/core-types/identifier.js\");\n/* harmony import */ var _ember_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember/string */ \"../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/index.js\");\n/* harmony import */ var _ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ember-data/tracking/-private */ \"../rewritten-packages/@ember-data/tracking.bbb05d16/node_modules/@ember-data/tracking/-private.js\");\n/* harmony import */ var _ember_runloop__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ember/runloop */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Frunloop&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_runloop__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_ember_runloop__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _ember_data_tracking__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ember-data/tracking */ \"../rewritten-packages/@ember-data/tracking.bbb05d16/node_modules/@ember-data/tracking/index.js\");\n\n\n\n\n\n\n\n\n\n/**\n  @module @ember-data/store\n*/\n\nfunction coerceId(id) {\n  {\n    let normalized;\n    if (id === null || id === undefined || id === '') {\n      normalized = null;\n    } else {\n      normalized = String(id);\n    }\n    ( true && !(normalized === id) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`The resource id '<${typeof id}> ${String(id)} ' is not normalized. Update your application code to use '${JSON.stringify(normalized)}' instead.`, normalized === id, {\n      id: 'ember-data:deprecate-non-strict-id',\n      until: '6.0',\n      for: 'ember-data',\n      since: {\n        available: '5.3',\n        enabled: '5.3'\n      }\n    }));\n    return normalized;\n  }\n  ( true && !(id === null || typeof id === 'string' && id.length > 0) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Resource IDs must be a non-empty string or null. Received '${String(id)}'.`, id === null || typeof id === 'string' && id.length > 0));\n  return id;\n}\nfunction ensureStringId(id) {\n  let normalized = null;\n  if (typeof id === 'string') {\n    normalized = id.length > 0 ? id : null;\n  } else if (typeof id === 'number' && !isNaN(id)) {\n    normalized = String(id);\n  }\n  ( true && !(normalized !== null) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected id to be a string or number, received ${String(id)}`, normalized !== null));\n  return normalized;\n}\nfunction normalizeModelName(type) {\n  {\n    const result = (0,_ember_string__WEBPACK_IMPORTED_MODULE_4__.dasherize)(type);\n    ( true && !(result === type) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(`The resource type '${type}' is not normalized. Update your application code to use '${result}' instead of '${type}'.`, result === type, {\n      id: 'ember-data:deprecate-non-strict-types',\n      until: '6.0',\n      for: 'ember-data',\n      since: {\n        available: '5.3',\n        enabled: '5.3'\n      }\n    }));\n    return result;\n  }\n  return type;\n}\n\n/**\n  @module @ember-data/store\n*/\n\nfunction installPolyfill() {\n  const isFastBoot = typeof FastBoot !== 'undefined';\n  const CRYPTO = isFastBoot ? FastBoot.require('crypto') : window.crypto;\n  if (!CRYPTO.randomUUID) {\n    // we might be able to optimize this by requesting more bytes than we need at a time\n    const rng = function () {\n      // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n      const rnds8 = new Uint8Array(16);\n      if (!CRYPTO.getRandomValues && !isFastBoot) {\n        throw new Error(`Unable to generate bytes for UUID`);\n      }\n      return CRYPTO.getRandomValues ? CRYPTO.getRandomValues(rnds8) : CRYPTO.randomFillSync(rnds8);\n    };\n\n    /*\n     * Convert array of 16 byte values to UUID string format of the form:\n     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n     */\n    const byteToHex = [];\n    for (let i = 0; i < 256; ++i) {\n      byteToHex[i] = (i + 0x100).toString(16).substr(1);\n    }\n    const bytesToUuid = function (buf) {\n      const bth = byteToHex;\n      // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n      return [bth[buf[0]], bth[buf[1]], bth[buf[2]], bth[buf[3]], '-', bth[buf[4]], bth[buf[5]], '-', bth[buf[6]], bth[buf[7]], '-', bth[buf[8]], bth[buf[9]], '-', bth[buf[10]], bth[buf[11]], bth[buf[12]], bth[buf[13]], bth[buf[14]], bth[buf[15]]].join('');\n    };\n    CRYPTO.randomUUID = function uuidv4() {\n      const rnds = rng();\n\n      // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n      rnds[6] = rnds[6] & 0x0f | 0x40;\n      rnds[8] = rnds[8] & 0x3f | 0x80;\n      return bytesToUuid(rnds);\n    };\n  }\n}\nfunction isResource(resource) {\n  return Boolean(resource && typeof resource === 'object');\n}\nfunction hasProp(resource, prop) {\n  return Boolean(isResource(resource) && prop in resource && typeof resource[prop] === 'string' && resource[prop].length);\n}\nfunction hasLid(resource) {\n  return hasProp(resource, 'lid');\n}\nfunction hasId(resource) {\n  return hasProp(resource, 'id') || Boolean(isResource(resource) && 'id' in resource && typeof resource.id === 'number');\n}\nfunction hasType(resource) {\n  return hasProp(resource, 'type');\n}\n\n/**\n  @module @ember-data/store\n*/\nconst IDENTIFIERS = new Set();\nconst DOCUMENTS = new Set();\nfunction isStableIdentifier(identifier) {\n  return identifier[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.CACHE_OWNER] !== undefined || IDENTIFIERS.has(identifier);\n}\nfunction isDocumentIdentifier(identifier) {\n  return DOCUMENTS.has(identifier);\n}\nconst isFastBoot = typeof FastBoot !== 'undefined';\nconst _crypto = isFastBoot ? FastBoot.require('crypto') : window.crypto;\nfunction uuidv4() {\n  ( true && !(typeof _crypto.randomUUID === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('crypto.randomUUID needs to be avaliable. Some browsers incorrectly disallow it in insecure contexts. You maybe want to enable the polyfill: https://github.com/emberjs/data#randomuuid-polyfill', typeof _crypto.randomUUID === 'function'));\n  return _crypto.randomUUID();\n}\nfunction freeze(obj) {\n  if (typeof Object.freeze === 'function') {\n    return Object.freeze(obj);\n  }\n  return obj;\n}\n\n// type IdentifierTypeLookup = { all: Set<StableRecordIdentifier>; id: Map<string, StableRecordIdentifier> };\n// type IdentifiersByType = Map<string, IdentifierTypeLookup>;\n\nlet configuredForgetMethod;\nlet configuredGenerationMethod;\nlet configuredResetMethod;\nlet configuredUpdateMethod;\nfunction setIdentifierGenerationMethod(method) {\n  configuredGenerationMethod = method;\n}\nfunction setIdentifierUpdateMethod(method) {\n  configuredUpdateMethod = method;\n}\nfunction setIdentifierForgetMethod(method) {\n  configuredForgetMethod = method;\n}\nfunction setIdentifierResetMethod(method) {\n  configuredResetMethod = method;\n}\n\n// Map<type, Map<id, lid>>\n\nconst NEW_IDENTIFIERS = new Map();\nlet IDENTIFIER_CACHE_ID = 0;\nfunction updateTypeIdMapping(typeMap, identifier, id) {\n  let idMap = typeMap.get(identifier.type);\n  if (!idMap) {\n    idMap = new Map();\n    typeMap.set(identifier.type, idMap);\n  }\n  idMap.set(id, identifier.lid);\n}\nfunction defaultUpdateMethod(identifier, data, bucket) {\n  if (bucket === 'record') {\n    ( true && !(isStableIdentifier(identifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected identifier to be a StableRecordIdentifier`, isStableIdentifier(identifier)));\n    if (!identifier.id && hasId(data)) {\n      updateTypeIdMapping(NEW_IDENTIFIERS, identifier, data.id);\n    }\n  }\n}\nfunction defaultKeyInfoMethod(resource, known) {\n  // TODO RFC something to make this configurable\n  const id = hasId(resource) ? coerceId(resource.id) : null;\n  const type = hasType(resource) ? normalizeModelName(resource.type) : known ? known.type : null;\n  ( true && !(type) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected keyInfoForResource to provide a type for the resource`, type));\n  return {\n    type,\n    id\n  };\n}\nfunction defaultGenerationMethod(data, bucket) {\n  if (bucket === 'record') {\n    if (hasLid(data)) {\n      return data.lid;\n    }\n    ( true && !(hasType(data)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot generate an identifier for a resource without a type`, hasType(data)));\n    if (hasId(data)) {\n      const type = normalizeModelName(data.type);\n      const lid = NEW_IDENTIFIERS.get(type)?.get(data.id);\n      return lid || `@lid:${type}-${data.id}`;\n    }\n    return uuidv4();\n  } else if (bucket === 'document') {\n    if (!data.url) {\n      return null;\n    }\n    if (!data.method || data.method.toUpperCase() === 'GET') {\n      return data.url;\n    }\n    return null;\n  }\n  ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Unknown bucket ${bucket}`, false));\n}\nfunction defaultEmptyCallback(...args) {}\nfunction defaultMergeMethod(a, _b, _c) {\n  return a;\n}\nlet DEBUG_MAP;\n{\n  DEBUG_MAP = new WeakMap();\n}\n\n/**\n * Each instance of {Store} receives a unique instance of a IdentifierCache.\n *\n * This cache is responsible for assigning or retrieving the unique identify\n * for arbitrary resource data encountered by the store. Data representing\n * a unique resource or record should always be represented by the same\n * identifier.\n *\n * It can be configured by consuming applications.\n *\n * @class IdentifierCache\n   @public\n */\nclass IdentifierCache {\n  constructor() {\n    // we cache the user configuredGenerationMethod at init because it must\n    // be configured prior and is not allowed to be changed\n    this._generate = configuredGenerationMethod || defaultGenerationMethod;\n    this._update = configuredUpdateMethod || defaultUpdateMethod;\n    this._forget = configuredForgetMethod || defaultEmptyCallback;\n    this._reset = configuredResetMethod || defaultEmptyCallback;\n    this._merge = defaultMergeMethod;\n    this._keyInfoForResource = defaultKeyInfoMethod;\n    this._isDefaultConfig = !configuredGenerationMethod;\n    this._id = IDENTIFIER_CACHE_ID++;\n    this._cache = {\n      resources: new Map(),\n      resourcesByType: Object.create(null),\n      documents: new Map(),\n      polymorphicLidBackMap: new Map()\n    };\n  }\n\n  /**\n   * Internal hook to allow management of merge conflicts with identifiers.\n   *\n   * we allow late binding of this private internal merge so that\n   * the cache can insert itself here to handle elimination of duplicates\n   *\n   * @method __configureMerge\n   * @private\n   */\n  __configureMerge(method) {\n    this._merge = method || defaultMergeMethod;\n  }\n  upgradeIdentifier(resource) {\n    return this._getRecordIdentifier(resource, 2);\n  }\n\n  /**\n   * @method _getRecordIdentifier\n   * @private\n   */\n\n  _getRecordIdentifier(resource, shouldGenerate) {\n    // short circuit if we're already the stable version\n    if (isStableIdentifier(resource)) {\n      {\n        // TODO should we instead just treat this case as a new generation skipping the short circuit?\n        if (!this._cache.resources.has(resource.lid) || this._cache.resources.get(resource.lid) !== resource) {\n          throw new Error(`The supplied identifier ${JSON.stringify(resource)} does not belong to this store instance`);\n        }\n      }\n      return resource;\n    }\n\n    // the resource is unknown, ask the application to identify this data for us\n    const lid = this._generate(resource, 'record');\n    let identifier = /*#__NOINLINE__*/getIdentifierFromLid(this._cache, lid, resource);\n    if (identifier !== null) {\n      return identifier;\n    }\n    if (shouldGenerate === 0) {\n      return;\n    }\n\n    // if we still don't have an identifier, time to generate one\n    if (shouldGenerate === 2) {\n      resource.lid = lid;\n      resource[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.CACHE_OWNER] = this._id;\n      identifier = /*#__NOINLINE__*/makeStableRecordIdentifier(resource, 'record', false);\n    } else {\n      // we lie a bit here as a memory optimization\n      const keyInfo = this._keyInfoForResource(resource, null);\n      keyInfo.lid = lid;\n      keyInfo[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.CACHE_OWNER] = this._id;\n      identifier = /*#__NOINLINE__*/makeStableRecordIdentifier(keyInfo, 'record', false);\n    }\n    addResourceToCache(this._cache, identifier);\n    return identifier;\n  }\n\n  /**\n   * allows us to peek without generating when needed\n   * useful for the \"create\" case when we need to see if\n   * we are accidentally overwritting something\n   *\n   * @method peekRecordIdentifier\n   * @param resource\n   * @return {StableRecordIdentifier | undefined}\n   * @private\n   */\n  peekRecordIdentifier(resource) {\n    return this._getRecordIdentifier(resource, 0);\n  }\n\n  /**\n    Returns the DocumentIdentifier for the given Request, creates one if it does not yet exist.\n    Returns `null` if the request does not have a `cacheKey` or `url`.\n     @method getOrCreateDocumentIdentifier\n    @param request\n    @return {StableDocumentIdentifier | null}\n    @public\n  */\n  getOrCreateDocumentIdentifier(request) {\n    let cacheKey = request.cacheOptions?.key;\n    if (!cacheKey) {\n      cacheKey = this._generate(request, 'document');\n    }\n    if (!cacheKey) {\n      return null;\n    }\n    let identifier = this._cache.documents.get(cacheKey);\n    if (identifier === undefined) {\n      identifier = {\n        lid: cacheKey\n      };\n      {\n        Object.freeze(identifier);\n      }\n      DOCUMENTS.add(identifier);\n      this._cache.documents.set(cacheKey, identifier);\n    }\n    return identifier;\n  }\n\n  /**\n    Returns the Identifier for the given Resource, creates one if it does not yet exist.\n     Specifically this means that we:\n     - validate the `id` `type` and `lid` combo against known identifiers\n    - return an object with an `lid` that is stable (repeated calls with the same\n      `id` + `type` or `lid` will return the same `lid` value)\n    - this referential stability of the object itself is guaranteed\n     @method getOrCreateRecordIdentifier\n    @param resource\n    @return {StableRecordIdentifier}\n    @public\n  */\n  getOrCreateRecordIdentifier(resource) {\n    return this._getRecordIdentifier(resource, 1);\n  }\n\n  /**\n   Returns a new Identifier for the supplied data. Call this method to generate\n   an identifier when a new resource is being created local to the client and\n   potentially does not have an `id`.\n    Delegates generation to the user supplied `GenerateMethod` if one has been provided\n   with the signature `generateMethod({ type }, 'record')`.\n    @method createIdentifierForNewRecord\n   @param data\n   @return {StableRecordIdentifier}\n   @public\n  */\n  createIdentifierForNewRecord(data) {\n    const newLid = this._generate(data, 'record');\n    const identifier = /*#__NOINLINE__*/makeStableRecordIdentifier({\n      id: data.id || null,\n      type: data.type,\n      lid: newLid,\n      [_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.CACHE_OWNER]: this._id\n    }, 'record', true);\n\n    // populate our unique table\n    {\n      if (this._cache.resources.has(identifier.lid)) {\n        throw new Error(`The lid generated for the new record is not unique as it matches an existing identifier`);\n      }\n    }\n\n    /*#__NOINLINE__*/\n    addResourceToCache(this._cache, identifier);\n    return identifier;\n  }\n\n  /**\n   Provides the opportunity to update secondary lookup tables for existing identifiers\n   Called after an identifier created with `createIdentifierForNewRecord` has been\n   committed.\n    Assigned `id` to an `Identifier` if `id` has not previously existed; however,\n   attempting to change the `id` or calling update without providing an `id` when\n   one is missing will throw an error.\n     - sets `id` (if `id` was previously `null`)\n    - `lid` and `type` MUST NOT be altered post creation\n     If a merge occurs, it is possible the returned identifier does not match the originally\n    provided identifier. In this case the abandoned identifier will go through the usual\n    `forgetRecordIdentifier` codepaths.\n     @method updateRecordIdentifier\n    @param identifierObject\n    @param data\n    @return {StableRecordIdentifier}\n    @public\n  */\n  updateRecordIdentifier(identifierObject, data) {\n    let identifier = this.getOrCreateRecordIdentifier(identifierObject);\n    const keyInfo = this._keyInfoForResource(data, identifier);\n    let existingIdentifier = /*#__NOINLINE__*/detectMerge(this._cache, keyInfo, identifier, data);\n    const hadLid = hasLid(data);\n    if (!existingIdentifier) {\n      // If the incoming type does not match the identifier type, we need to create an identifier for the incoming\n      // data so we can merge the incoming data with the existing identifier, see #7325 and #7363\n      if (identifier.type !== keyInfo.type) {\n        if (hadLid) {\n          // Strip the lid to ensure we force a new identifier creation\n          delete data.lid;\n        }\n        existingIdentifier = this.getOrCreateRecordIdentifier(data);\n      }\n    }\n    if (existingIdentifier) {\n      const generatedIdentifier = identifier;\n      identifier = this._mergeRecordIdentifiers(keyInfo, generatedIdentifier, existingIdentifier, data);\n\n      // make sure that the `lid` on the data we are processing matches the lid we kept\n      if (hadLid) {\n        data.lid = identifier.lid;\n      }\n    }\n    const id = identifier.id;\n    /*#__NOINLINE__*/\n    performRecordIdentifierUpdate(identifier, keyInfo, data, this._update);\n    const newId = identifier.id;\n\n    // add to our own secondary lookup table\n    if (id !== newId && newId !== null) {\n      const typeSet = this._cache.resourcesByType[identifier.type];\n      ( true && !(typeSet) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected to find a typeSet for ${identifier.type}`, typeSet));\n      typeSet.id.set(newId, identifier);\n      if (id !== null) {\n        typeSet.id.delete(id);\n      }\n    }\n    return identifier;\n  }\n\n  /**\n   * @method _mergeRecordIdentifiers\n   * @private\n   */\n  _mergeRecordIdentifiers(keyInfo, identifier, existingIdentifier, data) {\n    ( true && !(hasId(keyInfo)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected keyInfo to contain an id`, hasId(keyInfo))); // delegate determining which identifier to keep to the configured MergeMethod\n    const kept = this._merge(identifier, existingIdentifier, data);\n    const abandoned = kept === identifier ? existingIdentifier : identifier;\n\n    // get any backreferences before forgetting this identifier, as it will be removed from the cache\n    // and we will no longer be able to find them\n    const abandonedBackReferences = this._cache.polymorphicLidBackMap.get(abandoned.lid);\n    // delete the backreferences for the abandoned identifier so that forgetRecordIdentifier\n    // does not try to remove them.\n    if (abandonedBackReferences) this._cache.polymorphicLidBackMap.delete(abandoned.lid);\n\n    // cleanup the identifier we no longer need\n    this.forgetRecordIdentifier(abandoned);\n\n    // ensure a secondary cache entry for the original lid for the abandoned identifier\n    this._cache.resources.set(abandoned.lid, kept);\n\n    // backReferences let us know which other identifiers are pointing at this identifier\n    // so we can delete them later if we forget this identifier\n    const keptBackReferences = this._cache.polymorphicLidBackMap.get(kept.lid) ?? [];\n    keptBackReferences.push(abandoned.lid);\n\n    // update the backreferences from the abandoned identifier to be for the kept identifier\n    if (abandonedBackReferences) {\n      abandonedBackReferences.forEach(lid => {\n        keptBackReferences.push(lid);\n        this._cache.resources.set(lid, kept);\n      });\n    }\n    this._cache.polymorphicLidBackMap.set(kept.lid, keptBackReferences);\n    return kept;\n  }\n\n  /**\n   Provides the opportunity to eliminate an identifier from secondary lookup tables\n   as well as eliminates it from ember-data's own lookup tables and book keeping.\n    Useful when a record has been deleted and the deletion has been persisted and\n   we do not care about the record anymore. Especially useful when an `id` of a\n   deleted record might be reused later for a new record.\n    @method forgetRecordIdentifier\n   @param identifierObject\n   @public\n  */\n  forgetRecordIdentifier(identifierObject) {\n    const identifier = this.getOrCreateRecordIdentifier(identifierObject);\n    const typeSet = this._cache.resourcesByType[identifier.type];\n    ( true && !(typeSet) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected to find a typeSet for ${identifier.type}`, typeSet));\n    if (identifier.id !== null) {\n      typeSet.id.delete(identifier.id);\n    }\n    this._cache.resources.delete(identifier.lid);\n    typeSet.lid.delete(identifier.lid);\n    const backReferences = this._cache.polymorphicLidBackMap.get(identifier.lid);\n    if (backReferences) {\n      backReferences.forEach(lid => {\n        this._cache.resources.delete(lid);\n      });\n      this._cache.polymorphicLidBackMap.delete(identifier.lid);\n    }\n    {\n      identifier[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.DEBUG_STALE_CACHE_OWNER] = identifier[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.CACHE_OWNER];\n    }\n    identifier[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.CACHE_OWNER] = undefined;\n    IDENTIFIERS.delete(identifier);\n    this._forget(identifier, 'record');\n  }\n  destroy() {\n    NEW_IDENTIFIERS.clear();\n    this._cache.documents.forEach(identifier => {\n      DOCUMENTS.delete(identifier);\n    });\n    this._reset();\n  }\n}\nfunction makeStableRecordIdentifier(recordIdentifier, bucket, clientOriginated) {\n  IDENTIFIERS.add(recordIdentifier);\n  {\n    // we enforce immutability in dev\n    //  but preserve our ability to do controlled updates to the reference\n    let wrapper = {\n      get lid() {\n        return recordIdentifier.lid;\n      },\n      get id() {\n        return recordIdentifier.id;\n      },\n      get type() {\n        return recordIdentifier.type;\n      },\n      get [_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.CACHE_OWNER]() {\n        return recordIdentifier[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.CACHE_OWNER];\n      },\n      set [_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.CACHE_OWNER](value) {\n        recordIdentifier[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.CACHE_OWNER] = value;\n      },\n      get [_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.DEBUG_STALE_CACHE_OWNER]() {\n        return recordIdentifier[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.DEBUG_STALE_CACHE_OWNER];\n      },\n      set [_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.DEBUG_STALE_CACHE_OWNER](value) {\n        recordIdentifier[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.DEBUG_STALE_CACHE_OWNER] = value;\n      }\n    };\n    Object.defineProperty(wrapper, 'toString', {\n      enumerable: false,\n      value: () => {\n        const {\n          type,\n          id,\n          lid\n        } = recordIdentifier;\n        return `${clientOriginated ? '[CLIENT_ORIGINATED] ' : ''}${String(type)}:${String(id)} (${lid})`;\n      }\n    });\n    Object.defineProperty(wrapper, 'toJSON', {\n      enumerable: false,\n      value: () => {\n        const {\n          type,\n          id,\n          lid\n        } = recordIdentifier;\n        return {\n          type,\n          id,\n          lid\n        };\n      }\n    });\n    wrapper[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.DEBUG_CLIENT_ORIGINATED] = clientOriginated;\n    wrapper[_warp_drive_core_types_identifier__WEBPACK_IMPORTED_MODULE_3__.DEBUG_IDENTIFIER_BUCKET] = bucket;\n    IDENTIFIERS.add(wrapper);\n    DEBUG_MAP.set(wrapper, recordIdentifier);\n    wrapper = freeze(wrapper);\n    return wrapper;\n  }\n  return recordIdentifier;\n}\nfunction performRecordIdentifierUpdate(identifier, keyInfo, data, updateFn) {\n  {\n    const {\n      id,\n      type\n    } = keyInfo;\n\n    // get the mutable instance behind our proxy wrapper\n    const wrapper = identifier;\n    identifier = DEBUG_MAP.get(wrapper);\n    if (hasLid(data)) {\n      const lid = data.lid;\n      if (lid !== identifier.lid) {\n        throw new Error(`The 'lid' for a RecordIdentifier cannot be updated once it has been created. Attempted to set lid for '${wrapper.lid}' to '${lid}'.`);\n      }\n    }\n    if (id && identifier.id !== null && identifier.id !== id) {\n      // here we warn and ignore, as this may be a mistake, but we allow the user\n      // to have multiple cache-keys pointing at a single lid so we cannot error\n      ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`The 'id' for a RecordIdentifier should not be updated once it has been set. Attempted to set id for '${wrapper.lid}' to '${id}'.`, false, {\n        id: 'ember-data:multiple-ids-for-identifier'\n      }));\n    }\n\n    // TODO consider just ignoring here to allow flexible polymorphic support\n    if (type && type !== identifier.type) {\n      throw new Error(`The 'type' for a RecordIdentifier cannot be updated once it has been set. Attempted to set type for '${wrapper.lid}' to '${type}'.`);\n    }\n    updateFn(wrapper, data, 'record');\n  }\n\n  // upgrade the ID, this is a \"one time only\" ability\n  // for the multiple-cache-key scenario we \"could\"\n  // use a heuristic to guess the best id for display\n  // (usually when `data.id` is available and `data.attributes` is not)\n  if (data.id !== undefined) {\n    identifier.id = coerceId(data.id);\n  }\n}\nfunction detectMerge(cache, keyInfo, identifier, data) {\n  const newId = keyInfo.id;\n  const {\n    id,\n    type,\n    lid\n  } = identifier;\n  const typeSet = cache.resourcesByType[identifier.type];\n\n  // if the IDs are present but do not match\n  // then check if we have an existing identifier\n  // for the newer ID.\n  if (id !== null && id !== newId && newId !== null) {\n    const existingIdentifier = typeSet && typeSet.id.get(newId);\n    return existingIdentifier !== undefined ? existingIdentifier : false;\n  } else {\n    const newType = keyInfo.type;\n\n    // If the ids and type are the same but lid is not the same, we should trigger a merge of the identifiers\n    // we trigger a merge of the identifiers\n    // though probably we should just throw an error here\n    if (id !== null && id === newId && newType === type && hasLid(data) && data.lid !== lid) {\n      return getIdentifierFromLid(cache, data.lid, data) || false;\n\n      // If the lids are the same, and ids are the same, but types are different we should trigger a merge of the identifiers\n    } else if (id !== null && id === newId && newType && newType !== type && hasLid(data) && data.lid === lid) {\n      const newTypeSet = cache.resourcesByType[newType];\n      const existingIdentifier = newTypeSet && newTypeSet.id.get(newId);\n      return existingIdentifier !== undefined ? existingIdentifier : false;\n    }\n  }\n  return false;\n}\nfunction getIdentifierFromLid(cache, lid, resource) {\n  const identifier = cache.resources.get(lid);\n  return identifier || null;\n}\nfunction addResourceToCache(cache, identifier) {\n  cache.resources.set(identifier.lid, identifier);\n  let typeSet = cache.resourcesByType[identifier.type];\n  if (!typeSet) {\n    typeSet = {\n      lid: new Map(),\n      id: new Map()\n    };\n    cache.resourcesByType[identifier.type] = typeSet;\n  }\n  typeSet.lid.set(identifier.lid, identifier);\n  if (identifier.id) {\n    typeSet.id.set(identifier.id, identifier);\n  }\n}\n\n/**\n  @module @ember-data/store\n*/\n\n/**\n  @module @ember-data/store\n*/\n\n/**\n   A `RecordReference` is a low-level API that allows users and\n   addon authors to perform meta-operations on a record.\n\n   @class RecordReference\n   @public\n*/\nclass RecordReference {\n  constructor(store, identifier) {\n    // unsubscribe token given to us by the notification manager\n    this.___token = void 0;\n    this.___identifier = void 0;\n    this.store = store;\n    this.___identifier = identifier;\n    this.___token = store.notifications.subscribe(identifier, (_, bucket, notifiedKey) => {\n      if (bucket === 'identity' || bucket === 'attributes' && notifiedKey === 'id') {\n        this._ref++;\n      }\n    });\n  }\n  destroy() {\n    this.store.notifications.unsubscribe(this.___token);\n  }\n  get type() {\n    return this.identifier().type;\n  }\n\n  /**\n     The `id` of the record that this reference refers to.\n      Together, the `type` and `id` properties form a composite key for\n     the identity map.\n      Example\n      ```javascript\n     let userRef = store.getReference('user', 1);\n      userRef.id(); // '1'\n     ```\n      @method id\n    @public\n     @return {String} The id of the record.\n  */\n  id() {\n    this._ref; // consume the tracked prop\n    return this.___identifier.id;\n  }\n\n  /**\n     The `identifier` of the record that this reference refers to.\n      Together, the `type` and `id` properties form a composite key for\n     the identity map.\n      Example\n      ```javascript\n     let userRef = store.getReference('user', 1);\n      userRef.identifier(); // '1'\n     ```\n      @method identifier\n    @public\n     @return {String} The identifier of the record.\n  */\n  identifier() {\n    return this.___identifier;\n  }\n\n  /**\n     How the reference will be looked up when it is loaded. Currently\n     this always returns `identity` to signify that a record will be\n     loaded by its `type` and `id`.\n      Example\n      ```javascript\n     const userRef = store.getReference('user', 1);\n      userRef.remoteType(); // 'identity'\n     ```\n      @method remoteType\n     @public\n     @return {String} 'identity'\n  */\n  remoteType() {\n    return 'identity';\n  }\n\n  /**\n    This API allows you to provide a reference with new data. The\n    simplest usage of this API is similar to `store.push`: you provide a\n    normalized hash of data and the object represented by the reference\n    will update.\n     If you pass a promise to `push`, Ember Data will not ask the adapter\n    for the data if another attempt to fetch it is made in the\n    interim. When the promise resolves, the underlying object is updated\n    with the new data, and the promise returned by *this function* is resolved\n    with that object.\n     For example, `recordReference.push(promise)` will be resolved with a\n    record.\n      Example\n      ```javascript\n     let userRef = store.getReference('user', 1);\n      // provide data for reference\n     userRef.push({\n       data: {\n         id: \"1\",\n         type: \"user\",\n         attributes: {\n           username: \"@user\"\n         }\n       }\n     }).then(function(user) {\n       userRef.value() === user;\n     });\n     ```\n     @method push\n    @public\n    @param objectOrPromise a JSON:API ResourceDocument or a promise resolving to one\n    @return a promise for the value (record or relationship)\n  */\n  push(objectOrPromise) {\n    // TODO @deprecate pushing unresolved payloads\n    return Promise.resolve(objectOrPromise).then(data => {\n      return this.store.push(data);\n    });\n  }\n\n  /**\n    If the entity referred to by the reference is already loaded, it is\n    present as `reference.value`. Otherwise the value returned by this function\n    is `null`.\n      Example\n      ```javascript\n     let userRef = store.getReference('user', 1);\n      userRef.value(); // user\n     ```\n      @method value\n    @public\n     @return {Model} the record for this RecordReference\n  */\n  value() {\n    return this.store.peekRecord(this.___identifier);\n  }\n\n  /**\n     Triggers a fetch for the backing entity based on its `remoteType`\n     (see `remoteType` definitions per reference type).\n      Example\n      ```javascript\n     let userRef = store.getReference('user', 1);\n      // load user (via store.find)\n     userRef.load().then(...)\n     ```\n      @method load\n    @public\n     @return {Promise<record>} the record for this RecordReference\n  */\n  load() {\n    const id = this.id();\n    if (id !== null) {\n      return this.store.findRecord(this.type, id);\n    }\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Unable to fetch record of type ${this.type} without an id`));\n  }\n\n  /**\n     Reloads the record if it is already loaded. If the record is not\n     loaded it will load the record via `store.findRecord`\n      Example\n      ```javascript\n     let userRef = store.getReference('user', 1);\n      // or trigger a reload\n     userRef.reload().then(...)\n     ```\n      @method reload\n    @public\n     @return {Promise<record>} the record for this RecordReference\n  */\n  reload() {\n    const id = this.id();\n    if (id !== null) {\n      return this.store.findRecord(this.type, id, {\n        reload: true\n      });\n    }\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Unable to fetch record of type ${this.type} without an id`));\n  }\n}\n(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(RecordReference.prototype, '_ref');\n\n/**\n  @module @ember-data/store\n*/\n\nclass CacheCapabilitiesManager {\n  constructor(_store) {\n    this._store = _store;\n    this._willNotify = false;\n    this._pendingNotifies = new Map();\n  }\n  get identifierCache() {\n    return this._store.identifierCache;\n  }\n  _scheduleNotification(identifier, key) {\n    let pending = this._pendingNotifies.get(identifier);\n    if (!pending) {\n      pending = new Set();\n      this._pendingNotifies.set(identifier, pending);\n    }\n    pending.add(key);\n    if (this._willNotify === true) {\n      return;\n    }\n    this._willNotify = true;\n    // it's possible a cache adhoc notifies us,\n    // in which case we sync flush\n    if (this._store._cbs) {\n      this._store._schedule('notify', () => this._flushNotifications());\n    } else {\n      // TODO @runspired determine if relationship mutations should schedule\n      // into join/run vs immediate flush\n      this._flushNotifications();\n    }\n  }\n  _flushNotifications() {\n    if (this._willNotify === false) {\n      return;\n    }\n    const pending = this._pendingNotifies;\n    this._pendingNotifies = new Map();\n    this._willNotify = false;\n    pending.forEach((set, identifier) => {\n      set.forEach(key => {\n        this._store.notifications.notify(identifier, 'relationships', key);\n      });\n    });\n  }\n  notifyChange(identifier, namespace, key) {\n    ( true && !(isStableIdentifier(identifier) || isDocumentIdentifier(identifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a stable identifier`, isStableIdentifier(identifier) || isDocumentIdentifier(identifier))); // TODO do we still get value from this?\n    if (namespace === 'relationships' && key) {\n      this._scheduleNotification(identifier, key);\n      return;\n    }\n\n    // @ts-expect-error\n    this._store.notifications.notify(identifier, namespace, key);\n  }\n  getSchemaDefinitionService() {\n    return this._store.getSchemaDefinitionService();\n  }\n  get schema() {\n    return this._store.schema;\n  }\n  setRecordId(identifier, id) {\n    ( true && !(isStableIdentifier(identifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a stable identifier`, isStableIdentifier(identifier)));\n    this._store._instanceCache.setRecordId(identifier, id);\n  }\n  hasRecord(identifier) {\n    return Boolean(this._store._instanceCache.peek(identifier));\n  }\n  disconnectRecord(identifier) {\n    ( true && !(isStableIdentifier(identifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a stable identifier`, isStableIdentifier(identifier)));\n    this._store._instanceCache.disconnect(identifier);\n    this._pendingNotifies.delete(identifier);\n  }\n}\n\n/*\n * Returns the Cache instance associated with a given\n * Model or Identifier\n */\n\nconst CacheForIdentifierCache = new Map();\nfunction setCacheFor(identifier, cache) {\n  ( true && !(!CacheForIdentifierCache.has(identifier) || CacheForIdentifierCache.get(identifier) === cache) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Illegal set of identifier`, !CacheForIdentifierCache.has(identifier) || CacheForIdentifierCache.get(identifier) === cache));\n  CacheForIdentifierCache.set(identifier, cache);\n}\nfunction removeRecordDataFor(identifier) {\n  CacheForIdentifierCache.delete(identifier);\n}\nfunction peekCache(instance) {\n  if (CacheForIdentifierCache.has(instance)) {\n    return CacheForIdentifierCache.get(instance);\n  }\n  return null;\n}\nfunction isDestroyable(record) {\n  return Boolean(record && typeof record === 'object' && typeof record.destroy === 'function');\n}\n\n/**\n  @module @ember-data/store\n*/\n\nconst RecordCache = new Map();\nfunction peekRecordIdentifier(record) {\n  return RecordCache.get(record);\n}\n\n/**\n  Retrieves the unique referentially-stable [RecordIdentifier](/ember-data/release/classes/StableRecordIdentifier)\n  assigned to the given record instance.\n  ```js\n  import { recordIdentifierFor } from \"@ember-data/store\";\n  // ... gain access to a record, for instance with peekRecord or findRecord\n  const record = store.peekRecord(\"user\", \"1\");\n  // get the identifier for the record (see docs for StableRecordIdentifier)\n  const identifier = recordIdentifierFor(record);\n  // access the identifier's properties.\n  const { id, type, lid } = identifier;\n  ```\n  @method recordIdentifierFor\n  @public\n  @static\n  @for @ember-data/store\n  @param {Object} record a record instance previously obstained from the store.\n  @return {StableRecordIdentifier}\n */\nfunction recordIdentifierFor(record) {\n  ( true && !(RecordCache.has(record)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`${String(record)} is not a record instantiated by @ember-data/store`, RecordCache.has(record)));\n  return RecordCache.get(record);\n}\nfunction setRecordIdentifier(record, identifier) {\n  {\n    if (RecordCache.has(record) && RecordCache.get(record) !== identifier) {\n      throw new Error(`${String(record)} was already assigned an identifier`);\n    }\n  }\n\n  /*\n  It would be nice to do a reverse check here that an identifier has not\n  previously been assigned a record; however, unload + rematerialization\n  prevents us from having a great way of doing so when CustomRecordClasses\n  don't necessarily give us access to a `isDestroyed` for dematerialized\n  instance.\n  */\n\n  RecordCache.set(record, identifier);\n}\nconst StoreMap = new Map();\nfunction storeFor(record) {\n  const store = StoreMap.get(record);\n  ( true && !(store) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`A record in a disconnected state cannot utilize the store. This typically means the record has been destroyed, most commonly by unloading it.`, store));\n  return store;\n}\nclass InstanceCache {\n  constructor(store) {\n    this.__instances = {\n      record: new Map(),\n      reference: new WeakMap()\n    };\n    this.store = store;\n    this._storeWrapper = new CacheCapabilitiesManager(this.store);\n    store.identifierCache.__configureMerge((identifier, matchedIdentifier, resourceData) => {\n      let keptIdentifier = identifier;\n      if (identifier.id !== matchedIdentifier.id) {\n        // @ts-expect-error TODO this needs to be fixed\n        keptIdentifier = 'id' in resourceData && identifier.id === resourceData.id ? identifier : matchedIdentifier;\n      } else if (identifier.type !== matchedIdentifier.type) {\n        keptIdentifier =\n        // @ts-expect-error TODO this needs to be fixed\n        'type' in resourceData && identifier.type === resourceData.type ? identifier : matchedIdentifier;\n      }\n      const staleIdentifier = identifier === keptIdentifier ? matchedIdentifier : identifier;\n\n      // check for duplicate entities\n      const keptHasRecord = this.__instances.record.has(keptIdentifier);\n      const staleHasRecord = this.__instances.record.has(staleIdentifier);\n\n      // we cannot merge entities when both have records\n      // (this may not be strictly true, we could probably swap the cache data the record points at)\n      if (keptHasRecord && staleHasRecord) {\n        // TODO we probably don't need to throw these errors anymore\n        // we can probably just \"swap\" what data source the abandoned\n        // record points at so long as\n        // it itself is not retained by the store in any way.\n        // @ts-expect-error TODO this needs to be fixed\n        if ('id' in resourceData) {\n          throw new Error(`Failed to update the 'id' for the RecordIdentifier '${identifier.type}:${String(identifier.id)} (${identifier.lid})' to '${String(resourceData.id)}', because that id is already in use by '${matchedIdentifier.type}:${String(matchedIdentifier.id)} (${matchedIdentifier.lid})'`);\n        }\n        ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Failed to update the RecordIdentifier '${identifier.type}:${String(identifier.id)} (${identifier.lid})' to merge with the detected duplicate identifier '${matchedIdentifier.type}:${String(matchedIdentifier.id)} (${String(matchedIdentifier.lid)})'`));\n      }\n      this.store.cache.patch({\n        op: 'mergeIdentifiers',\n        record: staleIdentifier,\n        value: keptIdentifier\n      });\n\n      /*\n      TODO @runspired consider adding this to make polymorphism even nicer\n      if (identifier.type !== matchedIdentifier.type) {\n      this.store._graph?.registerPolymorphicType(identifier.type, matchedIdentifier.type);\n      }\n      */\n\n      this.unloadRecord(staleIdentifier);\n      return keptIdentifier;\n    });\n  }\n  peek(identifier) {\n    return this.__instances.record.get(identifier);\n  }\n  getRecord(identifier, properties) {\n    let record = this.__instances.record.get(identifier);\n    if (!record) {\n      ( true && !(!this.store.isDestroying && !this.store.isDestroyed) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot create a new record instance while the store is being destroyed`, !this.store.isDestroying && !this.store.isDestroyed));\n      const cache = this.store.cache;\n      setCacheFor(identifier, cache);\n      record = this.store.instantiateRecord(identifier, properties || {});\n      setRecordIdentifier(record, identifier);\n      setCacheFor(record, cache);\n      StoreMap.set(record, this.store);\n      this.__instances.record.set(identifier, record);\n    }\n    return record;\n  }\n  getReference(identifier) {\n    const cache = this.__instances.reference;\n    let reference = cache.get(identifier);\n    if (!reference) {\n      reference = new RecordReference(this.store, identifier);\n      cache.set(identifier, reference);\n    }\n    return reference;\n  }\n  recordIsLoaded(identifier, filterDeleted = false) {\n    const cache = this.cache;\n    if (!cache) {\n      return false;\n    }\n    const isNew = cache.isNew(identifier);\n    const isEmpty = cache.isEmpty(identifier);\n\n    // if we are new we must consider ourselves loaded\n    if (isNew) {\n      return !cache.isDeleted(identifier);\n    }\n    // even if we have a past request, if we are now empty we are not loaded\n    // typically this is true after an unloadRecord call\n\n    // if we are not empty, not new && we have a fulfilled request then we are loaded\n    // we should consider allowing for something to be loaded that is simply \"not empty\".\n    // which is how RecordState currently handles this case; however, RecordState is buggy\n    // in that it does not account for unloading.\n    return filterDeleted && cache.isDeletionCommitted(identifier) ? false : !isEmpty;\n  }\n  disconnect(identifier) {\n    const record = this.__instances.record.get(identifier);\n    ( true && !(!isDestroyable(record) || record.isDestroyed || record.isDestroying) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('Cannot destroy record while it is still materialized', !isDestroyable(record) || record.isDestroyed || record.isDestroying));\n    this.store._graph?.remove(identifier);\n    this.store.identifierCache.forgetRecordIdentifier(identifier);\n    removeRecordDataFor(identifier);\n    this.store._requestCache._clearEntries(identifier);\n  }\n  unloadRecord(identifier) {\n    {\n      const requests = this.store.getRequestStateService().getPendingRequestsForRecord(identifier);\n      if (requests.some(req => {\n        return req.type === 'mutation';\n      })) {\n        ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You can only unload a record which is not inFlight. '${String(identifier)}'`));\n      }\n    }\n    // TODO is this join still necessary?\n    this.store._join(() => {\n      const record = this.__instances.record.get(identifier);\n      const cache = this.cache;\n      if (record) {\n        this.store.teardownRecord(record);\n        this.__instances.record.delete(identifier);\n        StoreMap.delete(record);\n        RecordCache.delete(record);\n        removeRecordDataFor(record);\n      }\n      if (cache) {\n        cache.unloadRecord(identifier);\n        removeRecordDataFor(identifier);\n      } else {\n        this.disconnect(identifier);\n      }\n      this.store._requestCache._clearEntries(identifier);\n    });\n  }\n  clear(type) {\n    const cache = this.store.identifierCache._cache;\n    if (type === undefined) {\n      // it would be cool if we could just de-ref cache here\n      // but probably would require WeakRef models to do so.\n      cache.resources.forEach(identifier => {\n        this.unloadRecord(identifier);\n      });\n    } else {\n      const typeCache = cache.resourcesByType;\n      const identifiers = typeCache[type]?.lid;\n      if (identifiers) {\n        identifiers.forEach(identifier => {\n          // if (rds.has(identifier)) {\n          this.unloadRecord(identifier);\n          // }\n          // TODO we don't remove the identifier, should we?\n        });\n      }\n    }\n  }\n\n  // TODO this should move into something coordinating operations\n  setRecordId(identifier, id) {\n    const {\n      type,\n      lid\n    } = identifier;\n    const oldId = identifier.id;\n\n    // ID absolutely can't be missing if the oldID is empty (missing Id in response for a new record)\n    ( true && !(!(id === null && oldId === null)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`'${type}' was saved to the server, but the response does not have an id and your record does not either.`, !(id === null && oldId === null))); // ID absolutely can't be different than oldID if oldID is not null\n    // TODO this assertion and restriction may not strictly be needed in the identifiers world\n    ( true && !(!(oldId !== null && id !== oldId)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot update the id for '${type}:${lid}' from '${String(oldId)}' to '${id}'.`, !(oldId !== null && id !== oldId))); // ID can be null if oldID is not null (altered ID in response for a record)\n    // however, this is more than likely a developer error.\n    if (oldId !== null && id === null) {\n      ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`Your ${type} record was saved to the server, but the response does not have an id.`, !(oldId !== null && id === null)));\n      return;\n    }\n    const existingIdentifier = this.store.identifierCache.peekRecordIdentifier({\n      type,\n      id\n    });\n    ( true && !(!existingIdentifier || existingIdentifier === identifier) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`'${type}' was saved to the server, but the response returned the new id '${id}', which has already been used with another record.'`, !existingIdentifier || existingIdentifier === identifier));\n    if (identifier.id === null) {\n      // TODO potentially this needs to handle merged result\n      this.store.identifierCache.updateRecordIdentifier(identifier, {\n        type,\n        id\n      });\n    }\n\n    // TODO update resource cache if needed ?\n    // TODO handle consequences of identifier merge for notifications\n    this.store.notifications.notify(identifier, 'identity');\n  }\n}\nfunction _resourceIsFullDeleted(identifier, cache) {\n  return cache.isDeletionCommitted(identifier) || cache.isNew(identifier) && cache.isDeleted(identifier);\n}\nfunction resourceIsFullyDeleted(instanceCache, identifier) {\n  const cache = instanceCache.cache;\n  return !cache || _resourceIsFullDeleted(identifier, cache);\n}\n\n/*\n    When a find request is triggered on the store, the user can optionally pass in\n    attributes and relationships to be preloaded. These are meant to behave as if they\n    came back from the server, except the user obtained them out of band and is informing\n    the store of their existence. The most common use case is for supporting client side\n    nested URLs, such as `/posts/1/comments/2` so the user can do\n    `store.findRecord('comment', 2, { preload: { post: 1 } })` without having to fetch the post.\n\n    Preloaded data can be attributes and relationships passed in either as IDs or as actual\n    models.\n  */\n\nfunction preloadData(store, identifier, preload) {\n  const jsonPayload = {};\n  //TODO(Igor) consider the polymorphic case\n  const schemas = store.getSchemaDefinitionService();\n  const relationships = schemas.relationshipsDefinitionFor(identifier);\n  Object.keys(preload).forEach(key => {\n    const preloadValue = preload[key];\n    const relationshipMeta = relationships[key];\n    if (relationshipMeta) {\n      if (!jsonPayload.relationships) {\n        jsonPayload.relationships = {};\n      }\n      jsonPayload.relationships[key] = preloadRelationship(relationshipMeta, preloadValue);\n    } else {\n      if (!jsonPayload.attributes) {\n        jsonPayload.attributes = {};\n      }\n      jsonPayload.attributes[key] = preloadValue;\n    }\n  });\n  const cache = store.cache;\n  const hasRecord = Boolean(store._instanceCache.peek(identifier));\n  cache.upsert(identifier, jsonPayload, hasRecord);\n}\nfunction preloadRelationship(schema, preloadValue) {\n  const relatedType = schema.type;\n  if (schema.kind === 'hasMany') {\n    ( true && !(Array.isArray(preloadValue)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('You need to pass in an array to set a hasMany property on a record', Array.isArray(preloadValue)));\n    return {\n      data: preloadValue.map(value => _convertPreloadRelationshipToJSON(value, relatedType))\n    };\n  }\n  ( true && !(!Array.isArray(preloadValue)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('You should not pass in an array to set a belongsTo property on a record', !Array.isArray(preloadValue)));\n  return {\n    data: preloadValue ? _convertPreloadRelationshipToJSON(preloadValue, relatedType) : null\n  };\n}\n\n/*\n  findRecord('user', '1', { preload: { friends: ['1'] }});\n  findRecord('user', '1', { preload: { friends: [record] }});\n*/\nfunction _convertPreloadRelationshipToJSON(value, type) {\n  if (typeof value === 'string' || typeof value === 'number') {\n    return {\n      type,\n      id: ensureStringId(value)\n    };\n  }\n  // TODO if not a record instance assert it's an identifier\n  // and allow identifiers to be used\n  return recordIdentifierFor(value);\n}\nfunction _clearCaches() {\n  RecordCache.clear();\n  StoreMap.clear();\n  CacheForIdentifierCache.clear();\n}\n\n// if modelFor turns out to be a bottleneck we should replace with a Map\n// and clear it during store teardown.\nconst AvailableShims = new WeakMap();\nfunction getShimClass(store, modelName) {\n  let shims = AvailableShims.get(store);\n  if (!shims) {\n    shims = Object.create(null);\n    AvailableShims.set(store, shims);\n  }\n  let shim = shims[modelName];\n  if (shim === undefined) {\n    shim = shims[modelName] = new ShimModelClass(store, modelName);\n  }\n  return shim;\n}\nfunction mapFromHash(hash) {\n  const map = new Map();\n  for (const i in hash) {\n    if (Object.prototype.hasOwnProperty.call(hash, i)) {\n      map.set(i, hash[i]);\n    }\n  }\n  return map;\n}\n\n// Mimics the static apis of @ember-data/model\nclass ShimModelClass {\n  constructor(store, modelName) {\n    this.__store = store;\n    this.modelName = modelName;\n  }\n  get fields() {\n    const attrs = this.__store.getSchemaDefinitionService().attributesDefinitionFor({\n      type: this.modelName\n    });\n    const relationships = this.__store.getSchemaDefinitionService().relationshipsDefinitionFor({\n      type: this.modelName\n    });\n    const fields = new Map();\n    Object.keys(attrs).forEach(key => fields.set(key, 'attribute'));\n    Object.keys(relationships).forEach(key => fields.set(key, relationships[key].kind));\n    return fields;\n  }\n  get attributes() {\n    const attrs = this.__store.getSchemaDefinitionService().attributesDefinitionFor({\n      type: this.modelName\n    });\n    return mapFromHash(attrs);\n  }\n  get relationshipsByName() {\n    const relationships = this.__store.getSchemaDefinitionService().relationshipsDefinitionFor({\n      type: this.modelName\n    });\n    return mapFromHash(relationships);\n  }\n  eachAttribute(callback, binding) {\n    const attrDefs = this.__store.getSchemaDefinitionService().attributesDefinitionFor({\n      type: this.modelName\n    });\n    Object.keys(attrDefs).forEach(key => {\n      callback.call(binding, key, attrDefs[key]);\n    });\n  }\n  eachRelationship(callback, binding) {\n    const relationshipDefs = this.__store.getSchemaDefinitionService().relationshipsDefinitionFor({\n      type: this.modelName\n    });\n    Object.keys(relationshipDefs).forEach(key => {\n      callback.call(binding, key, relationshipDefs[key]);\n    });\n  }\n  eachTransformedAttribute(callback, binding) {\n    const attrDefs = this.__store.getSchemaDefinitionService().attributesDefinitionFor({\n      type: this.modelName\n    });\n    Object.keys(attrDefs).forEach(key => {\n      if (attrDefs[key].type) {\n        callback.call(binding, key, attrDefs[key].type);\n      }\n    });\n  }\n}\nfunction _classPrivateFieldBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\nvar _cache = /*#__PURE__*/_classPrivateFieldKey(\"cache\");\n/**\n * The CacheManager wraps a Cache enforcing that only\n * the public API surface area is exposed.\n *\n * Hence, it is the value of `Store.cache`, wrapping\n * the cache instance returned by `Store.createCache`.\n *\n * It handles translating between cache versions when\n * necessary, for instance when a Store is configured\n * to use both a v1 and a v2 cache depending on some\n * heuristic.\n *\n * Starting with the v2 spec, the cache is designed such\n * that it must be implemented as a singleton.\n *\n * @class CacheManager\n * @public\n */\nclass CacheManager {\n  constructor(cache) {\n    this.version = '2';\n    Object.defineProperty(this, _cache, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldBase(this, _cache)[_cache] = cache;\n  }\n\n  // Cache Management\n  // ================\n\n  /**\n   * Cache the response to a request\n   *\n   * Unlike `store.push` which has UPSERT\n   * semantics, `put` has `replace` semantics similar to\n   * the `http` method `PUT`\n   *\n   * the individually cacheable\n   * e resource data it may contain\n   * should upsert, but the document data surrounding it should\n   * fully replace any existing information\n   *\n   * Note that in order to support inserting arbitrary data\n   * to the cache that did not originate from a request `put`\n   * should expect to sometimes encounter a document with only\n   * a `content` member and therefor must not assume the existence\n   * of `request` and `response` on the document.\n   *\n   * @method put\n   * @param {StructuredDocument} doc\n   * @return {ResourceDocument}\n   * @public\n   */\n  put(doc) {\n    return _classPrivateFieldBase(this, _cache)[_cache].put(doc);\n  }\n\n  /**\n   * Perform an operation on the cache to update the remote state.\n   *\n   * Note: currently the only valid operation is a MergeOperation\n   * which occurs when a collision of identifiers is detected.\n   *\n   * @method patch\n   * @public\n   * @param op the operation to perform\n   * @return {void}\n   */\n  patch(op) {\n    _classPrivateFieldBase(this, _cache)[_cache].patch(op);\n  }\n\n  /**\n   * Update resource data with a local mutation. Currently supports operations\n   * on relationships only.\n   *\n   * @method mutate\n   * @public\n   * @param mutation\n   */\n  mutate(mutation) {\n    _classPrivateFieldBase(this, _cache)[_cache].mutate(mutation);\n  }\n\n  /**\n   * Peek resource data from the Cache.\n   *\n   * In development, if the return value\n   * is JSON the return value\n   * will be deep-cloned and deep-frozen\n   * to prevent mutation thereby enforcing cache\n   * Immutability.\n   *\n   * This form of peek is useful for implementations\n   * that want to feed raw-data from cache to the UI\n   * or which want to interact with a blob of data\n   * directly from the presentation cache.\n   *\n   * An implementation might want to do this because\n   * de-referencing records which read from their own\n   * blob is generally safer because the record does\n   * not require retaining connections to the Store\n   * and Cache to present data on a per-field basis.\n   *\n   * This generally takes the place of `getAttr` as\n   * an API and may even take the place of `getRelationship`\n   * depending on implementation specifics, though this\n   * latter usage is less recommended due to the advantages\n   * of the Graph handling necessary entanglements and\n   * notifications for relational data.\n   *\n   * @method peek\n   * @public\n   * @param {StableRecordIdentifier | StableDocumentIdentifier} identifier\n   * @return {ResourceDocument | ResourceBlob | null} the known resource data\n   */\n\n  peek(identifier) {\n    return _classPrivateFieldBase(this, _cache)[_cache].peek(identifier);\n  }\n\n  /**\n   * Peek the Cache for the existing request data associated with\n   * a cacheable request\n   *\n   * @method peekRequest\n   * @param {StableDocumentIdentifier}\n   * @return {StableDocumentIdentifier | null}\n   * @public\n   */\n  peekRequest(identifier) {\n    return _classPrivateFieldBase(this, _cache)[_cache].peekRequest(identifier);\n  }\n\n  /**\n   * Push resource data from a remote source into the cache for this identifier\n   *\n   * @method upsert\n   * @public\n   * @param identifier\n   * @param data\n   * @param hasRecord\n   * @return {void | string[]} if `hasRecord` is true then calculated key changes should be returned\n   */\n  upsert(identifier, data, hasRecord) {\n    return _classPrivateFieldBase(this, _cache)[_cache].upsert(identifier, data, hasRecord);\n  }\n\n  // Cache Forking Support\n  // =====================\n\n  /**\n   * Create a fork of the cache from the current state.\n   *\n   * Applications should typically not call this method themselves,\n   * preferring instead to fork at the Store level, which will\n   * utilize this method to fork the cache.\n   *\n   * @method fork\n   * @public\n   * @return Promise<Cache>\n   */\n  fork() {\n    return _classPrivateFieldBase(this, _cache)[_cache].fork();\n  }\n\n  /**\n   * Merge a fork back into a parent Cache.\n   *\n   * Applications should typically not call this method themselves,\n   * preferring instead to merge at the Store level, which will\n   * utilize this method to merge the caches.\n   *\n   * @method merge\n   * @param {Cache} cache\n   * @public\n   * @return Promise<void>\n   */\n  merge(cache) {\n    return _classPrivateFieldBase(this, _cache)[_cache].merge(cache);\n  }\n\n  /**\n   * Generate the list of changes applied to all\n   * record in the store.\n   *\n   * Each individual resource or document that has\n   * been mutated should be described as an individual\n   * `Change` entry in the returned array.\n   *\n   * A `Change` is described by an object containing up to\n   * three properties: (1) the `identifier` of the entity that\n   * changed; (2) the `op` code of that change being one of\n   * `upsert` or `remove`, and if the op is `upsert` a `patch`\n   * containing the data to merge into the cache for the given\n   * entity.\n   *\n   * This `patch` is opaque to the Store but should be understood\n   * by the Cache and may expect to be utilized by an Adapter\n   * when generating data during a `save` operation.\n   *\n   * It is generally recommended that the `patch` contain only\n   * the updated state, ignoring fields that are unchanged\n   *\n   * ```ts\n   * interface Change {\n   *  identifier: StableRecordIdentifier | StableDocumentIdentifier;\n   *  op: 'upsert' | 'remove';\n   *  patch?: unknown;\n   * }\n   * ```\n   *\n   * @method diff\n   * @public\n   */\n  diff() {\n    return _classPrivateFieldBase(this, _cache)[_cache].diff();\n  }\n\n  // SSR Support\n  // ===========\n\n  /**\n   * Serialize the entire contents of the Cache into a Stream\n   * which may be fed back into a new instance of the same Cache\n   * via `cache.hydrate`.\n   *\n   * @method dump\n   * @return {Promise<ReadableStream>}\n   * @public\n   */\n  dump() {\n    return _classPrivateFieldBase(this, _cache)[_cache].dump();\n  }\n\n  /**\n   * hydrate a Cache from a Stream with content previously serialized\n   * from another instance of the same Cache, resolving when hydration\n   * is complete.\n   *\n   * This method should expect to be called both in the context of restoring\n   * the Cache during application rehydration after SSR **AND** at unknown\n   * times during the lifetime of an already booted application when it is\n   * desired to bulk-load additional information into the cache. This latter\n   * behavior supports optimizing pre/fetching of data for route transitions\n   * via data-only SSR modes.\n   *\n   * @method hydrate\n   * @param {ReadableStream} stream\n   * @return {Promise<void>}\n   * @public\n   */\n  hydrate(stream) {\n    return _classPrivateFieldBase(this, _cache)[_cache].hydrate(stream);\n  }\n\n  // Cache\n  // =====\n\n  // Resource Support\n  // ================\n\n  /**\n   * [LIFECYCLE] Signal to the cache that a new record has been instantiated on the client\n   *\n   * It returns properties from options that should be set on the record during the create\n   * process. This return value behavior is deprecated.\n   *\n   * @method clientDidCreate\n   * @public\n   * @param identifier\n   * @param options\n   */\n  clientDidCreate(identifier, options) {\n    return _classPrivateFieldBase(this, _cache)[_cache].clientDidCreate(identifier, options);\n  }\n\n  /**\n   * [LIFECYCLE] Signals to the cache that a resource\n   * will be part of a save transaction.\n   *\n   * @method willCommit\n   * @public\n   * @param identifier\n   */\n  willCommit(identifier, context) {\n    _classPrivateFieldBase(this, _cache)[_cache].willCommit(identifier, context);\n  }\n\n  /**\n   * [LIFECYCLE] Signals to the cache that a resource\n   * was successfully updated as part of a save transaction.\n   *\n   * @method didCommit\n   * @public\n   * @param identifier\n   * @param data\n   */\n  didCommit(identifier, result) {\n    return _classPrivateFieldBase(this, _cache)[_cache].didCommit(identifier, result);\n  }\n\n  /**\n   * [LIFECYCLE] Signals to the cache that a resource\n   * was update via a save transaction failed.\n   *\n   * @method commitWasRejected\n   * @public\n   * @param identifier\n   * @param errors\n   */\n  commitWasRejected(identifier, errors) {\n    _classPrivateFieldBase(this, _cache)[_cache].commitWasRejected(identifier, errors);\n  }\n\n  /**\n   * [LIFECYCLE] Signals to the cache that all data for a resource\n   * should be cleared.\n   *\n   * @method unloadRecord\n   * @public\n   * @param identifier\n   */\n  unloadRecord(identifier) {\n    _classPrivateFieldBase(this, _cache)[_cache].unloadRecord(identifier);\n  }\n\n  // Granular Resource Data APIs\n  // ===========================\n\n  /**\n   * Retrieve the data for an attribute from the cache\n   *\n   * @method getAttr\n   * @public\n   * @param identifier\n   * @param propertyName\n   * @return {unknown}\n   */\n  getAttr(identifier, propertyName) {\n    return _classPrivateFieldBase(this, _cache)[_cache].getAttr(identifier, propertyName);\n  }\n\n  /**\n   * Mutate the data for an attribute in the cache\n   *\n   * @method setAttr\n   * @public\n   * @param identifier\n   * @param propertyName\n   * @param value\n   */\n  setAttr(identifier, propertyName, value) {\n    _classPrivateFieldBase(this, _cache)[_cache].setAttr(identifier, propertyName, value);\n  }\n\n  /**\n   * Query the cache for the changed attributes of a resource.\n   *\n   * @method changedAttrs\n   * @public\n   * @param identifier\n   * @return\n   */\n  changedAttrs(identifier) {\n    return _classPrivateFieldBase(this, _cache)[_cache].changedAttrs(identifier);\n  }\n\n  /**\n   * Query the cache for whether any mutated attributes exist\n   *\n   * @method hasChangedAttrs\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */\n  hasChangedAttrs(identifier) {\n    return _classPrivateFieldBase(this, _cache)[_cache].hasChangedAttrs(identifier);\n  }\n\n  /**\n   * Tell the cache to discard any uncommitted mutations to attributes\n   *\n   * @method rollbackAttrs\n   * @public\n   * @param identifier\n   * @return the names of attributes that were restored\n   */\n  rollbackAttrs(identifier) {\n    return _classPrivateFieldBase(this, _cache)[_cache].rollbackAttrs(identifier);\n  }\n\n  // Relationships\n  // =============\n\n  /**\n   * Query the cache for the changes to relationships of a resource.\n   *\n   * Returns a map of relationship names to RelationshipDiff objects.\n   *\n   * ```ts\n   * type RelationshipDiff =\n  | {\n      kind: 'collection';\n      remoteState: StableRecordIdentifier[];\n      additions: Set<StableRecordIdentifier>;\n      removals: Set<StableRecordIdentifier>;\n      localState: StableRecordIdentifier[];\n      reordered: boolean;\n    }\n  | {\n      kind: 'resource';\n      remoteState: StableRecordIdentifier | null;\n      localState: StableRecordIdentifier | null;\n    };\n    ```\n   *\n   * @method changedRelationships\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @return {Map<string, RelationshipDiff>}\n   */\n  changedRelationships(identifier) {\n    return _classPrivateFieldBase(this, _cache)[_cache].changedRelationships(identifier);\n  }\n\n  /**\n   * Query the cache for whether any mutated attributes exist\n   *\n   * @method hasChangedRelationships\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @return {boolean}\n   */\n  hasChangedRelationships(identifier) {\n    return _classPrivateFieldBase(this, _cache)[_cache].hasChangedRelationships(identifier);\n  }\n\n  /**\n   * Tell the cache to discard any uncommitted mutations to relationships.\n   *\n   * This will also discard the change on any appropriate inverses.\n   *\n   * This method is a candidate to become a mutation\n   *\n   * @method rollbackRelationships\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @return {string[]} the names of relationships that were restored\n   */\n  rollbackRelationships(identifier) {\n    return _classPrivateFieldBase(this, _cache)[_cache].rollbackRelationships(identifier);\n  }\n\n  /**\n   * Query the cache for the current state of a relationship property\n   *\n   * @method getRelationship\n   * @public\n   * @param identifier\n   * @param propertyName\n   * @return resource relationship object\n   */\n  getRelationship(identifier, propertyName) {\n    return _classPrivateFieldBase(this, _cache)[_cache].getRelationship(identifier, propertyName);\n  }\n\n  // Resource State\n  // ===============\n\n  /**\n   * Update the cache state for the given resource to be marked as locally deleted,\n   * or remove such a mark.\n   *\n   * @method setIsDeleted\n   * @public\n   * @param identifier\n   * @param isDeleted\n   */\n  setIsDeleted(identifier, isDeleted) {\n    _classPrivateFieldBase(this, _cache)[_cache].setIsDeleted(identifier, isDeleted);\n  }\n\n  /**\n   * Query the cache for any validation errors applicable to the given resource.\n   *\n   * @method getErrors\n   * @public\n   * @param identifier\n   * @return\n   */\n  getErrors(identifier) {\n    return _classPrivateFieldBase(this, _cache)[_cache].getErrors(identifier);\n  }\n\n  /**\n   * Query the cache for whether a given resource has any available data\n   *\n   * @method isEmpty\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */\n  isEmpty(identifier) {\n    return _classPrivateFieldBase(this, _cache)[_cache].isEmpty(identifier);\n  }\n\n  /**\n   * Query the cache for whether a given resource was created locally and not\n   * yet persisted.\n   *\n   * @method isNew\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */\n  isNew(identifier) {\n    return _classPrivateFieldBase(this, _cache)[_cache].isNew(identifier);\n  }\n\n  /**\n   * Query the cache for whether a given resource is marked as deleted (but not\n   * necessarily persisted yet).\n   *\n   * @method isDeleted\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */\n  isDeleted(identifier) {\n    return _classPrivateFieldBase(this, _cache)[_cache].isDeleted(identifier);\n  }\n\n  /**\n   * Query the cache for whether a given resource has been deleted and that deletion\n   * has also been persisted.\n   *\n   * @method isDeletionCommitted\n   * @public\n   * @param identifier\n   * @return {boolean}\n   */\n  isDeletionCommitted(identifier) {\n    return _classPrivateFieldBase(this, _cache)[_cache].isDeletionCommitted(identifier);\n  }\n}\n\n/**\n * @module @ember-data/store\n */\nlet tokenId = 0;\nconst CacheOperations = new Set(['added', 'removed', 'state', 'updated']);\nfunction isCacheOperationValue(value) {\n  return CacheOperations.has(value);\n}\nfunction runLoopIsFlushing() {\n  //@ts-expect-error\n  return !!_ember_runloop__WEBPACK_IMPORTED_MODULE_6__._backburner.currentInstance && _ember_runloop__WEBPACK_IMPORTED_MODULE_6__._backburner._autorun !== true;\n}\nfunction _unsubscribe(tokens, token, cache) {\n  const identifier = tokens.get(token);\n  if (identifier) {\n    tokens.delete(token);\n    const map = cache.get(identifier);\n    map?.delete(token);\n  }\n}\n\n/**\n * The NotificationManager provides the ability to subscribe to\n * changes to Cache state.\n *\n * This Feature is what allows EmberData to create subscriptions that\n * work with any framework or change-notification system.\n *\n * @class NotificationManager\n * @public\n */\nclass NotificationManager {\n  constructor(store) {\n    this.store = store;\n    this.isDestroyed = false;\n    this._buffered = new Map();\n    this._hasFlush = false;\n    this._cache = new Map();\n    this._tokens = new Map();\n  }\n\n  /**\n   * Subscribe to changes for a given resource identifier, resource addition/removal, or document addition/removal.\n   *\n   * ```ts\n   * export type CacheOperation = 'added' | 'removed' | 'updated' | 'state';\n   *\n   * export interface NotificationCallback {\n   *   (identifier: StableRecordIdentifier, notificationType: 'attributes' | 'relationships', key?: string): void;\n   *   (identifier: StableRecordIdentifier, notificationType: 'errors' | 'meta' | 'identity' | 'state'): void;\n   *   (identifier: StableRecordIdentifier, notificationType: NotificationType, key?: string): void;\n   * }\n   * export interface ResourceOperationCallback {\n   *   // resource updates\n   *   (identifier: StableRecordIdentifier, notificationType: CacheOperation): void;\n   * }\n   * export interface DocumentOperationCallback {\n   *   // document updates\n   *   (identifier: StableDocumentIdentifier, notificationType: CacheOperation): void;\n   * }\n   * ```\n   *\n   * @method subscribe\n   * @public\n   * @param {StableDocumentIdentifier | StableRecordIdentifier | 'resource' | 'document'} identifier\n   * @param {NotificationCallback | ResourceOperationCallback | DocumentOperationCallback} callback\n   * @return {UnsubscribeToken} an opaque token to be used with unsubscribe\n   */\n\n  subscribe(identifier, callback) {\n    ( true && !(identifier === 'resource' || identifier === 'document' || isStableIdentifier(identifier) || isDocumentIdentifier(identifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected to receive a stable Identifier to subscribe to`, identifier === 'resource' || identifier === 'document' || isStableIdentifier(identifier) || isDocumentIdentifier(identifier)));\n    let map = this._cache.get(identifier);\n    if (!map) {\n      map = new Map();\n      this._cache.set(identifier, map);\n    }\n    const unsubToken = {\n      _tokenRef: tokenId++\n    };\n    map.set(unsubToken, callback);\n    this._tokens.set(unsubToken, identifier);\n    return unsubToken;\n  }\n\n  /**\n   * remove a previous subscription\n   *\n   * @method unsubscribe\n   * @public\n   * @param {UnsubscribeToken} token\n   */\n  unsubscribe(token) {\n    if (!this.isDestroyed) {\n      _unsubscribe(this._tokens, token, this._cache);\n    }\n  }\n\n  /**\n   * Custom Caches and Application Code should not call this method directly.\n   *\n   * @method notify\n   * @param identifier\n   * @param value\n   * @param key\n   * @return {Boolean} whether a notification was delivered to any subscribers\n   * @private\n   */\n\n  notify(identifier, value, key) {\n    ( true && !(!key || value === 'attributes' || value === 'relationships') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Notify does not accept a key argument for the namespace '${value}'. Received key '${key || ''}'.`, !key || value === 'attributes' || value === 'relationships'));\n    if (!isStableIdentifier(identifier) && !isDocumentIdentifier(identifier)) {\n      return false;\n    }\n    const hasSubscribers = Boolean(this._cache.get(identifier)?.size);\n    if (isCacheOperationValue(value) || hasSubscribers) {\n      let buffer = this._buffered.get(identifier);\n      if (!buffer) {\n        buffer = [];\n        this._buffered.set(identifier, buffer);\n      }\n      buffer.push([value, key]);\n      this._scheduleNotify();\n    }\n    return hasSubscribers;\n  }\n  _onNextFlush(cb) {\n    this._onFlushCB = cb;\n  }\n  _scheduleNotify() {\n    const asyncFlush = this.store._enableAsyncFlush;\n    if (this._hasFlush) {\n      if (asyncFlush !== false && !runLoopIsFlushing()) {\n        return;\n      }\n    }\n    if (asyncFlush && !runLoopIsFlushing()) {\n      this._hasFlush = true;\n      return;\n    }\n    this._flush();\n  }\n  _flush() {\n    if (this._buffered.size) {\n      this._buffered.forEach((states, identifier) => {\n        states.forEach(args => {\n          // @ts-expect-error\n          this._flushNotification(identifier, args[0], args[1]);\n        });\n      });\n      this._buffered = new Map();\n    }\n    this._hasFlush = false;\n    this._onFlushCB?.();\n    this._onFlushCB = undefined;\n  }\n  _flushNotification(identifier, value, key) {\n    // TODO for documents this will need to switch based on Identifier kind\n    if (isCacheOperationValue(value)) {\n      const callbackMap = this._cache.get(isDocumentIdentifier(identifier) ? 'document' : 'resource');\n      if (callbackMap) {\n        callbackMap.forEach(cb => {\n          cb(identifier, value);\n        });\n      }\n    }\n    const callbackMap = this._cache.get(identifier);\n    if (!callbackMap || !callbackMap.size) {\n      return false;\n    }\n    callbackMap.forEach(cb => {\n      // @ts-expect-error overload doesn't narrow within body\n      cb(identifier, value, key);\n    });\n    return true;\n  }\n  destroy() {\n    this.isDestroyed = true;\n    this._tokens.clear();\n    this._cache.clear();\n  }\n}\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object.keys(descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object.defineProperty(target, property, desc);\n    desc = null;\n  }\n  return desc;\n}\nvar _class;\nconst ARRAY_GETTER_METHODS = new Set([Symbol.iterator, 'concat', 'entries', 'every', 'fill', 'filter', 'find', 'findIndex', 'flat', 'flatMap', 'forEach', 'includes', 'indexOf', 'join', 'keys', 'lastIndexOf', 'map', 'reduce', 'reduceRight', 'slice', 'some', 'values']);\nconst ARRAY_SETTER_METHODS = new Set(['push', 'pop', 'unshift', 'shift', 'splice', 'sort']);\nconst SYNC_PROPS = new Set(['[]', 'length', 'links', 'meta']);\nfunction isArrayGetter(prop) {\n  return ARRAY_GETTER_METHODS.has(prop);\n}\nfunction isArraySetter(prop) {\n  return ARRAY_SETTER_METHODS.has(prop);\n}\nfunction isSelfProp(self, prop) {\n  return prop in self;\n}\nconst ARRAY_SIGNAL = Symbol('#signal');\nconst SOURCE = Symbol('#source');\nconst MUTATE = Symbol('#update');\nconst NOTIFY = Symbol('#notify');\nconst IS_COLLECTION = Symbol.for('Collection');\nfunction notifyArray(arr) {\n  (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.addToTransaction)(arr[ARRAY_SIGNAL]);\n}\nfunction convertToInt(prop) {\n  if (typeof prop === 'symbol') return null;\n  const num = Number(prop);\n  if (isNaN(num)) return null;\n  return num % 1 === 0 ? num : null;\n}\nfunction safeForEach(instance, arr, store, callback, target) {\n  if (target === undefined) {\n    target = null;\n  }\n  // clone to prevent mutation\n  arr = arr.slice();\n  ( true && !(typeof callback === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('`forEach` expects a function as first argument.', typeof callback === 'function')); // because we retrieveLatest above we need not worry if array is mutated during iteration\n  // by unloadRecord/rollbackAttributes\n  // push/add/removeObject may still be problematic\n  // but this is a more traditionally expected forEach bug.\n  const length = arr.length; // we need to access length to ensure we are consumed\n\n  for (let index = 0; index < length; index++) {\n    callback.call(target, store._instanceCache.getRecord(arr[index]), index, instance);\n  }\n  return instance;\n}\n\n/**\n  A record array is an array that contains records of a certain type (or modelName).\n  The record array materializes records as needed when they are retrieved for the first\n  time. You should not create record arrays yourself. Instead, an instance of\n  `RecordArray` or its subclasses will be returned by your application's store\n  in response to queries.\n\n  This class should not be imported and instantiated by consuming applications.\n\n  @class RecordArray\n  @public\n*/\nlet IdentifierArray = (_class = class IdentifierArray {\n  [NOTIFY]() {\n    notifyArray(this);\n  }\n\n  /**\n    The store that created this record array.\n     @property store\n    @private\n    @type Store\n    */\n\n  destroy(clear) {\n    this.isDestroying = !clear;\n    // changing the reference breaks the Proxy\n    // this[SOURCE] = [];\n    this[SOURCE].length = 0;\n    this[NOTIFY]();\n    this.isDestroyed = !clear;\n  }\n\n  // length must be on self for proxied methods to work properly\n  get length() {\n    return this[SOURCE].length;\n  }\n  set length(value) {\n    this[SOURCE].length = value;\n  }\n  constructor(options) {\n    /**\n      The flag to signal a `RecordArray` is currently loading data.\n      Example\n      ```javascript\n      let people = store.peekAll('person');\n      people.isUpdating; // false\n      people.update();\n      people.isUpdating; // true\n      ```\n      @property isUpdating\n      @public\n      @type Boolean\n    */\n    this.isLoaded = true;\n    this.isDestroying = false;\n    this.isDestroyed = false;\n    this._updatingPromise = null;\n    this[IS_COLLECTION] = true;\n    this[SOURCE] = void 0;\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    this.modelName = options.type;\n    this.store = options.store;\n    this._manager = options.manager;\n    this[SOURCE] = options.identifiers;\n    this[ARRAY_SIGNAL] = (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.createSignal)(this, 'length');\n    const store = options.store;\n    const boundFns = new Map();\n    const _SIGNAL = this[ARRAY_SIGNAL];\n    const PrivateState = {\n      links: options.links || null,\n      meta: options.meta || null\n    };\n    let transaction = false;\n\n    // when a mutation occurs\n    // we track all mutations within the call\n    // and forward them as one\n\n    const proxy = new Proxy(this[SOURCE], {\n      get(target, prop, receiver) {\n        const index = convertToInt(prop);\n        if (_SIGNAL.shouldReset && (index !== null || SYNC_PROPS.has(prop) || isArrayGetter(prop))) {\n          options.manager._syncArray(receiver);\n          _SIGNAL.t = false;\n          _SIGNAL.shouldReset = false;\n        }\n        if (index !== null) {\n          const identifier = target[index];\n          if (!transaction) {\n            (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(_SIGNAL);\n          }\n          return identifier && store._instanceCache.getRecord(identifier);\n        }\n        if (prop === 'meta') return (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(_SIGNAL), PrivateState.meta;\n        if (prop === 'links') return (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(_SIGNAL), PrivateState.links;\n        if (prop === '[]') return (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(_SIGNAL), receiver;\n        if (isArrayGetter(prop)) {\n          let fn = boundFns.get(prop);\n          if (fn === undefined) {\n            if (prop === 'forEach') {\n              fn = function () {\n                (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(_SIGNAL);\n                transaction = true;\n                const result = safeForEach(receiver, target, store, arguments[0], arguments[1]);\n                transaction = false;\n                return result;\n              };\n            } else {\n              fn = function () {\n                (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(_SIGNAL);\n                // array functions must run through Reflect to work properly\n                // binding via other means will not work.\n                transaction = true;\n                const result = Reflect.apply(target[prop], receiver, arguments);\n                transaction = false;\n                return result;\n              };\n            }\n            boundFns.set(prop, fn);\n          }\n          return fn;\n        }\n        if (isArraySetter(prop)) {\n          let fn = boundFns.get(prop);\n          if (fn === undefined) {\n            fn = function () {\n              // array functions must run through Reflect to work properly\n              // binding via other means will not work.\n              if (!options.allowMutation) {\n                ( true && !(options.allowMutation) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Mutating this array of records via ${String(prop)} is not allowed.`, options.allowMutation));\n                return;\n              }\n              const args = Array.prototype.slice.call(arguments);\n              ( true && !(!transaction) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot start a new array transaction while a previous transaction is underway`, !transaction));\n              transaction = true;\n              const result = self[MUTATE](target, receiver, prop, args, _SIGNAL);\n              transaction = false;\n              return result;\n            };\n            boundFns.set(prop, fn);\n          }\n          return fn;\n        }\n        if (isSelfProp(self, prop)) {\n          if (prop === NOTIFY || prop === ARRAY_SIGNAL || prop === SOURCE) {\n            return self[prop];\n          }\n          let fn = boundFns.get(prop);\n          if (fn) return fn;\n          const outcome = self[prop];\n          if (typeof outcome === 'function') {\n            fn = function () {\n              (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(_SIGNAL);\n              // array functions must run through Reflect to work properly\n              // binding via other means will not work.\n              return Reflect.apply(outcome, receiver, arguments);\n            };\n            boundFns.set(prop, fn);\n            return fn;\n          }\n          return (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.subscribe)(_SIGNAL), outcome;\n        }\n        return target[prop];\n      },\n      // FIXME: Should this get a generic like get above?\n      set(target, prop, value, receiver) {\n        if (prop === 'length') {\n          if (!transaction && value === 0) {\n            transaction = true;\n            self[MUTATE](target, receiver, 'length 0', [], _SIGNAL);\n            transaction = false;\n            return true;\n          } else if (transaction) {\n            return Reflect.set(target, prop, value);\n          } else {\n            ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`unexpected length set`));\n          }\n        }\n        if (prop === 'links') {\n          PrivateState.links = value || null;\n          return true;\n        }\n        if (prop === 'meta') {\n          PrivateState.meta = value || null;\n          return true;\n        }\n        const index = convertToInt(prop);\n\n        // we do not allow \"holey\" arrays and so if the index is\n        // greater than length then we will disallow setting it.\n        // however, there is a special case for \"unshift\" with more than\n        // one item being inserted since current items will be moved to the\n        // new indices first.\n        // we \"loosely\" detect this by just checking whether we are in\n        // a transaction.\n        if (index === null || index > target.length) {\n          if (index !== null && transaction) {\n            const identifier = recordIdentifierFor(value);\n            ( true && !(isStableIdentifier(identifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot set index ${index} past the end of the array.`, isStableIdentifier(identifier)));\n            target[index] = identifier;\n            return true;\n          } else if (isSelfProp(self, prop)) {\n            self[prop] = value;\n            return true;\n          }\n          return false;\n        }\n        if (!options.allowMutation) {\n          ( true && !(options.allowMutation) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Mutating ${String(prop)} on this RecordArray is not allowed.`, options.allowMutation));\n          return false;\n        }\n        const original = target[index];\n        const newIdentifier = extractIdentifierFromRecord$1(value);\n        target[index] = newIdentifier;\n        ( true && !(isStableIdentifier(newIdentifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a record`, isStableIdentifier(newIdentifier))); // We generate \"transactions\" whenever a setter method on the array\n        // is called and might bulk update multiple array cells. Fundamentally,\n        // all array operations decompose into individual cell replacements.\n        // e.g. a push is really a \"replace cell at next index with new value\"\n        // or a splice is \"shift all values left/right by X and set out of new\n        // bounds cells to undefined\"\n        //\n        // so, if we are in a transaction, then this is not a user generated change\n        // but one generated by a setter method. In this case we want to only apply\n        // the change to the target array and not call the MUTATE method.\n        // If there is no transaction though, then this means the user themselves has\n        // directly changed the value of a specific index and we need to thus generate\n        // a mutation for that change.\n        // e.g. \"arr.push(newVal)\" is handled by a \"addToRelatedRecords\" mutation within\n        // a transaction.\n        // while \"arr[arr.length] = newVal;\" is handled by this replace cell code path.\n        if (!transaction) {\n          self[MUTATE](target, receiver, 'replace cell', [index, original, newIdentifier], _SIGNAL);\n        } else {\n          target[index] = newIdentifier;\n        }\n        return true;\n      },\n      deleteProperty(target, prop) {\n        ( true && !(transaction) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Deleting keys on managed arrays is disallowed`, transaction));\n        if (!transaction) {\n          return false;\n        }\n        return Reflect.deleteProperty(target, prop);\n      },\n      getPrototypeOf() {\n        return IdentifierArray.prototype;\n      }\n    });\n    (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.createArrayTags)(proxy, _SIGNAL);\n    this[NOTIFY] = this[NOTIFY].bind(proxy);\n    return proxy;\n  }\n\n  /**\n    Used to get the latest version of all of the records in this array\n    from the adapter.\n     Example\n     ```javascript\n    let people = store.peekAll('person');\n    people.isUpdating; // false\n     people.update().then(function() {\n      people.isUpdating; // false\n    });\n     people.isUpdating; // true\n    ```\n     @method update\n    @public\n  */\n  update() {\n    if (this.isUpdating) {\n      return this._updatingPromise;\n    }\n    this.isUpdating = true;\n    const updatingPromise = this._update();\n    void updatingPromise.finally(() => {\n      this._updatingPromise = null;\n      if (this.isDestroying || this.isDestroyed) {\n        return;\n      }\n      this.isUpdating = false;\n    });\n    this._updatingPromise = updatingPromise;\n    return updatingPromise;\n  }\n\n  /*\n    Update this RecordArray and return a promise which resolves once the update\n    is finished.\n   */\n  _update() {\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`_update cannot be used with this array`, this.modelName));\n    return this.store.findAll(this.modelName, {\n      reload: true\n    });\n  }\n\n  // TODO deprecate\n  /**\n    Saves all of the records in the `RecordArray`.\n     Example\n     ```javascript\n    let messages = store.peekAll('message');\n    messages.forEach(function(message) {\n      message.hasBeenSeen = true;\n    });\n    messages.save();\n    ```\n     @method save\n    @public\n    @return {Promise<IdentifierArray>} promise\n  */\n  save() {\n    const promise = Promise.all(this.map(record => this.store.saveRecord(record))).then(() => this);\n    return promise;\n  }\n}, _applyDecoratedDescriptor(_class.prototype, \"length\", [_ember_data_tracking__WEBPACK_IMPORTED_MODULE_7__.compat], Object.getOwnPropertyDescriptor(_class.prototype, \"length\"), _class.prototype), _class); // this will error if someone tries to call\n// A(identifierArray) since it is not configurable\n// which is preferable to the `meta` override we used\n// before which required importing all of Ember\nconst desc = {\n  enumerable: true,\n  configurable: false,\n  get: function () {\n    return this;\n  }\n};\n(0,_ember_data_tracking__WEBPACK_IMPORTED_MODULE_7__.compat)(desc);\nObject.defineProperty(IdentifierArray.prototype, '[]', desc);\n(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(IdentifierArray.prototype, 'isUpdating', false);\nclass Collection extends IdentifierArray {\n  constructor(options) {\n    super(options);\n    this.query = null;\n    this.query = options.query || null;\n    this.isLoaded = options.isLoaded || false;\n  }\n  _update() {\n    const {\n      store,\n      query\n    } = this;\n\n    // TODO save options from initial request?\n    ( true && !(this.modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`update cannot be used with this array`, this.modelName));\n    ( true && !(query) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`update cannot be used with no query`, query));\n    const promise = store.query(this.modelName, query, {\n      _recordArray: this\n    });\n    return promise;\n  }\n  destroy(clear) {\n    super.destroy(clear);\n    this._manager._managed.delete(this);\n    this._manager._pending.delete(this);\n  }\n}\n// trick the proxy \"in\" check\nCollection.prototype.query = null;\n\n// Ensure instanceof works correctly\n// Object.setPrototypeOf(IdentifierArray.prototype, Array.prototype);\n\nfunction assertRecordPassedToHasMany(record) {\n  ( true && !(function () {\n    try {\n      recordIdentifierFor(record);\n      return true;\n    } catch {\n      return false;\n    }\n  }()) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`All elements of a hasMany relationship must be instances of Model, you passed $${typeof record}`, function () {\n    try {\n      recordIdentifierFor(record);\n      return true;\n    } catch {\n      return false;\n    }\n  }()));\n}\nfunction extractIdentifierFromRecord$1(record) {\n  if (!record) {\n    return null;\n  }\n  assertRecordPassedToHasMany(record);\n  return recordIdentifierFor(record);\n}\n\n/**\n  @module @ember-data/store\n*/\nconst FAKE_ARR = {};\nconst SLICE_BATCH_SIZE = 1200;\n/**\n * This is a clever optimization.\n *\n * clever optimizations rarely stand the test of time, so if you're\n * ever curious or think something better is possible please benchmark\n * and discuss. The benchmark for this at the time of writing is in\n * `scripts/benchmark-push.js`\n *\n * This approach turns out to be 150x faster in Chrome and node than\n * simply using push or concat. It's highly susceptible to the specifics\n * of the batch size, and may require tuning.\n *\n * Clever optimizations should always come with a `why`. This optimization\n * exists for two reasons.\n *\n * 1) array.push(...objects) and Array.prototype.push.apply(arr, objects)\n *   are susceptible to stack overflows. The size of objects at which this\n *   occurs varies by environment, browser, and current stack depth and memory\n *   pressure; however, it occurs in all browsers in fairly pristine conditions\n *   somewhere around 125k to 200k elements. Since EmberData regularly encounters\n *   arrays larger than this in size, we cannot use push.\n *\n * 2) `array.concat` or simply setting the array to a new reference is often an\n *   easier approach; however, native Proxy to an array cannot swap it's target array\n *   and attempts at juggling multiple array sources have proven to be victim to a number\n *   of browser implementation bugs. Should these bugs be addressed then we could\n *   simplify to using `concat`, however, do note this is currently 150x faster\n *   than concat, and due to the overloaded signature of concat will likely always\n *   be faster.\n *\n * Sincerely,\n *   - runspired (Chris Thoburn) 08/21/2022\n *\n * @function fastPush\n * @internal\n * @param target the array to push into\n * @param source the items to push into target\n */\nfunction fastPush(target, source) {\n  let startLength = 0;\n  const newLength = source.length;\n  while (newLength - startLength > SLICE_BATCH_SIZE) {\n    // eslint-disable-next-line prefer-spread\n    target.push.apply(target, source.slice(startLength, startLength + SLICE_BATCH_SIZE));\n    startLength += SLICE_BATCH_SIZE;\n  }\n  // eslint-disable-next-line prefer-spread\n  target.push.apply(target, source.slice(startLength));\n}\n/**\n  @class RecordArrayManager\n  @internal\n*/\nclass RecordArrayManager {\n  constructor(options) {\n    this.store = options.store;\n    this.isDestroying = false;\n    this.isDestroyed = false;\n    this._live = new Map();\n    this._managed = new Set();\n    this._pending = new Map();\n    this._staged = new Map();\n    this._keyedArrays = new Map();\n    this._identifiers = new Map();\n    this._set = new Map();\n    this._visibilitySet = new Map();\n    this._subscription = this.store.notifications.subscribe('resource', (identifier, type) => {\n      if (type === 'added') {\n        this._visibilitySet.set(identifier, true);\n        this.identifierAdded(identifier);\n      } else if (type === 'removed') {\n        this._visibilitySet.set(identifier, false);\n        this.identifierRemoved(identifier);\n      } else if (type === 'state') {\n        this.identifierChanged(identifier);\n      }\n    });\n  }\n  _syncArray(array) {\n    const pending = this._pending.get(array);\n    if (!pending || this.isDestroying || this.isDestroyed) {\n      return;\n    }\n    sync(array, pending, this._set.get(array));\n    this._pending.delete(array);\n  }\n\n  /**\n    Get the `RecordArray` for a modelName, which contains all loaded records of\n    given modelName.\n     @method liveArrayFor\n    @internal\n    @param {String} modelName\n    @return {RecordArray}\n  */\n  liveArrayFor(type) {\n    let array = this._live.get(type);\n    const identifiers = [];\n    const staged = this._staged.get(type);\n    if (staged) {\n      staged.forEach((value, key) => {\n        if (value === 'add') {\n          identifiers.push(key);\n        }\n      });\n      this._staged.delete(type);\n    }\n    if (!array) {\n      array = new IdentifierArray({\n        type,\n        identifiers,\n        store: this.store,\n        allowMutation: false,\n        manager: this\n      });\n      this._live.set(type, array);\n      this._set.set(array, new Set(identifiers));\n    }\n    return array;\n  }\n  createArray(config) {\n    const options = {\n      type: config.type,\n      links: config.doc?.links || null,\n      meta: config.doc?.meta || null,\n      query: config.query || null,\n      identifiers: config.identifiers || [],\n      isLoaded: !!config.identifiers?.length,\n      allowMutation: false,\n      store: this.store,\n      manager: this\n    };\n    const array = new Collection(options);\n    this._managed.add(array);\n    this._set.set(array, new Set(options.identifiers || []));\n    if (config.identifiers) {\n      associate(this._identifiers, array, config.identifiers);\n    }\n    return array;\n  }\n  dirtyArray(array, delta) {\n    if (array === FAKE_ARR) {\n      return;\n    }\n    const tag = array[ARRAY_SIGNAL];\n    if (!tag.shouldReset) {\n      tag.shouldReset = true;\n      (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.addTransactionCB)(array[NOTIFY]);\n    } else if (delta > 0 && !tag.t) {\n      (0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.addTransactionCB)(array[NOTIFY]);\n    }\n  }\n  _getPendingFor(identifier, includeManaged, isRemove) {\n    if (this.isDestroying || this.isDestroyed) {\n      return;\n    }\n    const liveArray = this._live.get(identifier.type);\n    const allPending = this._pending;\n    const pending = new Map();\n    if (includeManaged) {\n      const managed = this._identifiers.get(identifier);\n      if (managed) {\n        managed.forEach(arr => {\n          let changes = allPending.get(arr);\n          if (!changes) {\n            changes = new Map();\n            allPending.set(arr, changes);\n          }\n          pending.set(arr, changes);\n        });\n      }\n    }\n\n    // during unloadAll we can ignore removes since we've already\n    // cleared the array.\n    if (liveArray && liveArray[SOURCE].length === 0 && isRemove) {\n      const pendingLive = allPending.get(liveArray);\n      if (!pendingLive || pendingLive.size === 0) {\n        return pending;\n      }\n    }\n    if (!liveArray) {\n      // start building a changeset for when we eventually\n      // do have a live array\n      let changes = this._staged.get(identifier.type);\n      if (!changes) {\n        changes = new Map();\n        this._staged.set(identifier.type, changes);\n      }\n      pending.set(FAKE_ARR, changes);\n    } else {\n      let changes = allPending.get(liveArray);\n      if (!changes) {\n        changes = new Map();\n        allPending.set(liveArray, changes);\n      }\n      pending.set(liveArray, changes);\n    }\n    return pending;\n  }\n  populateManagedArray(array, identifiers, payload) {\n    this._pending.delete(array);\n    const source = array[SOURCE];\n    const old = source.slice();\n    source.length = 0;\n    fastPush(source, identifiers);\n    this._set.set(array, new Set(identifiers));\n    notifyArray(array);\n    array.meta = payload.meta || null;\n    array.links = payload.links || null;\n    array.isLoaded = true;\n    disassociate(this._identifiers, array, old);\n    associate(this._identifiers, array, identifiers);\n  }\n  identifierAdded(identifier) {\n    const changeSets = this._getPendingFor(identifier, false);\n    if (changeSets) {\n      changeSets.forEach((changes, array) => {\n        const existing = changes.get(identifier);\n        if (existing === 'del') {\n          changes.delete(identifier);\n        } else {\n          changes.set(identifier, 'add');\n          this.dirtyArray(array, changes.size);\n        }\n      });\n    }\n  }\n  identifierRemoved(identifier) {\n    const changeSets = this._getPendingFor(identifier, true, true);\n    if (changeSets) {\n      changeSets.forEach((changes, array) => {\n        const existing = changes.get(identifier);\n        if (existing === 'add') {\n          changes.delete(identifier);\n        } else {\n          changes.set(identifier, 'del');\n          this.dirtyArray(array, changes.size);\n        }\n      });\n    }\n  }\n  identifierChanged(identifier) {\n    const newState = this.store._instanceCache.recordIsLoaded(identifier, true);\n\n    // if the change matches the most recent direct added/removed\n    // state, then we can ignore it\n    if (this._visibilitySet.get(identifier) === newState) {\n      return;\n    }\n    if (newState) {\n      this.identifierAdded(identifier);\n    } else {\n      this.identifierRemoved(identifier);\n    }\n  }\n  clear(isClear = true) {\n    this._live.forEach(array => array.destroy(isClear));\n    this._managed.forEach(array => array.destroy(isClear));\n    this._managed.clear();\n    this._identifiers.clear();\n    this._pending.clear();\n    this._set.forEach(set => set.clear());\n    this._visibilitySet.clear();\n  }\n  destroy() {\n    this.isDestroying = true;\n    this.clear(false);\n    this._live.clear();\n    this.isDestroyed = true;\n    this.store.notifications.unsubscribe(this._subscription);\n  }\n}\nfunction associate(ArraysCache, array, identifiers) {\n  for (let i = 0; i < identifiers.length; i++) {\n    const identifier = identifiers[i];\n    let cache = ArraysCache.get(identifier);\n    if (!cache) {\n      cache = new Set();\n      ArraysCache.set(identifier, cache);\n    }\n    cache.add(array);\n  }\n}\nfunction disassociate(ArraysCache, array, identifiers) {\n  for (let i = 0; i < identifiers.length; i++) {\n    disassociateIdentifier(ArraysCache, array, identifiers[i]);\n  }\n}\nfunction disassociateIdentifier(ArraysCache, array, identifier) {\n  const cache = ArraysCache.get(identifier);\n  if (cache) {\n    cache.delete(array);\n  }\n}\nfunction sync(array, changes, arraySet) {\n  const state = array[SOURCE];\n  const adds = [];\n  const removes = [];\n  changes.forEach((value, key) => {\n    if (value === 'add') {\n      // likely we want to keep a Set along-side\n      if (arraySet.has(key)) {\n        return;\n      }\n      adds.push(key);\n      arraySet.add(key);\n    } else {\n      if (arraySet.has(key)) {\n        removes.push(key);\n        arraySet.delete(key);\n      }\n    }\n  });\n  if (removes.length) {\n    if (removes.length === state.length) {\n      state.length = 0;\n      // changing the reference breaks the Proxy\n      // state = array[SOURCE] = [];\n    } else {\n      removes.forEach(i => {\n        const index = state.indexOf(i);\n        if (index !== -1) {\n          state.splice(index, 1);\n          arraySet.delete(i);\n        }\n      });\n    }\n  }\n  if (adds.length) {\n    fastPush(state, adds);\n    // changing the reference breaks the Proxy\n    // else we could do this\n    /*\n    if (state.length === 0) {\n      array[SOURCE] = adds;\n    } else {\n      array[SOURCE] = state.concat(adds);\n    }\n    */\n  }\n}\n\n/**\n * @module @ember-data/store\n */\nconst Touching = Symbol('touching');\nconst RequestPromise = Symbol('promise');\nconst EMPTY_ARR = Object.freeze([]);\nfunction hasRecordIdentifier(op) {\n  return 'recordIdentifier' in op;\n}\n\n/**\n * The RequestStateService is used to track the state of requests\n * for fetching or updating known resource identifies that are inflight.\n *\n * @class RequestStateService\n * @public\n */\nclass RequestStateService {\n  constructor(store) {\n    this._pending = new Map();\n    this._done = new Map();\n    this._subscriptions = new Map();\n    this._toFlush = [];\n    this._store = void 0;\n    this._store = store;\n  }\n  _clearEntries(identifier) {\n    this._done.delete(identifier);\n  }\n  _enqueue(promise, queryRequest) {\n    const query = queryRequest.data[0];\n    if (hasRecordIdentifier(query)) {\n      const identifier = query.recordIdentifier;\n      const type = query.op === 'saveRecord' ? 'mutation' : 'query';\n      if (!this._pending.has(identifier)) {\n        this._pending.set(identifier, []);\n      }\n      const request = {\n        state: 'pending',\n        request: queryRequest,\n        type\n      };\n      request[Touching] = [query.recordIdentifier];\n      request[RequestPromise] = promise;\n      this._pending.get(identifier).push(request);\n      this._triggerSubscriptions(request);\n      return promise.then(result => {\n        this._dequeue(identifier, request);\n        const finalizedRequest = {\n          state: 'fulfilled',\n          request: queryRequest,\n          type,\n          response: {\n            data: result\n          }\n        };\n        finalizedRequest[Touching] = request[Touching];\n        this._addDone(finalizedRequest);\n        this._triggerSubscriptions(finalizedRequest);\n        return result;\n      }, error => {\n        this._dequeue(identifier, request);\n        const finalizedRequest = {\n          state: 'rejected',\n          request: queryRequest,\n          type,\n          response: {\n            data: error\n          }\n        };\n        finalizedRequest[Touching] = request[Touching];\n        this._addDone(finalizedRequest);\n        this._triggerSubscriptions(finalizedRequest);\n        throw error;\n      });\n    }\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a well formed  query`));\n  }\n  _triggerSubscriptions(req) {\n    if (req.state === 'pending') {\n      this._flushRequest(req);\n      return;\n    }\n    this._toFlush.push(req);\n    if (this._toFlush.length === 1) {\n      this._store.notifications._onNextFlush(() => {\n        this._flush();\n      });\n    }\n  }\n  _flush() {\n    this._toFlush.forEach(req => {\n      this._flushRequest(req);\n    });\n    this._toFlush = [];\n  }\n  _flushRequest(req) {\n    req[Touching].forEach(identifier => {\n      const subscriptions = this._subscriptions.get(identifier);\n      if (subscriptions) {\n        subscriptions.forEach(callback => callback(req));\n      }\n    });\n  }\n  _dequeue(identifier, request) {\n    const pending = this._pending.get(identifier);\n    this._pending.set(identifier, pending.filter(req => req !== request));\n  }\n  _addDone(request) {\n    request[Touching].forEach(identifier => {\n      // TODO add support for multiple\n      const requestDataOp = request.request.data[0].op;\n      let requests = this._done.get(identifier);\n      if (requests) {\n        requests = requests.filter(req => {\n          // TODO add support for multiple\n          let data;\n          if (Array.isArray(req.request.data)) {\n            data = req.request.data[0];\n          } else {\n            data = req.request.data;\n          }\n          return data.op !== requestDataOp;\n        });\n      }\n      requests = requests || [];\n      requests.push(request);\n      this._done.set(identifier, requests);\n    });\n  }\n\n  /**\n   * Subscribe to requests for a given resource identity.\n   *\n   * The callback will receive the current state of the request.\n   *\n   * ```ts\n   * interface RequestState {\n   *   state: 'pending' | 'fulfilled' | 'rejected';\n   *   type: 'query' | 'mutation';\n   *   request: Request;\n   *   response?: { data: unknown };\n   * }\n   * ```\n   *\n   * Note: It should be considered dangerous to use this API for more than simple\n   * state derivation or debugging. The `request` and `response` properties are poorly\n   * spec'd and may change unexpectedly when shifting what Handlers are in use or how\n   * requests are issued from the Store.\n   *\n   * We expect to revisit this API in the near future as we continue to refine the\n   * RequestManager ergonomics, as a simpler but more powerful direct integration\n   * with the RequestManager for these purposes is likely to be a better long-term\n   * design.\n   *\n   * @method subscribeForRecord\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @param {(state: RequestState) => void} callback\n   */\n  subscribeForRecord(identifier, callback) {\n    let subscriptions = this._subscriptions.get(identifier);\n    if (!subscriptions) {\n      subscriptions = [];\n      this._subscriptions.set(identifier, subscriptions);\n    }\n    subscriptions.push(callback);\n  }\n\n  /**\n   * Retrieve all active requests for a given resource identity.\n   *\n   * @method getPendingRequestsForRecord\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @return {RequestState[]} an array of request states for any pending requests for the given identifier\n   */\n  getPendingRequestsForRecord(identifier) {\n    return this._pending.get(identifier) || EMPTY_ARR;\n  }\n\n  /**\n   * Retrieve the last completed request for a given resource identity.\n   *\n   * @method getLastRequestForRecord\n   * @public\n   * @param {StableRecordIdentifier} identifier\n   * @return {RequestState | null} the state of the most recent request for the given identifier\n   */\n  getLastRequestForRecord(identifier) {\n    const requests = this._done.get(identifier);\n    if (requests) {\n      return requests[requests.length - 1];\n    }\n    return null;\n  }\n}\nfunction isNonEmptyString(str) {\n  return Boolean(str && typeof str === 'string');\n}\nfunction constructResource(type, id, lid) {\n  if (typeof type === 'object' && type !== null) {\n    const resource = type;\n    if (isStableIdentifier(resource)) {\n      return resource;\n    }\n    if ('id' in resource) {\n      resource.id = coerceId(resource.id);\n    }\n    ( true && !('id' in resource && isNonEmptyString(resource.id) || isNonEmptyString(resource.lid)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('Expected either id or lid to be a valid string', 'id' in resource && isNonEmptyString(resource.id) || isNonEmptyString(resource.lid)));\n    ( true && !(!('id' in resource) || typeof resource.type === 'string') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('if id is present, the type must be a string', !('id' in resource) || typeof resource.type === 'string'));\n    return resource;\n  } else {\n    const trueId = coerceId(id);\n    if (!isNonEmptyString(trueId)) {\n      if (isNonEmptyString(lid)) {\n        return {\n          lid\n        };\n      }\n      throw new Error('Expected either id or lid to be a valid string');\n    }\n    ( true && !(typeof type === 'string') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('type must be a string', typeof type === 'string'));\n    if (isNonEmptyString(lid)) {\n      return {\n        type,\n        id: trueId,\n        lid\n      };\n    }\n    return {\n      type,\n      id: trueId\n    };\n  }\n}\n\n/**\n  @module @ember-data/store\n */\n// this import location is deprecated but breaks in 4.8 and older\n\n/**\n * A Store coordinates interaction between your application, a [Cache](https://api.emberjs.com/ember-data/release/classes/%3CInterface%3E%20Cache),\n * and sources of data (such as your API or a local persistence layer)\n * accessed via a [RequestManager](https://github.com/emberjs/data/tree/main/packages/request).\n *\n * ```app/services/store.js\n * import Store from '@ember-data/store';\n *\n * export default class extends Store {}\n * ```\n *\n * Most Ember applications will only have a single `Store` configured as a Service\n * in this manner. However, setting up multiple stores is possible, including using\n * each as a unique service.\n *\n\n  @class Store\n  @public\n*/\n\n// @ts-expect-error\n\nclass Store extends (_ember_object__WEBPACK_IMPORTED_MODULE_1___default()) {\n  /**\n   * Provides access to the NotificationManager associated\n   * with this Store instance.\n   *\n   * The NotificationManager can be used to subscribe to\n   * changes to the cache.\n   *\n   * @property {NotificationManager} notifications\n   * @public\n   */\n\n  /**\n   * Provides access to the SchemaService instance\n   * for this Store instance.\n   *\n   * The SchemaService can be used to query for\n   * information about the schema of a resource.\n   *\n   * @property {SchemaService} schema\n   * @public\n   */\n  get schema() {\n    return this.getSchemaDefinitionService();\n  }\n\n  /**\n   * Provides access to the IdentifierCache instance\n   * for this store.\n   *\n   * The IdentifierCache can be used to generate or\n   * retrieve a stable unique identifier for any resource.\n   *\n   * @property {IdentifierCache} identifierCache\n   * @public\n   */\n\n  /**\n   * Provides access to the requestManager instance associated\n   * with this Store instance.\n   *\n   * When using `ember-data` this property is automatically\n   * set to an instance of `RequestManager`. When not using `ember-data`\n   * you must configure this property yourself, either by declaring\n   * it as a service or by initializing it.\n   *\n   * ```ts\n   * import Store, { CacheHandler } from '@ember-data/store';\n   * import RequestManager from '@ember-data/request';\n   * import Fetch from '@ember/data/request/fetch';\n   *\n   * class extends Store {\n   *   constructor() {\n   *     super(...arguments);\n   *     this.requestManager = new RequestManager();\n   *     this.requestManager.use([Fetch]);\n   *     this.requestManager.useCache(CacheHandler);\n   *   }\n   * }\n   * ```\n   *\n   * @public\n   * @property {RequestManager} requestManager\n   */\n\n  /**\n   * A Property which an App may set to provide a Lifetimes Service\n   * to control when a cached request becomes stale.\n   *\n   * Note, when defined, these methods will only be invoked if a\n   * cache key exists for the request, either because the request\n   * contains `cacheOptions.key` or because the [IdentifierCache](/ember-data/release/classes/IdentifierCache)\n   * was able to generate a key for the request using the configured\n   * [generation method](/ember-data/release/functions/@ember-data%2Fstore/setIdentifierGenerationMethod).\n   *\n   * `isSoftExpired` will only be invoked if `isHardExpired` returns `false`.\n   *\n   * ```ts\n   * store.lifetimes = {\n   *   // make the request and ignore the current cache state\n   *   isHardExpired(identifier: StableDocumentIdentifier): boolean {\n   *     return false;\n   *   }\n   *\n   *   // make the request in the background if true, return cache state\n   *   isSoftExpired(identifier: StableDocumentIdentifier): boolean {\n   *     return false;\n   *   }\n   * }\n   * ```\n   *\n   * @public\n   * @property {LivetimesService|undefined} lifetimes\n   */\n\n  // Private\n\n  // DEBUG-only properties\n\n  get isDestroying() {\n    return this._isDestroying;\n  }\n  set isDestroying(value) {\n    this._isDestroying = value;\n  }\n  get isDestroyed() {\n    return this._isDestroyed;\n  }\n  set isDestroyed(value) {\n    this._isDestroyed = value;\n  }\n\n  /**\n    @method init\n    @private\n  */\n  constructor(createArgs) {\n    // @ts-expect-error ember-source types improperly expect createArgs to be `Owner`\n    super(createArgs);\n    Object.assign(this, createArgs);\n    this.identifierCache = new IdentifierCache();\n    this.notifications = new NotificationManager(this);\n\n    // private but maybe useful to be here, somewhat intimate\n    this.recordArrayManager = new RecordArrayManager({\n      store: this\n    });\n\n    // private\n    this._requestCache = new RequestStateService(this);\n    this._instanceCache = new InstanceCache(this);\n    this._documentCache = new Map();\n    this.isDestroying = false;\n    this.isDestroyed = false;\n  }\n  _run(cb) {\n    ( true && !(!this._cbs) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`EmberData should never encounter a nested run`, !this._cbs));\n    const _cbs = this._cbs = {};\n    {\n      try {\n        cb();\n        if (_cbs.coalesce) {\n          _cbs.coalesce();\n        }\n        if (_cbs.sync) {\n          _cbs.sync();\n        }\n        if (_cbs.notify) {\n          _cbs.notify();\n        }\n      } finally {\n        this._cbs = null;\n      }\n    }\n  }\n  _join(cb) {\n    if (this._cbs) {\n      cb();\n    } else {\n      this._run(cb);\n    }\n  }\n  _schedule(name, cb) {\n    ( true && !(!!this._cbs) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`EmberData expects to schedule only when there is an active run`, !!this._cbs));\n    ( true && !(!this._cbs[name]) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`EmberData expects only one flush per queue name, cannot schedule ${name}`, !this._cbs[name]));\n    this._cbs[name] = cb;\n  }\n\n  /**\n   * Retrieve the RequestStateService instance\n   * associated with this Store.\n   *\n   * This can be used to query the status of requests\n   * that have been initiated for a given identifier.\n   *\n   * @method getRequestStateService\n   * @return {RequestStateService}\n   * @public\n   */\n  getRequestStateService() {\n    return this._requestCache;\n  }\n  _getAllPending() {\n    {\n      const all = [];\n      const pending = this._requestCache._pending;\n      pending.forEach(requests => {\n        all.push(...requests.map(v => v[RequestPromise]));\n      });\n      this.requestManager._pending.forEach(v => all.push(v));\n      const promise = Promise.allSettled(all);\n      promise.length = all.length;\n      return promise;\n    }\n  }\n\n  /**\n   * Issue a request via the configured RequestManager,\n   * inserting the response into the cache and handing\n   * back a Future which resolves to a ResponseDocument\n   *\n   * ## Cache Keys\n   *\n   * Only GET requests with a url or requests with an explicit\n   * cache key (`cacheOptions.key`) will have the request result\n   * and document cached.\n   *\n   * The cache key used is `requestConfig.cacheOptions.key`\n   * if present, falling back to `requestconfig.url`.\n   *\n   * Params are not serialized as part of the cache-key, so\n   * either ensure they are already in the url or utilize\n   * `requestConfig.cacheOptions.key`. For queries issued\n   * via the `POST` method `requestConfig.cacheOptions.key`\n   * MUST be supplied for the document to be cached.\n   *\n   * ## Requesting Without a Cache Key\n   *\n   * Resource data within the request is always updated in the cache,\n   * regardless of whether a cache key is present for the request.\n   *\n   * ## Fulfilling From Cache\n   *\n   * When a cache-key is determined, the request may fulfill\n   * from cache provided the cache is not stale.\n   *\n   * Cache staleness is determined by the configured LifetimesService\n   * with priority given to the `cacheOptions.reload` and\n   * `cacheOptions.backgroundReload` on the request if present.\n   *\n   * If the cache data has soft expired or the request asks for a background\n   * reload, the request will fulfill from cache if possible and\n   * make a non-blocking request in the background to update the cache.\n   *\n   * If the cache data has hard expired or the request asks for a reload,\n   * the request will not fulfill from cache and will make a blocking\n   * request to update the cache.\n   *\n   * ## The Response\n   *\n   * The primary difference between `requestManager.request` and `store.request`\n   * is that `store.request` will attempt to hydrate the response content into\n   * a response Document containing RecordInstances.\n   *\n   * @method request\n   * @param {StoreRequestInput} requestConfig\n   * @return {Future}\n   * @public\n   */\n  request(requestConfig) {\n    // we lazily set the cache handler when we issue the first request\n    // because constructor doesn't allow for this to run after\n    // the user has had the chance to set the prop.\n    const opts = {\n      store: this,\n      [_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_2__.EnableHydration]: true\n    };\n    if (requestConfig.records) {\n      const identifierCache = this.identifierCache;\n      opts.records = requestConfig.records.map(r => identifierCache.getOrCreateRecordIdentifier(r));\n    }\n    {\n      if (this.DISABLE_WAITER) {\n        opts.disableTestWaiter = typeof requestConfig.disableTestWaiter === 'boolean' ? requestConfig.disableTestWaiter : true;\n      }\n    }\n    const future = this.requestManager.request(Object.assign(requestConfig, opts));\n    future.onFinalize(() => {\n      // skip flush for legacy belongsTo\n      if (requestConfig.op === 'findBelongsTo' && !requestConfig.url) {\n        return;\n      }\n      this.notifications._flush();\n    });\n    return future;\n  }\n\n  /**\n   * A hook which an app or addon may implement. Called when\n   * the Store is attempting to create a Record Instance for\n   * a resource.\n   *\n   * This hook can be used to select or instantiate any desired\n   * mechanism of presentating cache data to the ui for access\n   * mutation, and interaction.\n   *\n   * @method instantiateRecord (hook)\n   * @param identifier\n   * @param createRecordArgs\n   * @param recordDataFor deprecated use this.cache\n   * @param notificationManager deprecated use this.notifications\n   * @return A record instance\n   * @public\n   */\n\n  /**\n   * A hook which an app or addon may implement. Called when\n   * the Store is destroying a Record Instance. This hook should\n   * be used to teardown any custom record instances instantiated\n   * with `instantiateRecord`.\n   *\n   * @method teardownRecord (hook)\n   * @public\n   * @param record\n   */\n\n  /**\n   * Provides access to the SchemaDefinitionService instance\n   * for this Store instance.\n   *\n   * The SchemaDefinitionService can be used to query for\n   * information about the schema of a resource.\n   *\n   * @method getSchemaDefinitionService\n   * @public\n   */\n  getSchemaDefinitionService() {\n    ( true && !(this._schema) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You must registerSchemaDefinitionService with the store to use custom model classes`, this._schema));\n    return this._schema;\n  }\n\n  /**\n   * DEPRECATED - Use `registerSchema` instead.\n   *\n   * Allows an app to register a custom SchemaService\n   * for use when information about a resource's schema needs\n   * to be queried.\n   *\n   * This method can only be called more than once, but only one schema\n   * definition service may exist. Therefore if you wish to chain services\n   * you must lookup the existing service and close over it with the new\n   * service by accessing `store.schema` prior to registration.\n   *\n   * For Example:\n   *\n   * ```ts\n   * import Store from '@ember-data/store';\n   *\n   * class SchemaDelegator {\n   *   constructor(schema) {\n   *     this._schema = schema;\n   *   }\n   *\n   *   doesTypeExist(type: string): boolean {\n   *     if (AbstractSchemas.has(type)) {\n   *       return true;\n   *     }\n   *     return this._schema.doesTypeExist(type);\n   *   }\n   *\n   *   attributesDefinitionFor(identifier: RecordIdentifier | { type: string }): AttributesSchema {\n   *     return this._schema.attributesDefinitionFor(identifier);\n   *   }\n   *\n   *   relationshipsDefinitionFor(identifier: RecordIdentifier | { type: string }): RelationshipsSchema {\n   *     const schema = AbstractSchemas.get(identifier.type);\n   *     return schema || this._schema.relationshipsDefinitionFor(identifier);\n   *   }\n   * }\n   *\n   * export default class extends Store {\n   *   constructor(...args) {\n   *     super(...args);\n   *\n   *     const schema = this.schema;\n   *     this.registerSchemaDefinitionService(new SchemaDelegator(schema));\n   *   }\n   * }\n   * ```\n   *\n   * @method registerSchemaDefinitionService\n   * @param {SchemaService} schema\n   * @deprecated\n   * @public\n   */\n  registerSchemaDefinitionService(schema) {\n    this._schema = schema;\n  }\n  /**\n   * Allows an app to register a custom SchemaService\n   * for use when information about a resource's schema needs\n   * to be queried.\n   *\n   * This method can only be called more than once, but only one schema\n   * definition service may exist. Therefore if you wish to chain services\n   * you must lookup the existing service and close over it with the new\n   * service by accessing `store.schema` prior to registration.\n   *\n   * For Example:\n   *\n   * ```ts\n   * import Store from '@ember-data/store';\n   *\n   * class SchemaDelegator {\n   *   constructor(schema) {\n   *     this._schema = schema;\n   *   }\n   *\n   *   doesTypeExist(type: string): boolean {\n   *     if (AbstractSchemas.has(type)) {\n   *       return true;\n   *     }\n   *     return this._schema.doesTypeExist(type);\n   *   }\n   *\n   *   attributesDefinitionFor(identifier: RecordIdentifier | { type: string }): AttributesSchema {\n   *     return this._schema.attributesDefinitionFor(identifier);\n   *   }\n   *\n   *   relationshipsDefinitionFor(identifier: RecordIdentifier | { type: string }): RelationshipsSchema {\n   *     const schema = AbstractSchemas.get(identifier.type);\n   *     return schema || this._schema.relationshipsDefinitionFor(identifier);\n   *   }\n   * }\n   *\n   * export default class extends Store {\n   *   constructor(...args) {\n   *     super(...args);\n   *\n   *     const schema = this.schema;\n   *     this.registerSchema(new SchemaDelegator(schema));\n   *   }\n   * }\n   * ```\n   *\n   * @method registerSchema\n   * @param {SchemaService} schema\n   * @public\n   */\n  registerSchema(schema) {\n    this._schema = schema;\n  }\n\n  /**\n    Returns the schema for a particular `modelName`.\n     When used with Model from @ember-data/model the return is the model class,\n    but this is not guaranteed.\n     If looking to query attribute or relationship information it is\n    recommended to use `getSchemaDefinitionService` instead. This method\n    should be considered legacy and exists primarily to continue to support\n    Adapter/Serializer APIs which expect it's return value in their method\n    signatures.\n     The class of a model might be useful if you want to get a list of all the\n    relationship names of the model, see\n    [`relationshipNames`](/ember-data/release/classes/Model?anchor=relationshipNames)\n    for example.\n     @method modelFor\n    @public\n    @param {String} type\n    @return {ModelSchema}\n    */\n  // TODO @deprecate in favor of schema APIs, requires adapter/serializer overhaul or replacement\n\n  modelFor(type) {\n    {\n      assertDestroyedStoreOnly(this, 'modelFor');\n    }\n    ( true && !(typeof type === 'string' && type.length) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You need to pass <type> to the store's modelFor method`, typeof type === 'string' && type.length));\n    ( true && !(this.getSchemaDefinitionService().doesTypeExist(type)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`No model was found for '${type}' and no schema handles the type`, this.getSchemaDefinitionService().doesTypeExist(type)));\n    return getShimClass(this, type);\n  }\n\n  /**\n    Create a new record in the current store. The properties passed\n    to this method are set on the newly created record.\n     To create a new instance of a `Post`:\n     ```js\n    store.createRecord('post', {\n      title: 'Ember is awesome!'\n    });\n    ```\n     To create a new instance of a `Post` that has a relationship with a `User` record:\n     ```js\n    let user = this.store.peekRecord('user', 1);\n    store.createRecord('post', {\n      title: 'Ember is awesome!',\n      user: user\n    });\n    ```\n     @method createRecord\n    @public\n    @param {String} modelName\n    @param {Object} inputProperties a hash of properties to set on the\n      newly created record.\n    @return {Model} record\n  */\n  createRecord(modelName, inputProperties) {\n    {\n      assertDestroyingStore(this, 'createRecord');\n    }\n    ( true && !(modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You need to pass a model name to the store's createRecord method`, modelName));\n    ( true && !(typeof modelName === 'string') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string')); // This is wrapped in a `run.join` so that in test environments users do not need to manually wrap\n    //   calls to `createRecord`. The run loop usage here is because we batch the joining and updating\n    //   of record-arrays via ember's run loop, not our own.\n    //\n    //   to remove this, we would need to move to a new `async` API.\n    let record;\n    this._join(() => {\n      const normalizedModelName = normalizeModelName(modelName);\n      const properties = {\n        ...inputProperties\n      };\n\n      // If the passed properties do not include a primary key,\n      // give the adapter an opportunity to generate one. Typically,\n      // client-side ID generators will use something like uuid.js\n      // to avoid conflicts.\n\n      if (properties.id === null || properties.id === undefined) {\n        const adapter = this.adapterFor?.(modelName, true);\n        if (adapter && adapter.generateIdForRecord) {\n          properties.id = adapter.generateIdForRecord(this, modelName, properties);\n        } else {\n          properties.id = null;\n        }\n      }\n\n      // Coerce ID to a string\n      properties.id = coerceId(properties.id);\n      const resource = {\n        type: normalizedModelName,\n        id: properties.id\n      };\n      if (resource.id) {\n        const identifier = this.identifierCache.peekRecordIdentifier(resource);\n        ( true && !(!identifier) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`The id ${String(properties.id)} has already been used with another '${normalizedModelName}' record.`, !identifier));\n      }\n      const identifier = this.identifierCache.createIdentifierForNewRecord(resource);\n      const cache = this.cache;\n      const createOptions = normalizeProperties(this, identifier, properties);\n      const resultProps = cache.clientDidCreate(identifier, createOptions);\n      record = this._instanceCache.getRecord(identifier, resultProps);\n    });\n    return record;\n  }\n\n  /**\n    For symmetry, a record can be deleted via the store.\n     Example\n     ```javascript\n    let post = store.createRecord('post', {\n      title: 'Ember is awesome!'\n    });\n     store.deleteRecord(post);\n    ```\n     @method deleteRecord\n    @public\n    @param {Model} record\n  */\n  deleteRecord(record) {\n    {\n      assertDestroyingStore(this, 'deleteRecord');\n    }\n    const identifier = peekRecordIdentifier(record);\n    const cache = this.cache;\n    ( true && !(identifier) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`expected the record to be connected to a cache`, identifier));\n    this._join(() => {\n      cache.setIsDeleted(identifier, true);\n      if (cache.isNew(identifier)) {\n        this._instanceCache.unloadRecord(identifier);\n      }\n    });\n  }\n\n  /**\n    For symmetry, a record can be unloaded via the store.\n    This will cause the record to be destroyed and freed up for garbage collection.\n     Example\n     ```javascript\n    store.findRecord('post', 1).then(function(post) {\n      store.unloadRecord(post);\n    });\n    ```\n     @method unloadRecord\n    @public\n    @param {Model} record\n  */\n  unloadRecord(record) {\n    {\n      assertDestroyingStore(this, 'unloadRecord');\n    }\n    const identifier = peekRecordIdentifier(record);\n    if (identifier) {\n      this._instanceCache.unloadRecord(identifier);\n    }\n  }\n\n  /**\n    This method returns a record for a given identifier or type and id combination.\n     The `findRecord` method will always resolve its promise with the same\n    object for a given identifier or type and `id`.\n     The `findRecord` method will always return a **promise** that will be\n    resolved with the record.\n     **Example 1**\n     ```app/routes/post.js\n    import Route from '@ember/routing/route';\n     export default class PostRoute extends Route {\n      model({ post_id }) {\n        return this.store.findRecord('post', post_id);\n      }\n    }\n    ```\n     **Example 2**\n     `findRecord` can be called with a single identifier argument instead of the combination\n    of `type` (modelName) and `id` as separate arguments. You may recognize this combo as\n    the typical pairing from [JSON:API](https://jsonapi.org/format/#document-resource-object-identification)\n     ```app/routes/post.js\n    import Route from '@ember/routing/route';\n     export default class PostRoute extends Route {\n      model({ post_id: id }) {\n        return this.store.findRecord({ type: 'post', id });\n      }\n    }\n    ```\n     **Example 3**\n     If you have previously received an lid via an Identifier for this record, and the record\n    has already been assigned an id, you can find the record again using just the lid.\n     ```app/routes/post.js\n    store.findRecord({ lid });\n    ```\n     If the record is not yet available, the store will ask the adapter's `findRecord`\n    method to retrieve and supply the necessary data. If the record is already present\n    in the store, it depends on the reload behavior _when_ the returned promise\n    resolves.\n     ### Preloading\n     You can optionally `preload` specific attributes and relationships that you know of\n    by passing them via the passed `options`.\n     For example, if your Ember route looks like `/posts/1/comments/2` and your API route\n    for the comment also looks like `/posts/1/comments/2` if you want to fetch the comment\n    without also fetching the post you can pass in the post to the `findRecord` call:\n     ```app/routes/post-comments.js\n    import Route from '@ember/routing/route';\n     export default class PostRoute extends Route {\n      model({ post_id, comment_id: id }) {\n        return this.store.findRecord({ type: 'comment', id, { preload: { post: post_id }} });\n      }\n    }\n    ```\n     In your adapter you can then access this id without triggering a network request via the\n    snapshot:\n     ```app/adapters/application.js\n    export default class Adapter {\n       findRecord(store, schema, id, snapshot) {\n        let type = schema.modelName;\n         if (type === 'comment')\n          let postId = snapshot.belongsTo('post', { id: true });\n           return fetch(`./posts/${postId}/comments/${id}`)\n            .then(response => response.json())\n        }\n      }\n       static create() {\n        return new this();\n      }\n    }\n    ```\n     This could also be achieved by supplying the post id to the adapter via the adapterOptions\n    property on the options hash.\n     ```app/routes/post-comments.js\n    import Route from '@ember/routing/route';\n     export default class PostRoute extends Route {\n      model({ post_id, comment_id: id }) {\n        return this.store.findRecord({ type: 'comment', id, { adapterOptions: { post: post_id }} });\n      }\n    }\n    ```\n     ```app/adapters/application.js\n    export default class Adapter {\n      findRecord(store, schema, id, snapshot) {\n        let type = schema.modelName;\n         if (type === 'comment')\n          let postId = snapshot.adapterOptions.post;\n           return fetch(`./posts/${postId}/comments/${id}`)\n            .then(response => response.json())\n        }\n      }\n       static create() {\n        return new this();\n      }\n    }\n    ```\n     If you have access to the post model you can also pass the model itself to preload:\n     ```javascript\n    let post = await store.findRecord('post', 1);\n    let comment = await store.findRecord('comment', 2, { post: myPostModel });\n    ```\n     ### Reloading\n     The reload behavior is configured either via the passed `options` hash or\n    the result of the adapter's `shouldReloadRecord`.\n     If `{ reload: true }` is passed or `adapter.shouldReloadRecord` evaluates\n    to `true`, then the returned promise resolves once the adapter returns\n    data, regardless if the requested record is already in the store:\n     ```js\n    store.push({\n      data: {\n        id: 1,\n        type: 'post',\n        revision: 1\n      }\n    });\n     // adapter#findRecord resolves with\n    // [\n    //   {\n    //     id: 1,\n    //     type: 'post',\n    //     revision: 2\n    //   }\n    // ]\n    store.findRecord('post', 1, { reload: true }).then(function(post) {\n      post.revision; // 2\n    });\n    ```\n     If no reload is indicated via the above mentioned ways, then the promise\n    immediately resolves with the cached version in the store.\n     ### Background Reloading\n     Optionally, if `adapter.shouldBackgroundReloadRecord` evaluates to `true`,\n    then a background reload is started, which updates the records' data, once\n    it is available:\n     ```js\n    // app/adapters/post.js\n    import ApplicationAdapter from \"./application\";\n     export default class PostAdapter extends ApplicationAdapter {\n      shouldReloadRecord(store, snapshot) {\n        return false;\n      },\n       shouldBackgroundReloadRecord(store, snapshot) {\n        return true;\n      }\n    });\n     // ...\n     store.push({\n      data: {\n        id: 1,\n        type: 'post',\n        revision: 1\n      }\n    });\n     let blogPost = store.findRecord('post', 1).then(function(post) {\n      post.revision; // 1\n    });\n     // later, once adapter#findRecord resolved with\n    // [\n    //   {\n    //     id: 1,\n    //     type: 'post',\n    //     revision: 2\n    //   }\n    // ]\n     blogPost.revision; // 2\n    ```\n     If you would like to force or prevent background reloading, you can set a\n    boolean value for `backgroundReload` in the options object for\n    `findRecord`.\n     ```app/routes/post/edit.js\n    import Route from '@ember/routing/route';\n     export default class PostEditRoute extends Route {\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { backgroundReload: false });\n      }\n    }\n    ```\n     If you pass an object on the `adapterOptions` property of the options\n    argument it will be passed to your adapter via the snapshot\n     ```app/routes/post/edit.js\n    import Route from '@ember/routing/route';\n     export default class PostEditRoute extends Route {\n      model(params) {\n        return this.store.findRecord('post', params.post_id, {\n          adapterOptions: { subscribe: false }\n        });\n      }\n    }\n    ```\n     ```app/adapters/post.js\n    import MyCustomAdapter from './custom-adapter';\n     export default class PostAdapter extends MyCustomAdapter {\n      findRecord(store, type, id, snapshot) {\n        if (snapshot.adapterOptions.subscribe) {\n          // ...\n        }\n        // ...\n      }\n    }\n    ```\n     See [peekRecord](../methods/peekRecord?anchor=peekRecord) to get the cached version of a record.\n     ### Retrieving Related Model Records\n     If you use an adapter such as Ember's default\n    [`JSONAPIAdapter`](/ember-data/release/classes/JSONAPIAdapter)\n    that supports the [JSON API specification](http://jsonapi.org/) and if your server\n    endpoint supports the use of an\n    ['include' query parameter](http://jsonapi.org/format/#fetching-includes),\n    you can use `findRecord()` or `findAll()` to automatically retrieve additional records related to\n    the one you request by supplying an `include` parameter in the `options` object.\n     For example, given a `post` model that has a `hasMany` relationship with a `comment`\n    model, when we retrieve a specific post we can have the server also return that post's\n    comments in the same request:\n     ```app/routes/post.js\n    import Route from '@ember/routing/route';\n     export default class PostRoute extends Route {\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { include: 'comments' });\n      }\n    }\n    ```\n     ```app/adapters/application.js\n    export default class Adapter {\n      findRecord(store, schema, id, snapshot) {\n        let type = schema.modelName;\n         if (type === 'post')\n          let includes = snapshot.adapterOptions.include;\n           return fetch(`./posts/${postId}?include=${includes}`)\n            .then(response => response.json())\n        }\n      }\n       static create() {\n        return new this();\n      }\n    }\n    ```\n     In this case, the post's comments would then be available in your template as\n    `model.comments`.\n     Multiple relationships can be requested using an `include` parameter consisting of a\n    comma-separated list (without white-space) while nested relationships can be specified\n    using a dot-separated sequence of relationship names. So to request both the post's\n    comments and the authors of those comments the request would look like this:\n     ```app/routes/post.js\n    import Route from '@ember/routing/route';\n     export default class PostRoute extends Route {\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { include: 'comments,comments.author' });\n      }\n    }\n    ```\n     ### Retrieving Specific Fields by Type\n     If your server endpoint supports the use of a ['fields' query parameter](https://jsonapi.org/format/#fetching-sparse-fieldsets),\n    you can use pass those fields through to your server.  At this point in time, this requires a few manual steps on your part.\n     1. Implement `buildQuery` in your adapter.\n     ```app/adapters/application.js\n    buildQuery(snapshot) {\n      let query = super.buildQuery(...arguments);\n       let { fields } = snapshot.adapterOptions;\n       if (fields) {\n        query.fields = fields;\n      }\n       return query;\n    }\n    ```\n     2. Then pass through the applicable fields to your `findRecord` request.\n     Given a `post` model with attributes body, title, publishDate and meta, you can retrieve a filtered list of attributes.\n     ```app/routes/post.js\n    import Route from '@ember/routing/route';\n    export default Route.extend({\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { adapterOptions: { fields: { post: 'body,title' } });\n      }\n    });\n    ```\n     Moreover, you can filter attributes on related models as well. If a `post` has a `belongsTo` relationship to a user,\n    just include the relationship key and attributes.\n     ```app/routes/post.js\n    import Route from '@ember/routing/route';\n    export default Route.extend({\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { adapterOptions: { fields: { post: 'body,title', user: 'name,email' } });\n      }\n    });\n    ```\n     @since 1.13.0\n    @method findRecord\n    @public\n    @param {String|object} modelName - either a string representing the modelName or a ResourceIdentifier object containing both the type (a string) and the id (a string) for the record or an lid (a string) of an existing record\n    @param {(String|Integer|Object)} id - optional object with options for the request only if the first param is a ResourceIdentifier, else the string id of the record to be retrieved\n    @param {Object} [options] - if the first param is a string this will be the optional options for the request. See examples for available options.\n    @return {Promise} promise\n  */\n\n  findRecord(resource, id, options) {\n    {\n      assertDestroyingStore(this, 'findRecord');\n    }\n    ( true && !(resource) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You need to pass a modelName or resource identifier as the first argument to the store's findRecord method`, resource));\n    if (isMaybeIdentifier(resource)) {\n      options = id;\n    } else {\n      ( true && !(typeof resource === 'string') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${resource}`, typeof resource === 'string'));\n      const type = normalizeModelName(resource);\n      const normalizedId = ensureStringId(id);\n      resource = constructResource(type, normalizedId);\n    }\n    const identifier = this.identifierCache.getOrCreateRecordIdentifier(resource);\n    options = options || {};\n    if (options.preload) {\n      // force reload if we preload to ensure we don't resolve the promise\n      // until we are complete, else we will end up background-reloading\n      // even for initial load.\n      if (!this._instanceCache.recordIsLoaded(identifier)) {\n        options.reload = true;\n      }\n      this._join(() => {\n        preloadData(this, identifier, options.preload);\n      });\n    }\n    const promise = this.request({\n      op: 'findRecord',\n      data: {\n        record: identifier,\n        options\n      },\n      cacheOptions: {\n        [_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_2__.SkipCache]: true\n      }\n    });\n    return promise.then(document => {\n      return document.content;\n    });\n  }\n\n  /**\n    Get the reference for the specified record.\n     Example\n     ```javascript\n    let userRef = store.getReference('user', 1);\n     // check if the user is loaded\n    let isLoaded = userRef.value() !== null;\n     // get the record of the reference (null if not yet available)\n    let user = userRef.value();\n     // get the identifier of the reference\n    if (userRef.remoteType() === 'id') {\n    let id = userRef.id();\n    }\n     // load user (via store.find)\n    userRef.load().then(...)\n     // or trigger a reload\n    userRef.reload().then(...)\n     // provide data for reference\n    userRef.push({ id: 1, username: '@user' }).then(function(user) {\n      userRef.value() === user;\n    });\n    ```\n     @method getReference\n    @public\n    @param {String|object} resource - modelName (string) or Identifier (object)\n    @param {String|Integer} id\n    @since 2.5.0\n    @return {RecordReference}\n  */\n  // TODO @deprecate getReference (and references generally)\n  getReference(resource, id) {\n    {\n      assertDestroyingStore(this, 'getReference');\n    }\n    let resourceIdentifier;\n    if (arguments.length === 1 && isMaybeIdentifier(resource)) {\n      resourceIdentifier = resource;\n    } else {\n      const type = normalizeModelName(resource);\n      const normalizedId = ensureStringId(id);\n      resourceIdentifier = constructResource(type, normalizedId);\n    }\n    ( true && !(isMaybeIdentifier(resourceIdentifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('getReference expected to receive either a resource identifier or type and id as arguments', isMaybeIdentifier(resourceIdentifier)));\n    const identifier = this.identifierCache.getOrCreateRecordIdentifier(resourceIdentifier);\n    return this._instanceCache.getReference(identifier);\n  }\n\n  /**\n    Get a record by a given type and ID without triggering a fetch.\n     This method will synchronously return the record if it is available in the store,\n    otherwise it will return `null`. A record is available if it has been fetched earlier, or\n    pushed manually into the store.\n     See [findRecord](../methods/findRecord?anchor=findRecord) if you would like to request this record from the backend.\n     _Note: This is a synchronous method and does not return a promise._\n     **Example 1**\n     ```js\n    let post = store.peekRecord('post', 1);\n     post.id; // 1\n    ```\n     `peekRecord` can be called with a single identifier argument instead of the combination\n    of `type` (modelName) and `id` as separate arguments. You may recognize this combo as\n    the typical pairing from [JSON:API](https://jsonapi.org/format/#document-resource-object-identification)\n     **Example 2**\n     ```js\n    let post = store.peekRecord({ type: 'post', id });\n    post.id; // 1\n    ```\n     If you have previously received an lid from an Identifier for this record, you can lookup the record again using\n    just the lid.\n     **Example 3**\n     ```js\n    let post = store.peekRecord({ lid });\n    post.id; // 1\n    ```\n      @since 1.13.0\n    @method peekRecord\n    @public\n    @param {String|object} modelName - either a string representing the modelName or a ResourceIdentifier object containing both the type (a string) and the id (a string) for the record or an lid (a string) of an existing record\n    @param {String|Integer} id - optional only if the first param is a ResourceIdentifier, else the string id of the record to be retrieved.\n    @return {Model|null} record\n  */\n\n  peekRecord(identifier, id) {\n    if (arguments.length === 1 && isMaybeIdentifier(identifier)) {\n      const stableIdentifier = this.identifierCache.peekRecordIdentifier(identifier);\n      const isLoaded = stableIdentifier && this._instanceCache.recordIsLoaded(stableIdentifier);\n      // TODO come up with a better mechanism for determining if we have data and could peek.\n      // this is basically an \"are we not empty\" query.\n      return isLoaded ? this._instanceCache.getRecord(stableIdentifier) : null;\n    }\n    {\n      assertDestroyingStore(this, 'peekRecord');\n    }\n    ( true && !(identifier) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You need to pass a model name to the store's peekRecord method`, identifier));\n    ( true && !(typeof identifier === 'string') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${String(identifier)}`, typeof identifier === 'string'));\n    const type = normalizeModelName(identifier);\n    const normalizedId = ensureStringId(id);\n    const resource = {\n      type,\n      id: normalizedId\n    };\n    const stableIdentifier = this.identifierCache.peekRecordIdentifier(resource);\n    const isLoaded = stableIdentifier && this._instanceCache.recordIsLoaded(stableIdentifier);\n    return isLoaded ? this._instanceCache.getRecord(stableIdentifier) : null;\n  }\n\n  /**\n    This method delegates a query to the adapter. This is the one place where\n    adapter-level semantics are exposed to the application.\n     Each time this method is called a new request is made through the adapter.\n     Exposing queries this way seems preferable to creating an abstract query\n    language for all server-side queries, and then require all adapters to\n    implement them.\n     ---\n     If you do something like this:\n     ```javascript\n    store.query('person', { page: 1 });\n    ```\n     The request made to the server will look something like this:\n     ```\n    GET \"/api/v1/person?page=1\"\n    ```\n     ---\n     If you do something like this:\n     ```javascript\n    store.query('person', { ids: [1, 2, 3] });\n    ```\n     The request made to the server will look something like this:\n     ```\n    GET \"/api/v1/person?ids%5B%5D=1&ids%5B%5D=2&ids%5B%5D=3\"\n    decoded: \"/api/v1/person?ids[]=1&ids[]=2&ids[]=3\"\n    ```\n     This method returns a promise, which is resolved with a\n    [`Collection`](/ember-data/release/classes/Collection)\n    once the server returns.\n     @since 1.13.0\n    @method query\n    @public\n    @param {String} modelName\n    @param {any} query an opaque query to be used by the adapter\n    @param {Object} options optional, may include `adapterOptions` hash which will be passed to adapter.query\n    @return {Promise} promise\n  */\n  query(modelName, query, options) {\n    {\n      assertDestroyingStore(this, 'query');\n    }\n    ( true && !(modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You need to pass a model name to the store's query method`, modelName));\n    ( true && !(query) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You need to pass a query hash to the store's query method`, query));\n    ( true && !(typeof modelName === 'string') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n    const promise = this.request({\n      op: 'query',\n      data: {\n        type: normalizeModelName(modelName),\n        query,\n        options: options || {}\n      },\n      cacheOptions: {\n        [_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_2__.SkipCache]: true\n      }\n    });\n    return promise.then(document => document.content);\n  }\n\n  /**\n    This method makes a request for one record, where the `id` is not known\n    beforehand (if the `id` is known, use [`findRecord`](../methods/findRecord?anchor=findRecord)\n    instead).\n     This method can be used when it is certain that the server will return a\n    single object for the primary data.\n     Each time this method is called a new request is made through the adapter.\n     Let's assume our API provides an endpoint for the currently logged in user\n    via:\n     ```\n    // GET /api/current_user\n    {\n      user: {\n        id: 1234,\n        username: 'admin'\n      }\n    }\n    ```\n     Since the specific `id` of the `user` is not known beforehand, we can use\n    `queryRecord` to get the user:\n     ```javascript\n    store.queryRecord('user', {}).then(function(user) {\n      let username = user.username;\n      // do thing\n    });\n    ```\n     The request is made through the adapters' `queryRecord`:\n     ```app/adapters/user.js\n    import Adapter from '@ember-data/adapter';\n    import $ from 'jquery';\n     export default class UserAdapter extends Adapter {\n      queryRecord(modelName, query) {\n        return $.getJSON('/api/current_user');\n      }\n    }\n    ```\n     Note: the primary use case for `store.queryRecord` is when a single record\n    is queried and the `id` is not known beforehand. In all other cases\n    `store.query` and using the first item of the array is likely the preferred\n    way:\n     ```\n    // GET /users?username=unique\n    {\n      data: [{\n        id: 1234,\n        type: 'user',\n        attributes: {\n          username: \"unique\"\n        }\n      }]\n    }\n    ```\n     ```javascript\n    store.query('user', { username: 'unique' }).then(function(users) {\n      return users.firstObject;\n    }).then(function(user) {\n      let id = user.id;\n    });\n    ```\n     This method returns a promise, which resolves with the found record.\n     If the adapter returns no data for the primary data of the payload, then\n    `queryRecord` resolves with `null`:\n     ```\n    // GET /users?username=unique\n    {\n      data: null\n    }\n    ```\n     ```javascript\n    store.queryRecord('user', { username: 'unique' }).then(function(user) {\n       // user is null\n    });\n    ```\n     @since 1.13.0\n    @method queryRecord\n    @public\n    @param {String} modelName\n    @param {any} query an opaque query to be used by the adapter\n    @param {Object} options optional, may include `adapterOptions` hash which will be passed to adapter.queryRecord\n    @return {Promise} promise which resolves with the found record or `null`\n  */\n  queryRecord(modelName, query, options) {\n    {\n      assertDestroyingStore(this, 'queryRecord');\n    }\n    ( true && !(modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You need to pass a model name to the store's queryRecord method`, modelName));\n    ( true && !(query) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You need to pass a query hash to the store's queryRecord method`, query));\n    ( true && !(typeof modelName === 'string') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n    const promise = this.request({\n      op: 'queryRecord',\n      data: {\n        type: normalizeModelName(modelName),\n        query,\n        options: options || {}\n      },\n      cacheOptions: {\n        [_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_2__.SkipCache]: true\n      }\n    });\n    return promise.then(document => document.content);\n  }\n\n  /**\n    `findAll` asks the adapter's `findAll` method to find the records for the\n    given type, and returns a promise which will resolve with all records of\n    this type present in the store, even if the adapter only returns a subset\n    of them.\n     ```app/routes/authors.js\n    import Route from '@ember/routing/route';\n     export default class AuthorsRoute extends Route {\n      model(params) {\n        return this.store.findAll('author');\n      }\n    }\n    ```\n     _When_ the returned promise resolves depends on the reload behavior,\n    configured via the passed `options` hash and the result of the adapter's\n    `shouldReloadAll` method.\n     ### Reloading\n     If `{ reload: true }` is passed or `adapter.shouldReloadAll` evaluates to\n    `true`, then the returned promise resolves once the adapter returns data,\n    regardless if there are already records in the store:\n     ```js\n    store.push({\n      data: {\n        id: 'first',\n        type: 'author'\n      }\n    });\n     // adapter#findAll resolves with\n    // [\n    //   {\n    //     id: 'second',\n    //     type: 'author'\n    //   }\n    // ]\n    store.findAll('author', { reload: true }).then(function(authors) {\n      authors.getEach('id'); // ['first', 'second']\n    });\n    ```\n     If no reload is indicated via the above mentioned ways, then the promise\n    immediately resolves with all the records currently loaded in the store.\n     ### Background Reloading\n     Optionally, if `adapter.shouldBackgroundReloadAll` evaluates to `true`,\n    then a background reload is started. Once this resolves, the array with\n    which the promise resolves, is updated automatically so it contains all the\n    records in the store:\n     ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n     export default class ApplicationAdapter extends Adapter {\n      shouldReloadAll(store, snapshotsArray) {\n        return false;\n      },\n       shouldBackgroundReloadAll(store, snapshotsArray) {\n        return true;\n      }\n    });\n     // ...\n     store.push({\n      data: {\n        id: 'first',\n        type: 'author'\n      }\n    });\n     let allAuthors;\n    store.findAll('author').then(function(authors) {\n      authors.getEach('id'); // ['first']\n       allAuthors = authors;\n    });\n     // later, once adapter#findAll resolved with\n    // [\n    //   {\n    //     id: 'second',\n    //     type: 'author'\n    //   }\n    // ]\n     allAuthors.getEach('id'); // ['first', 'second']\n    ```\n     If you would like to force or prevent background reloading, you can set a\n    boolean value for `backgroundReload` in the options object for\n    `findAll`.\n     ```app/routes/post/edit.js\n    import Route from '@ember/routing/route';\n     export default class PostEditRoute extends Route {\n      model() {\n        return this.store.findAll('post', { backgroundReload: false });\n      }\n    }\n    ```\n     If you pass an object on the `adapterOptions` property of the options\n    argument it will be passed to you adapter via the `snapshotRecordArray`\n     ```app/routes/posts.js\n    import Route from '@ember/routing/route';\n     export default class PostsRoute extends Route {\n      model(params) {\n        return this.store.findAll('post', {\n          adapterOptions: { subscribe: false }\n        });\n      }\n    }\n    ```\n     ```app/adapters/post.js\n    import MyCustomAdapter from './custom-adapter';\n     export default class UserAdapter extends MyCustomAdapter {\n      findAll(store, type, sinceToken, snapshotRecordArray) {\n        if (snapshotRecordArray.adapterOptions.subscribe) {\n          // ...\n        }\n        // ...\n      }\n    }\n    ```\n     See [peekAll](../methods/peekAll?anchor=peekAll) to get an array of current records in the\n    store, without waiting until a reload is finished.\n     ### Retrieving Related Model Records\n     If you use an adapter such as Ember's default\n    [`JSONAPIAdapter`](/ember-data/release/classes/JSONAPIAdapter)\n    that supports the [JSON API specification](http://jsonapi.org/) and if your server\n    endpoint supports the use of an\n    ['include' query parameter](http://jsonapi.org/format/#fetching-includes),\n    you can use `findAll()` to automatically retrieve additional records related to\n    those requested by supplying an `include` parameter in the `options` object.\n     For example, given a `post` model that has a `hasMany` relationship with a `comment`\n    model, when we retrieve all of the post records we can have the server also return\n    all of the posts' comments in the same request:\n     ```app/routes/posts.js\n    import Route from '@ember/routing/route';\n     export default class PostsRoute extends Route {\n      model() {\n        return this.store.findAll('post', { include: 'comments' });\n      }\n    }\n    ```\n    Multiple relationships can be requested using an `include` parameter consisting of a\n    comma-separated list (without white-space) while nested relationships can be specified\n    using a dot-separated sequence of relationship names. So to request both the posts'\n    comments and the authors of those comments the request would look like this:\n     ```app/routes/posts.js\n    import Route from '@ember/routing/route';\n     export default class PostsRoute extends Route {\n      model() {\n        return this.store.findAll('post', { include: 'comments,comments.author' });\n      }\n    }\n    ```\n     See [query](../methods/query?anchor=query) to only get a subset of records from the server.\n     @since 1.13.0\n    @method findAll\n    @public\n    @param {String} modelName\n    @param {Object} options\n    @return {Promise} promise\n  */\n  findAll(modelName, options = {}) {\n    {\n      assertDestroyingStore(this, 'findAll');\n    }\n    ( true && !(modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You need to pass a model name to the store's findAll method`, modelName));\n    ( true && !(typeof modelName === 'string') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n    const promise = this.request({\n      op: 'findAll',\n      data: {\n        type: normalizeModelName(modelName),\n        options: options || {}\n      },\n      cacheOptions: {\n        [_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_2__.SkipCache]: true\n      }\n    });\n    return promise.then(document => document.content);\n  }\n\n  /**\n    This method returns a filtered array that contains all of the\n    known records for a given type in the store.\n     Note that because it's just a filter, the result will contain any\n    locally created records of the type, however, it will not make a\n    request to the backend to retrieve additional records. If you\n    would like to request all the records from the backend please use\n    [store.findAll](../methods/findAll?anchor=findAll).\n     Also note that multiple calls to `peekAll` for a given type will always\n    return the same `RecordArray`.\n     Example\n     ```javascript\n    let localPosts = store.peekAll('post');\n    ```\n     @since 1.13.0\n    @method peekAll\n    @public\n    @param {String} modelName\n    @return {RecordArray}\n  */\n  peekAll(modelName) {\n    {\n      assertDestroyingStore(this, 'peekAll');\n    }\n    ( true && !(modelName) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You need to pass a model name to the store's peekAll method`, modelName));\n    ( true && !(typeof modelName === 'string') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n    const type = normalizeModelName(modelName);\n    return this.recordArrayManager.liveArrayFor(type);\n  }\n\n  /**\n    This method unloads all records in the store.\n    It schedules unloading to happen during the next run loop.\n     Optionally you can pass a type which unload all records for a given type.\n     ```javascript\n    store.unloadAll();\n    store.unloadAll('post');\n    ```\n     @method unloadAll\n    @public\n    @param {String} modelName\n  */\n  unloadAll(modelName) {\n    {\n      assertDestroyedStoreOnly(this, 'unloadAll');\n    }\n    ( true && !(!modelName || typeof modelName === 'string') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${String(modelName)}`, !modelName || typeof modelName === 'string'));\n    this._join(() => {\n      if (modelName === undefined) {\n        // destroy the graph before unloadAll\n        // since then we avoid churning relationships\n        // during unload\n        this._graph?.identifiers.clear();\n        this.recordArrayManager.clear();\n        this._instanceCache.clear();\n      } else {\n        const normalizedModelName = normalizeModelName(modelName);\n        this._instanceCache.clear(normalizedModelName);\n      }\n    });\n  }\n\n  /**\n    Push some data for a given type into the store.\n     This method expects normalized [JSON API](http://jsonapi.org/) document. This means you have to follow [JSON API specification](http://jsonapi.org/format/) with few minor adjustments:\n    - record's `type` should always be in singular, dasherized form\n    - members (properties) should be camelCased\n     [Your primary data should be wrapped inside `data` property](http://jsonapi.org/format/#document-top-level):\n     ```js\n    store.push({\n      data: {\n        // primary data for single record of type `Person`\n        id: '1',\n        type: 'person',\n        attributes: {\n          firstName: 'Daniel',\n          lastName: 'Kmak'\n        }\n      }\n    });\n    ```\n     [Demo.](http://ember-twiddle.com/fb99f18cd3b4d3e2a4c7)\n     `data` property can also hold an array (of records):\n     ```js\n    store.push({\n      data: [\n        // an array of records\n        {\n          id: '1',\n          type: 'person',\n          attributes: {\n            firstName: 'Daniel',\n            lastName: 'Kmak'\n          }\n        },\n        {\n          id: '2',\n          type: 'person',\n          attributes: {\n            firstName: 'Tom',\n            lastName: 'Dale'\n          }\n        }\n      ]\n    });\n    ```\n     [Demo.](http://ember-twiddle.com/69cdbeaa3702159dc355)\n     There are some typical properties for `JSONAPI` payload:\n    * `id` - mandatory, unique record's key\n    * `type` - mandatory string which matches `model`'s dasherized name in singular form\n    * `attributes` - object which holds data for record attributes - `attr`'s declared in model\n    * `relationships` - object which must contain any of the following properties under each relationships' respective key (example path is `relationships.achievements.data`):\n      - [`links`](http://jsonapi.org/format/#document-links)\n      - [`data`](http://jsonapi.org/format/#document-resource-object-linkage) - place for primary data\n      - [`meta`](http://jsonapi.org/format/#document-meta) - object which contains meta-information about relationship\n     For this model:\n     ```app/models/person.js\n    import Model, { attr, hasMany } from '@ember-data/model';\n     export default class PersonRoute extends Route {\n      @attr('string') firstName;\n      @attr('string') lastName;\n       @hasMany('person') children;\n    }\n    ```\n     To represent the children as IDs:\n     ```js\n    {\n      data: {\n        id: '1',\n        type: 'person',\n        attributes: {\n          firstName: 'Tom',\n          lastName: 'Dale'\n        },\n        relationships: {\n          children: {\n            data: [\n              {\n                id: '2',\n                type: 'person'\n              },\n              {\n                id: '3',\n                type: 'person'\n              },\n              {\n                id: '4',\n                type: 'person'\n              }\n            ]\n          }\n        }\n      }\n    }\n    ```\n     [Demo.](http://ember-twiddle.com/343e1735e034091f5bde)\n     To represent the children relationship as a URL:\n     ```js\n    {\n      data: {\n        id: '1',\n        type: 'person',\n        attributes: {\n          firstName: 'Tom',\n          lastName: 'Dale'\n        },\n        relationships: {\n          children: {\n            links: {\n              related: '/people/1/children'\n            }\n          }\n        }\n      }\n    }\n    ```\n     If you're streaming data or implementing an adapter, make sure\n    that you have converted the incoming data into this form. The\n    store's [normalize](../methods/normalize?anchor=normalize) method is a convenience\n    helper for converting a json payload into the form Ember Data\n    expects.\n     ```js\n    store.push(store.normalize('person', data));\n    ```\n     This method can be used both to push in brand new\n    records, as well as to update existing records.\n     @method push\n    @public\n    @param {Object} data\n    @return the record(s) that was created or\n      updated.\n  */\n\n  push(data) {\n    {\n      assertDestroyingStore(this, 'push');\n    }\n    const pushed = this._push(data, false);\n    if (Array.isArray(pushed)) {\n      return pushed.map(identifier => this._instanceCache.getRecord(identifier));\n    }\n    if (pushed === null) {\n      return null;\n    }\n    return this._instanceCache.getRecord(pushed);\n  }\n\n  /**\n    Push some data in the form of a json-api document into the store,\n    without creating materialized records.\n     @method _push\n    @private\n    @param {Object} jsonApiDoc\n    @return {StableRecordIdentifier|Array<StableRecordIdentifier>|null} identifiers for the primary records that had data loaded\n  */\n  _push(jsonApiDoc, asyncFlush) {\n    {\n      assertDestroyingStore(this, '_push');\n    }\n    if (asyncFlush) {\n      this._enableAsyncFlush = true;\n    }\n    let ret;\n    this._join(() => {\n      ret = this.cache.put({\n        content: jsonApiDoc\n      });\n    });\n    this._enableAsyncFlush = null;\n    return 'data' in ret ? ret.data : null;\n  }\n\n  /**\n   * Trigger a save for a Record.\n   *\n   * @method saveRecord\n   * @public\n   * @param {RecordInstance} record\n   * @param options\n   * @return {Promise<RecordInstance>}\n   */\n  saveRecord(record, options = {}) {\n    {\n      assertDestroyingStore(this, 'saveRecord');\n    }\n    ( true && !(storeFor(record)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Unable to initate save for a record in a disconnected state`, storeFor(record)));\n    const identifier = recordIdentifierFor(record);\n    const cache = this.cache;\n    if (!identifier) {\n      // this commonly means we're disconnected\n      // but just in case we reject here to prevent bad things.\n      return Promise.reject(new Error(`Record Is Disconnected`));\n    }\n    // TODO we used to check if the record was destroyed here\n    ( true && !(this._instanceCache.recordIsLoaded(identifier)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Cannot initiate a save request for an unloaded record: ${identifier.lid}`, this._instanceCache.recordIsLoaded(identifier)));\n    if (resourceIsFullyDeleted(this._instanceCache, identifier)) {\n      return Promise.resolve(record);\n    }\n    if (!options) {\n      options = {};\n    }\n    let operation = 'updateRecord';\n    if (cache.isNew(identifier)) {\n      operation = 'createRecord';\n    } else if (cache.isDeleted(identifier)) {\n      operation = 'deleteRecord';\n    }\n    const request = {\n      op: operation,\n      data: {\n        options,\n        record: identifier\n      },\n      records: [identifier],\n      cacheOptions: {\n        [_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_2__.SkipCache]: true\n      }\n    };\n\n    // we lie here on the type because legacy doesn't have enough context\n    cache.willCommit(identifier, {\n      request\n    });\n    return this.request(request).then(document => document.content);\n  }\n\n  /**\n   * Instantiation hook allowing applications or addons to configure the store\n   * to utilize a custom Cache implementation.\n   *\n   * This hook should not be called directly by consuming applications or libraries.\n   * Use `Store.cache` to access the Cache instance.\n   *\n   * @method createCache (hook)\n   * @public\n   * @param storeWrapper\n   * @return {Cache}\n   */\n\n  /**\n   * Returns the cache instance associated to this Store, instantiates the Cache\n   * if necessary via `Store.createCache`\n   *\n   * @property {Cache} cache\n   * @public\n   */\n  get cache() {\n    let {\n      cache\n    } = this._instanceCache;\n    if (!cache) {\n      cache = this._instanceCache.cache = this.createCache(this._instanceCache._storeWrapper);\n      {\n        cache = new CacheManager(cache);\n      }\n    }\n    return cache;\n  }\n\n  // @ts-expect-error\n  destroy() {\n    if (this.isDestroyed) {\n      // @ember/test-helpers will call destroy multiple times\n      return;\n    }\n    this.isDestroying = true;\n    this._graph?.destroy();\n    this._graph = undefined;\n    this.notifications.destroy();\n    this.recordArrayManager.destroy();\n    this.identifierCache.destroy();\n    this.unloadAll();\n    this.isDestroyed = true;\n  }\n  static create(args) {\n    return new this(args);\n  }\n}\nlet assertDestroyingStore;\nlet assertDestroyedStoreOnly;\n{\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  assertDestroyingStore = function assertDestroyingStore(store, method) {\n    ( true && !(!(store.isDestroying || store.isDestroyed)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Attempted to call store.${method}(), but the store instance has already been destroyed.`, !(store.isDestroying || store.isDestroyed)));\n  };\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  assertDestroyedStoreOnly = function assertDestroyedStoreOnly(store, method) {\n    ( true && !(!store.isDestroyed) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Attempted to call store.${method}(), but the store instance has already been destroyed.`, !store.isDestroyed));\n  };\n}\nfunction isMaybeIdentifier(maybeIdentifier) {\n  return Boolean(maybeIdentifier !== null && typeof maybeIdentifier === 'object' && ('id' in maybeIdentifier && 'type' in maybeIdentifier && maybeIdentifier.id && maybeIdentifier.type || maybeIdentifier.lid));\n}\nfunction normalizeProperties(store, identifier, properties) {\n  // assert here\n  if (properties !== undefined) {\n    if ('id' in properties) {\n      ( true && !(properties.id !== undefined) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`expected id to be a string or null`, properties.id !== undefined));\n    }\n    ( true && !(typeof properties === 'object' && properties !== null) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You passed '${typeof properties}' as properties for record creation instead of an object.`, typeof properties === 'object' && properties !== null));\n    const {\n      type\n    } = identifier;\n\n    // convert relationship Records to RecordDatas before passing to RecordData\n    const defs = store.getSchemaDefinitionService().relationshipsDefinitionFor({\n      type\n    });\n    if (defs !== null) {\n      const keys = Object.keys(properties);\n      let relationshipValue;\n      for (let i = 0; i < keys.length; i++) {\n        const prop = keys[i];\n        const def = defs[prop];\n        if (def !== undefined) {\n          if (def.kind === 'hasMany') {\n            {\n              assertRecordsPassedToHasMany(properties[prop]);\n            }\n            relationshipValue = extractIdentifiersFromRecords(properties[prop]);\n          } else {\n            relationshipValue = extractIdentifierFromRecord(properties[prop]);\n          }\n          properties[prop] = relationshipValue;\n        }\n      }\n    }\n  }\n  return properties;\n}\nfunction assertRecordsPassedToHasMany(records) {\n  ( true && !(Array.isArray(records)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You must pass an array of records to set a hasMany relationship`, Array.isArray(records)));\n  ( true && !(function () {\n    return records.every(record => {\n      try {\n        recordIdentifierFor(record);\n        return true;\n      } catch {\n        return false;\n      }\n    });\n  }()) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`All elements of a hasMany relationship must be instances of Model, you passed ${records.map(r => `${typeof r}`).join(', ')}`, function () {\n    return records.every(record => {\n      try {\n        recordIdentifierFor(record);\n        return true;\n      } catch {\n        return false;\n      }\n    });\n  }()));\n}\nfunction extractIdentifiersFromRecords(records) {\n  return records.map(record => extractIdentifierFromRecord(record));\n}\nfunction extractIdentifierFromRecord(recordOrPromiseRecord) {\n  if (!recordOrPromiseRecord) {\n    return null;\n  }\n  const extract = recordIdentifierFor;\n  return extract(recordOrPromiseRecord);\n}\nfunction urlFromLink(link) {\n  if (typeof link === 'string') return link;\n  return link.href;\n}\n\n/**\n * A Document is a class that wraps the response content from a request to the API\n * returned by `Cache.put` or `Cache.peek`, converting resource-identifiers into\n * record instances.\n *\n * It is not directly instantiated by the user, and its properties should not\n * be directly modified. Whether individual properties are mutable or not is\n * determined by the record instance itself.\n *\n * @public\n * @class Document\n */\nvar _store = /*#__PURE__*/_classPrivateFieldKey(\"store\");\nvar _request = /*#__PURE__*/_classPrivateFieldKey(\"request\");\nclass Document {\n  constructor(store, identifier) {\n    Object.defineProperty(this, _request, {\n      value: _request2\n    });\n    /**\n     * The links object for this document, if any\n     *\n     * e.g.\n     *\n     * ```\n     * {\n     *   self: '/articles?page[number]=3',\n     * }\n     * ```\n     *\n     * @property links\n     * @type {object|undefined} - a links object\n     * @public\n     */\n    /**\n     * The primary data for this document, if any.\n     *\n     * If this document has no primary data (e.g. because it is an error document)\n     * this property will be `undefined`.\n     *\n     * For collections this will be an array of record instances,\n     * for single resource requests it will be a single record instance or null.\n     *\n     * @property data\n     * @public\n     * @type {object|Array<object>|null|undefined} - a data object\n     */\n    /**\n     * The errors returned by the API for this request, if any\n     *\n     * @property errors\n     * @public\n     * @type {object|undefined} - an errors object\n     */\n    /**\n     * The meta object for this document, if any\n     *\n     * @property meta\n     * @public\n     * @type {object|undefined} - a meta object\n     */\n    /**\n     * The identifier associated with this document, if any\n     *\n     * @property identifier\n     * @public\n     * @type {StableDocumentIdentifier|null}\n     */\n    Object.defineProperty(this, _store, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldBase(this, _store)[_store] = store;\n    this.identifier = identifier;\n  }\n  /**\n   * Fetches the related link for this document, returning a promise that resolves\n   * with the document when the request completes. If no related link is present,\n   * will fallback to the self link if present\n   *\n   * @method fetch\n   * @public\n   * @param {object} options\n   * @return Promise<Document>\n   */\n  fetch(options = {}) {\n    ( true && !(this.links?.related || this.links?.self) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`No self or related link`, this.links?.related || this.links?.self));\n    options.cacheOptions = options.cacheOptions || {};\n    options.cacheOptions.key = this.identifier?.lid;\n    return _classPrivateFieldBase(this, _request)[_request](this.links.related ? 'related' : 'self', options);\n  }\n\n  /**\n   * Fetches the next link for this document, returning a promise that resolves\n   * with the new document when the request completes, or null  if there is no\n   * next link.\n   *\n   * @method next\n   * @public\n   * @param {object} options\n   * @return Promise<Document | null>\n   */\n  next(options = {}) {\n    return _classPrivateFieldBase(this, _request)[_request]('next', options);\n  }\n\n  /**\n   * Fetches the prev link for this document, returning a promise that resolves\n   * with the new document when the request completes, or null if there is no\n   * prev link.\n   *\n   * @method prev\n   * @public\n   * @param {object} options\n   * @return Promise<Document | null>\n   */\n  prev(options = {}) {\n    return _classPrivateFieldBase(this, _request)[_request]('prev', options);\n  }\n\n  /**\n   * Fetches the first link for this document, returning a promise that resolves\n   * with the new document when the request completes, or null if there is no\n   * first link.\n   *\n   * @method first\n   * @public\n   * @param {object} options\n   * @return Promise<Document | null>\n   */\n  first(options = {}) {\n    return _classPrivateFieldBase(this, _request)[_request]('first', options);\n  }\n\n  /**\n   * Fetches the last link for this document, returning a promise that resolves\n   * with the new document when the request completes, or null if there is no\n   * last link.\n   *\n   * @method last\n   * @public\n   * @param {object} options\n   * @return Promise<Document | null>\n   */\n  last(options = {}) {\n    return _classPrivateFieldBase(this, _request)[_request]('last', options);\n  }\n\n  /**\n   * Implemented for `JSON.stringify` support.\n   *\n   * Returns the JSON representation of the document wrapper.\n   *\n   * This is a shallow serialization, it does not deeply serialize\n   * the document's contents, leaving that to the individual record\n   * instances to determine how to do, if at all.\n   *\n   * @method toJSON\n   * @public\n   * @return\n   */\n  toJSON() {\n    const data = {};\n    data.identifier = this.identifier;\n    if (this.data !== undefined) {\n      data.data = this.data;\n    }\n    if (this.links !== undefined) {\n      data.links = this.links;\n    }\n    if (this.errors !== undefined) {\n      data.errors = this.errors;\n    }\n    if (this.meta !== undefined) {\n      data.meta = this.meta;\n    }\n    return data;\n  }\n}\nasync function _request2(link, options) {\n  const href = this.links?.[link];\n  if (!href) {\n    return null;\n  }\n  options.method = options.method || 'GET';\n  const response = await _classPrivateFieldBase(this, _store)[_store].request(Object.assign(options, {\n    url: urlFromLink(href)\n  }));\n  return response.content;\n}\n(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(Document.prototype, 'data');\n(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(Document.prototype, 'links');\n(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(Document.prototype, 'errors');\n(0,_ember_data_tracking_private__WEBPACK_IMPORTED_MODULE_5__.defineSignal)(Document.prototype, 'meta');\n\n/**\n * @module @ember-data/store\n */\n\n/**\n * A service which an application may provide to the store via\n * the store's `lifetimes` property to configure the behavior\n * of the CacheHandler.\n *\n * The default behavior for request lifetimes is to never expire\n * unless manually refreshed via `cacheOptions.reload` or `cacheOptions.backgroundReload`.\n *\n * Implementing this service allows you to programatically define\n * when a request should be considered expired.\n *\n * @class <Interface> LifetimesService\n * @public\n */\n\nconst MUTATION_OPS = new Set(['createRecord', 'updateRecord', 'deleteRecord']);\nfunction isErrorDocument(document) {\n  return 'errors' in document;\n}\nfunction maybeUpdateUiObjects(store, request, options, document, isFromCache) {\n  const {\n    identifier\n  } = options;\n  if (isErrorDocument(document)) {\n    if (!identifier && !options.shouldHydrate) {\n      return document;\n    }\n    let doc;\n    if (identifier) {\n      doc = store._documentCache.get(identifier);\n    }\n    if (!doc) {\n      doc = new Document(store, identifier);\n      copyDocumentProperties(doc, document);\n      if (identifier) {\n        store._documentCache.set(identifier, doc);\n      }\n    } else if (!isFromCache) {\n      doc.data = undefined;\n      copyDocumentProperties(doc, document);\n    }\n    return options.shouldHydrate ? doc : document;\n  }\n  if (Array.isArray(document.data)) {\n    const {\n      recordArrayManager\n    } = store;\n    if (!identifier) {\n      if (!options.shouldHydrate) {\n        return document;\n      }\n      const data = recordArrayManager.createArray({\n        type: request.url,\n        identifiers: document.data,\n        doc: document,\n        query: request\n      });\n      const doc = new Document(store, null);\n      doc.data = data;\n      doc.meta = document.meta;\n      doc.links = document.links;\n      return doc;\n    }\n    let managed = recordArrayManager._keyedArrays.get(identifier.lid);\n    if (!managed) {\n      managed = recordArrayManager.createArray({\n        type: identifier.lid,\n        identifiers: document.data,\n        doc: document\n      });\n      recordArrayManager._keyedArrays.set(identifier.lid, managed);\n      const doc = new Document(store, identifier);\n      doc.data = managed;\n      doc.meta = document.meta;\n      doc.links = document.links;\n      store._documentCache.set(identifier, doc);\n      return options.shouldHydrate ? doc : document;\n    } else {\n      const doc = store._documentCache.get(identifier);\n      if (!isFromCache) {\n        recordArrayManager.populateManagedArray(managed, document.data, document);\n        doc.data = managed;\n        doc.meta = document.meta;\n        doc.links = document.links;\n      }\n      return options.shouldHydrate ? doc : document;\n    }\n  } else {\n    if (!identifier && !options.shouldHydrate) {\n      return document;\n    }\n    const data = document.data ? store.peekRecord(document.data) : null;\n    let doc;\n    if (identifier) {\n      doc = store._documentCache.get(identifier);\n    }\n    if (!doc) {\n      doc = new Document(store, identifier);\n      doc.data = data;\n      copyDocumentProperties(doc, document);\n      if (identifier) {\n        store._documentCache.set(identifier, doc);\n      }\n    } else if (!isFromCache) {\n      doc.data = data;\n      copyDocumentProperties(doc, document);\n    }\n    return options.shouldHydrate ? doc : document;\n  }\n}\nfunction calcShouldFetch(store, request, hasCachedValue, identifier) {\n  const {\n    cacheOptions\n  } = request;\n  return request.op && MUTATION_OPS.has(request.op) || cacheOptions?.reload || !hasCachedValue || (store.lifetimes && identifier ? store.lifetimes.isHardExpired(identifier, store) : false);\n}\nfunction calcShouldBackgroundFetch(store, request, willFetch, identifier) {\n  const {\n    cacheOptions\n  } = request;\n  return !willFetch && (cacheOptions?.backgroundReload || (store.lifetimes && identifier ? store.lifetimes.isSoftExpired(identifier, store) : false));\n}\nfunction isMutation(request) {\n  return Boolean(request.op && MUTATION_OPS.has(request.op));\n}\nfunction fetchContentAndHydrate(next, context, identifier, shouldFetch, shouldBackgroundFetch) {\n  const {\n    store\n  } = context.request;\n  const shouldHydrate = context.request[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_2__.EnableHydration] || false;\n  let isMut = false;\n  if (isMutation(context.request)) {\n    isMut = true;\n    // TODO should we handle multiple records in request.records by iteratively calling willCommit for each\n    const record = context.request.data?.record || context.request.records?.[0];\n    ( true && !(record) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected to receive a list of records included in the ${context.request.op} request`, record));\n    store.cache.willCommit(record, context);\n  }\n  if (store.lifetimes?.willRequest) {\n    store.lifetimes.willRequest(context.request, identifier, store);\n  }\n  const promise = next(context.request).then(document => {\n    store.requestManager._pending.delete(context.id);\n    store._enableAsyncFlush = true;\n    let response;\n    store._join(() => {\n      if (isMutation(context.request)) {\n        const record = context.request.data?.record || context.request.records?.[0];\n        response = store.cache.didCommit(record, document);\n      } else {\n        response = store.cache.put(document);\n      }\n      response = maybeUpdateUiObjects(store, context.request, {\n        shouldHydrate,\n        shouldFetch,\n        shouldBackgroundFetch,\n        identifier\n      }, response, false);\n    });\n    store._enableAsyncFlush = null;\n    if (store.lifetimes?.didRequest) {\n      store.lifetimes.didRequest(context.request, document.response, identifier, store);\n    }\n    if (shouldFetch) {\n      return response;\n    } else if (shouldBackgroundFetch) {\n      store.notifications._flush();\n    }\n  }, error => {\n    store.requestManager._pending.delete(context.id);\n    if (context.request.signal?.aborted) {\n      throw error;\n    }\n    store.requestManager._pending.delete(context.id);\n    store._enableAsyncFlush = true;\n    let response;\n    store._join(() => {\n      if (isMutation(context.request)) {\n        // TODO similar to didCommit we should spec this to be similar to cache.put for handling full response\n        // currently we let the response remain undefiend.\n        const errors = error && error.content && typeof error.content === 'object' && 'errors' in error.content && Array.isArray(error.content.errors) ? error.content.errors : undefined;\n        const record = context.request.data?.record || context.request.records?.[0];\n        store.cache.commitWasRejected(record, errors);\n        // re-throw the original error to preserve `errors` property.\n        throw error;\n      } else {\n        response = store.cache.put(error);\n        response = maybeUpdateUiObjects(store, context.request, {\n          shouldHydrate,\n          shouldFetch,\n          shouldBackgroundFetch,\n          identifier\n        }, response, false);\n      }\n    });\n    store._enableAsyncFlush = null;\n    if (identifier && store.lifetimes?.didRequest) {\n      store.lifetimes.didRequest(context.request, error.response, identifier, store);\n    }\n    if (!shouldBackgroundFetch) {\n      const newError = cloneError(error);\n      newError.content = response;\n      throw newError;\n    } else {\n      store.notifications._flush();\n    }\n  });\n  if (!isMut) {\n    return promise;\n  }\n  ( true && !(isMutation(context.request)) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`Expected a mutation`, isMutation(context.request))); // for mutations we need to enqueue the promise with the requestStateService\n  // TODO should we enque a request per record in records?\n  const record = context.request.data?.record || context.request.records?.[0];\n  return store._requestCache._enqueue(promise, {\n    data: [{\n      op: 'saveRecord',\n      recordIdentifier: record,\n      options: undefined\n    }]\n  });\n}\nfunction cloneError(error) {\n  const cloned = new Error(error.message);\n  cloned.stack = error.stack;\n  cloned.error = error.error;\n  return cloned;\n}\nconst CacheHandler = {\n  request(context, next) {\n    // if we have no cache or no cache-key skip cache handling\n    if (!context.request.store || context.request.cacheOptions?.[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_2__.SkipCache]) {\n      return next(context.request);\n    }\n    const {\n      store\n    } = context.request;\n    const identifier = store.identifierCache.getOrCreateDocumentIdentifier(context.request);\n    const peeked = identifier ? store.cache.peekRequest(identifier) : null;\n\n    // determine if we should skip cache\n    if (calcShouldFetch(store, context.request, !!peeked, identifier)) {\n      return fetchContentAndHydrate(next, context, identifier, true, false);\n    }\n\n    // if we have not skipped cache, determine if we should update behind the scenes\n    if (calcShouldBackgroundFetch(store, context.request, false, identifier)) {\n      const promise = fetchContentAndHydrate(next, context, identifier, false, true);\n      store.requestManager._pending.set(context.id, promise);\n    }\n    const shouldHydrate = context.request[_warp_drive_core_types_request__WEBPACK_IMPORTED_MODULE_2__.EnableHydration] || false;\n    if ('error' in peeked) {\n      const content = shouldHydrate ? maybeUpdateUiObjects(store, context.request, {\n        shouldHydrate,\n        identifier\n      }, peeked.content, true) : peeked.content;\n      const newError = cloneError(peeked);\n      newError.content = content;\n      throw newError;\n    }\n    return Promise.resolve(shouldHydrate ? maybeUpdateUiObjects(store, context.request, {\n      shouldHydrate,\n      identifier\n    }, peeked.content, true) : peeked.content);\n  }\n};\nfunction copyDocumentProperties(target, source) {\n  if ('links' in source) {\n    target.links = source.links;\n  }\n  if ('meta' in source) {\n    target.meta = source.meta;\n  }\n  if ('errors' in source) {\n    target.errors = source.errors;\n  }\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/cache-handler-XLbbNJdo.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/index.js":
/*!************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheHandler: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   \"default\": () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   recordIdentifierFor: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   setIdentifierForgetMethod: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   setIdentifierGenerationMethod: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   setIdentifierResetMethod: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   setIdentifierUpdateMethod: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   storeFor: () => (/* reexport safe */ _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__.s)\n/* harmony export */ });\n/* harmony import */ var _cache_handler_XLbbNJdo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cache-handler-XLbbNJdo */ \"../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/cache-handler-XLbbNJdo.js\");\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/index.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/tracking.bbb05d16/node_modules/@ember-data/tracking/-private.js":
/*!*********************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/tracking.bbb05d16/node_modules/@ember-data/tracking/-private.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Signals: () => (/* binding */ Signals),\n/* harmony export */   addToTransaction: () => (/* binding */ addToTransaction),\n/* harmony export */   addTransactionCB: () => (/* binding */ addTransactionCB),\n/* harmony export */   createArrayTags: () => (/* binding */ createArrayTags),\n/* harmony export */   createSignal: () => (/* binding */ createSignal),\n/* harmony export */   defineSignal: () => (/* binding */ defineSignal),\n/* harmony export */   entangleSignal: () => (/* binding */ entangleSignal),\n/* harmony export */   getSignal: () => (/* binding */ getSignal),\n/* harmony export */   memoTransact: () => (/* binding */ memoTransact),\n/* harmony export */   peekSignal: () => (/* binding */ peekSignal),\n/* harmony export */   subscribe: () => (/* binding */ subscribe),\n/* harmony export */   transact: () => (/* binding */ transact),\n/* harmony export */   untracked: () => (/* binding */ untracked)\n/* harmony export */ });\n/* harmony import */ var _ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/-internals/metal */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2F-internals%2Fmetal&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_internals_metal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/validator */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40glimmer%2Fvalidator&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__);\n\n\nlet TRANSACTION = null;\nfunction createTransaction() {\n  const transaction = {\n    cbs: new Set(),\n    props: new Set(),\n    sub: new Set(),\n    parent: null\n  };\n  if (TRANSACTION) {\n    transaction.parent = TRANSACTION;\n  }\n  TRANSACTION = transaction;\n}\nfunction maybeConsume(tag) {\n  if (tag) {\n    (0,_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__.consumeTag)(tag);\n  }\n}\nfunction maybeDirty(tag) {\n  if (tag) {\n    // @ts-expect-error - we are using Ember's Tag not Glimmer's\n    (0,_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__.dirtyTag)(tag);\n  }\n}\n\n/**\n * If there is a current transaction, ensures that the relevant tag (and any\n * array computed chains symbols, if applicable) will be consumed during the\n * transaction.\n *\n * If there is no current transaction, will consume the tag(s) immediately.\n *\n * @internal\n * @param obj\n */\nfunction subscribe(obj) {\n  if (TRANSACTION) {\n    TRANSACTION.sub.add(obj);\n  } else if ('tag' in obj) {\n    {\n      maybeConsume(obj['[]']);\n      maybeConsume(obj['@length']);\n    }\n    (0,_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__.consumeTag)(obj.tag);\n  } else {\n    obj.ref;\n  }\n}\nfunction updateRef(obj) {\n  {\n    try {\n      if ('tag' in obj) {\n        {\n          maybeDirty(obj['[]']);\n          maybeDirty(obj['@length']);\n        }\n        // @ts-expect-error - we are using Ember's Tag not Glimmer's\n        (0,_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__.dirtyTag)(obj.tag);\n      } else {\n        obj.ref = null;\n      }\n    } catch (e) {\n      if (e instanceof Error) {\n        if (e.message.includes('You attempted to update `undefined`')) {\n          // @ts-expect-error\n          const key = `<${obj._debug_base}>.${obj.key}`;\n          e.message = e.message.replace('You attempted to update `undefined`', `You attempted to update ${key}`);\n          e.stack = e.stack?.replace('You attempted to update `undefined`', `You attempted to update ${key}`);\n          const lines = e.stack?.split(`\\n`);\n          const finalLines = [];\n          let lastFile = null;\n          lines?.forEach(line => {\n            if (line.trim().startsWith('at ')) {\n              // get the last string in the line which contains the code source location\n              const location = line.split(' ').at(-1);\n              // remove the line and char offset info\n\n              if (location.includes(':')) {\n                const parts = location.split(':');\n                parts.pop();\n                parts.pop();\n                const file = parts.join(':');\n                if (file !== lastFile) {\n                  lastFile = file;\n                  finalLines.push('');\n                }\n              }\n              finalLines.push(line);\n            }\n          });\n          const splitstr = '`undefined` was first used:';\n          const parts = e.message.split(splitstr);\n          parts.splice(1, 0, `Original Stack\\n=============\\n${finalLines.join(`\\n`)}\\n\\n\\`${key}\\` was first used:`);\n          e.message = parts.join('');\n        }\n      }\n      throw e;\n    }\n  }\n}\nfunction flushTransaction() {\n  const transaction = TRANSACTION;\n  TRANSACTION = transaction.parent;\n  transaction.cbs.forEach(cb => {\n    cb();\n  });\n  transaction.props.forEach(obj => {\n    // mark this mutation as part of a transaction\n    obj.t = true;\n    updateRef(obj);\n  });\n  transaction.sub.forEach(obj => {\n    if ('tag' in obj) {\n      {\n        maybeConsume(obj['[]']);\n        maybeConsume(obj['@length']);\n      }\n      (0,_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__.consumeTag)(obj.tag);\n    } else {\n      obj.ref;\n    }\n  });\n}\nasync function untrack() {\n  const transaction = TRANSACTION;\n  TRANSACTION = transaction.parent;\n\n  // defer writes\n  await Promise.resolve();\n  transaction.cbs.forEach(cb => {\n    cb();\n  });\n  transaction.props.forEach(obj => {\n    // mark this mutation as part of a transaction\n    obj.t = true;\n    updateRef(obj);\n  });\n}\nfunction addToTransaction(obj) {\n  if (TRANSACTION) {\n    TRANSACTION.props.add(obj);\n  } else {\n    updateRef(obj);\n  }\n}\nfunction addTransactionCB(method) {\n  if (TRANSACTION) {\n    TRANSACTION.cbs.add(method);\n  } else {\n    method();\n  }\n}\n\n/**\n * Run `method` without subscribing to any tracked properties\n * controlled by EmberData.\n *\n * This should rarely be used except by libraries that really\n * know what they are doing. It is most useful for wrapping\n * certain kinds of fetch/query logic from within a `Resource`\n * `hook` or other similar pattern.\n *\n * @function untracked\n * @public\n * @static\n * @for @ember-data/tracking\n * @param method\n * @return result of invoking method\n */\nfunction untracked(method) {\n  createTransaction();\n  const ret = method();\n  void untrack();\n  return ret;\n}\n\n/**\n * Run the method, subscribing to any tracked properties\n * managed by EmberData that were accessed or written during\n * the method's execution as per-normal but while allowing\n * interleaving of reads and writes.\n *\n * This is useful when for instance you want to perform\n * a mutation based on existing state that must be read first.\n *\n * @function transact\n * @public\n * @static\n * @for @ember-data/tracking\n * @param method\n * @return result of invoking method\n */\nfunction transact(method) {\n  createTransaction();\n  const ret = method();\n  flushTransaction();\n  return ret;\n}\n\n/**\n * A helpful utility for creating a new function that\n * always runs in a transaction. E.G. this \"memoizes\"\n * calling `transact(fn)`, currying args as necessary.\n *\n * @method memoTransact\n * @public\n * @static\n * @for @ember-data/tracking\n * @param method\n * @return a function that will invoke method in a transaction with any provided args and return its result\n */\nfunction memoTransact(method) {\n  return function (...args) {\n    createTransaction();\n    const ret = method(...args);\n    flushTransaction();\n    return ret;\n  };\n}\nconst Signals = Symbol('Signals');\n\n/**\n *  use to add a signal property to the prototype of something.\n *\n *  First arg is the thing to define on\n *  Second arg is the property name\n *  Third agg is the initial value of the property if any.\n *\n *  for instance\n *\n *  ```ts\n *  class Model {}\n *  defineSignal(Model.prototype, 'isLoading', false);\n *  ```\n *\n *  This is sort of like using a stage-3 decorator but works today\n *  while we are still on legacy decorators.\n *\n *  e.g. it is equivalent to\n *\n *  ```ts\n *  class Model {\n *    @signal accessor isLoading = false;\n *  }\n *  ```\n *\n *  @internal\n */\nfunction defineSignal(obj, key, v) {\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: false,\n    get() {\n      const signals = this[Signals] = this[Signals] || new Map();\n      const existing = signals.has(key);\n      const _signal = entangleSignal(signals, this, key);\n      if (!existing && v !== undefined) {\n        _signal.lastValue = v;\n      }\n      return _signal.lastValue;\n    },\n    set(value) {\n      const signals = this[Signals] = this[Signals] || new Map();\n      let _signal = signals.get(key);\n      if (!_signal) {\n        _signal = createSignal(this, key);\n        signals.set(key, _signal);\n      }\n      if (_signal.lastValue !== value) {\n        _signal.lastValue = value;\n        addToTransaction(_signal);\n      }\n    }\n  });\n}\nfunction createArrayTags(obj, signal) {\n  {\n    signal['[]'] = (0,_ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__.tagForProperty)(obj, '[]');\n    signal['@length'] = (0,_ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__.tagForProperty)(obj, 'length');\n  }\n}\n\n/**\n * Create a signal for the key/object pairing.\n *\n * @internal\n * @param obj Object we're creating the signal on\n * @param key Key to create the signal for\n * @return the signal\n */\nfunction createSignal(obj, key) {\n  const _signal = {\n    key,\n    tag: (0,_ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__.tagForProperty)(obj, key),\n    t: false,\n    shouldReset: false,\n    '[]': null,\n    '@length': null,\n    lastValue: undefined\n  };\n  {\n    // eslint-disable-next-line no-inner-declarations\n    function tryGet(prop) {\n      try {\n        return obj[prop];\n      } catch {\n        return;\n      }\n    }\n    const modelName = tryGet('$type') ?? tryGet('modelName') ?? tryGet('constructor')?.modelName ?? '';\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    const className = obj.constructor?.name ?? obj.toString?.() ?? 'unknown';\n    _signal._debug_base = `${className}${modelName && !className.startsWith('SchemaRecord') ? `:${modelName}` : ''}`;\n  }\n  return _signal;\n}\n\n/**\n * Create a signal for the key/object pairing and subscribes to the signal.\n *\n * Use when you need to ensure a signal exists and is subscribed to.\n *\n * @internal\n * @param signals Map of signals\n * @param obj Object we're creating the signal on\n * @param key Key to create the signal for\n * @return the signal\n */\nfunction entangleSignal(signals, obj, key) {\n  let _signal = signals.get(key);\n  if (!_signal) {\n    _signal = createSignal(obj, key);\n    signals.set(key, _signal);\n  }\n  subscribe(_signal);\n  return _signal;\n}\nfunction getSignal(obj, key, initialState) {\n  let signals = obj[Signals];\n  if (!signals) {\n    signals = new Map();\n    obj[Signals] = signals;\n  }\n  let _signal = signals.get(key);\n  if (!_signal) {\n    _signal = createSignal(obj, key);\n    _signal.shouldReset = initialState;\n    signals.set(key, _signal);\n  }\n  return _signal;\n}\nfunction peekSignal(obj, key) {\n  const signals = obj[Signals];\n  if (signals) {\n    return signals.get(key);\n  }\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/tracking.bbb05d16/node_modules/@ember-data/tracking/-private.js?");

/***/ }),

/***/ "../rewritten-packages/@ember-data/tracking.bbb05d16/node_modules/@ember-data/tracking/index.js":
/*!******************************************************************************************************!*\
  !*** ../rewritten-packages/@ember-data/tracking.bbb05d16/node_modules/@ember-data/tracking/index.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cached: () => (/* binding */ cached),\n/* harmony export */   compat: () => (/* reexport safe */ _ember_object_compat__WEBPACK_IMPORTED_MODULE_3__.dependentKeyCompat),\n/* harmony export */   createCache: () => (/* reexport safe */ _glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_1__.createCache),\n/* harmony export */   getValue: () => (/* reexport safe */ _glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_1__.getValue),\n/* harmony export */   memoTransact: () => (/* reexport safe */ _private__WEBPACK_IMPORTED_MODULE_2__.memoTransact),\n/* harmony export */   transact: () => (/* reexport safe */ _private__WEBPACK_IMPORTED_MODULE_2__.transact),\n/* harmony export */   untracked: () => (/* reexport safe */ _private__WEBPACK_IMPORTED_MODULE_2__.untracked)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/tracking/primitives/cache */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40glimmer%2Ftracking%2Fprimitives%2Fcache&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _private__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./-private */ \"../rewritten-packages/@ember-data/tracking.bbb05d16/node_modules/@ember-data/tracking/-private.js\");\n/* harmony import */ var _ember_object_compat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember/object/compat */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject%2Fcompat&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object_compat__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ember_object_compat__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\nfunction cached(target, key, descriptor) {\n  // Error on `@cached()`, `@cached(...args)`, and `@cached propName = value;`\n  ( true && !(target !== undefined) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)('You attempted to use @cached(), which is not necessary nor supported. Remove the parentheses and you will be good to go!', target !== undefined));\n  ( true && !(typeof target === 'object' && typeof key === 'string' && typeof descriptor === 'object' && arguments.length === 3) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`You attempted to use @cached on with ${arguments.length > 1 ? 'arguments' : 'an argument'} ( @cached(${Array.from(arguments).map(d => `'${d}'`).join(', ')}), which is not supported. Dependencies are automatically tracked, so you can just use ${'`@cached`'}`, typeof target === 'object' && typeof key === 'string' && typeof descriptor === 'object' && arguments.length === 3));\n  ( true && !(typeof descriptor.get === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.assert)(`The @cached decorator must be applied to getters. '${key}' is not a getter.`, typeof descriptor.get === 'function'));\n  const caches = new WeakMap();\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const getter = descriptor.get;\n  descriptor.get = function () {\n    if (!caches.has(this)) caches.set(this, (0,_glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_1__.createCache)(getter.bind(this)));\n    return (0,_glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_1__.getValue)(caches.get(this));\n  };\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember-data/tracking.bbb05d16/node_modules/@ember-data/tracking/index.js?");

/***/ }),

/***/ "../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/_app_/modifiers/did-insert.js":
/*!*********************************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/_app_/modifiers/did-insert.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_render_modifiers_modifiers_did_insert__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _ember_render_modifiers_modifiers_did_insert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/render-modifiers/modifiers/did-insert */ \"../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/modifiers/did-insert.js\");\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/_app_/modifiers/did-insert.js?");

/***/ }),

/***/ "../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/_app_/modifiers/did-update.js":
/*!*********************************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/_app_/modifiers/did-update.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_render_modifiers_modifiers_did_update__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _ember_render_modifiers_modifiers_did_update__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/render-modifiers/modifiers/did-update */ \"../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/modifiers/did-update.js\");\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/_app_/modifiers/did-update.js?");

/***/ }),

/***/ "../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/_app_/modifiers/will-destroy.js":
/*!***********************************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/_app_/modifiers/will-destroy.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_render_modifiers_modifiers_will_destroy__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _ember_render_modifiers_modifiers_will_destroy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/render-modifiers/modifiers/will-destroy */ \"../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/modifiers/will-destroy.js\");\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/_app_/modifiers/will-destroy.js?");

/***/ }),

/***/ "../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/modifiers/did-insert.js":
/*!***************************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/modifiers/did-insert.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_modifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/modifier */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fmodifier&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_modifier__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_modifier__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n  The `{{did-insert}}` element modifier is activated when an element is\n  inserted into the DOM.\n\n  In this example, the `fadeIn` function receives the `div` DOM element as its\n  first argument and is executed after the element is inserted into the DOM.\n\n  ```handlebars\n  <div {{did-insert this.fadeIn}} class=\"alert\">\n    {{yield}}\n  </div>\n  ```\n\n  ```js\n  export default Component.extend({\n    fadeIn(element) {\n      element.classList.add('fade-in');\n    }\n  });\n  ```\n\n  By default, the executed function will be unbound. If you would like to access\n  the component context in your function, use the `action` decorator as follows:\n\n  ```handlebars\n  <div {{did-insert this.incrementCount}}>first</div>\n  <div {{did-insert this.incrementCount}}>second</div>\n\n  <p>{{this.count}} elements were rendered</p>\n  ```\n\n  ```js\n  export default Component.extend({\n    count: tracked({ value: 0 }),\n\n    incrementCount: action(function() {\n      this.count++;\n    })\n  });\n  ```\n\n  @method did-insert\n  @public\n*/\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_modifier__WEBPACK_IMPORTED_MODULE_0__.setModifierManager)(() => ({\n  capabilities: (0,_ember_modifier__WEBPACK_IMPORTED_MODULE_0__.capabilities)('3.22', {\n    disableAutoTracking: true\n  }),\n  createModifier() {},\n  installModifier(_state, element, {\n    positional: [fn, ...args],\n    named\n  }) {\n    fn(element, args, named);\n  },\n  updateModifier() {},\n  destroyModifier() {}\n}), class DidInsertModifier {}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/modifiers/did-insert.js?");

/***/ }),

/***/ "../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/modifiers/did-update.js":
/*!***************************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/modifiers/did-update.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_modifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/modifier */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fmodifier&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_modifier__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_modifier__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../../../@embroider/macros/src/addon/es-compat2 */ \"../../@embroider/macros/src/addon/es-compat2.js\");\n\n\nconst untrack = function () {\n  {\n    // ember-source@3.27 shipped \"real modules\" by default, so we can just use\n    // importSync to get @glimmer/validator directly\n    return (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(__webpack_require__(/*! @glimmer/validator */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40glimmer%2Fvalidator&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\")).untrack;\n  }\n}();\n\n/**\n  The `{{did-update}}` element modifier is activated when any of its arguments\n  are updated. It does not run on initial render.\n\n  In this example, the `resize` function receives the `textarea` DOM element as its\n  first argument and is executed anytime the `@text` argument changes.\n\n  ```handlebars\n  <textarea {{did-update this.resize @text}} readonly style=\"padding: 0px;\">\n    {{@text}}\n  </textarea>\n  ```\n\n  ```js\n  export default Component.extend({\n    resize(element) {\n      element.style.height = `${element.scrollHeight}px`;\n    }\n  });\n  ```\n\n  In addition to the `element`, both named and positional arguments are passed to the\n  executed function:\n\n  ```handlebars\n  <div {{did-update this.logArguments @first @second third=@third}} />\n  ```\n\n  ```js\n  export default Component.extend({\n    logArguments(element, [first, second], { third }) {\n      console.log('element', element);\n      console.log('positional args', first, second);\n      console.log('names args', third);\n    }\n  });\n  ```\n\n  By default, the executed function will be unbound. If you would like to access\n  the component context in your function, use the `action` decorator as follows:\n\n  ```handlebars\n  <div {{did-update this.someFunction @someArg} />\n  ```\n\n  ```js\n  export default Component.extend({\n    someFunction: action(function(element, [someArg]) {\n      // the `this` context will be the component instance\n    })\n  });\n  ```\n\n  @method did-update\n  @public\n*/\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_modifier__WEBPACK_IMPORTED_MODULE_0__.setModifierManager)(() => ({\n  capabilities: (0,_ember_modifier__WEBPACK_IMPORTED_MODULE_0__.capabilities)('3.22', {\n    disableAutoTracking: false\n  }),\n  createModifier() {\n    return {\n      element: null\n    };\n  },\n  installModifier(state, element, args) {\n    // save element into state bucket\n    state.element = element;\n    {\n      // Consume individual properties to entangle tracking.\n      // https://github.com/emberjs/ember.js/issues/19277\n      // https://github.com/ember-modifier/ember-modifier/pull/63#issuecomment-815908201\n      args.positional.forEach(() => {});\n      args.named && Object.values(args.named);\n    }\n  },\n  updateModifier({\n    element\n  }, args) {\n    let [fn, ...positional] = args.positional;\n    {\n      // Consume individual properties to entangle tracking.\n      // https://github.com/emberjs/ember.js/issues/19277\n      // https://github.com/ember-modifier/ember-modifier/pull/63#issuecomment-815908201\n      args.positional.forEach(() => {});\n      args.named && Object.values(args.named);\n      untrack(() => {\n        fn(element, positional, args.named);\n      });\n    }\n  },\n  destroyModifier() {}\n}), class DidUpdateModifier {}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/modifiers/did-update.js?");

/***/ }),

/***/ "../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/modifiers/will-destroy.js":
/*!*****************************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/modifiers/will-destroy.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_modifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/modifier */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fmodifier&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_modifier__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_modifier__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n  The `{{will-destroy}}` element modifier is activated immediately before the element\n  is removed from the DOM.\n\n  ```handlebars\n  <div {{will-destroy this.teardownPlugin}}>\n    {{yield}}\n  </div>\n  ```\n\n  ```js\n  export default Component.extend({\n    teardownPlugin(element) {\n      // teardown logic here\n    }\n  });\n  ```\n\n  By default, the executed function will be unbound. If you would like to access\n  the component context in your function, use the `action` decorator as follows:\n\n  ```handlebars\n  <div {{will-destroy this.teardownPlugin}}>\n    {{yield}}\n  </div>\n  ```\n\n  ```js\n  export default Component.extend({\n    teardownPlugin: action(function(element) {\n      // the `this` context will be the component instance\n    })\n  });\n  ```\n\n  @method will-destroy\n  @public\n*/\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_modifier__WEBPACK_IMPORTED_MODULE_0__.setModifierManager)(() => ({\n  capabilities: (0,_ember_modifier__WEBPACK_IMPORTED_MODULE_0__.capabilities)('3.22', {\n    disableAutoTracking: true\n  }),\n  createModifier() {\n    return {\n      element: null\n    };\n  },\n  installModifier(state, element) {\n    state.element = element;\n  },\n  updateModifier() {},\n  destroyModifier({\n    element\n  }, args) {\n    let [fn, ...positional] = args.positional;\n    fn(element, positional, args.named);\n  }\n}), class WillDestroyModifier {}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember/render-modifiers.da4f7ec0/node_modules/@ember/render-modifiers/modifiers/will-destroy.js?");

/***/ }),

/***/ "../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/cache.js":
/*!****************************************************************************************!*\
  !*** ../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/cache.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Cache)\n/* harmony export */ });\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/defineProperty.js */ \"../../@babel/runtime/helpers/esm/defineProperty.js\");\n\nclass Cache {\n  constructor(limit, func, store) {\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"size\", 0);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"misses\", 0);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"hits\", 0);\n    this.limit = limit;\n    this.func = func;\n    this.store = store;\n    this.store = store || new Map();\n  }\n  get(key) {\n    let value = this.store.get(key);\n    if (this.store.has(key)) {\n      this.hits++;\n      return this.store.get(key);\n    } else {\n      this.misses++;\n      value = this.set(key, this.func(key));\n    }\n    return value;\n  }\n  set(key, value) {\n    if (this.limit > this.size) {\n      this.size++;\n      this.store.set(key, value);\n    }\n    return value;\n  }\n  purge() {\n    this.store.clear();\n    this.size = 0;\n    this.hits = 0;\n    this.misses = 0;\n  }\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/cache.js?");

/***/ }),

/***/ "../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/index.js":
/*!****************************************************************************************!*\
  !*** ../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/index.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   camelize: () => (/* binding */ camelize),\n/* harmony export */   capitalize: () => (/* binding */ capitalize),\n/* harmony export */   classify: () => (/* binding */ classify),\n/* harmony export */   dasherize: () => (/* binding */ dasherize),\n/* harmony export */   decamelize: () => (/* binding */ decamelize),\n/* harmony export */   getString: () => (/* binding */ getString),\n/* harmony export */   getStrings: () => (/* binding */ getStrings),\n/* harmony export */   htmlSafe: () => (/* binding */ htmlSafe),\n/* harmony export */   isHTMLSafe: () => (/* binding */ isHTMLSafe),\n/* harmony export */   setStrings: () => (/* binding */ setStrings),\n/* harmony export */   underscore: () => (/* binding */ underscore),\n/* harmony export */   w: () => (/* binding */ w)\n/* harmony export */ });\n/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cache */ \"../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/cache.js\");\n/* eslint-disable no-useless-escape */\n\n/**\n @module @ember/string\n */\n\n// STATE within a module is frowned upon, this exists\n// to support Ember.STRINGS but shield ember internals from this legacy global\n// API.\nlet STRINGS = {};\nfunction setStrings(strings) {\n  STRINGS = strings;\n}\nfunction getStrings() {\n  return STRINGS;\n}\nfunction getString(name) {\n  return STRINGS[name];\n}\nconst STRING_DASHERIZE_REGEXP = /[ _]/g;\nconst STRING_DASHERIZE_CACHE = new _cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1000, key => decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-'));\nconst STRING_CAMELIZE_REGEXP_1 = /(\\-|\\_|\\.|\\s)+(.)?/g;\nconst STRING_CAMELIZE_REGEXP_2 = /(^|\\/)([A-Z])/g;\nconst CAMELIZE_CACHE = new _cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1000, key => key.replace(STRING_CAMELIZE_REGEXP_1, (_match, _separator, chr) => chr ? chr.toUpperCase() : '').replace(STRING_CAMELIZE_REGEXP_2, (match\n/*, separator, chr */) => match.toLowerCase()));\nconst STRING_CLASSIFY_REGEXP_1 = /^(\\-|_)+(.)?/;\nconst STRING_CLASSIFY_REGEXP_2 = /(.)(\\-|\\_|\\.|\\s)+(.)?/g;\nconst STRING_CLASSIFY_REGEXP_3 = /(^|\\/|\\.)([a-z])/g;\nconst CLASSIFY_CACHE = new _cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1000, str => {\n  const replace1 = (_match, _separator, chr) => chr ? `_${chr.toUpperCase()}` : '';\n  const replace2 = (_match, initialChar, _separator, chr) => initialChar + (chr ? chr.toUpperCase() : '');\n  const parts = str.split('/');\n  for (let i = 0; i < parts.length; i++) {\n    parts[i] = parts[i].replace(STRING_CLASSIFY_REGEXP_1, replace1).replace(STRING_CLASSIFY_REGEXP_2, replace2);\n  }\n  return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3, (match\n  /*, separator, chr */) => match.toUpperCase());\n});\nconst STRING_UNDERSCORE_REGEXP_1 = /([a-z\\d])([A-Z]+)/g;\nconst STRING_UNDERSCORE_REGEXP_2 = /\\-|\\s+/g;\nconst UNDERSCORE_CACHE = new _cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1000, str => str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase());\nconst STRING_CAPITALIZE_REGEXP = /(^|\\/)([a-z\\u00C0-\\u024F])/g;\nconst CAPITALIZE_CACHE = new _cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1000, str => str.replace(STRING_CAPITALIZE_REGEXP, (match\n/*, separator, chr */) => match.toUpperCase()));\nconst STRING_DECAMELIZE_REGEXP = /([a-z\\d])([A-Z])/g;\nconst DECAMELIZE_CACHE = new _cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1000, str => str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase());\n/**\n  Splits a string into separate units separated by spaces, eliminating any\n  empty strings in the process. This is a convenience method for split that\n  is mostly useful when applied to the `String.prototype`.\n\n  ```javascript\n  import { w } from '@ember/string';\n\n  w(\"alpha beta gamma\").forEach(function(key) {\n    console.log(key);\n  });\n\n  // > alpha\n  // > beta\n  // > gamma\n  ```\n\n  @method w\n  @param {String} str The string to split\n  @return {Array} array containing the split strings\n  @public\n*/\n\nfunction w(str) {\n  return str.split(/\\s+/);\n}\n/**\n  Converts a camelized string into all lower case separated by underscores.\n\n  ```javascript\n  import { decamelize } from '@ember/string';\n\n  decamelize('innerHTML');          // 'inner_html'\n  decamelize('action_name');        // 'action_name'\n  decamelize('css-class-name');     // 'css-class-name'\n  decamelize('my favorite items');  // 'my favorite items'\n  ```\n\n  @method decamelize\n  @param {String} str The string to decamelize.\n  @return {String} the decamelized string.\n  @public\n*/\n\nfunction decamelize(str) {\n  return DECAMELIZE_CACHE.get(str);\n}\n/**\n  Replaces underscores, spaces, or camelCase with dashes.\n\n  ```javascript\n  import { dasherize } from '@ember/string';\n\n  dasherize('innerHTML');                // 'inner-html'\n  dasherize('action_name');              // 'action-name'\n  dasherize('css-class-name');           // 'css-class-name'\n  dasherize('my favorite items');        // 'my-favorite-items'\n  dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'\n  ```\n\n  @method dasherize\n  @param {String} str The string to dasherize.\n  @return {String} the dasherized string.\n  @public\n*/\n\nfunction dasherize(str) {\n  return STRING_DASHERIZE_CACHE.get(str);\n}\n/**\n  Returns the lowerCamelCase form of a string.\n\n  ```javascript\n  import { camelize } from '@ember/string';\n\n  camelize('innerHTML');                   // 'innerHTML'\n  camelize('action_name');                 // 'actionName'\n  camelize('css-class-name');              // 'cssClassName'\n  camelize('my favorite items');           // 'myFavoriteItems'\n  camelize('My Favorite Items');           // 'myFavoriteItems'\n  camelize('private-docs/owner-invoice');  // 'privateDocs/ownerInvoice'\n  ```\n\n  @method camelize\n  @param {String} str The string to camelize.\n  @return {String} the camelized string.\n  @public\n*/\n\nfunction camelize(str) {\n  return CAMELIZE_CACHE.get(str);\n}\n/**\n  Returns the UpperCamelCase form of a string.\n\n  ```javascript\n  import { classify } from '@ember/string';\n\n  classify('innerHTML');                   // 'InnerHTML'\n  classify('action_name');                 // 'ActionName'\n  classify('css-class-name');              // 'CssClassName'\n  classify('my favorite items');           // 'MyFavoriteItems'\n  classify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'\n  ```\n\n  @method classify\n  @param {String} str the string to classify\n  @return {String} the classified string\n  @public\n*/\n\nfunction classify(str) {\n  return CLASSIFY_CACHE.get(str);\n}\n/**\n  More general than decamelize. Returns the lower\\_case\\_and\\_underscored\n  form of a string.\n\n  ```javascript\n  import { underscore } from '@ember/string';\n\n  underscore('innerHTML');                 // 'inner_html'\n  underscore('action_name');               // 'action_name'\n  underscore('css-class-name');            // 'css_class_name'\n  underscore('my favorite items');         // 'my_favorite_items'\n  underscore('privateDocs/ownerInvoice');  // 'private_docs/owner_invoice'\n  ```\n\n  @method underscore\n  @param {String} str The string to underscore.\n  @return {String} the underscored string.\n  @public\n*/\n\nfunction underscore(str) {\n  return UNDERSCORE_CACHE.get(str);\n}\n/**\n  Returns the Capitalized form of a string\n\n  ```javascript\n  import { capitalize } from '@ember/string';\n\n  capitalize('innerHTML')                 // 'InnerHTML'\n  capitalize('action_name')               // 'Action_name'\n  capitalize('css-class-name')            // 'Css-class-name'\n  capitalize('my favorite items')         // 'My favorite items'\n  capitalize('privateDocs/ownerInvoice'); // 'PrivateDocs/ownerInvoice'\n  ```\n\n  @method capitalize\n  @param {String} str The string to capitalize.\n  @return {String} The capitalized string.\n  @public\n*/\n\nfunction capitalize(str) {\n  return CAPITALIZE_CACHE.get(str);\n}\n/*\n  The following are implemented here to give users adding `@ember/string` to\n  their projects a useful error message. The `ember-source` implementation of\n  `@ember/string` is clobbered by adding this addon, and so the deprecation of\n  the import path is not triggered. This error message is intended to help\n  users discover what they need to change.\n*/\n\nfunction htmlSafe(str) {\n  throw new Error('htmlSafe is not implemented in the `@ember/string` package. Please import from `@ember/template` instead.');\n}\nfunction isHTMLSafe(str) {\n  throw new Error('isHTMLSafe is not implemented in the `@ember/string` package. Please import from `@ember/template` instead.');\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/index.js?");

/***/ }),

/***/ "../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/build-waiter.js":
/*!***********************************************************************************************************!*\
  !*** ../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/build-waiter.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _resetWaiterNames: () => (/* binding */ _resetWaiterNames),\n/* harmony export */   \"default\": () => (/* binding */ buildWaiter)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./token */ \"../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/token.js\");\n/* harmony import */ var _waiter_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./waiter-manager */ \"../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/waiter-manager.js\");\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\n\n\n\nconst WAITER_NAME_PATTERN = /^[^:]*:?.*/;\nlet WAITER_NAMES =  true /* DEBUG */ ? new Set() : 0;\nfunction _resetWaiterNames() {\n  WAITER_NAMES = new Set();\n}\nfunction getNextToken() {\n  return new _token__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n}\nclass TestWaiterImpl {\n  constructor(name, nextToken) {\n    _defineProperty(this, \"isRegistered\", false);\n    _defineProperty(this, \"items\", new Map());\n    _defineProperty(this, \"completedOperationsForTokens\", new WeakMap());\n    _defineProperty(this, \"completedOperationsForPrimitives\", new Map());\n    this.name = name; // @ts-ignore\n\n    this.nextToken = nextToken || getNextToken;\n  }\n  beginAsync(token = this.nextToken(), label) {\n    this._register();\n    if (this.items.has(token)) {\n      throw new Error(`beginAsync called for ${token} but it is already pending.`);\n    }\n    let error = new Error();\n    this.items.set(token, {\n      get stack() {\n        return error.stack;\n      },\n      label\n    });\n    return token;\n  }\n  endAsync(token) {\n    if (!this.items.has(token) && !this._getCompletedOperations(token).has(token)) {\n      throw new Error(`testWaiter.endAsync called with no preceding testWaiter.beginAsync call.\n        Test waiter calls should always be paired. This can occur when a test waiter's paired calls are invoked in a non-deterministic order.\n\n        See https://github.com/emberjs/ember-test-waiters#keep-beginasyncendasync-in-same-block-scope for more information.`);\n    }\n    this.items.delete(token); // Mark when a waiter operation has completed so we can distinguish\n    // whether endAsync is being called before a prior beginAsync call above.\n\n    this._getCompletedOperations(token).set(token, true);\n  }\n  waitUntil() {\n    return this.items.size === 0;\n  }\n  debugInfo() {\n    let result = [];\n    this.items.forEach(value => {\n      result.push(value);\n    });\n    return result;\n  }\n  reset() {\n    this.items.clear();\n  }\n  _register() {\n    if (!this.isRegistered) {\n      (0,_waiter_manager__WEBPACK_IMPORTED_MODULE_2__.register)(this);\n      this.isRegistered = true;\n    }\n  }\n  _getCompletedOperations(token) {\n    let type = typeof token;\n    let isFunction = type === 'function';\n    let isObject = token !== null && type === 'object';\n    let isPrimitive = !isFunction && !isObject;\n    return isPrimitive ? this.completedOperationsForPrimitives : this.completedOperationsForTokens;\n  }\n}\nclass NoopTestWaiter {\n  constructor(name) {\n    this.name = name;\n  }\n  beginAsync() {\n    return this;\n  }\n  endAsync() {}\n  waitUntil() {\n    return true;\n  }\n  debugInfo() {\n    return [];\n  }\n  reset() {}\n}\n/**\n * Builds and returns a test waiter. The type of the\n * returned waiter is dependent on whether the app or\n * addon is in `DEBUG` mode or not.\n *\n * @public\n *\n * @param name {string} The name of the test waiter\n * @returns {TestWaiter}\n *\n * @example\n *\n * import Component from '@ember/component';\n * import { buildWaiter } from '@ember/test-waiters';\n *\n * if (DEBUG) {\n *   let waiter = buildWaiter('friend-waiter');\n * }\n *\n * export default class Friendz extends Component {\n *   didInsertElement() {\n *     let token = waiter.beginAsync(this);\n *\n *     someAsyncWork().then(() => {\n *       waiter.endAsync(token);\n *     });\n *   }\n * }\n */\n\nfunction buildWaiter(name) {\n  if (true /* DEBUG */) {\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`The waiter name '${name}' is already in use`, !WAITER_NAMES.has(name), {\n      id: '@ember/test-waiters.duplicate-waiter-name'\n    }));\n    WAITER_NAMES.add(name);\n  }\n  if (false /* DEBUG */) {} else {\n    ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.warn)(`You must provide a name that contains a descriptive prefix separated by a colon.\n\n        Example: ember-fictitious-addon:some-file\n\n        You passed: ${name}`, WAITER_NAME_PATTERN.test(name), {\n      id: '@ember/test-waiters.invalid-waiter-name'\n    }));\n    return new TestWaiterImpl(name);\n  }\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/build-waiter.js?");

/***/ }),

/***/ "../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/ember-test-waiters/index.js":
/*!***********************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/ember-test-waiters/index.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _reset: () => (/* reexport safe */ _ember_test_waiters__WEBPACK_IMPORTED_MODULE_1__._reset),\n/* harmony export */   _resetWaiterNames: () => (/* reexport safe */ _ember_test_waiters__WEBPACK_IMPORTED_MODULE_1__._resetWaiterNames),\n/* harmony export */   buildWaiter: () => (/* reexport safe */ _ember_test_waiters__WEBPACK_IMPORTED_MODULE_1__.buildWaiter),\n/* harmony export */   getPendingWaiterState: () => (/* reexport safe */ _ember_test_waiters__WEBPACK_IMPORTED_MODULE_1__.getPendingWaiterState),\n/* harmony export */   getWaiters: () => (/* reexport safe */ _ember_test_waiters__WEBPACK_IMPORTED_MODULE_1__.getWaiters),\n/* harmony export */   hasPendingWaiters: () => (/* reexport safe */ _ember_test_waiters__WEBPACK_IMPORTED_MODULE_1__.hasPendingWaiters),\n/* harmony export */   register: () => (/* reexport safe */ _ember_test_waiters__WEBPACK_IMPORTED_MODULE_1__.register),\n/* harmony export */   unregister: () => (/* reexport safe */ _ember_test_waiters__WEBPACK_IMPORTED_MODULE_1__.unregister),\n/* harmony export */   waitFor: () => (/* reexport safe */ _ember_test_waiters__WEBPACK_IMPORTED_MODULE_1__.waitFor),\n/* harmony export */   waitForPromise: () => (/* reexport safe */ _ember_test_waiters__WEBPACK_IMPORTED_MODULE_1__.waitForPromise)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_test_waiters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/test-waiters */ \"../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/index.js\");\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)('Importing from ember-test-waiters is deprecated. Please import from @ember/test-waiters', false, {\n  id: 'ember-test-waiters-legacy-module-name',\n  until: '3.0.0',\n  for: 'ember-test-waiters',\n  since: {\n    enabled: '2.2.0'\n  }\n}));\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/ember-test-waiters/index.js?");

/***/ }),

/***/ "../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/index.js":
/*!****************************************************************************************************!*\
  !*** ../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/index.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _reset: () => (/* reexport safe */ _waiter_manager__WEBPACK_IMPORTED_MODULE_0__._reset),\n/* harmony export */   _resetWaiterNames: () => (/* reexport safe */ _build_waiter__WEBPACK_IMPORTED_MODULE_1__._resetWaiterNames),\n/* harmony export */   buildWaiter: () => (/* reexport safe */ _build_waiter__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   getPendingWaiterState: () => (/* reexport safe */ _waiter_manager__WEBPACK_IMPORTED_MODULE_0__.getPendingWaiterState),\n/* harmony export */   getWaiters: () => (/* reexport safe */ _waiter_manager__WEBPACK_IMPORTED_MODULE_0__.getWaiters),\n/* harmony export */   hasPendingWaiters: () => (/* reexport safe */ _waiter_manager__WEBPACK_IMPORTED_MODULE_0__.hasPendingWaiters),\n/* harmony export */   register: () => (/* reexport safe */ _waiter_manager__WEBPACK_IMPORTED_MODULE_0__.register),\n/* harmony export */   unregister: () => (/* reexport safe */ _waiter_manager__WEBPACK_IMPORTED_MODULE_0__.unregister),\n/* harmony export */   waitFor: () => (/* reexport safe */ _wait_for__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   waitForPromise: () => (/* reexport safe */ _wait_for_promise__WEBPACK_IMPORTED_MODULE_2__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _waiter_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./waiter-manager */ \"../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/waiter-manager.js\");\n/* harmony import */ var _build_waiter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./build-waiter */ \"../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/build-waiter.js\");\n/* harmony import */ var _wait_for_promise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wait-for-promise */ \"../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/wait-for-promise.js\");\n/* harmony import */ var _wait_for__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./wait-for */ \"../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/wait-for.js\");\n\n\n\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/index.js?");

/***/ }),

/***/ "../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/token.js":
/*!****************************************************************************************************!*\
  !*** ../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/token.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Token)\n/* harmony export */ });\n/**\n * A class representing a test waiter token.\n *\n * @public\n * @class\n */\nclass Token {}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/token.js?");

/***/ }),

/***/ "../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/types/index.js":
/*!**********************************************************************************************************!*\
  !*** ../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/types/index.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/types/index.js?");

/***/ }),

/***/ "../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/wait-for-promise.js":
/*!***************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/wait-for-promise.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ waitForPromise)\n/* harmony export */ });\n/* harmony import */ var _build_waiter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./build-waiter */ \"../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/build-waiter.js\");\n\nconst PROMISE_WAITER = (0,_build_waiter__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('@ember/test-waiters:promise-waiter');\n/**\n * A convenient utility function to simplify waiting for a promise.\n *\n * @public\n * @param promise {Promise<T> | RSVP.Promise<T>} The promise to track async operations for\n * @param label {string} An optional string to identify the promise\n *\n * @example\n *\n * import Component from '@ember/component';\n * import { waitForPromise } from '@ember/test-waiters';\n *\n * export default class Friendz extends Component {\n *   didInsertElement() {\n *     waitForPromise(new Promise(resolve => {\n *       doSomeWork();\n *       resolve();\n *     }));\n *   }\n * }\n */\n\nfunction waitForPromise(promise, label) {\n  let result = promise;\n  if (true /* DEBUG */) {\n    PROMISE_WAITER.beginAsync(promise, label);\n    result = promise.then(value => {\n      PROMISE_WAITER.endAsync(promise);\n      return value;\n    }, error => {\n      PROMISE_WAITER.endAsync(promise);\n      throw error;\n    });\n  }\n  return result;\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/wait-for-promise.js?");

/***/ }),

/***/ "../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/wait-for.js":
/*!*******************************************************************************************************!*\
  !*** ../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/wait-for.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ waitFor)\n/* harmony export */ });\n/* harmony import */ var _wait_for_promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wait-for-promise */ \"../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/wait-for-promise.js\");\n/* harmony import */ var _build_waiter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./build-waiter */ \"../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/build-waiter.js\");\n\n\nfunction waitFor(...args) {\n  let isFunction = args.length < 3;\n  if (isFunction) {\n    let [fn, label] = args;\n    return wrapFunction(fn, label);\n  } else {\n    let [,, descriptor, label] = args;\n    if (false /* DEBUG */) {}\n    let fn = descriptor.value;\n    descriptor.value = wrapFunction(fn, label);\n    return descriptor;\n  }\n}\nfunction wrapFunction(fn, label) {\n  if (false /* DEBUG */) {}\n  return function (...args) {\n    let result = fn.call(this, ...args);\n    if (isThenable(result)) {\n      return (0,_wait_for_promise__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(result, label);\n    } else if (isGenerator(result)) {\n      return waitForGenerator(result, label);\n    } else {\n      return result;\n    }\n  };\n}\nfunction isThenable(maybePromise) {\n  let type = typeof maybePromise;\n  return (maybePromise !== null && type === 'object' || type === 'function') && typeof maybePromise.then === 'function';\n}\nfunction isGenerator(maybeGenerator) {\n  // Because we don't have Symbol.iterator in IE11\n  return typeof maybeGenerator.next === 'function' && typeof maybeGenerator.return === 'function' && typeof maybeGenerator.throw === 'function';\n}\nconst GENERATOR_WAITER = (0,_build_waiter__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('@ember/test-waiters:generator-waiter');\nfunction waitForGenerator(generator, label) {\n  GENERATOR_WAITER.beginAsync(generator, label);\n  let isWaiting = true;\n  function stopWaiting() {\n    if (isWaiting) {\n      GENERATOR_WAITER.endAsync(generator);\n      isWaiting = false;\n    }\n  }\n  return {\n    next(...args) {\n      let hasErrored = true;\n      try {\n        let val = generator.next(...args);\n        hasErrored = false;\n        if (val.done) {\n          stopWaiting();\n        }\n        return val;\n      } finally {\n        // If generator.next() throws, we need to stop waiting. But if we catch\n        // and re-throw exceptions, it could move the location from which the\n        // uncaught exception is thrown, interfering with the developer\n        // debugging experience if they have break-on-exceptions enabled. So we\n        // use a boolean flag and a finally block to emulate a catch block.\n        if (hasErrored) {\n          stopWaiting();\n        }\n      }\n    },\n    return(...args) {\n      stopWaiting();\n      return generator.return(...args);\n    },\n    throw(...args) {\n      stopWaiting();\n      return generator.throw(...args);\n    }\n  };\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/wait-for.js?");

/***/ }),

/***/ "../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/waiter-manager.js":
/*!*************************************************************************************************************!*\
  !*** ../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/waiter-manager.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _reset: () => (/* binding */ _reset),\n/* harmony export */   getPendingWaiterState: () => (/* binding */ getPendingWaiterState),\n/* harmony export */   getWaiters: () => (/* binding */ getWaiters),\n/* harmony export */   hasPendingWaiters: () => (/* binding */ hasPendingWaiters),\n/* harmony export */   register: () => (/* binding */ register),\n/* harmony export */   unregister: () => (/* binding */ unregister)\n/* harmony export */ });\n/* harmony import */ var ember__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ember */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2Fember&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var ember__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ember__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_test__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/test */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftest&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_test__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_test__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n// this ensures that if @ember/test-waiters exists in multiple places in the\n// build output we will still use a single map of waiters (there really should\n// only be one of them, or else `settled` will not work at all)\nconst WAITERS = function () {\n  const HAS_SYMBOL = typeof Symbol !== 'undefined';\n  let symbolName = 'TEST_WAITERS';\n  let symbol = HAS_SYMBOL ? Symbol.for(symbolName) : symbolName;\n  let global = getGlobal();\n  let waiters = global[symbol];\n  if (waiters === undefined) {\n    waiters = global[symbol] = new Map();\n  }\n  return waiters;\n}();\nfunction indexable(input) {\n  return input;\n}\nfunction getGlobal() {\n  // eslint-disable-next-line node/no-unsupported-features/es-builtins\n  if (typeof globalThis !== 'undefined') return indexable(globalThis);\n  if (typeof self !== 'undefined') return indexable(self);\n  if (typeof window !== 'undefined') return indexable(window);\n  if (typeof global !== 'undefined') return indexable(global);\n  throw new Error('unable to locate global object');\n}\n/**\n * Backwards compatibility with legacy waiters system.\n *\n * We want to always register a waiter using the legacy waiter system, as right\n * now if consumers are not on the right version of @ember/test-helpers, using\n * this addon will result in none of these waiters waiting.\n */\n// eslint-disable-next-line ember/new-module-imports\n\nif ((ember__WEBPACK_IMPORTED_MODULE_0___default().Test)) {\n  (0,_ember_test__WEBPACK_IMPORTED_MODULE_1__.registerWaiter)(() => !hasPendingWaiters());\n}\n/**\n * Registers a waiter.\n *\n * @public\n * @param waiter {Waiter} A test waiter instance\n */\n\nfunction register(waiter) {\n  WAITERS.set(waiter.name, waiter);\n}\n/**\n * Un-registers a waiter.\n *\n * @public\n * @param waiter {Waiter} A test waiter instance\n */\n\nfunction unregister(waiter) {\n  WAITERS.delete(waiter.name);\n}\n/**\n * Gets an array of all waiters current registered.\n *\n * @public\n * @returns {Waiter[]}\n */\n\nfunction getWaiters() {\n  let result = [];\n  WAITERS.forEach(value => {\n    result.push(value);\n  });\n  return result;\n}\n/**\n * Clears all waiters.\n *\n * @private\n */\n\nfunction _reset() {\n  for (let waiter of getWaiters()) {\n    waiter.isRegistered = false;\n  }\n  WAITERS.clear();\n}\n/**\n * Gets the current state of all waiters. Any waiters whose\n * `waitUntil` method returns false will be considered `pending`.\n *\n * @returns {PendingWaiterState} An object containing a count of all waiters\n * pending and a `waiters` object containing the name of all pending waiters\n * and their debug info.\n */\n\nfunction getPendingWaiterState() {\n  let result = {\n    pending: 0,\n    waiters: {}\n  };\n  WAITERS.forEach(waiter => {\n    if (!waiter.waitUntil()) {\n      result.pending++;\n      let debugInfo = waiter.debugInfo();\n      result.waiters[waiter.name] = debugInfo || true;\n    }\n  });\n  return result;\n}\n/**\n * Determines if there are any pending waiters.\n *\n * @returns {boolean} `true` if there are pending waiters, otherwise `false`.\n */\n\nfunction hasPendingWaiters() {\n  let state = getPendingWaiterState();\n  return state.pending > 0;\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@ember/test-waiters.2bac1e98/node_modules/@ember/test-waiters/waiter-manager.js?");

/***/ }),

/***/ "../rewritten-packages/@embroider/macros.83914fbf/node_modules/@embroider/macros/es-compat2.js":
/*!*****************************************************************************************************!*\
  !*** ../rewritten-packages/@embroider/macros.83914fbf/node_modules/@embroider/macros/es-compat2.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ esCompat)\n/* harmony export */ });\nfunction esCompat(m) {\n  return m?.__esModule ? m : {\n    default: m,\n    ...m\n  };\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@embroider/macros.83914fbf/node_modules/@embroider/macros/es-compat2.js?");

/***/ }),

/***/ "../rewritten-packages/@embroider/macros.83914fbf/node_modules/@embroider/macros/runtime.js":
/*!**************************************************************************************************!*\
  !*** ../rewritten-packages/@embroider/macros.83914fbf/node_modules/@embroider/macros/runtime.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   each: () => (/* binding */ each),\n/* harmony export */   getGlobalConfig: () => (/* binding */ getGlobalConfig),\n/* harmony export */   isTesting: () => (/* binding */ isTesting),\n/* harmony export */   macroCondition: () => (/* binding */ macroCondition)\n/* harmony export */ });\n/*\n  These are the runtime implementations for the javascript macros that have\n  runtime implementations.\n\n  Not every macro has a runtime implementation, some only make sense in the\n  build and always run there.\n\n  Even when we have runtime implementations, we are still careful to emit static\n  errors during the build wherever possible, and runtime errors when necessary,\n  so that you're not surprised when you switch from runtime-mode to compile-time\n  mode.\n*/\n\n/*\n  CAUTION: in classic builds, this file gets shared by all present copies of\n  @embroider/macros. If you want to change its public API, you need to rename it\n  and update `pathToRuntime` in ../babel/state.ts to point at it, so that your\n  babel plugin and runtime will match.\n*/\n\nfunction each(array) {\n  if (!Array.isArray(array)) {\n    throw new Error(`the argument to the each() macro must be an array`);\n  }\n  return array;\n}\nfunction macroCondition(predicate) {\n  return predicate;\n}\n\n// This is here as a compile target for `getConfig` and `getOwnConfig` when\n// we're in runtime mode. This is not public API to call from your own code.\nfunction config(packageRoot) {\n  return runtimeConfig.packages[packageRoot];\n}\nfunction getGlobalConfig() {\n  return runtimeConfig.global;\n}\nfunction isTesting() {\n  let g = runtimeConfig.global;\n  let e = g && g['@embroider/macros'];\n  return Boolean(e && e.isTesting);\n}\nconst runtimeConfig = initializeRuntimeMacrosConfig();\n\n// this exists to be targeted by our babel plugin\nfunction initializeRuntimeMacrosConfig() {\n  return {\n    \"packages\": {\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/adapter\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": false,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": true,\n          \"HAS_MODEL_PACKAGE\": false,\n          \"HAS_JSON_API_PACKAGE\": false,\n          \"HAS_GRAPH_PACKAGE\": false,\n          \"HAS_REQUEST_PACKAGE\": false,\n          \"HAS_COMPAT_PACKAGE\": true,\n          \"HAS_TRACKING_PACKAGE\": false,\n          \"HAS_ADAPTER_PACKAGE\": true,\n          \"HAS_SERIALIZER_PACKAGE\": false\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/debug\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": true,\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        },\n        \"includeDataAdapterInProduction\": true\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/graph\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": false,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": true,\n          \"HAS_MODEL_PACKAGE\": false,\n          \"HAS_JSON_API_PACKAGE\": false,\n          \"HAS_GRAPH_PACKAGE\": true,\n          \"HAS_REQUEST_PACKAGE\": false,\n          \"HAS_COMPAT_PACKAGE\": false,\n          \"HAS_TRACKING_PACKAGE\": false,\n          \"HAS_ADAPTER_PACKAGE\": false,\n          \"HAS_SERIALIZER_PACKAGE\": false\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/json-api\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": false,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": true,\n          \"HAS_MODEL_PACKAGE\": false,\n          \"HAS_JSON_API_PACKAGE\": true,\n          \"HAS_GRAPH_PACKAGE\": true,\n          \"HAS_REQUEST_PACKAGE\": false,\n          \"HAS_COMPAT_PACKAGE\": false,\n          \"HAS_TRACKING_PACKAGE\": false,\n          \"HAS_ADAPTER_PACKAGE\": false,\n          \"HAS_SERIALIZER_PACKAGE\": false\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/legacy-compat\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": false,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": true,\n          \"HAS_MODEL_PACKAGE\": false,\n          \"HAS_JSON_API_PACKAGE\": true,\n          \"HAS_GRAPH_PACKAGE\": true,\n          \"HAS_REQUEST_PACKAGE\": true,\n          \"HAS_COMPAT_PACKAGE\": true,\n          \"HAS_TRACKING_PACKAGE\": false,\n          \"HAS_ADAPTER_PACKAGE\": false,\n          \"HAS_SERIALIZER_PACKAGE\": false\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/model\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": true,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": true,\n          \"HAS_MODEL_PACKAGE\": true,\n          \"HAS_JSON_API_PACKAGE\": true,\n          \"HAS_GRAPH_PACKAGE\": true,\n          \"HAS_REQUEST_PACKAGE\": false,\n          \"HAS_COMPAT_PACKAGE\": true,\n          \"HAS_TRACKING_PACKAGE\": true,\n          \"HAS_ADAPTER_PACKAGE\": false,\n          \"HAS_SERIALIZER_PACKAGE\": false\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/request\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": false,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": false,\n          \"HAS_MODEL_PACKAGE\": false,\n          \"HAS_JSON_API_PACKAGE\": false,\n          \"HAS_GRAPH_PACKAGE\": false,\n          \"HAS_REQUEST_PACKAGE\": true,\n          \"HAS_COMPAT_PACKAGE\": false,\n          \"HAS_TRACKING_PACKAGE\": false,\n          \"HAS_ADAPTER_PACKAGE\": false,\n          \"HAS_SERIALIZER_PACKAGE\": false\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/serializer\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": false,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": false,\n          \"HAS_MODEL_PACKAGE\": false,\n          \"HAS_JSON_API_PACKAGE\": false,\n          \"HAS_GRAPH_PACKAGE\": false,\n          \"HAS_REQUEST_PACKAGE\": false,\n          \"HAS_COMPAT_PACKAGE\": false,\n          \"HAS_TRACKING_PACKAGE\": false,\n          \"HAS_ADAPTER_PACKAGE\": false,\n          \"HAS_SERIALIZER_PACKAGE\": true\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/store\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": false,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": true,\n          \"HAS_MODEL_PACKAGE\": false,\n          \"HAS_JSON_API_PACKAGE\": false,\n          \"HAS_GRAPH_PACKAGE\": false,\n          \"HAS_REQUEST_PACKAGE\": true,\n          \"HAS_COMPAT_PACKAGE\": false,\n          \"HAS_TRACKING_PACKAGE\": true,\n          \"HAS_ADAPTER_PACKAGE\": false,\n          \"HAS_SERIALIZER_PACKAGE\": false\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/tracking\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": false,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": false,\n          \"HAS_MODEL_PACKAGE\": false,\n          \"HAS_JSON_API_PACKAGE\": false,\n          \"HAS_GRAPH_PACKAGE\": false,\n          \"HAS_REQUEST_PACKAGE\": false,\n          \"HAS_COMPAT_PACKAGE\": false,\n          \"HAS_TRACKING_PACKAGE\": true,\n          \"HAS_ADAPTER_PACKAGE\": false,\n          \"HAS_SERIALIZER_PACKAGE\": false\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/ember-data\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": true,\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      }\n    },\n    \"global\": {\n      \"@embroider/macros\": {\n        \"isTesting\": false\n      },\n      \"@embroider/core\": {\n        \"active\": true\n      }\n    }\n  };\n}\nfunction updaterMethods() {\n  return {\n    config,\n    getGlobalConfig,\n    setConfig(packageRoot, value) {\n      runtimeConfig.packages[packageRoot] = value;\n    },\n    setGlobalConfig(key, value) {\n      runtimeConfig.global[key] = value;\n    }\n  };\n}\n\n// this is how runtime config can get injected at boot. I'm not sure yet if this\n// should be public API, but we certainly need it internally to set things like\n// the global fastboot.isRunning.\n//\n// consumers of this API push a function onto\n// window._embroider_macros_runtime_config. The function is given four methods\n// which allow it to read and write the per-package and global configs. The\n// reason for allowing both read & write is that merging strategies are up to\n// each consumers -- read first, then merge, then write.\n//\n// For an example user of this API, see where we generate\n// embroider_macros_fastboot_init.js' in @embroider/core.\nlet updaters = typeof window !== 'undefined' ? window._embroider_macros_runtime_config : undefined;\nif (updaters) {\n  let methods = updaterMethods();\n  for (let updater of updaters) {\n    updater(methods);\n  }\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@embroider/macros.83914fbf/node_modules/@embroider/macros/runtime.js?");

/***/ }),

/***/ "../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/base-component-manager.js":
/*!****************************************************************************************************************************!*\
  !*** ../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/base-component-manager.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BaseComponentManager)\n/* harmony export */ });\n/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/component.js\");\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\n\n/**\n * This factory function returns a component manager class with common behavior\n * that can be extend to add Glimmer.js- or Ember.js-specific functionality. As\n * these environments converge, the need for two component manager\n * implementations (and thus this factory) should go away.\n */\nfunction BaseComponentManager(setOwner, getOwner, capabilities) {\n  return class {\n    static create(attrs) {\n      let owner = getOwner(attrs);\n      return new this(owner);\n    }\n    constructor(owner) {\n      _defineProperty(this, \"capabilities\", capabilities);\n      setOwner(this, owner);\n    }\n    createComponent(ComponentClass, args) {\n      if (true /* DEBUG */) {\n        _component__WEBPACK_IMPORTED_MODULE_0__.ARGS_SET.set(args.named, true);\n      }\n      return new ComponentClass(getOwner(this), args.named);\n    }\n    getContext(component) {\n      return component;\n    }\n  };\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/base-component-manager.js?");

/***/ }),

/***/ "../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/component.js":
/*!***************************************************************************************************************!*\
  !*** ../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/component.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARGS_SET: () => (/* binding */ ARGS_SET),\n/* harmony export */   \"default\": () => (/* binding */ BaseComponent)\n/* harmony export */ });\n/* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./owner */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/owner.js\");\n/* harmony import */ var _destroyables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./destroyables */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/destroyables.js\");\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\n\n\n\n// This provides a type-safe `WeakMap`: the getter and setter link the key to a\n// specific value. This is how `WeakMap`s actually behave, but the TS type\n// system does not (yet!) have a good way to capture that for types like\n// `WeakMap` where the type is generic over another generic type (here, `Args`).\n\n// SAFETY: this only holds because we *only* acces this when `DEBUG` is `true`.\n// There is not a great way to connect that data in TS at present.\nlet ARGS_SET;\nif (true /* DEBUG */) {\n  ARGS_SET = new WeakMap();\n}\n\n// --- Type utilities for component signatures --- //\n// Type-only \"symbol\" to use with `EmptyObject` below, so that it is *not*\n// equivalent to an empty interface.\n\n/**\n * This provides us a way to have a \"fallback\" which represents an empty object,\n * without the downsides of how TS treats `{}`. Specifically: this will\n * correctly leverage \"excess property checking\" so that, given a component\n * which has no named args, if someone invokes it with any named args, they will\n * get a type error.\n *\n * @internal This is exported so declaration emit works (if it were not emitted,\n *   declarations which fall back to it would not work). It is *not* intended for\n *   public usage, and the specific mechanics it uses may change at any time.\n *   The location of this export *is* part of the public API, because moving it\n *   will break existing declarations, but is not legal for end users to import\n *   themselves, so ***DO NOT RELY ON IT***.\n */\n\n/** Given a signature `S`, get back the `Args` type. */\n\n/**\n * Given any allowed shorthand form of a signature, desugars it to its full\n * expanded type.\n *\n * @internal This is only exported so we can avoid duplicating it in\n *   [Glint](https://github.com/typed-ember/glint) or other such tooling. It is\n *   *not* intended for public usage, and the specific mechanics it uses may\n *   change at any time. Although the signature produced by is part of Glimmer's\n *   public API the existence and mechanics of this specific symbol are *not*,\n *   so ***DO NOT RELY ON IT***.\n */\n// The conditional type here is because TS applies conditional types\n// distributively. This means that for union types, checks like `keyof T` get\n// all the keys from all elements of the union, instead of ending up as `never`\n// and then always falling into the `Signature` path instead of falling back to\n// the legacy args handling path.\n\n/**\n * @internal we use this type for convenience internally; inference means users\n *   should not normally need to name it\n */\n\n/**\n * The `Component` class defines an encapsulated UI element that is rendered to\n * the DOM. A component is made up of a template and, optionally, this component\n * object.\n *\n * ## Defining a Component\n *\n * To define a component, subclass `Component` and add your own properties,\n * methods and lifecycle hooks:\n *\n * ```ts\n * import Component from '@glimmer/component';\n *\n * export default class extends Component {\n * }\n * ```\n *\n * ## Lifecycle Hooks\n *\n * Lifecycle hooks allow you to respond to changes to a component, such as when\n * it gets created, rendered, updated or destroyed. To add a lifecycle hook to a\n * component, implement the hook as a method on your component subclass.\n *\n * For example, to be notified when Glimmer has rendered your component so you\n * can attach a legacy jQuery plugin, implement the `didInsertElement()` method:\n *\n * ```ts\n * import Component from '@glimmer/component';\n *\n * export default class extends Component {\n *   didInsertElement() {\n *     $(this.element).pickadate();\n *   }\n * }\n * ```\n *\n * ## Data for Templates\n *\n * `Component`s have two different kinds of data, or state, that can be\n * displayed in templates:\n *\n * 1. Arguments\n * 2. Properties\n *\n * Arguments are data that is passed in to a component from its parent\n * component. For example, if I have a `UserGreeting` component, I can pass it\n * a name and greeting to use:\n *\n * ```hbs\n * <UserGreeting @name=\"Ricardo\" @greeting=\"Olá\" />\n * ```\n *\n * Inside my `UserGreeting` template, I can access the `@name` and `@greeting`\n * arguments that I've been given:\n *\n * ```hbs\n * {{@greeting}}, {{@name}}!\n * ```\n *\n * Arguments are also available inside my component:\n *\n * ```ts\n * console.log(this.args.greeting); // prints \"Olá\"\n * ```\n *\n * Properties, on the other hand, are internal to the component and declared in\n * the class. You can use properties to store data that you want to show in the\n * template, or pass to another component as an argument.\n *\n * ```ts\n * import Component from '@glimmer/component';\n *\n * export default class extends Component {\n *   user = {\n *     name: 'Robbie'\n *   }\n * }\n * ```\n *\n * In the above example, we've defined a component with a `user` property that\n * contains an object with its own `name` property.\n *\n * We can render that property in our template:\n *\n * ```hbs\n * Hello, {{user.name}}!\n * ```\n *\n * We can also take that property and pass it as an argument to the\n * `UserGreeting` component we defined above:\n *\n * ```hbs\n * <UserGreeting @greeting=\"Hello\" @name={{user.name}} />\n * ```\n *\n * ## Arguments vs. Properties\n *\n * Remember, arguments are data that was given to your component by its parent\n * component, and properties are data your component has defined for itself.\n *\n * You can tell the difference between arguments and properties in templates\n * because arguments always start with an `@` sign (think \"A is for arguments\"):\n *\n * ```hbs\n * {{@firstName}}\n * ```\n *\n * We know that `@firstName` came from the parent component, not the current\n * component, because it starts with `@` and is therefore an argument.\n *\n * On the other hand, if we see:\n *\n * ```hbs\n * {{name}}\n * ```\n *\n * We know that `name` is a property on the component. If we want to know where\n * the data is coming from, we can go look at our component class to find out.\n *\n * Inside the component itself, arguments always show up inside the component's\n * `args` property. For example, if `{{@firstName}}` is `Tom` in the template,\n * inside the component `this.args.firstName` would also be `Tom`.\n */\nclass BaseComponent {\n  /**\n   * Constructs a new component and assigns itself the passed properties. You\n   * should not construct new components yourself. Instead, Glimmer will\n   * instantiate new components automatically as it renders.\n   *\n   * @param owner\n   * @param args\n   */\n  constructor(owner, args) {\n    /**\n     * Named arguments passed to the component from its parent component.\n     * They can be accessed in JavaScript via `this.args.argumentName` and in the template via `@argumentName`.\n     *\n     * Say you have the following component, which will have two `args`, `firstName` and `lastName`:\n     *\n     * ```hbs\n     * <my-component @firstName=\"Arthur\" @lastName=\"Dent\" />\n     * ```\n     *\n     * If you needed to calculate `fullName` by combining both of them, you would do:\n     *\n     * ```ts\n     * didInsertElement() {\n     *   console.log(`Hi, my full name is ${this.args.firstName} ${this.args.lastName}`);\n     * }\n     * ```\n     *\n     * While in the template you could do:\n     *\n     * ```hbs\n     * <p>Welcome, {{@firstName}} {{@lastName}}!</p>\n     * ```\n     */\n    _defineProperty(this, \"args\", void 0);\n    if ( true /* DEBUG */ && !(owner !== null && typeof owner === 'object' && ARGS_SET.has(args))) {\n      throw new Error(`You must pass both the owner and args to super() in your component: ${this.constructor.name}. You can pass them directly, or use ...arguments to pass all arguments through.`);\n    }\n    this.args = args;\n    (0,_owner__WEBPACK_IMPORTED_MODULE_0__.setOwner)(this, owner);\n  }\n  get isDestroying() {\n    return (0,_destroyables__WEBPACK_IMPORTED_MODULE_1__.isDestroying)(this);\n  }\n  get isDestroyed() {\n    return (0,_destroyables__WEBPACK_IMPORTED_MODULE_1__.isDestroyed)(this);\n  }\n\n  /**\n   * Called before the component has been removed from the DOM.\n   */\n  willDestroy() {}\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/component.js?");

/***/ }),

/***/ "../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/destroyables.js":
/*!******************************************************************************************************************!*\
  !*** ../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/destroyables.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDestroyed: () => (/* binding */ isDestroyed),\n/* harmony export */   isDestroying: () => (/* binding */ isDestroying)\n/* harmony export */ });\n/* harmony import */ var ember__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ember */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2Fember&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var ember__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ember__WEBPACK_IMPORTED_MODULE_0__);\n\nconst isDestroying = (ember__WEBPACK_IMPORTED_MODULE_0___default()._isDestroying);\nconst isDestroyed = (ember__WEBPACK_IMPORTED_MODULE_0___default()._isDestroyed);\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/destroyables.js?");

/***/ }),

/***/ "../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/ember-component-manager.js":
/*!*****************************************************************************************************************************!*\
  !*** ../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/ember-component-manager.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var ember__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ember */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2Fember&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var ember__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ember__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/object */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_object__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/application */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fapplication&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_application__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _ember_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember/component */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fcomponent&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_component__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ember_component__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _ember_runloop__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember/runloop */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Frunloop&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_runloop__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ember_runloop__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _base_component_manager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./base-component-manager */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/base-component-manager.js\");\n/* harmony import */ var _destroyables__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./destroyables */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/destroyables.js\");\n\n\n\n\n\n\n\nconst {\n  setDestroyed,\n  setDestroying\n} = _destroyables__WEBPACK_IMPORTED_MODULE_6__;\nconst CAPABILITIES =  true // @ts-ignore\n// @ts-ignore\n? (0,_ember_component__WEBPACK_IMPORTED_MODULE_3__.capabilities)('3.13', {\n  destructor: true,\n  asyncLifecycleCallbacks: false,\n  updateHook: false\n}) : 0;\nconst scheduledDestroyComponent =  true ? undefined : 0;\nconst destroy =  true ? (ember__WEBPACK_IMPORTED_MODULE_0___default().destroy) : 0;\nconst registerDestructor =  true ? (ember__WEBPACK_IMPORTED_MODULE_0___default()._registerDestructor) : 0;\n\n/**\n * This component manager runs in Ember.js environments and extends the base component manager to:\n *\n * 1. Properly destroy the component's associated `meta` data structure\n * 2. Schedule destruction using Ember's runloop\n */\nclass EmberGlimmerComponentManager extends (0,_base_component_manager__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(_ember_application__WEBPACK_IMPORTED_MODULE_2__.setOwner, _ember_application__WEBPACK_IMPORTED_MODULE_2__.getOwner, CAPABILITIES) {\n  createComponent(ComponentClass, args) {\n    const component = super.createComponent(ComponentClass, args);\n    if (true) {\n      registerDestructor(component, () => {\n        component.willDestroy();\n      });\n    }\n    return component;\n  }\n  destroyComponent(component) {\n    destroy(component);\n  }\n}\n// In Ember 3.12 and earlier, the updateComponent hook was mandatory.\n// As of Ember 3.13, the `args` object is stable and each property of the\n// object participates in the autotrack stack on its own. This means we do not\n// need to set the `args` property on the component instance to invalidate\n// tracked getters that rely on `args`, and therefore don't require the `updateComponent`\n// hook at all.\nif (false) {}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EmberGlimmerComponentManager);\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/ember-component-manager.js?");

/***/ }),

/***/ "../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/owner.js":
/*!***********************************************************************************************************!*\
  !*** ../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/owner.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setOwner: () => (/* reexport safe */ _ember_application__WEBPACK_IMPORTED_MODULE_0__.setOwner)\n/* harmony export */ });\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/application */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fapplication&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_application__WEBPACK_IMPORTED_MODULE_0__);\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/owner.js?");

/***/ }),

/***/ "../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/_app_/component-managers/glimmer.js":
/*!*****************************************************************************************************************************!*\
  !*** ../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/_app_/component-managers/glimmer.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _glimmer_component_private_ember_component_manager__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _glimmer_component_private_ember_component_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/component/-private/ember-component-manager */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/ember-component-manager.js\");\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/_app_/component-managers/glimmer.js?");

/***/ }),

/***/ "../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/index.js":
/*!**************************************************************************************************!*\
  !*** ../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/component */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fcomponent&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_component__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_component__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _private_ember_component_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./-private/ember-component-manager */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/ember-component-manager.js\");\n/* harmony import */ var _private_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./-private/component */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/-private/component.js\");\n\n\n// Hax because the old version of `@types/ember__component` the `1.x` branch\n// uses does not provide any types for `setComponentManager` *and* because we\n// are using a very old version of `setComponentManager` for versions before\n// Ember 3.8.\n\n\n\nlet GlimmerComponent = _private_component__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\nif (true /* DEBUG */) {\n  // Add assertions against using Glimmer.js only APIs\n\n  // TODO: Add GlimmerComponent API docs link to these messages once API docs are live\n  function throwMethodUseError(methodName) {\n    throw new Error(`You attempted to define the '${methodName}' method on a Glimmer Component, but that lifecycle hook does not exist in Ember.js applications, it only exists in Glimmer.js apps. You can rename this method, and you can trigger it using a modifier such as {{did-insert}} from '@ember/render-modifiers': https://github.com/emberjs/ember-render-modifiers.`);\n  }\n  function throwPropertyUseError(propertyName) {\n    throw new Error(`You attempted to access the '${propertyName}' property on a Glimmer Component, but that property does not exist in Ember.js applications, it only exists in Glimmer.js apps. You define a class field with the same name on your component class and it will overwrite this error message, but it will not be used by the framework.`);\n  }\n  GlimmerComponent = class GlimmerDebugComponent extends GlimmerComponent {\n    constructor(owner, args) {\n      super(owner, args);\n      if (typeof this['didInsertElement'] === 'function') {\n        throwMethodUseError('didInsertElement');\n      }\n      if (typeof this['didUpdate'] === 'function') {\n        throwMethodUseError('didUpdate');\n      }\n    }\n  };\n  let proto = GlimmerComponent.prototype;\n  function defineErrorProp(proto, key, getterMethod) {\n    Object.defineProperty(proto, key, {\n      get: () => getterMethod(key),\n      set(value) {\n        Object.defineProperty(this, key, {\n          value\n        });\n      }\n    });\n  }\n\n  // Methods should still throw whenever they are accessed\n  defineErrorProp(proto, 'bounds', throwPropertyUseError);\n  defineErrorProp(proto, 'element', throwPropertyUseError);\n  defineErrorProp(proto, 'debugName', throwPropertyUseError);\n}\nif (true) {\n  (0,_ember_component__WEBPACK_IMPORTED_MODULE_0__.setComponentManager)(owner => {\n    return new _private_ember_component_manager__WEBPACK_IMPORTED_MODULE_1__[\"default\"](owner);\n  }, GlimmerComponent);\n} else {}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GlimmerComponent);\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/index.js?");

/***/ }),

/***/ "../rewritten-packages/@glimmer/tracking.481d7669/node_modules/@glimmer/tracking/index.js":
/*!************************************************************************************************!*\
  !*** ../rewritten-packages/@glimmer/tracking.481d7669/node_modules/@glimmer/tracking/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cached: () => (/* binding */ cached),\n/* harmony export */   tracked: () => (/* binding */ tracked)\n/* harmony export */ });\n/* harmony import */ var _ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/-internals/metal */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2F-internals%2Fmetal&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_internals_metal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__);\n\nconst {\n  cached,\n  tracked\n} = _ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__;\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@glimmer/tracking.481d7669/node_modules/@glimmer/tracking/index.js?");

/***/ }),

/***/ "../rewritten-packages/@glimmer/tracking.481d7669/node_modules/@glimmer/tracking/primitives/cache.js":
/*!***********************************************************************************************************!*\
  !*** ../rewritten-packages/@glimmer/tracking.481d7669/node_modules/@glimmer/tracking/primitives/cache.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCache: () => (/* reexport safe */ _ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__.createCache),\n/* harmony export */   getValue: () => (/* reexport safe */ _ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__.getValue),\n/* harmony export */   isConst: () => (/* reexport safe */ _ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__.isConst)\n/* harmony export */ });\n/* harmony import */ var _ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/-internals/metal */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2F-internals%2Fmetal&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_internals_metal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_internals_metal__WEBPACK_IMPORTED_MODULE_0__);\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@glimmer/tracking.481d7669/node_modules/@glimmer/tracking/primitives/cache.js?");

/***/ }),

/***/ "../rewritten-packages/@warp-drive/core-types.f90747f3/node_modules/@warp-drive/core-types/identifier.js":
/*!***************************************************************************************************************!*\
  !*** ../rewritten-packages/@warp-drive/core-types.f90747f3/node_modules/@warp-drive/core-types/identifier.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CACHE_OWNER: () => (/* binding */ CACHE_OWNER),\n/* harmony export */   DEBUG_CLIENT_ORIGINATED: () => (/* binding */ DEBUG_CLIENT_ORIGINATED),\n/* harmony export */   DEBUG_IDENTIFIER_BUCKET: () => (/* binding */ DEBUG_IDENTIFIER_BUCKET),\n/* harmony export */   DEBUG_STALE_CACHE_OWNER: () => (/* binding */ DEBUG_STALE_CACHE_OWNER)\n/* harmony export */ });\n/**\n  @module @ember-data/store\n*/\n\n// provided for additional debuggability\nconst DEBUG_CLIENT_ORIGINATED = Symbol('record-originated-on-client');\nconst DEBUG_IDENTIFIER_BUCKET = Symbol('identifier-bucket');\nconst DEBUG_STALE_CACHE_OWNER = Symbol('warpDriveStaleCache');\n\n// also present in production\nconst CACHE_OWNER = Symbol('warpDriveCache');\n\n/**\n * An Identifier specific to a record which may or may not\n * be present in the cache.\n *\n * The absence of an `id` DOES NOT indicate that this\n * Identifier is for a new client-created record as it\n * may also indicate that it was generated for a secondary\n * index and the primary `id` index is not yet known.\n *\n * @internal\n */\n\n/**\n * Used when an Identifier is known to be the stable version\n *\n * @internal\n */\n\n/**\n * Used when a StableRecordIdentifier was not created locally as part\n * of a call to store.createRecord\n *\n * Distinguishing between this Identifier and one for a client created\n * record that was created with an ID is generally speaking not possible\n * at runtime, so anything with an ID typically narrows to this.\n *\n * @internal\n */\n\n/**\n * Used when a StableRecordIdentifier was created locally\n * (by a call to store.createRecord).\n *\n * It is possible in rare circumstances to have a StableRecordIdentifier\n * that is not for a new record but does not have an ID. This would\n * happen if a user intentionally created one for use with a secondary-index\n * prior to the record having been fully loaded.\n *\n * @internal\n */\n\n/**\n * A referentially stable object with a unique string (lid) that can be used\n * as a reference to data in the cache.\n *\n * Every record instance has a unique identifier, and identifiers may refer\n * to data that has never been loaded (for instance, in an async relationship).\n *\n * @class StableRecordIdentifier\n * @public\n */\n\n/**\n * A string representing a unique identity.\n *\n * @property {string} lid\n * @public\n */\n/**\n * the primary resource `type` or `modelName` this identity belongs to.\n *\n * @property {string} type\n * @public\n */\n/**\n * the primary id for the record this identity belongs to. `null`\n * if not yet assigned an id.\n *\n * @property {string | null} id\n * @public\n */\n\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@warp-drive/core-types.f90747f3/node_modules/@warp-drive/core-types/identifier.js?");

/***/ }),

/***/ "../rewritten-packages/@warp-drive/core-types.f90747f3/node_modules/@warp-drive/core-types/index.js":
/*!**********************************************************************************************************!*\
  !*** ../rewritten-packages/@warp-drive/core-types.f90747f3/node_modules/@warp-drive/core-types/index.js ***!
  \**********************************************************************************************************/
/***/ (() => {

eval("\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@warp-drive/core-types.f90747f3/node_modules/@warp-drive/core-types/index.js?");

/***/ }),

/***/ "../rewritten-packages/@warp-drive/core-types.f90747f3/node_modules/@warp-drive/core-types/request.js":
/*!************************************************************************************************************!*\
  !*** ../rewritten-packages/@warp-drive/core-types.f90747f3/node_modules/@warp-drive/core-types/request.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnableHydration: () => (/* binding */ EnableHydration),\n/* harmony export */   IS_FUTURE: () => (/* binding */ IS_FUTURE),\n/* harmony export */   STRUCTURED: () => (/* binding */ STRUCTURED),\n/* harmony export */   SkipCache: () => (/* binding */ SkipCache)\n/* harmony export */ });\nconst SkipCache = Symbol.for('wd:skip-cache');\nconst EnableHydration = Symbol.for('wd:enable-hydration');\nconst IS_FUTURE = Symbol('IS_FUTURE');\nconst STRUCTURED = Symbol('DOC');\n\n/**\n * Use these options to adjust CacheHandler behavior for a request.\n *\n * @typedoc\n */\n\n/**\n * JavaScript's native Request class.\n *\n * EmberData provides our own typings due to incompleteness in the native typings.\n *\n * @typedoc\n */\n\n/**\n * Extends JavaScript's native {@link Request} object with additional\n * properties specific to the RequestManager's capabilities.\n *\n * @typedoc\n */\n\n/**\n * Immutable version of {@link RequestInfo}. This is what is passed to handlers.\n *\n * @typedoc\n */\n\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@warp-drive/core-types.f90747f3/node_modules/@warp-drive/core-types/request.js?");

/***/ }),

/***/ "../rewritten-packages/@warp-drive/core-types.f90747f3/node_modules/@warp-drive/core-types/symbols.js":
/*!************************************************************************************************************!*\
  !*** ../rewritten-packages/@warp-drive/core-types.f90747f3/node_modules/@warp-drive/core-types/symbols.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RecordStore: () => (/* binding */ RecordStore)\n/* harmony export */ });\nconst RecordStore = Symbol('Store');\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/@warp-drive/core-types.f90747f3/node_modules/@warp-drive/core-types/symbols.js?");

/***/ }),

/***/ "../rewritten-packages/ember-cached-decorator-polyfill.0a9d25b1/node_modules/ember-cached-decorator-polyfill/index.js":
/*!****************************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-cached-decorator-polyfill.0a9d25b1/node_modules/ember-cached-decorator-polyfill/index.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cached: () => (/* binding */ cached)\n/* harmony export */ });\n/* harmony import */ var _glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/tracking/primitives/cache */ \"../rewritten-packages/@glimmer/tracking.481d7669/node_modules/@glimmer/tracking/primitives/cache.js\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction cached(...args) {\n  const [target, key, descriptor] = args;\n\n  // Error on `@cached()`, `@cached(...args)`, and `@cached propName = value;`\n  ( true && !(target !== undefined) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)('You attempted to use @cached(), which is not necessary nor supported. Remove the parentheses and you will be good to go!', target !== undefined));\n  ( true && !(typeof target === 'object' && typeof key === 'string' && typeof descriptor === 'object' && args.length === 3) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`You attempted to use @cached on with ${args.length > 1 ? 'arguments' : 'an argument'} ( @cached(${args.map(d => `'${d}'`).join(', ')}), which is not supported. Dependencies are automatically tracked, so you can just use ${'`@cached`'}`, typeof target === 'object' && typeof key === 'string' && typeof descriptor === 'object' && args.length === 3));\n  ( true && !(typeof descriptor.get == 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)(`The @cached decorator must be applied to getters. '${key}' is not a getter.`, typeof descriptor.get == 'function'));\n  const caches = new WeakMap();\n  const getter = descriptor.get;\n  descriptor.get = function () {\n    if (!caches.has(this)) caches.set(this, (0,_glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_0__.createCache)(getter.bind(this)));\n    return (0,_glimmer_tracking_primitives_cache__WEBPACK_IMPORTED_MODULE_0__.getValue)(caches.get(this));\n  };\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-cached-decorator-polyfill.0a9d25b1/node_modules/ember-cached-decorator-polyfill/index.js?");

/***/ }),

/***/ "../rewritten-packages/ember-cli-app-version.15f7f965/node_modules/ember-cli-app-version/_app_/helpers/app-version.js":
/*!****************************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-cli-app-version.15f7f965/node_modules/ember-cli-app-version/_app_/helpers/app-version.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appVersion: () => (/* binding */ appVersion),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_component_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/component/helper */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fcomponent%2Fhelper&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_component_helper__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_component_helper__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _config_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/environment */ \"./config/environment.js\");\n/* harmony import */ var ember_cli_app_version_utils_regexp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ember-cli-app-version/utils/regexp */ \"../rewritten-packages/ember-cli-app-version.15f7f965/node_modules/ember-cli-app-version/utils/regexp.js\");\n\n\n\nfunction appVersion(_, hash = {}) {\n  const version = _config_environment__WEBPACK_IMPORTED_MODULE_1__[\"default\"].APP.version;\n  // e.g. 1.0.0-alpha.1+4jds75hf\n\n  // Allow use of 'hideSha' and 'hideVersion' For backwards compatibility\n  let versionOnly = hash.versionOnly || hash.hideSha;\n  let shaOnly = hash.shaOnly || hash.hideVersion;\n  let match = null;\n  if (versionOnly) {\n    if (hash.showExtended) {\n      match = version.match(ember_cli_app_version_utils_regexp__WEBPACK_IMPORTED_MODULE_2__.versionExtendedRegExp); // 1.0.0-alpha.1\n    }\n    // Fallback to just version\n    if (!match) {\n      match = version.match(ember_cli_app_version_utils_regexp__WEBPACK_IMPORTED_MODULE_2__.versionRegExp); // 1.0.0\n    }\n  }\n  if (shaOnly) {\n    match = version.match(ember_cli_app_version_utils_regexp__WEBPACK_IMPORTED_MODULE_2__.shaRegExp); // 4jds75hf\n  }\n  return match ? match[0] : version;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_ember_component_helper__WEBPACK_IMPORTED_MODULE_0__.helper)(appVersion));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-cli-app-version.15f7f965/node_modules/ember-cli-app-version/_app_/helpers/app-version.js?");

/***/ }),

/***/ "../rewritten-packages/ember-cli-app-version.15f7f965/node_modules/ember-cli-app-version/_app_/initializers/app-version.js":
/*!*********************************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-cli-app-version.15f7f965/node_modules/ember-cli-app-version/_app_/initializers/app-version.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var ember_cli_app_version_initializer_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ember-cli-app-version/initializer-factory */ \"../rewritten-packages/ember-cli-app-version.15f7f965/node_modules/ember-cli-app-version/initializer-factory.js\");\n/* harmony import */ var _config_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/environment */ \"./config/environment.js\");\n\n\nlet name, version;\nif (_config_environment__WEBPACK_IMPORTED_MODULE_1__[\"default\"].APP) {\n  name = _config_environment__WEBPACK_IMPORTED_MODULE_1__[\"default\"].APP.name;\n  version = _config_environment__WEBPACK_IMPORTED_MODULE_1__[\"default\"].APP.version;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'App Version',\n  initialize: (0,ember_cli_app_version_initializer_factory__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(name, version)\n});\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-cli-app-version.15f7f965/node_modules/ember-cli-app-version/_app_/initializers/app-version.js?");

/***/ }),

/***/ "../rewritten-packages/ember-cli-app-version.15f7f965/node_modules/ember-cli-app-version/initializer-factory.js":
/*!**********************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-cli-app-version.15f7f965/node_modules/ember-cli-app-version/initializer-factory.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ initializerFactory)\n/* harmony export */ });\n/* harmony import */ var ember__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ember */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2Fember&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var ember__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ember__WEBPACK_IMPORTED_MODULE_0__);\n\nconst {\n  libraries\n} = (ember__WEBPACK_IMPORTED_MODULE_0___default());\nfunction initializerFactory(name, version) {\n  let registered = false;\n  return function () {\n    if (!registered && name && version) {\n      libraries.register(name, version);\n      registered = true;\n    }\n  };\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-cli-app-version.15f7f965/node_modules/ember-cli-app-version/initializer-factory.js?");

/***/ }),

/***/ "../rewritten-packages/ember-cli-app-version.15f7f965/node_modules/ember-cli-app-version/utils/regexp.js":
/*!***************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-cli-app-version.15f7f965/node_modules/ember-cli-app-version/utils/regexp.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shaRegExp: () => (/* binding */ shaRegExp),\n/* harmony export */   versionExtendedRegExp: () => (/* binding */ versionExtendedRegExp),\n/* harmony export */   versionRegExp: () => (/* binding */ versionRegExp)\n/* harmony export */ });\nconst versionRegExp = /\\d+[.]\\d+[.]\\d+/; // Match any number of 3 sections of digits separated by .\nconst versionExtendedRegExp = /\\d+[.]\\d+[.]\\d+-[a-z]*([.]\\d+)?/; // Match the above but also hyphen followed by any number of lowercase letters, then optionally period and digits\nconst shaRegExp = /[a-z\\d]{8}$/; // Match 8 lowercase letters and digits, at the end of the string only (to avoid matching with version extended part)\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-cli-app-version.15f7f965/node_modules/ember-cli-app-version/utils/regexp.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/-private/core.js":
/*!******************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/-private/core.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DS: () => (/* binding */ DS),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_application_namespace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/application/namespace */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fapplication%2Fnamespace&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_application_namespace__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_application_namespace__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ember__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ember */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2Fember&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var ember__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ember__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var ember_data_version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ember-data/version */ \"../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/version.js\");\n\n\n\nconst DS = _ember_application_namespace__WEBPACK_IMPORTED_MODULE_0___default().create({\n  // @ts-expect-error ember-source types are wrong\n  VERSION: ember_data_version__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  name: 'DS'\n});\nif ((ember__WEBPACK_IMPORTED_MODULE_1___default().libraries)) {\n  ember__WEBPACK_IMPORTED_MODULE_1___default().libraries.registerCoreLibrary('Ember Data', ember_data_version__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DS);\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/-private/core.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/-private/index.js":
/*!*******************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/-private/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DS: () => (/* reexport safe */ _core__WEBPACK_IMPORTED_MODULE_5__.DS),\n/* harmony export */   Errors: () => (/* reexport safe */ _ember_data_model_private__WEBPACK_IMPORTED_MODULE_6__.Errors),\n/* harmony export */   ManyArray: () => (/* reexport safe */ _ember_data_model_private__WEBPACK_IMPORTED_MODULE_6__.ManyArray),\n/* harmony export */   PromiseArray: () => (/* binding */ PromiseArray),\n/* harmony export */   PromiseManyArray: () => (/* reexport safe */ _ember_data_model_private__WEBPACK_IMPORTED_MODULE_6__.PromiseManyArray),\n/* harmony export */   PromiseObject: () => (/* binding */ PromiseObject),\n/* harmony export */   RecordArrayManager: () => (/* reexport safe */ _ember_data_store_private__WEBPACK_IMPORTED_MODULE_8__.RecordArrayManager),\n/* harmony export */   Snapshot: () => (/* reexport safe */ _ember_data_legacy_compat_private__WEBPACK_IMPORTED_MODULE_7__.Snapshot),\n/* harmony export */   SnapshotRecordArray: () => (/* reexport safe */ _ember_data_legacy_compat_private__WEBPACK_IMPORTED_MODULE_7__.SnapshotRecordArray),\n/* harmony export */   Store: () => (/* reexport safe */ _store__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   coerceId: () => (/* reexport safe */ _ember_data_store_private__WEBPACK_IMPORTED_MODULE_8__.coerceId)\n/* harmony export */ });\n/* harmony import */ var _ember_array_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/array/proxy */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Farray%2Fproxy&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_array_proxy__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_array_proxy__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_object_promise_proxy_mixin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/object/promise-proxy-mixin */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject%2Fpromise-proxy-mixin&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object_promise_proxy_mixin__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_object_promise_proxy_mixin__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _ember_object_proxy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember/object/proxy */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject%2Fproxy&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object_proxy__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ember_object_proxy__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store */ \"../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/store.js\");\n/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./core */ \"../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/-private/core.js\");\n/* harmony import */ var _ember_data_model_private__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ember-data/model/-private */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/-private.js\");\n/* harmony import */ var _ember_data_legacy_compat_private__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ember-data/legacy-compat/-private */ \"../rewritten-packages/@ember-data/legacy-compat.e84b6420/node_modules/@ember-data/legacy-compat/-private.js\");\n/* harmony import */ var _ember_data_store_private__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ember-data/store/-private */ \"../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/-private.js\");\n// public\n\n\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.deprecate)('Importing from `ember-data/-private` is deprecated without replacement.', false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n\n\n\n\n\n\nconst PromiseArray = _ember_array_proxy__WEBPACK_IMPORTED_MODULE_0___default().extend((_ember_object_promise_proxy_mixin__WEBPACK_IMPORTED_MODULE_2___default()));\nconst PromiseObject = _ember_object_proxy__WEBPACK_IMPORTED_MODULE_3___default().extend((_ember_object_promise_proxy_mixin__WEBPACK_IMPORTED_MODULE_2___default()));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/-private/index.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/initializers/ember-data.js":
/*!**********************************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/initializers/ember-data.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n  This code initializes EmberData in an Ember application.\n*/\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'ember-data',\n  initialize(application) {\n    application.registerOptionsForType('serializer', {\n      singleton: false\n    });\n    application.registerOptionsForType('adapter', {\n      singleton: false\n    });\n  }\n});\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/initializers/ember-data.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/services/store.js":
/*!*************************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/services/store.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ ember_data_store__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ember_data_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ember-data/store */ \"../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/store.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(\"You are relying on ember-data auto-magically installing the store service. Use `export { default } from 'ember-data/store';` in app/services/store.js instead\", false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/services/store.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/transforms/boolean.js":
/*!*****************************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/transforms/boolean.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_data_serializer_private__WEBPACK_IMPORTED_MODULE_1__.BooleanTransform)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_serializer_private__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/serializer/-private */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/-private.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(\"You are relying on ember-data auto-magically installing the BooleanTransform. Use `export { BooleanTransform as default } from '@ember-data/serializer/transform';` in app/transforms/boolean.js instead\", false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/transforms/boolean.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/transforms/date.js":
/*!**************************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/transforms/date.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_data_serializer_private__WEBPACK_IMPORTED_MODULE_1__.DateTransform)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_serializer_private__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/serializer/-private */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/-private.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(\"You are relying on ember-data auto-magically installing the DateTransform. Use `export { DateTransform as default } from '@ember-data/serializer/transform';` in app/transforms/date.js instead\", false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/transforms/date.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/transforms/number.js":
/*!****************************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/transforms/number.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_data_serializer_private__WEBPACK_IMPORTED_MODULE_1__.NumberTransform)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_serializer_private__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/serializer/-private */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/-private.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(\"You are relying on ember-data auto-magically installing the NumberTransform. Use `export { NumberTransform as default } from '@ember-data/serializer/transform';` in app/transforms/number.js instead\", false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/transforms/number.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/transforms/string.js":
/*!****************************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/transforms/string.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_data_serializer_private__WEBPACK_IMPORTED_MODULE_1__.StringTransform)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_serializer_private__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/serializer/-private */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/-private.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)(\"You are relying on ember-data auto-magically installing the StringTransform. Use `export { StringTransform as default } from '@ember-data/serializer/transform';` in app/transforms/string.js instead\", false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/_app_/transforms/string.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/adapter.js":
/*!************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/adapter.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_data_adapter__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/adapter */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/index.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)('Importing from `ember-data/adapter` is deprecated. Please import from `@ember-data/adapter` instead.', false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/adapter.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/adapters/errors.js":
/*!********************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/adapters/errors.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* reexport safe */ _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_1__.AbortError),\n/* harmony export */   AdapterError: () => (/* reexport safe */ _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   ConflictError: () => (/* reexport safe */ _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_1__.ConflictError),\n/* harmony export */   ForbiddenError: () => (/* reexport safe */ _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_1__.ForbiddenError),\n/* harmony export */   InvalidError: () => (/* reexport safe */ _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_1__.InvalidError),\n/* harmony export */   NotFoundError: () => (/* reexport safe */ _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_1__.NotFoundError),\n/* harmony export */   ServerError: () => (/* reexport safe */ _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_1__.ServerError),\n/* harmony export */   TimeoutError: () => (/* reexport safe */ _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_1__.TimeoutError),\n/* harmony export */   UnauthorizedError: () => (/* reexport safe */ _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_1__.UnauthorizedError)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/adapter/error */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/error.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)('Importing from `ember-data/adapters/errors` is deprecated. Please import from `@ember-data/adapter` instead.', false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/adapters/errors.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/adapters/json-api.js":
/*!**********************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/adapters/json-api.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_data_adapter_json_api__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_adapter_json_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/adapter/json-api */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/json-api.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)('Importing from `ember-data/adapters/json-api` is deprecated. Please import from `@ember-data/adapter/json-api` instead.', false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/adapters/json-api.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/adapters/rest.js":
/*!******************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/adapters/rest.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_data_adapter_rest__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_adapter_rest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/adapter/rest */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/rest.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)('Importing from `ember-data/adapters/rest` is deprecated. Please import from `@ember-data/adapter/rest` instead.', false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/adapters/rest.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/attr.js":
/*!*********************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/attr.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_data_model__WEBPACK_IMPORTED_MODULE_1__.attr)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/model */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/index.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)('Importing from `ember-data/attr` is deprecated. Please import from `@ember-data/model` instead.', false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/attr.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/index.js":
/*!**********************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/adapter */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/index.js\");\n/* harmony import */ var _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember-data/adapter/error */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/error.js\");\n/* harmony import */ var _ember_data_adapter_json_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember-data/adapter/json-api */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/json-api.js\");\n/* harmony import */ var _ember_data_adapter_rest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember-data/adapter/rest */ \"../rewritten-packages/@ember-data/adapter.85bda234/node_modules/@ember-data/adapter/rest.js\");\n/* harmony import */ var _ember_data_model__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ember-data/model */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/index.js\");\n/* harmony import */ var _ember_data_serializer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ember-data/serializer */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/index.js\");\n/* harmony import */ var _ember_data_serializer_private__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ember-data/serializer/-private */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/-private.js\");\n/* harmony import */ var _ember_data_serializer_json__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ember-data/serializer/json */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/json.js\");\n/* harmony import */ var _ember_data_serializer_json_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ember-data/serializer/json-api */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/json-api.js\");\n/* harmony import */ var _ember_data_serializer_rest__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ember-data/serializer/rest */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/rest.js\");\n/* harmony import */ var _ember_data_serializer_transform__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ember-data/serializer/transform */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/transform.js\");\n/* harmony import */ var _private__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./-private */ \"../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/-private/index.js\");\n/* harmony import */ var _setup_container__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./setup-container */ \"../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/setup-container.js\");\n/* harmony import */ var _embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../@embroider/macros/src/addon/es-compat2 */ \"../../@embroider/macros/src/addon/es-compat2.js\");\n/**\n <p align=\"center\">\n  <img\n    class=\"project-logo\"\n    src=\"https://raw.githubusercontent.com/emberjs/data/4612c9354e4c54d53327ec2cf21955075ce21294/ember-data-logo-light.svg#gh-light-mode-only\"\n    alt=\"EmberData\"\n    width=\"240px\"\n    title=\"EmberData\"\n    />\n</p>\n\n<p align=\"center\">The lightweight reactive data library for JavaScript applications</p>\n\n---\n\nWrangle your application's data management with scalable patterns for developer productivity.\n\n- ⚡️  Committed to Best-In-Class Performance\n- 🌲 Focused on being as svelte as possible\n- 🚀 SSR Ready\n- 🔜 Typescript Support\n- 🐹 Built with ♥️ by [Ember](https://emberjs.com)\n- ⚛️ Supports any API: `GraphQL` `JSON:API` `REST` `tRPC` ...bespoke or a mix\n\n### 📖 On This Page\n\n- [Overview](./#overview)\n  - [Architecture](#🪜-architecture)\n  - [Basic Installation](#basic-installation)\n  - [Advanced Installation](#advanced-installation)\n- [Configuration](#configuration)\n  - [Deprecation Stripping](#deprecation-stripping)\n  - [randomUUID polyfill](#randomuuid-polyfill)\n  - [Removing inspector support in production](#removing-inspector-support-in-production)\n  - [Debugging](#debugging)\n\n\n# Overview\n\n*Ember*‍**Data** is a lightweight reactive data library for JavaScript applications that provides composable primitives for ordering query/mutation/peek flows, managing network and cache, and reducing data for presentation.\n\n## 🪜 Architecture\n\nThe core of *Ember*‍**Data** is the `Store`, which coordinates interaction between your application, the `Cache`, and sources of data (such as your `API` or a local persistence layer).\nOptionally, the Store can be configured to hydrate the response data into rich presentation classes.\n\n*Ember*‍**Data** is both resource centric and document centric in it's approach to caching, requesting and presenting data. Your application's configuration and usage drives which is important and when.\n\nThe `Store` is a **coordinator**. When using a `Store` you configure what cache to use, how cache data should be presented to the UI, and where it should look for requested data when it is not available in the cache.\n\nThis coordination is handled opaquely to the nature of the requests issued and the format of the data being handled. This approach gives applications broad flexibility to configure *Ember*‍**Data** to best suite their needs. This makes *Ember*‍**Data** a powerful solution for applications regardless of their size and complexity.\n\n*Ember*‍**Data** is designed to scale, with a religious focus on performance and asset-size to keep its footprint small but speedy while still being able to handle large complex APIs in huge data-driven applications with no additional code and no added application complexity. It's goal is to prevent applications from writing code to manage data that is difficult to maintain or reason about.\n\n*Ember*‍**Data**'s power comes not from specific features, data formats, or adherence to specific API specs such as `JSON:API` `trpc` or `GraphQL`, but from solid conventions around requesting and mutating data developed over decades of experience scaling developer productivity.\n\n## Basic Installation\n\nInstall using your javascript package manager of choice. For instance with [pnpm](https://pnpm.io/)\n\n```no-highlight\npnpm add ember-data\n```\n\n`ember-data` is installed by default for new applications generated with `ember-cli`. You can check what version is installed by looking in the `devDependencies` hash of your project's [package.json](https://docs.npmjs.com/cli/v8/configuring-npm/package-json) file.\n\nIf you have generated a new `Ember` application using `ember-cli` but do\nnot wish to use `ember-data`, remove `ember-data` from your project's `package.json` file and run your package manager's install command to update your lockfile.\n\n## Advanced Installation\n\n*Ember*‍**Data** is organized into primitives that compose together via public APIs.\n\n- [@ember-data/store](/ember-data/release/modules/@ember-data%2Fstore) is the core and handles coordination\n- [@ember-data/json-api](/ember-data/release/modules/@ember-data%2Fjson-api) provides a resource cache for JSON:API structured data. It integrates with the store via the hook `createCache`\n- [@ember-data/model](/ember-data/release/modules/@ember-data%2Fmodel) is a presentation layer, it integrates with the store via the hooks `instantiateRecord` and `teardownRecord`.\n- [@ember-data/adapter](/ember-data/release/modules/@ember-data%2Fadapter) provides various network API integrations for APIS built over specific REST or JSON:API conventions.\n- [@ember-data/serializer](/ember-data/release/modules/@ember-data%2Fserializer) pairs with `@ember-data/adapter` to normalize and serialize data to and from an API format into the `JSON:API` format understood by `@ember-data/json-api`.\n- [@ember-data/debug](/ember-data/release/modules/@ember-data%2Fdebug) provides debugging support for the `ember-inspector`.\n- **ember-data** is a \"meta\" package which bundles all of these together for convenience\n\nThe packages interop with each other through well defined public API boundaries. The core\nof the library is the store provided by `@ember-data/store`, while each of the other libraries plugs into the store when installed. Because these packages interop via fully\npublic APIs, other libraries or applications may provide their own implementations. For instance, [ember-m3](https://github.com/hjdivad/ember-m3) is a commonly used presentation and cache implementation suitable for complex resource objects and graphs.\n\n## Configuration\n\n### Deprecation Stripping\n\n*Ember*‍**Data** allows users to opt-in and remove code that exists to support deprecated behaviors.\n\nIf your app has resolved all deprecations present in a given version, you may specify that version as your \"compatibility\" version to remove the code that supported the deprecated behavior from your app.\n\n```ts\nlet app = new EmberApp(defaults, {\n  emberData: {\n    compatWith: '4.8',\n  },\n});\n```\n\n- [Full Documentation](https://api.emberjs.com/ember-data/release/modules/@ember-data%2Fdeprecations)\n\n### randomUUID polyfill\n\n*Ember*‍**Data** uses `UUID V4` by default to generate identifiers for new data created on the client. Identifier generation is configurable, but we also for convenience will polyfill\nthe necessary feature if your browser support or deployment environment demands it. To\nactivate this polyfill:\n\n```ts\nlet app = new EmberApp(defaults, {\n  '@embroider/macros': {\n    setConfig: {\n      '@ember-data/store': {\n        polyfillUUID: true\n      },\n    },\n  },\n});\n```\n\n### removing inspector support in production\n\nIf you do not with to ship inspector support in your production application, you can specify\nthat all support for it should be stripped from the build.\n\n```ts\nlet app = new EmberApp(defaults, {\n  emberData: {\n    includeDataAdapterInProduction: false\n  }\n});\n```\n\n- [Full Documentation](https://api.emberjs.com/ember-data/release/modules/@ember-data%2Fdebug)\n\n### Debugging\n\nMany portions of the internals are helpfully instrumented with logging that can be activated\nat build time. This instrumentation is always removed from production builds or any builds\nthat has not explicitly activated it. To activate it set the appropriate flag to `true`.\n\n```ts\n  let app = new EmberApp(defaults, {\n    emberData: {\n      debug: {\n          LOG_PAYLOADS: false, // data store received to update cache with\n          LOG_OPERATIONS: false, // updates to cache remote state\n          LOG_MUTATIONS: false, // updates to cache local state\n          LOG_NOTIFICATIONS: false,\n          LOG_REQUESTS: false, // log Requests issued via the request manager\n          LOG_REQUEST_STATUS: false,\n          LOG_IDENTIFIERS: false,\n          LOG_GRAPH: false,\n          LOG_INSTANCE_CACHE: false,\n      }\n    }\n  });\n  ```\n\n @module ember-data-overview\n @main ember-data-overview\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)('Importing from `ember-data` is deprecated. Please import from the appropriate `@ember-data/*` instead.', false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\nfunction upgradeDS(obj) {}\nupgradeDS(_private__WEBPACK_IMPORTED_MODULE_12__.DS);\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.Store = _private__WEBPACK_IMPORTED_MODULE_12__.Store;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.PromiseArray = _private__WEBPACK_IMPORTED_MODULE_12__.PromiseArray;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.PromiseObject = _private__WEBPACK_IMPORTED_MODULE_12__.PromiseObject;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.PromiseManyArray = _private__WEBPACK_IMPORTED_MODULE_12__.PromiseManyArray;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.Model = _ember_data_model__WEBPACK_IMPORTED_MODULE_5__[\"default\"];\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.attr = _ember_data_model__WEBPACK_IMPORTED_MODULE_5__.attr;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.Errors = _private__WEBPACK_IMPORTED_MODULE_12__.Errors;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.Snapshot = _private__WEBPACK_IMPORTED_MODULE_12__.Snapshot;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.Adapter = _ember_data_adapter__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.AdapterError = _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.InvalidError = _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_2__.InvalidError;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.TimeoutError = _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_2__.TimeoutError;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.AbortError = _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_2__.AbortError;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.UnauthorizedError = _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_2__.UnauthorizedError;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.ForbiddenError = _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_2__.ForbiddenError;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.NotFoundError = _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_2__.NotFoundError;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.ConflictError = _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_2__.ConflictError;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.ServerError = _ember_data_adapter_error__WEBPACK_IMPORTED_MODULE_2__.ServerError;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.Serializer = _ember_data_serializer__WEBPACK_IMPORTED_MODULE_6__[\"default\"];\n{\n  // @ts-expect-error untyped\n  _private__WEBPACK_IMPORTED_MODULE_12__.DS.DebugAdapter = (0,_embroider_macros_src_addon_es_compat2__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(__webpack_require__(/*! @ember-data/debug */ \"../rewritten-packages/@ember-data/debug.cbe3cfb1/node_modules/@ember-data/debug/index.js\")).default;\n}\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.ManyArray = _private__WEBPACK_IMPORTED_MODULE_12__.ManyArray;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.RecordArrayManager = _private__WEBPACK_IMPORTED_MODULE_12__.RecordArrayManager;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.RESTAdapter = _ember_data_adapter_rest__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.BuildURLMixin = _ember_data_adapter__WEBPACK_IMPORTED_MODULE_1__.BuildURLMixin;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.RESTSerializer = _ember_data_serializer_rest__WEBPACK_IMPORTED_MODULE_10__[\"default\"];\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.JSONSerializer = _ember_data_serializer_json__WEBPACK_IMPORTED_MODULE_8__[\"default\"];\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.JSONAPIAdapter = _ember_data_adapter_json_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.JSONAPISerializer = _ember_data_serializer_json_api__WEBPACK_IMPORTED_MODULE_9__[\"default\"];\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.Transform = _ember_data_serializer_transform__WEBPACK_IMPORTED_MODULE_11__[\"default\"];\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.DateTransform = _ember_data_serializer_private__WEBPACK_IMPORTED_MODULE_7__.DateTransform;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.StringTransform = _ember_data_serializer_private__WEBPACK_IMPORTED_MODULE_7__.StringTransform;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.NumberTransform = _ember_data_serializer_private__WEBPACK_IMPORTED_MODULE_7__.NumberTransform;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.BooleanTransform = _ember_data_serializer_private__WEBPACK_IMPORTED_MODULE_7__.BooleanTransform;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.EmbeddedRecordsMixin = _ember_data_serializer_rest__WEBPACK_IMPORTED_MODULE_10__.EmbeddedRecordsMixin;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.belongsTo = _ember_data_model__WEBPACK_IMPORTED_MODULE_5__.belongsTo;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS.hasMany = _ember_data_model__WEBPACK_IMPORTED_MODULE_5__.hasMany;\n_private__WEBPACK_IMPORTED_MODULE_12__.DS._setupContainer = _setup_container__WEBPACK_IMPORTED_MODULE_13__[\"default\"];\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_private__WEBPACK_IMPORTED_MODULE_12__.DS);\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/index.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/model.js":
/*!**********************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/model.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_data_model__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/model */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/index.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)('Importing from `ember-data/model` is deprecated. Please import from `@ember-data/model` instead.', false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/model.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/relationships.js":
/*!******************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/relationships.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   belongsTo: () => (/* reexport safe */ _ember_data_model__WEBPACK_IMPORTED_MODULE_1__.belongsTo),\n/* harmony export */   hasMany: () => (/* reexport safe */ _ember_data_model__WEBPACK_IMPORTED_MODULE_1__.hasMany)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/model */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/index.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)('Importing from `ember-data/relationships` is deprecated. Please import from `@ember-data/model` instead.', false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/relationships.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/serializer.js":
/*!***************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/serializer.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_data_serializer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_serializer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/serializer */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/index.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)('Importing from `ember-data/serializer` is deprecated. Please import from `@ember-data/serializer` instead.', false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/serializer.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/serializers/embedded-records-mixin.js":
/*!***************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/serializers/embedded-records-mixin.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_data_serializer_rest__WEBPACK_IMPORTED_MODULE_1__.EmbeddedRecordsMixin)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_serializer_rest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/serializer/rest */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/rest.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)('Importing from `ember-data/serializers/embedded-records-mixin` is deprecated. Please import from `@ember-data/serializer/rest` instead.', false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/serializers/embedded-records-mixin.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/serializers/json-api.js":
/*!*************************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/serializers/json-api.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_data_serializer_json_api__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_serializer_json_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/serializer/json-api */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/json-api.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)('Importing from `ember-data/serializers/json-api` is deprecated. Please import from `@ember-data/serializer/json-api` instead.', false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/serializers/json-api.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/serializers/json.js":
/*!*********************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/serializers/json.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_data_serializer_json__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_serializer_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/serializer/json */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/json.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)('Importing from `ember-data/serializers/json` is deprecated. Please import from `@ember-data/serializer/json` instead.', false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/serializers/json.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/serializers/rest.js":
/*!*********************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/serializers/rest.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_data_serializer_rest__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_serializer_rest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/serializer/rest */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/rest.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)('Importing from `ember-data/serializers/rest` is deprecated. Please import from `@ember-data/serializer/rest` instead.', false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/serializers/rest.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/setup-container.js":
/*!********************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/setup-container.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ setupContainer)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction initializeStore(application) {\n  application.registerOptionsForType('serializer', {\n    singleton: false\n  });\n  application.registerOptionsForType('adapter', {\n    singleton: false\n  });\n}\nfunction setupContainer(application) {\n  initializeStore(application);\n}\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)('Importing from `ember-data/setup-container` is deprecated without replacement', false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/setup-container.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/store.js":
/*!**********************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/store.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Store)\n/* harmony export */ });\n/* harmony import */ var _ember_data_json_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember-data/json-api */ \"../rewritten-packages/@ember-data/json-api.d7f0a39f/node_modules/@ember-data/json-api/index.js\");\n/* harmony import */ var _ember_data_legacy_compat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/legacy-compat */ \"../rewritten-packages/@ember-data/legacy-compat.e84b6420/node_modules/@ember-data/legacy-compat/index.js\");\n/* harmony import */ var _ember_data_model_hooks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember-data/model/hooks */ \"../rewritten-packages/@ember-data/model.9cfa41c3/node_modules/@ember-data/model/hooks.js\");\n/* harmony import */ var _ember_data_request__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember-data/request */ \"../rewritten-packages/@ember-data/request.7c2e6d52/node_modules/@ember-data/request/index.js\");\n/* harmony import */ var _ember_data_request_fetch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember-data/request/fetch */ \"../rewritten-packages/@ember-data/request.7c2e6d52/node_modules/@ember-data/request/fetch.js\");\n/* harmony import */ var _ember_data_store__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ember-data/store */ \"../rewritten-packages/@ember-data/store.a4360448/node_modules/@ember-data/store/index.js\");\n\n\n\n\n\n\nfunction hasRequestManager(store) {\n  return 'requestManager' in store;\n}\nclass Store extends _ember_data_store__WEBPACK_IMPORTED_MODULE_5__[\"default\"] {\n  constructor(args) {\n    super(args);\n    this.adapterFor = _ember_data_legacy_compat__WEBPACK_IMPORTED_MODULE_1__.adapterFor;\n    this.serializerFor = _ember_data_legacy_compat__WEBPACK_IMPORTED_MODULE_1__.serializerFor;\n    this.pushPayload = _ember_data_legacy_compat__WEBPACK_IMPORTED_MODULE_1__.pushPayload;\n    this.normalize = _ember_data_legacy_compat__WEBPACK_IMPORTED_MODULE_1__.normalize;\n    this.serializeRecord = _ember_data_legacy_compat__WEBPACK_IMPORTED_MODULE_1__.serializeRecord;\n    if (!hasRequestManager(this)) {\n      this.requestManager = new _ember_data_request__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n      this.requestManager.use([_ember_data_legacy_compat__WEBPACK_IMPORTED_MODULE_1__.LegacyNetworkHandler, _ember_data_request_fetch__WEBPACK_IMPORTED_MODULE_4__[\"default\"]]);\n    }\n    this.requestManager.useCache(_ember_data_store__WEBPACK_IMPORTED_MODULE_5__.CacheHandler);\n    this.registerSchema((0,_ember_data_model_hooks__WEBPACK_IMPORTED_MODULE_2__.buildSchema)(this));\n  }\n  createCache(storeWrapper) {\n    return new _ember_data_json_api__WEBPACK_IMPORTED_MODULE_0__[\"default\"](storeWrapper);\n  }\n  instantiateRecord(identifier, createRecordArgs) {\n    return _ember_data_model_hooks__WEBPACK_IMPORTED_MODULE_2__.instantiateRecord.call(this, identifier, createRecordArgs);\n  }\n  teardownRecord(record) {\n    _ember_data_model_hooks__WEBPACK_IMPORTED_MODULE_2__.teardownRecord.call(this, record);\n  }\n  modelFor(type) {\n    return _ember_data_model_hooks__WEBPACK_IMPORTED_MODULE_2__.modelFor.call(this, type) || super.modelFor(type);\n  }\n  destroy() {\n    _ember_data_legacy_compat__WEBPACK_IMPORTED_MODULE_1__.cleanup.call(this);\n    super.destroy();\n  }\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/store.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/transform.js":
/*!**************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/transform.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _ember_data_serializer_transform__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_data_serializer_transform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember-data/serializer/transform */ \"../rewritten-packages/@ember-data/serializer.677d83bc/node_modules/@ember-data/serializer/transform.js\");\n\n\n( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.deprecate)('Importing from `ember-data/transform` is deprecated. Please import from `@ember-data/serializer/transform` instead.', false, {\n  id: 'ember-data:deprecate-legacy-imports',\n  for: 'ember-data',\n  until: '6.0',\n  since: {\n    enabled: '5.2',\n    available: '5.2'\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/transform.js?");

/***/ }),

/***/ "../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/version.js":
/*!************************************************************************************!*\
  !*** ../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/version.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"5.3.3\");\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-data.f323c51d/node_modules/ember-data/version.js?");

/***/ }),

/***/ "../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/_fastboot_/instance-initializers/setup-fetch.js":
/*!***************************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/_fastboot_/instance-initializers/setup-fetch.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fetch */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2Ffetch&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fetch__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/**\n * To allow relative URLs for Fastboot mode, we need the per request information\n * from the fastboot service. Then we save the request from fastboot info.\n * On each fetch with relative url we get host and protocol from it.\n */\nfunction patchFetchForRelativeURLs(instance) {\n  const fastboot = instance.lookup('service:fastboot');\n  (0,fetch__WEBPACK_IMPORTED_MODULE_0__.setupFastboot)(fastboot.get('request'));\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'fetch',\n  initialize: patchFetchForRelativeURLs\n});\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/_fastboot_/instance-initializers/setup-fetch.js?");

/***/ }),

/***/ "../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/errors.js":
/*!*************************************************************************************!*\
  !*** ../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/errors.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAbortError: () => (/* binding */ isAbortError),\n/* harmony export */   isBadRequestResponse: () => (/* binding */ isBadRequestResponse),\n/* harmony export */   isConflictResponse: () => (/* binding */ isConflictResponse),\n/* harmony export */   isForbiddenResponse: () => (/* binding */ isForbiddenResponse),\n/* harmony export */   isGoneResponse: () => (/* binding */ isGoneResponse),\n/* harmony export */   isInvalidResponse: () => (/* binding */ isInvalidResponse),\n/* harmony export */   isNotFoundResponse: () => (/* binding */ isNotFoundResponse),\n/* harmony export */   isServerErrorResponse: () => (/* binding */ isServerErrorResponse),\n/* harmony export */   isUnauthorizedResponse: () => (/* binding */ isUnauthorizedResponse)\n/* harmony export */ });\n/**\n * Checks if the given response represents an unauthorized request error\n */\nfunction isUnauthorizedResponse(response) {\n  return response.status === 401;\n}\n\n/**\n * Checks if the given response represents a forbidden request error\n */\nfunction isForbiddenResponse(response) {\n  return response.status === 403;\n}\n\n/**\n * Checks if the given response represents an invalid request error\n */\nfunction isInvalidResponse(response) {\n  return response.status === 422;\n}\n\n/**\n * Checks if the given response represents a bad request error\n */\nfunction isBadRequestResponse(response) {\n  return response.status === 400;\n}\n\n/**\n * Checks if the given response represents a \"not found\" error\n */\nfunction isNotFoundResponse(response) {\n  return response.status === 404;\n}\n\n/**\n * Checks if the given response represents a \"gone\" error\n */\nfunction isGoneResponse(response) {\n  return response.status === 410;\n}\n\n/**\n * Checks if the given error is an \"abort\" error\n */\nfunction isAbortError(error) {\n  return error.name == 'AbortError';\n}\n\n/**\n * Checks if the given response represents a conflict error\n */\nfunction isConflictResponse(response) {\n  return response.status === 409;\n}\n\n/**\n * Checks if the given response represents a server error\n */\nfunction isServerErrorResponse(response) {\n  return response.status >= 500 && response.status < 600;\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/errors.js?");

/***/ }),

/***/ "../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/types.js":
/*!************************************************************************************!*\
  !*** ../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/types.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject)\n/* harmony export */ });\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/types.js?");

/***/ }),

/***/ "../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/utils/determine-body-promise.js":
/*!***********************************************************************************************************!*\
  !*** ../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/utils/determine-body-promise.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ determineBodyPromise)\n/* harmony export */ });\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/**\n * Function that always attempts to parse the response as json, and if an error is thrown,\n * returns `undefined` if the response is successful and has a status code of 204 (No Content),\n * or 205 (Reset Content) or if the request method was 'HEAD', and the plain payload otherwise.\n */\nfunction determineBodyPromise(response, requestData) {\n  return response.text().then(function (payload) {\n    let ret = payload;\n    try {\n      ret = JSON.parse(payload);\n    } catch (error) {\n      if (!(error instanceof SyntaxError)) {\n        throw error;\n      }\n      const status = response.status;\n      if (response.ok && (status === 204 || status === 205 || requestData.method === 'HEAD')) {\n        ret = undefined;\n      } else {\n        (0,_ember_debug__WEBPACK_IMPORTED_MODULE_0__.debug)(`This response was unable to be parsed as json: ${payload}`);\n      }\n    }\n    return ret;\n  });\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/utils/determine-body-promise.js?");

/***/ }),

/***/ "../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/utils/mung-options-for-fetch.js":
/*!***********************************************************************************************************!*\
  !*** ../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/utils/mung-options-for-fetch.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ mungOptionsForFetch)\n/* harmony export */ });\n/* harmony import */ var _ember_polyfills__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/polyfills */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fpolyfills&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_polyfills__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_polyfills__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _serialize_query_params__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serialize-query-params */ \"../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/utils/serialize-query-params.js\");\n/* harmony import */ var ember_fetch_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ember-fetch/types */ \"../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/types.js\");\n\n\n\n\n/**\n * Helper function that translates the options passed to `jQuery.ajax` into a format that `fetch` expects.\n */\nfunction mungOptionsForFetch(options) {\n  const hash = (0,_ember_polyfills__WEBPACK_IMPORTED_MODULE_0__.assign)({\n    credentials: 'same-origin'\n  }, options);\n\n  // Default to 'GET' in case `type` is not passed in (mimics jQuery.ajax).\n  hash.method = (hash.method || hash.type || 'GET').toUpperCase();\n  if (hash.data) {\n    // GET and HEAD requests can't have a `body`\n    if (hash.method === 'GET' || hash.method === 'HEAD') {\n      // If no options are passed, Ember Data sets `data` to an empty object, which we test for.\n      if (Object.keys(hash.data).length) {\n        // Test if there are already query params in the url (mimics jQuey.ajax).\n        const queryParamDelimiter = hash.url.indexOf('?') > -1 ? '&' : '?';\n        hash.url += `${queryParamDelimiter}${(0,_serialize_query_params__WEBPACK_IMPORTED_MODULE_1__.serializeQueryParams)(hash.data)}`;\n      }\n    } else {\n      // NOTE: a request's body cannot be a POJO, so we stringify it if it is.\n      // JSON.stringify removes keys with values of `undefined` (mimics jQuery.ajax).\n      // If the data is not a POJO (it's a String, FormData, etc), we just set it.\n      // If the data is a string, we assume it's a stringified object.\n      if ((0,ember_fetch_types__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(hash.data)) {\n        hash.body = JSON.stringify(hash.data);\n      } else {\n        hash.body = hash.data;\n      }\n    }\n  }\n  return hash;\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/utils/mung-options-for-fetch.js?");

/***/ }),

/***/ "../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/utils/serialize-query-params.js":
/*!***********************************************************************************************************!*\
  !*** ../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/utils/serialize-query-params.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   serializeQueryParams: () => (/* binding */ serializeQueryParams)\n/* harmony export */ });\n/* harmony import */ var ember_fetch_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ember-fetch/types */ \"../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/types.js\");\n\nconst RBRACKET = /\\[\\]$/;\n\n/**\n * Helper function that turns the data/body of a request into a query param string.\n * This is directly copied from jQuery.param.\n */\nfunction serializeQueryParams(queryParamsObject) {\n  var s = [];\n  function buildParams(prefix, obj) {\n    var i, len, key;\n    if (prefix) {\n      if (Array.isArray(obj)) {\n        for (i = 0, len = obj.length; i < len; i++) {\n          if (RBRACKET.test(prefix)) {\n            add(s, prefix, obj[i]);\n          } else {\n            buildParams(prefix + '[' + (typeof obj[i] === 'object' ? i : '') + ']', obj[i]);\n          }\n        }\n      } else if ((0,ember_fetch_types__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(obj)) {\n        for (key in obj) {\n          buildParams(prefix + '[' + key + ']', obj[key]);\n        }\n      } else {\n        add(s, prefix, obj);\n      }\n    } else if (Array.isArray(obj)) {\n      for (i = 0, len = obj.length; i < len; i++) {\n        add(s, obj[i].name, obj[i].value);\n      }\n    } else {\n      for (key in obj) {\n        buildParams(key, obj[key]);\n      }\n    }\n    return s;\n  }\n  return buildParams('', queryParamsObject).join('&').replace(/%20/g, '+');\n}\n\n/**\n * Part of the `serializeQueryParams` helper function.\n */\nfunction add(s, k, v) {\n  // Strip out keys with undefined value and replace null values with\n  // empty strings (mimics jQuery.ajax)\n  if (v === undefined) {\n    return;\n  } else if (v === null) {\n    v = '';\n  }\n  v = typeof v === 'function' ? v() : v;\n  s[s.length] = `${encodeURIComponent(k)}=${encodeURIComponent(v)}`;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (serializeQueryParams);\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-fetch.da60d5ea/node_modules/ember-fetch/utils/serialize-query-params.js?");

/***/ }),

/***/ "../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/_app_/helpers/pluralize.js":
/*!**************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/_app_/helpers/pluralize.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var ember_inflector_lib_helpers_pluralize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ember-inflector/lib/helpers/pluralize */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/helpers/pluralize.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ember_inflector_lib_helpers_pluralize__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/_app_/helpers/pluralize.js?");

/***/ }),

/***/ "../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/_app_/helpers/singularize.js":
/*!****************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/_app_/helpers/singularize.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var ember_inflector_lib_helpers_singularize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ember-inflector/lib/helpers/singularize */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/helpers/singularize.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ember_inflector_lib_helpers_singularize__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/_app_/helpers/singularize.js?");

/***/ }),

/***/ "../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/index.js":
/*!********************************************************************************************!*\
  !*** ../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/index.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   pluralize: () => (/* reexport safe */ _lib_system__WEBPACK_IMPORTED_MODULE_0__.pluralize),\n/* harmony export */   singularize: () => (/* reexport safe */ _lib_system__WEBPACK_IMPORTED_MODULE_0__.singularize)\n/* harmony export */ });\n/* harmony import */ var _lib_system__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/system */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_lib_system__WEBPACK_IMPORTED_MODULE_0__.Inflector);\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/index.js?");

/***/ }),

/***/ "../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/helpers/pluralize.js":
/*!************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/helpers/pluralize.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var ember_inflector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ember-inflector */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/index.js\");\n/* harmony import */ var _utils_make_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/make-helper */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/utils/make-helper.js\");\n\n\n\n/**\n *\n * If you have Ember Inflector (such as if Ember Data is present),\n * pluralize a word. For example, turn \"ox\" into \"oxen\".\n *\n * Example:\n *\n * {{pluralize count myProperty}}\n * {{pluralize 1 \"oxen\"}}\n * {{pluralize myProperty}}\n * {{pluralize \"ox\"}}\n *\n * @for Ember.HTMLBars.helpers\n * @method pluralize\n * @param {Number|Property} [count] count of objects\n * @param {String|Property} word word to pluralize\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_make_helper__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(function (params, hash) {\n  let fullParams = new Array(...params);\n  if (fullParams.length === 2) {\n    fullParams.push({\n      withoutCount: hash[\"without-count\"]\n    });\n  }\n  return (0,ember_inflector__WEBPACK_IMPORTED_MODULE_0__.pluralize)(...fullParams);\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/helpers/pluralize.js?");

/***/ }),

/***/ "../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/helpers/singularize.js":
/*!**************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/helpers/singularize.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var ember_inflector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ember-inflector */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/index.js\");\n/* harmony import */ var _utils_make_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/make-helper */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/utils/make-helper.js\");\n\n\n\n/**\n *\n * If you have Ember Inflector (such as if Ember Data is present),\n * singularize a word. For example, turn \"oxen\" into \"ox\".\n *\n * Example:\n *\n * {{singularize myProperty}}\n * {{singularize \"oxen\"}}\n *\n * @for Ember.HTMLBars.helpers\n * @method singularize\n * @param {String|Property} word word to singularize\n*/\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_make_helper__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(function (params) {\n  return (0,ember_inflector__WEBPACK_IMPORTED_MODULE_0__.singularize)(params[0]);\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/helpers/singularize.js?");

/***/ }),

/***/ "../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system.js":
/*!*************************************************************************************************!*\
  !*** ../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Inflector: () => (/* reexport safe */ _system_inflector__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   pluralize: () => (/* reexport safe */ _system_string__WEBPACK_IMPORTED_MODULE_1__.pluralize),\n/* harmony export */   singularize: () => (/* reexport safe */ _system_string__WEBPACK_IMPORTED_MODULE_1__.singularize)\n/* harmony export */ });\n/* harmony import */ var _system_inflector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./system/inflector */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system/inflector.js\");\n/* harmony import */ var _system_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./system/string */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system/string.js\");\n\n\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system.js?");

/***/ }),

/***/ "../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system/inflections.js":
/*!*************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system/inflections.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  plurals: [[/$/, 's'], [/s$/i, 's'], [/^(ax|test)is$/i, '$1es'], [/(octop|vir)us$/i, '$1i'], [/(octop|vir)i$/i, '$1i'], [/(alias|status|bonus)$/i, '$1es'], [/(bu)s$/i, '$1ses'], [/(buffal|tomat)o$/i, '$1oes'], [/([ti])um$/i, '$1a'], [/([ti])a$/i, '$1a'], [/sis$/i, 'ses'], [/(?:([^f])fe|([lr])f)$/i, '$1$2ves'], [/(hive)$/i, '$1s'], [/([^aeiouy]|qu)y$/i, '$1ies'], [/(x|ch|ss|sh)$/i, '$1es'], [/(matr|vert|ind)(?:ix|ex)$/i, '$1ices'], [/^(m|l)ouse$/i, '$1ice'], [/^(m|l)ice$/i, '$1ice'], [/^(ox)$/i, '$1en'], [/^(oxen)$/i, '$1'], [/(quiz)$/i, '$1zes']],\n  singular: [[/s$/i, ''], [/(ss)$/i, '$1'], [/(n)ews$/i, '$1ews'], [/([ti])a$/i, '$1um'], [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, '$1sis'], [/(^analy)(sis|ses)$/i, '$1sis'], [/([^f])ves$/i, '$1fe'], [/(hive)s$/i, '$1'], [/(tive)s$/i, '$1'], [/([lr])ves$/i, '$1f'], [/([^aeiouy]|qu)ies$/i, '$1y'], [/(s)eries$/i, '$1eries'], [/(m)ovies$/i, '$1ovie'], [/(x|ch|ss|sh)es$/i, '$1'], [/^(m|l)ice$/i, '$1ouse'], [/(bus)(es)?$/i, '$1'], [/(o)es$/i, '$1'], [/(shoe)s$/i, '$1'], [/(cris|test)(is|es)$/i, '$1is'], [/^(a)x[ie]s$/i, '$1xis'], [/(octop|vir)(us|i)$/i, '$1us'], [/(alias|status|bonus)(es)?$/i, '$1'], [/^(ox)en/i, '$1'], [/(vert|ind)ices$/i, '$1ex'], [/(matr)ices$/i, '$1ix'], [/(quiz)zes$/i, '$1'], [/(database)s$/i, '$1']],\n  irregularPairs: [['person', 'people'], ['man', 'men'], ['child', 'children'], ['sex', 'sexes'], ['move', 'moves'], ['cow', 'kine'], ['zombie', 'zombies']],\n  uncountable: ['equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep', 'jeans', 'police']\n});\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system/inflections.js?");

/***/ }),

/***/ "../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system/inflector.js":
/*!***********************************************************************************************************!*\
  !*** ../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system/inflector.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/string */ \"../rewritten-packages/@ember/string.5601e258/node_modules/@ember/string/index.js\");\n/* harmony import */ var _inflections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./inflections */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system/inflections.js\");\n\n\nconst BLANK_REGEX = /^\\s*$/;\nconst LAST_WORD_DASHED_REGEX = /([\\w/-]+[_/\\s-])([a-z\\d]+$)/;\nconst LAST_WORD_CAMELIZED_REGEX = /([\\w/\\s-]+)([A-Z][a-z\\d]*$)/;\nconst CAMELIZED_REGEX = /[A-Z][a-z\\d]*$/;\nfunction loadUncountable(rules, uncountable) {\n  for (let i = 0, length = uncountable.length; i < length; i++) {\n    rules.uncountable[uncountable[i].toLowerCase()] = true;\n  }\n}\nfunction loadIrregular(rules, irregularPairs) {\n  let pair;\n  for (let i = 0, length = irregularPairs.length; i < length; i++) {\n    pair = irregularPairs[i];\n\n    //pluralizing\n    rules.irregular[pair[0].toLowerCase()] = pair[1];\n    rules.irregular[pair[1].toLowerCase()] = pair[1];\n\n    //singularizing\n    rules.irregularInverse[pair[1].toLowerCase()] = pair[0];\n    rules.irregularInverse[pair[0].toLowerCase()] = pair[0];\n  }\n}\n\n/**\n  Inflector.Ember provides a mechanism for supplying inflection rules for your\n  application. Ember includes a default set of inflection rules, and provides an\n  API for providing additional rules.\n\n  Examples:\n\n  Creating an inflector with no rules.\n\n  ```js\n  var inflector = new Ember.Inflector();\n  ```\n\n  Creating an inflector with the default ember ruleset.\n\n  ```js\n  var inflector = new Ember.Inflector(Ember.Inflector.defaultRules);\n\n  inflector.pluralize('cow'); //=> 'kine'\n  inflector.singularize('kine'); //=> 'cow'\n  ```\n\n  Creating an inflector and adding rules later.\n\n  ```javascript\n  var inflector = Ember.Inflector.inflector;\n\n  inflector.pluralize('advice'); // => 'advices'\n  inflector.uncountable('advice');\n  inflector.pluralize('advice'); // => 'advice'\n\n  inflector.pluralize('formula'); // => 'formulas'\n  inflector.irregular('formula', 'formulae');\n  inflector.pluralize('formula'); // => 'formulae'\n\n  // you would not need to add these as they are the default rules\n  inflector.plural(/$/, 's');\n  inflector.singular(/s$/i, '');\n  ```\n\n  Creating an inflector with a nondefault ruleset.\n\n  ```javascript\n  var rules = {\n    plurals:  [\n      [ /$/, 's' ]\n    ],\n    singular: [\n      [ /\\s$/, '' ]\n    ],\n    irregularPairs: [\n      [ 'cow', 'kine' ]\n    ],\n    uncountable: [ 'fish' ]\n  };\n\n  var inflector = new Ember.Inflector(rules);\n  ```\n\n  @class Inflector\n  @namespace Ember\n*/\nfunction Inflector(ruleSet) {\n  ruleSet = ruleSet || {};\n  ruleSet.uncountable = ruleSet.uncountable || makeDictionary();\n  ruleSet.irregularPairs = ruleSet.irregularPairs || makeDictionary();\n  const rules = this.rules = {\n    plurals: ruleSet.plurals || [],\n    singular: ruleSet.singular || [],\n    irregular: makeDictionary(),\n    irregularInverse: makeDictionary(),\n    uncountable: makeDictionary()\n  };\n  loadUncountable(rules, ruleSet.uncountable);\n  loadIrregular(rules, ruleSet.irregularPairs);\n  this.enableCache();\n}\nif (!Object.create && !Object.create(null).hasOwnProperty) {\n  throw new Error(\"This browser does not support Object.create(null), please polyfil with es5-sham: http://git.io/yBU2rg\");\n}\nfunction makeDictionary() {\n  var cache = Object.create(null);\n  cache['_dict'] = null;\n  delete cache['_dict'];\n  return cache;\n}\nInflector.prototype = {\n  /**\n    @public\n     As inflections can be costly, and commonly the same subset of words are repeatedly\n    inflected an optional cache is provided.\n     @method enableCache\n  */\n  enableCache() {\n    this.purgeCache();\n    this.singularize = function (word) {\n      this._cacheUsed = true;\n      return this._sCache[word] || (this._sCache[word] = this._singularize(word));\n    };\n    this.pluralize = function (numberOrWord, word, options = {}) {\n      this._cacheUsed = true;\n      var cacheKey = [numberOrWord, word, options.withoutCount];\n      return this._pCache[cacheKey] || (this._pCache[cacheKey] = this._pluralize(numberOrWord, word, options));\n    };\n  },\n  /**\n    @public\n     @method purgeCache\n  */\n  purgeCache() {\n    this._cacheUsed = false;\n    this._sCache = makeDictionary();\n    this._pCache = makeDictionary();\n  },\n  /**\n    @public\n    disable caching\n     @method disableCache;\n  */\n  disableCache() {\n    this._sCache = null;\n    this._pCache = null;\n    this.singularize = function (word) {\n      return this._singularize(word);\n    };\n    this.pluralize = function () {\n      return this._pluralize(...arguments);\n    };\n  },\n  /**\n    @method plural\n    @param {RegExp} regex\n    @param {String} string\n  */\n  plural(regex, string) {\n    if (this._cacheUsed) {\n      this.purgeCache();\n    }\n    this.rules.plurals.push([regex, string.toLowerCase()]);\n  },\n  /**\n    @method singular\n    @param {RegExp} regex\n    @param {String} string\n  */\n  singular(regex, string) {\n    if (this._cacheUsed) {\n      this.purgeCache();\n    }\n    this.rules.singular.push([regex, string.toLowerCase()]);\n  },\n  /**\n    @method uncountable\n    @param {String} regex\n  */\n  uncountable(string) {\n    if (this._cacheUsed) {\n      this.purgeCache();\n    }\n    loadUncountable(this.rules, [string.toLowerCase()]);\n  },\n  /**\n    @method irregular\n    @param {String} singular\n    @param {String} plural\n  */\n  irregular(singular, plural) {\n    if (this._cacheUsed) {\n      this.purgeCache();\n    }\n    loadIrregular(this.rules, [[singular, plural]]);\n  },\n  /**\n    @method pluralize\n    @param {String} word\n  */\n  pluralize() {\n    return this._pluralize(...arguments);\n  },\n  _pluralize(wordOrCount, word, options = {}) {\n    if (word === undefined) {\n      return this.inflect(wordOrCount, this.rules.plurals, this.rules.irregular);\n    }\n    if (parseFloat(wordOrCount) !== 1) {\n      word = this.inflect(word, this.rules.plurals, this.rules.irregular);\n    }\n    return options.withoutCount ? word : `${wordOrCount} ${word}`;\n  },\n  /**\n    @method singularize\n    @param {String} word\n  */\n  singularize(word) {\n    return this._singularize(word);\n  },\n  _singularize(word) {\n    return this.inflect(word, this.rules.singular, this.rules.irregularInverse);\n  },\n  /**\n    @protected\n     @method inflect\n    @param {String} word\n    @param {Object} typeRules\n    @param {Object} irregular\n  */\n  inflect(word, typeRules, irregular) {\n    let inflection, substitution, result, lowercase, wordSplit, lastWord, isBlank, isCamelized, rule, isUncountable;\n    isBlank = !word || BLANK_REGEX.test(word);\n    isCamelized = CAMELIZED_REGEX.test(word);\n    if (isBlank) {\n      return word;\n    }\n    lowercase = word.toLowerCase();\n    wordSplit = LAST_WORD_DASHED_REGEX.exec(word) || LAST_WORD_CAMELIZED_REGEX.exec(word);\n    if (wordSplit) {\n      lastWord = wordSplit[2].toLowerCase();\n    }\n    isUncountable = this.rules.uncountable[lowercase] || this.rules.uncountable[lastWord];\n    if (isUncountable) {\n      return word;\n    }\n    for (rule in irregular) {\n      if (lowercase.match(rule + \"$\")) {\n        substitution = irregular[rule];\n        if (isCamelized && irregular[lastWord]) {\n          substitution = (0,_ember_string__WEBPACK_IMPORTED_MODULE_0__.capitalize)(substitution);\n          rule = (0,_ember_string__WEBPACK_IMPORTED_MODULE_0__.capitalize)(rule);\n        }\n        return word.replace(new RegExp(rule, 'i'), substitution);\n      }\n    }\n    for (var i = typeRules.length, min = 0; i > min; i--) {\n      inflection = typeRules[i - 1];\n      rule = inflection[0];\n      if (rule.test(word)) {\n        break;\n      }\n    }\n    inflection = inflection || [];\n    rule = inflection[0];\n    substitution = inflection[1];\n    result = word.replace(rule, substitution);\n    return result;\n  }\n};\nInflector.defaultRules = _inflections__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\nInflector.inflector = new Inflector(_inflections__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Inflector);\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system/inflector.js?");

/***/ }),

/***/ "../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system/string.js":
/*!********************************************************************************************************!*\
  !*** ../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system/string.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pluralize: () => (/* binding */ pluralize),\n/* harmony export */   singularize: () => (/* binding */ singularize)\n/* harmony export */ });\n/* harmony import */ var _inflector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./inflector */ \"../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system/inflector.js\");\n\nfunction pluralize() {\n  return _inflector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].inflector.pluralize(...arguments);\n}\nfunction singularize(word) {\n  return _inflector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].inflector.singularize(word);\n}\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/system/string.js?");

/***/ }),

/***/ "../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/utils/make-helper.js":
/*!************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/utils/make-helper.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ makeHelper)\n/* harmony export */ });\n/* harmony import */ var ember__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ember */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2Fember&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var ember__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ember__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_component_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/component/helper */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fcomponent%2Fhelper&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_component_helper__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_component_helper__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction makeHelper(helperFunction) {\n  if ((_ember_component_helper__WEBPACK_IMPORTED_MODULE_1___default())) {\n    return _ember_component_helper__WEBPACK_IMPORTED_MODULE_1___default().helper(helperFunction);\n  }\n  if ((ember__WEBPACK_IMPORTED_MODULE_0___default().HTMLBars)) {\n    return ember__WEBPACK_IMPORTED_MODULE_0___default().HTMLBars.makeBoundHelper(helperFunction);\n  }\n  return ember__WEBPACK_IMPORTED_MODULE_0___default().Handlebars.makeBoundHelper(helperFunction);\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-inflector.73f9432a/node_modules/ember-inflector/lib/utils/make-helper.js?");

/***/ }),

/***/ "../rewritten-packages/ember-load-initializers.f6066884/node_modules/ember-load-initializers/index.js":
/*!************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-load-initializers.f6066884/node_modules/ember-load-initializers/index.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ loadInitializers)\n/* harmony export */ });\n/* harmony import */ var require__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! require */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2Frequire&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var require__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(require__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction resolveInitializer(moduleName) {\n  var module = require__WEBPACK_IMPORTED_MODULE_0___default()(moduleName, null, null, true);\n  if (!module) {\n    throw new Error(moduleName + ' must export an initializer.');\n  }\n  var initializer = module['default'];\n  if (!initializer) {\n    throw new Error(moduleName + ' must have a default export');\n  }\n  if (!initializer.name) {\n    initializer.name = moduleName.slice(moduleName.lastIndexOf('/') + 1);\n  }\n  return initializer;\n}\nfunction registerInitializers(app, moduleNames) {\n  for (var i = 0; i < moduleNames.length; i++) {\n    app.initializer(resolveInitializer(moduleNames[i]));\n  }\n}\nfunction registerInstanceInitializers(app, moduleNames) {\n  for (var i = 0; i < moduleNames.length; i++) {\n    app.instanceInitializer(resolveInitializer(moduleNames[i]));\n  }\n}\nfunction _endsWith(str, suffix) {\n  return str.indexOf(suffix, str.length - suffix.length) !== -1;\n}\n\n/**\n * Configure your application as it boots\n */\nfunction loadInitializers(app, prefix) {\n  var initializerPrefix = prefix + '/initializers/';\n  var instanceInitializerPrefix = prefix + '/instance-initializers/';\n  var initializers = [];\n  var instanceInitializers = [];\n  // this is 2 pass because generally the first pass is the problem\n  // and is reduced, and resolveInitializer has potential to deopt\n  var moduleNames = Object.keys(requirejs._eak_seen);\n  for (var i = 0; i < moduleNames.length; i++) {\n    var moduleName = moduleNames[i];\n    if (moduleName.lastIndexOf(initializerPrefix, 0) === 0) {\n      if (!_endsWith(moduleName, '-test')) {\n        initializers.push(moduleName);\n      }\n    } else if (moduleName.lastIndexOf(instanceInitializerPrefix, 0) === 0) {\n      if (!_endsWith(moduleName, '-test')) {\n        instanceInitializers.push(moduleName);\n      }\n    }\n  }\n  registerInitializers(app, initializers);\n  registerInstanceInitializers(app, instanceInitializers);\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-load-initializers.f6066884/node_modules/ember-load-initializers/index.js?");

/***/ }),

/***/ "../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/_app_/container-debug-adapter.js":
/*!******************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/_app_/container-debug-adapter.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ ember_resolver_container_debug_adapter__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var ember_resolver_container_debug_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ember-resolver/container-debug-adapter */ \"../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/container-debug-adapter.js\");\n\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/_app_/container-debug-adapter.js?");

/***/ }),

/***/ "../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/container-debug-adapter.js":
/*!************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/container-debug-adapter.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ember_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/array */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Farray&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_array__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_array__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_debug_container_debug_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/debug/container-debug-adapter */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug%2Fcontainer-debug-adapter&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug_container_debug_adapter__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_debug_container_debug_adapter__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index */ \"../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/index.js\");\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember/application */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fapplication&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ember_application__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nfunction getPod(type, key, prefix) {\n  let match = key.match(new RegExp('^/?' + prefix + '/(.+)/' + type + '$'));\n  if (match !== null) {\n    return match[1];\n  }\n}\n\n/*\n * This module defines a subclass of Ember.ContainerDebugAdapter that adds\n * support for resolving from modules.\n *\n */\n\n/* eslint-disable ember/no-classic-classes */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_ember_debug_container_debug_adapter__WEBPACK_IMPORTED_MODULE_1___default().extend({\n  _moduleRegistry: null,\n  init() {\n    this._super(...arguments);\n    this.namespace = (0,_ember_application__WEBPACK_IMPORTED_MODULE_3__.getOwner)(this).lookup('application:main');\n    if (!this._moduleRegistry) {\n      this._moduleRegistry = new _index__WEBPACK_IMPORTED_MODULE_2__.ModuleRegistry();\n    }\n  },\n  /**\n      The container of the application being debugged.\n      This property will be injected\n      on creation.\n       @property container\n      @default null\n      */\n\n  /**\n      The resolver instance of the application\n      being debugged. This property will be injected\n      on creation.\n       @property resolver\n      @default null\n      */\n\n  /**\n      Returns true if it is possible to catalog a list of available\n      classes in the resolver for a given type.\n       @method canCatalogEntriesByType\n      @param {string} type The type. e.g. \"model\", \"controller\", \"route\"\n      @return {boolean} whether a list is available for this type.\n      */\n  canCatalogEntriesByType(type) {\n    if (type === 'model') {\n      return true;\n    }\n    return this._super(...arguments);\n  },\n  /**\n      Returns the available classes a given type.\n       @method catalogEntriesByType\n      @param {string} type The type. e.g. \"model\", \"controller\", \"route\"\n      @return {Array} An array of classes.\n      */\n  catalogEntriesByType(type) {\n    let moduleNames = this._moduleRegistry.moduleNames();\n    let types = (0,_ember_array__WEBPACK_IMPORTED_MODULE_0__.A)();\n    let prefix = this.namespace.modulePrefix;\n    for (let i = 0, l = moduleNames.length; i < l; i++) {\n      let key = moduleNames[i];\n      if (key.indexOf(type) !== -1) {\n        // Check if it's a pod module\n        let name = getPod(type, key, this.namespace.podModulePrefix || prefix);\n        if (!name) {\n          // Not pod\n          name = key.split(type + 's/').pop();\n\n          // Support for different prefix (such as ember-cli addons).\n          // Uncomment the code below when\n          // https://github.com/ember-cli/ember-resolver/pull/80 is merged.\n\n          //let match = key.match('^/?(.+)/' + type);\n          //if (match && match[1] !== prefix) {\n          // Different prefix such as an addon\n          //name = match[1] + '@' + name;\n          //}\n        }\n        types.addObject(name);\n      }\n    }\n    return types;\n  }\n}));\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/container-debug-adapter.js?");

/***/ }),

/***/ "../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/features.js":
/*!*********************************************************************************************!*\
  !*** ../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/features.js ***!
  \*********************************************************************************************/
/***/ (() => {

eval("/*\n * This is a stub file, it must be on disk b/c babel-plugin-debug-macros\n * does not strip the module require when the transpiled variable usage is\n * stripped.\n */\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/features.js?");

/***/ }),

/***/ "../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/index.js":
/*!******************************************************************************************!*\
  !*** ../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/index.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModuleRegistry: () => (/* binding */ ModuleRegistry),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../@babel/runtime/helpers/esm/defineProperty.js */ \"../../@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var ember__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ember */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2Fember&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var ember__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ember__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember/object */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ember_object__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./string */ \"../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/string/index.js\");\n/* harmony import */ var _utils_class_factory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/class-factory */ \"../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/utils/class-factory.js\");\n\n/* globals requirejs, require */\n\n\n\n\n\n\nif (typeof requirejs.entries === 'undefined') {\n  requirejs.entries = requirejs._eak_seen;\n}\nclass ModuleRegistry {\n  constructor(entries) {\n    this._entries = entries || requirejs.entries;\n  }\n  moduleNames() {\n    return Object.keys(this._entries);\n  }\n  has(moduleName) {\n    return moduleName in this._entries;\n  }\n  get(...args) {\n    return window.require(...args);\n  }\n}\n\n/**\n * This module defines a subclass of Ember.DefaultResolver that adds two\n * important features:\n *\n *  1) The resolver makes the container aware of es6 modules via the AMD\n *     output. The loader's _moduleEntries is consulted so that classes can be\n *     resolved directly via the module loader, without needing a manual\n *     `import`.\n *  2) is able to provide injections to classes that implement `extend`\n *     (as is typical with Ember).\n */\nclass Resolver extends (_ember_object__WEBPACK_IMPORTED_MODULE_3___default()) {\n  constructor() {\n    super(...arguments);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"moduleBasedResolver\", true);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_deprecatedPodModulePrefix\", false);\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_normalizeCache\", Object.create(null));\n    /**\n     A listing of functions to test for moduleName's based on the provided\n     `parsedName`. This allows easy customization of additional module based\n     lookup patterns.\n      @property moduleNameLookupPatterns\n     @returns {Ember.Array}\n     */\n    (0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"moduleNameLookupPatterns\", [this.podBasedModuleName, this.podBasedComponentsInSubdir, this.mainModuleName, this.defaultModuleName, this.nestedColocationComponentModuleName]);\n    if (!this._moduleRegistry) {\n      this._moduleRegistry = new ModuleRegistry();\n    }\n    this.pluralizedTypes = this.pluralizedTypes || Object.create(null);\n    if (!this.pluralizedTypes.config) {\n      this.pluralizedTypes.config = 'config';\n    }\n  }\n  makeToString(factory, fullName) {\n    return '' + this.namespace.modulePrefix + '@' + fullName + ':';\n  }\n  shouldWrapInClassFactory( /* module, parsedName */\n  ) {\n    return false;\n  }\n  parseName(fullName) {\n    if (fullName.parsedName === true) {\n      return fullName;\n    }\n    let prefix, type, name;\n    let fullNameParts = fullName.split('@');\n    if (fullNameParts.length === 3) {\n      if (fullNameParts[0].length === 0) {\n        // leading scoped namespace: `@scope/pkg@type:name`\n        prefix = `@${fullNameParts[1]}`;\n        let prefixParts = fullNameParts[2].split(':');\n        type = prefixParts[0];\n        name = prefixParts[1];\n      } else {\n        // interweaved scoped namespace: `type:@scope/pkg@name`\n        prefix = `@${fullNameParts[1]}`;\n        type = fullNameParts[0].slice(0, -1);\n        name = fullNameParts[2];\n      }\n      if (type === 'template:components') {\n        name = `components/${name}`;\n        type = 'template';\n      }\n    } else if (fullNameParts.length === 2) {\n      let prefixParts = fullNameParts[0].split(':');\n      if (prefixParts.length === 2) {\n        if (prefixParts[1].length === 0) {\n          type = prefixParts[0];\n          name = `@${fullNameParts[1]}`;\n        } else {\n          prefix = prefixParts[1];\n          type = prefixParts[0];\n          name = fullNameParts[1];\n        }\n      } else {\n        let nameParts = fullNameParts[1].split(':');\n        prefix = fullNameParts[0];\n        type = nameParts[0];\n        name = nameParts[1];\n      }\n      if (type === 'template' && prefix.lastIndexOf('components/', 0) === 0) {\n        name = `components/${name}`;\n        prefix = prefix.slice(11);\n      }\n    } else {\n      fullNameParts = fullName.split(':');\n      type = fullNameParts[0];\n      name = fullNameParts[1];\n    }\n    let fullNameWithoutType = name;\n    let namespace = this.namespace;\n    let root = namespace;\n    return {\n      parsedName: true,\n      fullName: fullName,\n      prefix: prefix || this.prefix({\n        type: type\n      }),\n      type: type,\n      fullNameWithoutType: fullNameWithoutType,\n      name: name,\n      root: root,\n      resolveMethodName: 'resolve' + (0,_string__WEBPACK_IMPORTED_MODULE_4__.classify)(type)\n    };\n  }\n  resolveOther(parsedName) {\n    ( true && !(this.namespace.modulePrefix) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.assert)('`modulePrefix` must be defined', this.namespace.modulePrefix));\n    let normalizedModuleName = this.findModuleName(parsedName);\n    if (normalizedModuleName) {\n      let defaultExport = this._extractDefaultExport(normalizedModuleName, parsedName);\n      if (defaultExport === undefined) {\n        throw new Error(` Expected to find: '${parsedName.fullName}' within '${normalizedModuleName}' but got 'undefined'. Did you forget to 'export default' within '${normalizedModuleName}'?`);\n      }\n      if (this.shouldWrapInClassFactory(defaultExport, parsedName)) {\n        defaultExport = (0,_utils_class_factory__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(defaultExport);\n      }\n      return defaultExport;\n    }\n  }\n  normalize(fullName) {\n    return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this._normalize(fullName));\n  }\n  resolve(fullName) {\n    let parsedName = this.parseName(fullName);\n    let resolveMethodName = parsedName.resolveMethodName;\n    let resolved;\n    if (typeof this[resolveMethodName] === 'function') {\n      resolved = this[resolveMethodName](parsedName);\n    }\n    if (resolved == null) {\n      resolved = this.resolveOther(parsedName);\n    }\n    return resolved;\n  }\n  _normalize(fullName) {\n    // A) Convert underscores to dashes\n    // B) Convert camelCase to dash-case, except for components (their\n    //    templates) and helpers where we want to avoid shadowing camelCase\n    //    expressions\n    // C) replace `.` with `/` in order to make nested controllers work in the following cases\n    //      1. `needs: ['posts/post']`\n    //      2. `{{render \"posts/post\"}}`\n    //      3. `this.render('posts/post')` from Route\n\n    let split = fullName.split(':');\n    if (split.length > 1) {\n      let type = split[0];\n      if (type === 'component' || type === 'helper' || type === 'modifier' || type === 'template' && split[1].indexOf('components/') === 0) {\n        return type + ':' + split[1].replace(/_/g, '-');\n      } else {\n        return type + ':' + (0,_string__WEBPACK_IMPORTED_MODULE_4__.dasherize)(split[1].replace(/\\./g, '/'));\n      }\n    } else {\n      return fullName;\n    }\n  }\n  pluralize(type) {\n    return this.pluralizedTypes[type] || (this.pluralizedTypes[type] = type + 's');\n  }\n  podBasedLookupWithPrefix(podPrefix, parsedName) {\n    let fullNameWithoutType = parsedName.fullNameWithoutType;\n    if (parsedName.type === 'template') {\n      fullNameWithoutType = fullNameWithoutType.replace(/^components\\//, '');\n    }\n    return podPrefix + '/' + fullNameWithoutType + '/' + parsedName.type;\n  }\n  podBasedModuleName(parsedName) {\n    let podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;\n    return this.podBasedLookupWithPrefix(podPrefix, parsedName);\n  }\n  podBasedComponentsInSubdir(parsedName) {\n    let podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;\n    podPrefix = podPrefix + '/components';\n    if (parsedName.type === 'component' || /^components/.test(parsedName.fullNameWithoutType)) {\n      return this.podBasedLookupWithPrefix(podPrefix, parsedName);\n    }\n  }\n  resolveEngine(parsedName) {\n    let engineName = parsedName.fullNameWithoutType;\n    let engineModule = engineName + '/engine';\n    if (this._moduleRegistry.has(engineModule)) {\n      return this._extractDefaultExport(engineModule);\n    }\n  }\n  resolveRouteMap(parsedName) {\n    let engineName = parsedName.fullNameWithoutType;\n    let engineRoutesModule = engineName + '/routes';\n    if (this._moduleRegistry.has(engineRoutesModule)) {\n      let routeMap = this._extractDefaultExport(engineRoutesModule);\n      ( true && !(routeMap.isRouteMap) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.assert)(`The route map for ${engineName} should be wrapped by 'buildRoutes' before exporting.`, routeMap.isRouteMap));\n      return routeMap;\n    }\n  }\n  resolveTemplate(parsedName) {\n    let resolved = this.resolveOther(parsedName);\n    if (resolved == null) {\n      resolved = (ember__WEBPACK_IMPORTED_MODULE_1___default().TEMPLATES)[parsedName.fullNameWithoutType];\n    }\n    return resolved;\n  }\n  mainModuleName(parsedName) {\n    if (parsedName.fullNameWithoutType === 'main') {\n      // if router:main or adapter:main look for a module with just the type first\n      return parsedName.prefix + '/' + parsedName.type;\n    }\n  }\n  defaultModuleName(parsedName) {\n    return parsedName.prefix + '/' + this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType;\n  }\n  nestedColocationComponentModuleName(parsedName) {\n    if (parsedName.type === 'component') {\n      return parsedName.prefix + '/' + this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType + '/index';\n    }\n  }\n  prefix(parsedName) {\n    let tmpPrefix = this.namespace.modulePrefix;\n    if (this.namespace[parsedName.type + 'Prefix']) {\n      tmpPrefix = this.namespace[parsedName.type + 'Prefix'];\n    }\n    return tmpPrefix;\n  }\n  findModuleName(parsedName, loggingDisabled) {\n    let moduleNameLookupPatterns = this.moduleNameLookupPatterns;\n    let moduleName;\n    for (let index = 0, length = moduleNameLookupPatterns.length; index < length; index++) {\n      let item = moduleNameLookupPatterns[index];\n      let tmpModuleName = item.call(this, parsedName);\n\n      // allow treat all dashed and all underscored as the same thing\n      // supports components with dashes and other stuff with underscores.\n      if (tmpModuleName) {\n        tmpModuleName = this.chooseModuleName(tmpModuleName, parsedName);\n      }\n      if (tmpModuleName && this._moduleRegistry.has(tmpModuleName)) {\n        moduleName = tmpModuleName;\n      }\n      if (!loggingDisabled) {\n        this._logLookup(moduleName, parsedName, tmpModuleName);\n      }\n      if (moduleName) {\n        return moduleName;\n      }\n    }\n  }\n  chooseModuleName(moduleName, parsedName) {\n    let underscoredModuleName = (0,_string__WEBPACK_IMPORTED_MODULE_4__.underscore)(moduleName);\n    if (moduleName !== underscoredModuleName && this._moduleRegistry.has(moduleName) && this._moduleRegistry.has(underscoredModuleName)) {\n      throw new TypeError(`Ambiguous module names: '${moduleName}' and '${underscoredModuleName}'`);\n    }\n    if (this._moduleRegistry.has(moduleName)) {\n      return moduleName;\n    } else if (this._moduleRegistry.has(underscoredModuleName)) {\n      return underscoredModuleName;\n    }\n    // workaround for dasherized partials:\n    // something/something/-something => something/something/_something\n    let partializedModuleName = moduleName.replace(/\\/-([^/]*)$/, '/_$1');\n    if (this._moduleRegistry.has(partializedModuleName)) {\n      ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.deprecate)('Modules should not contain underscores. ' + 'Attempted to lookup \"' + moduleName + '\" which ' + 'was not found. Please rename \"' + partializedModuleName + '\" ' + 'to \"' + moduleName + '\" instead.', false, {\n        id: 'ember-resolver.underscored-modules',\n        until: '3.0.0',\n        for: 'ember-resolver',\n        since: '0.1.0'\n      }));\n      return partializedModuleName;\n    }\n    if (true /* DEBUG */) {\n      let isCamelCaseHelper = parsedName.type === 'helper' && /[a-z]+[A-Z]+/.test(moduleName);\n      if (isCamelCaseHelper) {\n        this._camelCaseHelperWarnedNames = this._camelCaseHelperWarnedNames || [];\n        let alreadyWarned = this._camelCaseHelperWarnedNames.indexOf(parsedName.fullName) > -1;\n        if (!alreadyWarned && this._moduleRegistry.has((0,_string__WEBPACK_IMPORTED_MODULE_4__.dasherize)(moduleName))) {\n          this._camelCaseHelperWarnedNames.push(parsedName.fullName);\n          ( true && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_2__.warn)('Attempted to lookup \"' + parsedName.fullName + '\" which ' + 'was not found. In previous versions of ember-resolver, a bug would have ' + 'caused the module at \"' + (0,_string__WEBPACK_IMPORTED_MODULE_4__.dasherize)(moduleName) + '\" to be ' + 'returned for this camel case helper name. This has been fixed. ' + 'Use the dasherized name to resolve the module that would have been ' + 'returned in previous versions.', false, {\n            id: 'ember-resolver.camelcase-helper-names',\n            until: '3.0.0'\n          }));\n        }\n      }\n    }\n  }\n\n  // used by Ember.DefaultResolver.prototype._logLookup\n  lookupDescription(fullName) {\n    let parsedName = this.parseName(fullName);\n    let moduleName = this.findModuleName(parsedName, true);\n    return moduleName;\n  }\n\n  // only needed until 1.6.0-beta.2 can be required\n  _logLookup(found, parsedName, description) {\n    if (!(ember__WEBPACK_IMPORTED_MODULE_1___default().ENV).LOG_MODULE_RESOLVER && !parsedName.root.LOG_RESOLVER) {\n      return;\n    }\n    let padding;\n    let symbol = found ? '[✓]' : '[ ]';\n    if (parsedName.fullName.length > 60) {\n      padding = '.';\n    } else {\n      padding = new Array(60 - parsedName.fullName.length).join('.');\n    }\n    if (!description) {\n      description = this.lookupDescription(parsedName);\n    }\n\n    /* eslint-disable no-console */\n    if (console && console.info) {\n      console.info(symbol, parsedName.fullName, padding, description);\n    }\n  }\n  knownForType(type) {\n    let moduleKeys = this._moduleRegistry.moduleNames();\n    let items = Object.create(null);\n    for (let index = 0, length = moduleKeys.length; index < length; index++) {\n      let moduleName = moduleKeys[index];\n      let fullname = this.translateToContainerFullname(type, moduleName);\n      if (fullname) {\n        items[fullname] = true;\n      }\n    }\n    return items;\n  }\n  translateToContainerFullname(type, moduleName) {\n    let prefix = this.prefix({\n      type\n    });\n\n    // Note: using string manipulation here rather than regexes for better performance.\n    // pod modules\n    // '^' + prefix + '/(.+)/' + type + '$'\n    let podPrefix = prefix + '/';\n    let podSuffix = '/' + type;\n    let start = moduleName.indexOf(podPrefix);\n    let end = moduleName.indexOf(podSuffix);\n    if (start === 0 && end === moduleName.length - podSuffix.length && moduleName.length > podPrefix.length + podSuffix.length) {\n      return type + ':' + moduleName.slice(start + podPrefix.length, end);\n    }\n\n    // non-pod modules\n    // '^' + prefix + '/' + pluralizedType + '/(.+)$'\n    let pluralizedType = this.pluralize(type);\n    let nonPodPrefix = prefix + '/' + pluralizedType + '/';\n    if (moduleName.indexOf(nonPodPrefix) === 0 && moduleName.length > nonPodPrefix.length) {\n      return type + ':' + moduleName.slice(nonPodPrefix.length);\n    }\n  }\n  _extractDefaultExport(normalizedModuleName) {\n    let module = this._moduleRegistry.get(normalizedModuleName, null, null, true /* force sync */);\n    if (module && module['default']) {\n      module = module['default'];\n    }\n    return module;\n  }\n}\n(0,_Users_pconejo_Desktop_PROYECTOS_internshipPabloConejo_Ember_tutorial_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(Resolver, \"moduleBasedResolver\", true);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Resolver);\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/index.js?");

/***/ }),

/***/ "../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/string/cache.js":
/*!*************************************************************************************************!*\
  !*** ../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/string/cache.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Cache)\n/* harmony export */ });\nclass Cache {\n  constructor(limit, func, store) {\n    this.limit = limit;\n    this.func = func;\n    this.store = store;\n    this.size = 0;\n    this.misses = 0;\n    this.hits = 0;\n    this.store = store || new Map();\n  }\n  get(key) {\n    let value = this.store.get(key);\n    if (this.store.has(key)) {\n      this.hits++;\n      return this.store.get(key);\n    } else {\n      this.misses++;\n      value = this.set(key, this.func(key));\n    }\n    return value;\n  }\n  set(key, value) {\n    if (this.limit > this.size) {\n      this.size++;\n      this.store.set(key, value);\n    }\n    return value;\n  }\n  purge() {\n    this.store.clear();\n    this.size = 0;\n    this.hits = 0;\n    this.misses = 0;\n  }\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/string/cache.js?");

/***/ }),

/***/ "../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/string/index.js":
/*!*************************************************************************************************!*\
  !*** ../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/string/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   classify: () => (/* binding */ classify),\n/* harmony export */   dasherize: () => (/* binding */ dasherize),\n/* harmony export */   decamelize: () => (/* binding */ decamelize),\n/* harmony export */   getString: () => (/* binding */ getString),\n/* harmony export */   getStrings: () => (/* binding */ getStrings),\n/* harmony export */   setStrings: () => (/* binding */ setStrings),\n/* harmony export */   underscore: () => (/* binding */ underscore)\n/* harmony export */ });\n/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cache */ \"../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/string/cache.js\");\n/* eslint-disable no-useless-escape */\n\nlet STRINGS = {};\nfunction setStrings(strings) {\n  STRINGS = strings;\n}\nfunction getStrings() {\n  return STRINGS;\n}\nfunction getString(name) {\n  return STRINGS[name];\n}\nconst STRING_DASHERIZE_REGEXP = /[ _]/g;\nconst STRING_DASHERIZE_CACHE = new _cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1000, key => decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-'));\nconst STRING_CLASSIFY_REGEXP_1 = /^(\\-|_)+(.)?/;\nconst STRING_CLASSIFY_REGEXP_2 = /(.)(\\-|\\_|\\.|\\s)+(.)?/g;\nconst STRING_CLASSIFY_REGEXP_3 = /(^|\\/|\\.)([a-z])/g;\nconst CLASSIFY_CACHE = new _cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1000, str => {\n  const replace1 = (_match, _separator, chr) => chr ? `_${chr.toUpperCase()}` : '';\n  const replace2 = (_match, initialChar, _separator, chr) => initialChar + (chr ? chr.toUpperCase() : '');\n  const parts = str.split('/');\n  for (let i = 0; i < parts.length; i++) {\n    parts[i] = parts[i].replace(STRING_CLASSIFY_REGEXP_1, replace1).replace(STRING_CLASSIFY_REGEXP_2, replace2);\n  }\n  return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3, (match /*, separator, chr */) => match.toUpperCase());\n});\nconst STRING_UNDERSCORE_REGEXP_1 = /([a-z\\d])([A-Z]+)/g;\nconst STRING_UNDERSCORE_REGEXP_2 = /\\-|\\s+/g;\nconst UNDERSCORE_CACHE = new _cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1000, str => str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase());\nconst STRING_DECAMELIZE_REGEXP = /([a-z\\d])([A-Z])/g;\nconst DECAMELIZE_CACHE = new _cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1000, str => str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase());\n/**\n  Converts a camelized string into all lower case separated by underscores.\n\n  ```javascript\n  import { decamelize } from '@ember/string';\n\n  decamelize('innerHTML');          // 'inner_html'\n  decamelize('action_name');        // 'action_name'\n  decamelize('css-class-name');     // 'css-class-name'\n  decamelize('my favorite items');  // 'my favorite items'\n  ```\n\n  @method decamelize\n  @param {String} str The string to decamelize.\n  @return {String} the decamelized string.\n  @public\n*/\nfunction decamelize(str) {\n  return DECAMELIZE_CACHE.get(str);\n}\n/**\n  Replaces underscores, spaces, or camelCase with dashes.\n\n  ```javascript\n  import { dasherize } from '@ember/string';\n\n  dasherize('innerHTML');                // 'inner-html'\n  dasherize('action_name');              // 'action-name'\n  dasherize('css-class-name');           // 'css-class-name'\n  dasherize('my favorite items');        // 'my-favorite-items'\n  dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'\n  ```\n\n  @method dasherize\n  @param {String} str The string to dasherize.\n  @return {String} the dasherized string.\n  @public\n*/\nfunction dasherize(str) {\n  return STRING_DASHERIZE_CACHE.get(str);\n}\n/**\n  Returns the UpperCamelCase form of a string.\n\n  ```javascript\n  import { classify } from '@ember/string';\n\n  classify('innerHTML');                   // 'InnerHTML'\n  classify('action_name');                 // 'ActionName'\n  classify('css-class-name');              // 'CssClassName'\n  classify('my favorite items');           // 'MyFavoriteItems'\n  classify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'\n  ```\n\n  @method classify\n  @param {String} str the string to classify\n  @return {String} the classified string\n  @public\n*/\nfunction classify(str) {\n  return CLASSIFY_CACHE.get(str);\n}\n/**\n  More general than decamelize. Returns the lower\\_case\\_and\\_underscored\n  form of a string.\n\n  ```javascript\n  import { underscore } from '@ember/string';\n\n  underscore('innerHTML');                 // 'inner_html'\n  underscore('action_name');               // 'action_name'\n  underscore('css-class-name');            // 'css_class_name'\n  underscore('my favorite items');         // 'my_favorite_items'\n  underscore('privateDocs/ownerInvoice');  // 'private_docs/owner_invoice'\n  ```\n\n  @method underscore\n  @param {String} str The string to underscore.\n  @return {String} the underscored string.\n  @public\n*/\nfunction underscore(str) {\n  return UNDERSCORE_CACHE.get(str);\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/string/index.js?");

/***/ }),

/***/ "../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/utils/class-factory.js":
/*!********************************************************************************************************!*\
  !*** ../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/utils/class-factory.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ classFactory)\n/* harmony export */ });\nfunction classFactory(klass) {\n  return {\n    create(injections) {\n      if (typeof klass.extend === 'function') {\n        return klass.extend(injections);\n      } else {\n        return klass;\n      }\n    }\n  };\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-resolver.69e2404e/node_modules/ember-resolver/utils/class-factory.js?");

/***/ }),

/***/ "../rewritten-packages/ember-tracked-storage-polyfill.20a34da1/node_modules/ember-tracked-storage-polyfill/index.js":
/*!**************************************************************************************************************************!*\
  !*** ../rewritten-packages/ember-tracked-storage-polyfill.20a34da1/node_modules/ember-tracked-storage-polyfill/index.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStorage: () => (/* binding */ createStorage),\n/* harmony export */   getValue: () => (/* binding */ getValue),\n/* harmony export */   setValue: () => (/* binding */ setValue)\n/* harmony export */ });\n/* harmony import */ var _glimmer_tracking__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/tracking */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40glimmer%2Ftracking&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _glimmer_tracking__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_glimmer_tracking__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_1__);\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\nclass TrackedStorageImpl {\n  constructor(initialValue, isEqual) {\n    this._value = this._lastValue = initialValue;\n    this._isEqual = isEqual;\n  }\n}\n__decorate([_glimmer_tracking__WEBPACK_IMPORTED_MODULE_0__.tracked], TrackedStorageImpl.prototype, \"_value\", void 0);\nfunction tripleEq(a, b) {\n  return a === b;\n}\nfunction createStorage(initialValue, isEqual = tripleEq) {\n  ( true && !(typeof isEqual === 'function') && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)('the second parameter to `createStorage` must be an equality function or undefined', typeof isEqual === 'function'));\n  return new TrackedStorageImpl(initialValue, isEqual);\n}\nfunction getValue(storage) {\n  ( true && !(storage instanceof TrackedStorageImpl) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)('getValue must be passed a tracked store created with `createStorage`.', storage instanceof TrackedStorageImpl));\n  return storage._value;\n}\nfunction setValue(storage, value) {\n  ( true && !(storage instanceof TrackedStorageImpl) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_1__.assert)('setValue must be passed a tracked store created with `createStorage`.', storage instanceof TrackedStorageImpl));\n  const {\n    _isEqual: isEqual,\n    _lastValue: lastValue\n  } = storage;\n  if (!isEqual(value, lastValue)) {\n    storage._value = storage._lastValue = value;\n  }\n}\n\n//# sourceURL=webpack://my-app/../rewritten-packages/ember-tracked-storage-polyfill.20a34da1/node_modules/ember-tracked-storage-polyfill/index.js?");

/***/ }),

/***/ "../../@embroider/macros/src/addon/es-compat2.js":
/*!*******************************************************!*\
  !*** ../../@embroider/macros/src/addon/es-compat2.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ esCompat)\n/* harmony export */ });\nfunction esCompat(m) {\n  return m?.__esModule ? m : {\n    default: m,\n    ...m\n  };\n}\n\n//# sourceURL=webpack://my-app/../../@embroider/macros/src/addon/es-compat2.js?");

/***/ }),

/***/ "../../@embroider/macros/src/addon/runtime.js":
/*!****************************************************!*\
  !*** ../../@embroider/macros/src/addon/runtime.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   each: () => (/* binding */ each),\n/* harmony export */   getGlobalConfig: () => (/* binding */ getGlobalConfig),\n/* harmony export */   isTesting: () => (/* binding */ isTesting),\n/* harmony export */   macroCondition: () => (/* binding */ macroCondition)\n/* harmony export */ });\n/*\n  These are the runtime implementations for the javascript macros that have\n  runtime implementations.\n\n  Not every macro has a runtime implementation, some only make sense in the\n  build and always run there.\n\n  Even when we have runtime implementations, we are still careful to emit static\n  errors during the build wherever possible, and runtime errors when necessary,\n  so that you're not surprised when you switch from runtime-mode to compile-time\n  mode.\n*/\n\n/*\n  CAUTION: in classic builds, this file gets shared by all present copies of\n  @embroider/macros. If you want to change its public API, you need to rename it\n  and update `pathToRuntime` in ../babel/state.ts to point at it, so that your\n  babel plugin and runtime will match.\n*/\n\nfunction each(array) {\n  if (!Array.isArray(array)) {\n    throw new Error(`the argument to the each() macro must be an array`);\n  }\n  return array;\n}\nfunction macroCondition(predicate) {\n  return predicate;\n}\n\n// This is here as a compile target for `getConfig` and `getOwnConfig` when\n// we're in runtime mode. This is not public API to call from your own code.\nfunction config(packageRoot) {\n  return runtimeConfig.packages[packageRoot];\n}\nfunction getGlobalConfig() {\n  return runtimeConfig.global;\n}\nfunction isTesting() {\n  let g = runtimeConfig.global;\n  let e = g && g['@embroider/macros'];\n  return Boolean(e && e.isTesting);\n}\nconst runtimeConfig = initializeRuntimeMacrosConfig();\n\n// this exists to be targeted by our babel plugin\nfunction initializeRuntimeMacrosConfig() {\n  return {\n    \"packages\": {\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/adapter\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": false,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": true,\n          \"HAS_MODEL_PACKAGE\": false,\n          \"HAS_JSON_API_PACKAGE\": false,\n          \"HAS_GRAPH_PACKAGE\": false,\n          \"HAS_REQUEST_PACKAGE\": false,\n          \"HAS_COMPAT_PACKAGE\": true,\n          \"HAS_TRACKING_PACKAGE\": false,\n          \"HAS_ADAPTER_PACKAGE\": true,\n          \"HAS_SERIALIZER_PACKAGE\": false\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/debug\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": true,\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        },\n        \"includeDataAdapterInProduction\": true\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/graph\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": false,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": true,\n          \"HAS_MODEL_PACKAGE\": false,\n          \"HAS_JSON_API_PACKAGE\": false,\n          \"HAS_GRAPH_PACKAGE\": true,\n          \"HAS_REQUEST_PACKAGE\": false,\n          \"HAS_COMPAT_PACKAGE\": false,\n          \"HAS_TRACKING_PACKAGE\": false,\n          \"HAS_ADAPTER_PACKAGE\": false,\n          \"HAS_SERIALIZER_PACKAGE\": false\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/json-api\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": false,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": true,\n          \"HAS_MODEL_PACKAGE\": false,\n          \"HAS_JSON_API_PACKAGE\": true,\n          \"HAS_GRAPH_PACKAGE\": true,\n          \"HAS_REQUEST_PACKAGE\": false,\n          \"HAS_COMPAT_PACKAGE\": false,\n          \"HAS_TRACKING_PACKAGE\": false,\n          \"HAS_ADAPTER_PACKAGE\": false,\n          \"HAS_SERIALIZER_PACKAGE\": false\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/legacy-compat\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": false,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": true,\n          \"HAS_MODEL_PACKAGE\": false,\n          \"HAS_JSON_API_PACKAGE\": true,\n          \"HAS_GRAPH_PACKAGE\": true,\n          \"HAS_REQUEST_PACKAGE\": true,\n          \"HAS_COMPAT_PACKAGE\": true,\n          \"HAS_TRACKING_PACKAGE\": false,\n          \"HAS_ADAPTER_PACKAGE\": false,\n          \"HAS_SERIALIZER_PACKAGE\": false\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/model\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": true,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": true,\n          \"HAS_MODEL_PACKAGE\": true,\n          \"HAS_JSON_API_PACKAGE\": true,\n          \"HAS_GRAPH_PACKAGE\": true,\n          \"HAS_REQUEST_PACKAGE\": false,\n          \"HAS_COMPAT_PACKAGE\": true,\n          \"HAS_TRACKING_PACKAGE\": true,\n          \"HAS_ADAPTER_PACKAGE\": false,\n          \"HAS_SERIALIZER_PACKAGE\": false\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/request\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": false,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": false,\n          \"HAS_MODEL_PACKAGE\": false,\n          \"HAS_JSON_API_PACKAGE\": false,\n          \"HAS_GRAPH_PACKAGE\": false,\n          \"HAS_REQUEST_PACKAGE\": true,\n          \"HAS_COMPAT_PACKAGE\": false,\n          \"HAS_TRACKING_PACKAGE\": false,\n          \"HAS_ADAPTER_PACKAGE\": false,\n          \"HAS_SERIALIZER_PACKAGE\": false\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/serializer\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": false,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": false,\n          \"HAS_MODEL_PACKAGE\": false,\n          \"HAS_JSON_API_PACKAGE\": false,\n          \"HAS_GRAPH_PACKAGE\": false,\n          \"HAS_REQUEST_PACKAGE\": false,\n          \"HAS_COMPAT_PACKAGE\": false,\n          \"HAS_TRACKING_PACKAGE\": false,\n          \"HAS_ADAPTER_PACKAGE\": false,\n          \"HAS_SERIALIZER_PACKAGE\": true\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/store\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": false,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": true,\n          \"HAS_MODEL_PACKAGE\": false,\n          \"HAS_JSON_API_PACKAGE\": false,\n          \"HAS_GRAPH_PACKAGE\": false,\n          \"HAS_REQUEST_PACKAGE\": true,\n          \"HAS_COMPAT_PACKAGE\": false,\n          \"HAS_TRACKING_PACKAGE\": true,\n          \"HAS_ADAPTER_PACKAGE\": false,\n          \"HAS_SERIALIZER_PACKAGE\": false\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/@ember-data/tracking\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": false,\n        \"packages\": {\n          \"HAS_EMBER_DATA_PACKAGE\": false,\n          \"HAS_STORE_PACKAGE\": false,\n          \"HAS_MODEL_PACKAGE\": false,\n          \"HAS_JSON_API_PACKAGE\": false,\n          \"HAS_GRAPH_PACKAGE\": false,\n          \"HAS_REQUEST_PACKAGE\": false,\n          \"HAS_COMPAT_PACKAGE\": false,\n          \"HAS_TRACKING_PACKAGE\": true,\n          \"HAS_ADAPTER_PACKAGE\": false,\n          \"HAS_SERIALIZER_PACKAGE\": false\n        },\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      },\n      \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/ember-data\": {\n        \"compatWith\": null,\n        \"debug\": {\n          \"LOG_PAYLOADS\": false,\n          \"LOG_OPERATIONS\": false,\n          \"LOG_MUTATIONS\": false,\n          \"LOG_NOTIFICATIONS\": false,\n          \"LOG_REQUESTS\": false,\n          \"LOG_REQUEST_STATUS\": false,\n          \"LOG_IDENTIFIERS\": false,\n          \"LOG_GRAPH\": false,\n          \"LOG_INSTANCE_CACHE\": false\n        },\n        \"deprecations\": {\n          \"DEPRECATE_CATCH_ALL\": true,\n          \"DEPRECATE_3_12\": true,\n          \"DEPRECATE_NON_STRICT_TYPES\": true,\n          \"DEPRECATE_NON_STRICT_ID\": true,\n          \"DEPRECATE_COMPUTED_CHAINS\": true,\n          \"DEPRECATE_LEGACY_IMPORTS\": true,\n          \"DEPRECATE_NON_UNIQUE_PAYLOADS\": true,\n          \"DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE\": true,\n          \"DEPRECATE_MANY_ARRAY_DUPLICATES\": true\n        },\n        \"features\": {\n          \"SAMPLE_FEATURE_FLAG\": false\n        },\n        \"includeDataAdapter\": true,\n        \"env\": {\n          \"TESTING\": true,\n          \"PRODUCTION\": false,\n          \"DEBUG\": true\n        }\n      }\n    },\n    \"global\": {\n      \"@embroider/macros\": {\n        \"isTesting\": false\n      },\n      \"@embroider/core\": {\n        \"active\": true\n      }\n    }\n  };\n}\nfunction updaterMethods() {\n  return {\n    config,\n    getGlobalConfig,\n    setConfig(packageRoot, value) {\n      runtimeConfig.packages[packageRoot] = value;\n    },\n    setGlobalConfig(key, value) {\n      runtimeConfig.global[key] = value;\n    }\n  };\n}\n\n// this is how runtime config can get injected at boot. I'm not sure yet if this\n// should be public API, but we certainly need it internally to set things like\n// the global fastboot.isRunning.\n//\n// consumers of this API push a function onto\n// window._embroider_macros_runtime_config. The function is given four methods\n// which allow it to read and write the per-package and global configs. The\n// reason for allowing both read & write is that merging strategies are up to\n// each consumers -- read first, then merge, then write.\n//\n// For an example user of this API, see where we generate\n// embroider_macros_fastboot_init.js' in @embroider/core.\nlet updaters = typeof window !== 'undefined' ? window._embroider_macros_runtime_config : undefined;\nif (updaters) {\n  let methods = updaterMethods();\n  for (let updater of updaters) {\n    updater(methods);\n  }\n}\n\n//# sourceURL=webpack://my-app/../../@embroider/macros/src/addon/runtime.js?");

/***/ }),

/***/ "../../css-loader/dist/runtime/api.js":
/*!********************************************!*\
  !*** ../../css-loader/dist/runtime/api.js ***!
  \********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item);\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \"\"]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};\n\n//# sourceURL=webpack://my-app/../../css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "../../ember-page-title/dist/_app_/helpers/page-title.js":
/*!***************************************************************!*\
  !*** ../../ember-page-title/dist/_app_/helpers/page-title.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ ember_page_title_helpers_page_title__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var ember_page_title_helpers_page_title__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ember-page-title/helpers/page-title */ \"../../ember-page-title/dist/helpers/page-title.js\");\n\n\n//# sourceURL=webpack://my-app/../../ember-page-title/dist/_app_/helpers/page-title.js?");

/***/ }),

/***/ "../../ember-page-title/dist/_app_/services/page-title.js":
/*!****************************************************************!*\
  !*** ../../ember-page-title/dist/_app_/services/page-title.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ ember_page_title_services_page_title__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var ember_page_title_services_page_title__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ember-page-title/services/page-title */ \"../../ember-page-title/dist/services/page-title.js\");\n\n\n//# sourceURL=webpack://my-app/../../ember-page-title/dist/_app_/services/page-title.js?");

/***/ }),

/***/ "../../ember-page-title/dist/_rollupPluginBabelHelpers-9wjJaosZ.js":
/*!*************************************************************************!*\
  !*** ../../ember-page-title/dist/_rollupPluginBabelHelpers-9wjJaosZ.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ _applyDecoratedDescriptor),\n/* harmony export */   a: () => (/* binding */ _initializerDefineProperty),\n/* harmony export */   b: () => (/* binding */ _defineProperty)\n/* harmony export */ });\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _initializerDefineProperty(target, property, descriptor, context) {\n  if (!descriptor) return;\n  Object.defineProperty(target, property, {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable,\n    writable: descriptor.writable,\n    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0\n  });\n}\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object.keys(descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object.defineProperty(target, property, desc);\n    desc = null;\n  }\n  return desc;\n}\n\n\n//# sourceURL=webpack://my-app/../../ember-page-title/dist/_rollupPluginBabelHelpers-9wjJaosZ.js?");

/***/ }),

/***/ "../../ember-page-title/dist/helpers/page-title.js":
/*!*********************************************************!*\
  !*** ../../ember-page-title/dist/helpers/page-title.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PageTitle)\n/* harmony export */ });\n/* harmony import */ var _rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-9wjJaosZ.js */ \"../../ember-page-title/dist/_rollupPluginBabelHelpers-9wjJaosZ.js\");\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/service */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fservice&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_service__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_component_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/component/helper */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fcomponent%2Fhelper&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_component_helper__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_component_helper__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _ember_object_internals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember/object/internals */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fobject%2Finternals&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_object_internals__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ember_object_internals__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nvar _dec, _class, _descriptor;\n/**\n * `{{pageTitle}}` helper used to set the title of the current route context.\n *\n * ```gjs\n * import { pageTitle } from 'ember-page-title';\n *\n * <template>\n *   {{pageTitle \"the text to set the tab's title to\"}}\n *   {{pageTitle \\@model.post.title}}\n * </template>\n * ```\n */\nlet PageTitle = (_dec = (0,_ember_service__WEBPACK_IMPORTED_MODULE_1__.inject)('page-title'), (_class = class PageTitle extends (_ember_component_helper__WEBPACK_IMPORTED_MODULE_2___default()) {\n  constructor(owner) {\n    super(owner);\n    (0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, \"tokens\", _descriptor, this);\n    (0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__.b)(this, \"tokenId\", (0,_ember_object_internals__WEBPACK_IMPORTED_MODULE_3__.guidFor)(this));\n    this.tokens.push({\n      id: this.tokenId\n    });\n  }\n  compute(params, userOptions) {\n    const options = {\n      ...userOptions,\n      id: this.tokenId,\n      title: params.join('')\n    };\n    this.tokens.push(options);\n    this.tokens.scheduleTitleUpdate();\n    // We must return an empty value here because otherwise\n    // invoking the pageTitle helper will render something\n    // in the component it's used in, and we don't want that.\n    //\n    // pageTitle is a side-effecting helper.\n    // We *synchronize* the document.title with our internal state.\n    return '';\n  }\n  willDestroy() {\n    super.willDestroy();\n    this.tokens.remove(this.tokenId);\n    this.tokens.scheduleTitleUpdate();\n  }\n}, _descriptor = (0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__._)(_class.prototype, \"tokens\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class));\n\n\n//# sourceURL=webpack://my-app/../../ember-page-title/dist/helpers/page-title.js?");

/***/ }),

/***/ "../../ember-page-title/dist/services/page-title.js":
/*!**********************************************************!*\
  !*** ../../ember-page-title/dist/services/page-title.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PageTitleService)\n/* harmony export */ });\n/* harmony import */ var _rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-9wjJaosZ.js */ \"../../ember-page-title/dist/_rollupPluginBabelHelpers-9wjJaosZ.js\");\n/* harmony import */ var _ember_runloop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/runloop */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Frunloop&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_runloop__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_runloop__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/service */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fservice&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_service__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_service__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _ember_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ember/utils */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Futils&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_utils__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ember_utils__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ember/debug */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fdebug&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_debug__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ember_debug__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nvar _dec, _dec2, _class, _descriptor, _descriptor2;\nconst isFastBoot = typeof FastBoot !== 'undefined';\nconst RouterEvent = {\n  ROUTE_DID_CHANGE: 'routeDidChange'\n};\nfunction hasResolveRegistration(owner) {\n  return `resolveRegistration` in owner;\n}\nfunction hasPageTitleConfig(fromEnv) {\n  if (typeof fromEnv !== 'object') return false;\n  if (fromEnv === null) return false;\n\n  // all properties on the pageTitle config are optional,\n  // so we can't check for more\n  return 'pageTitle' in fromEnv;\n}\nconst configKeys = ['separator', 'prepend', 'replace'];\n\n/**\n  @class page-title\n  @extends Ember.Service\n */\nlet PageTitleService = (_dec = (0,_ember_service__WEBPACK_IMPORTED_MODULE_2__.inject)('router'), _dec2 = (0,_ember_service__WEBPACK_IMPORTED_MODULE_2__.inject)('-document'), (_class = class PageTitleService extends (_ember_service__WEBPACK_IMPORTED_MODULE_2___default()) {\n  constructor(owner) {\n    super(owner);\n    (0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, \"router\", _descriptor, this);\n    // in fastboot context \"document\" is instance of\n    // ember-fastboot/simple-dom document\n    (0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, \"document\", _descriptor2, this);\n    (0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__.b)(this, \"tokens\", []);\n    (0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__.b)(this, \"_defaultConfig\", {\n      // The default separator to use between tokens.\n      separator: ' | ',\n      // The default prepend value to use.\n      prepend: true,\n      // The default replace value to use.\n      replace: null\n    });\n    (0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__.b)(this, \"scheduleTitleUpdate\", () => {\n      (0,_ember_runloop__WEBPACK_IMPORTED_MODULE_1__.scheduleOnce)('afterRender', this, this._updateTitle);\n    });\n    this._validateExistingTitleElement();\n    if (hasResolveRegistration(owner)) {\n      const config = owner.resolveRegistration('config:environment');\n      if (hasPageTitleConfig(config)) {\n        configKeys.forEach(key => {\n          if (!(0,_ember_utils__WEBPACK_IMPORTED_MODULE_3__.isEmpty)(config.pageTitle[key])) {\n            const configValue = config.pageTitle[key];\n\n            // SAFETY: how is one supposed to iterate over keys for an object and have it\n            //         known to the compiler that both objects, having the same shape,\n            //         will have the same type per-value?\n            //         as-is, the `configValue` is a union of all value-types from the object.\n            this._defaultConfig[key] = configValue;\n          }\n        });\n      }\n    }\n    this.router.on(RouterEvent.ROUTE_DID_CHANGE, this.scheduleTitleUpdate);\n  }\n  applyTokenDefaults(token) {\n    const defaultSeparator = this._defaultConfig.separator;\n    const defaultPrepend = this._defaultConfig.prepend;\n    const defaultReplace = this._defaultConfig.replace;\n    token.previous ??= null;\n    token.next ??= null;\n    if (token.separator == null) {\n      token.separator = defaultSeparator;\n    }\n    if (token.prepend == null && defaultPrepend != null) {\n      token.prepend = defaultPrepend;\n    }\n    if (token.replace == null && defaultReplace != null) {\n      token.replace = defaultReplace;\n    }\n  }\n  inheritFromPrevious(token) {\n    const previous = token.previous;\n    if (previous) {\n      if (token.separator == null) {\n        token.separator = previous.separator;\n      }\n      if (token.prepend == null) {\n        token.prepend = previous.prepend;\n      }\n    }\n  }\n  push(token) {\n    const tokenForId = this._findTokenById(token.id);\n    if (tokenForId) {\n      const index = this.tokens.indexOf(tokenForId);\n      const tokens = [...this.tokens];\n      const previous = tokenForId.previous;\n      token.previous = previous;\n      token.next = tokenForId.next;\n      this.inheritFromPrevious(token);\n      this.applyTokenDefaults(token);\n      tokens.splice(index, 1, token);\n      this.tokens = tokens;\n      return;\n    }\n    const previous = this.tokens.slice(-1)[0];\n    if (previous) {\n      token.previous = previous ?? null;\n      previous.next = token;\n      this.inheritFromPrevious(token);\n    }\n    this.applyTokenDefaults(token);\n    this.tokens = [...this.tokens, token];\n  }\n  remove(id) {\n    const token = this._findTokenById(id);\n    if (!token) return;\n    const {\n      next,\n      previous\n    } = token;\n    if (next) {\n      next.previous = previous;\n    }\n    if (previous) {\n      previous.next = next;\n    }\n    token.previous = token.next = null;\n    const tokens = [...this.tokens];\n    tokens.splice(tokens.indexOf(token), 1);\n    this.tokens = tokens;\n  }\n  get visibleTokens() {\n    const tokens = this.tokens;\n    let i = tokens ? tokens.length : 0;\n    const visible = [];\n    while (i--) {\n      const token = tokens[i];\n      if (!token) continue;\n      if (token.replace) {\n        visible.unshift(token);\n        break;\n      } else {\n        visible.unshift(token);\n      }\n    }\n    return visible;\n  }\n  get sortedTokens() {\n    const visible = this.visibleTokens;\n    if (!visible) return [];\n    let appending = true;\n    let group = [];\n    const groups = [group];\n    const frontGroups = [];\n    visible.forEach(token => {\n      if (token.front) {\n        frontGroups.unshift(token);\n      } else if (token.prepend) {\n        if (appending) {\n          appending = false;\n          group = [];\n          groups.push(group);\n        }\n        const lastToken = group[0];\n        if (lastToken) {\n          token = {\n            ...token\n          };\n          token.separator = lastToken.separator;\n        }\n        group.unshift(token);\n      } else {\n        if (!appending) {\n          appending = true;\n          group = [];\n          groups.push(group);\n        }\n        group.push(token);\n      }\n    });\n    return frontGroups.concat(groups.reduce((E, group) => E.concat(group), []));\n  }\n  toString() {\n    const tokens = this.sortedTokens;\n    const title = [];\n    for (let i = 0, len = tokens.length; i < len; i++) {\n      const token = tokens[i];\n      if (!token) continue;\n      if (token.title) {\n        title.push(token.title);\n        if (i + 1 < len) {\n          title.push(token.separator);\n        }\n      }\n    }\n    return title.join('');\n  }\n  willDestroy() {\n    super.willDestroy();\n    this.router.off(RouterEvent.ROUTE_DID_CHANGE, this.scheduleTitleUpdate);\n  }\n  _updateTitle() {\n    const toBeTitle = this.toString();\n    if (isFastBoot) {\n      this.updateFastbootTitle(toBeTitle);\n    } else {\n      /**\n       * When rendering app with \"?fastboot=false\" (http://ember-fastboot.com/docs/user-guide#disabling-fastboot)\n       * We will not have <title> element present in DOM.\n       *\n       * But this is fine as by HTML spec,\n       * one is created upon assigning \"document.title\" value;\n       *\n       * https://html.spec.whatwg.org/multipage/dom.html#dom-tree-accessors\n       */\n      this.document.title = toBeTitle;\n    }\n    this.titleDidUpdate(toBeTitle);\n  }\n\n  /**\n   * Validate if there's more than one title element present.\n   *\n   * Example: ember-cli-head can cause conflicting updates.\n   * @private\n   */\n  _validateExistingTitleElement() {\n    if (isFastBoot) {\n      return;\n    }\n    ( true && !(document.head.querySelectorAll('title').length <= 1) && (0,_ember_debug__WEBPACK_IMPORTED_MODULE_4__.assert)('[ember-page-title]: Multiple title elements found. Check for other addons like ember-cli-head updating <title> as well.', document.head.querySelectorAll('title').length <= 1));\n  }\n\n  /**\n   * Find token by id\n   *\n   * @param {String} id\n   * @private\n   */\n  _findTokenById(id) {\n    return this.tokens.find(token => token.id === id);\n  }\n  updateFastbootTitle(toBeTitle) {\n    if (!isFastBoot) {\n      return;\n    }\n    const headElement = this.document.head;\n    const headChildNodes = headElement.childNodes;\n\n    // Remove existing title elements from previous render cycle\n    for (let i = 0; i < headChildNodes.length; i++) {\n      const node = headChildNodes[i];\n      if (!node) continue;\n      if (node.nodeName.toLowerCase() === 'title') {\n        headElement.removeChild(node);\n      }\n    }\n\n    // Add title element with latest value\n    const titleEl = this.document.createElement('title');\n    const titleContents = this.document.createTextNode(toBeTitle);\n    titleEl.appendChild(titleContents);\n    headElement.appendChild(titleEl);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  titleDidUpdate(_title) {\n    // default is empty, meant to be overriden by user if desired\n  }\n}, (_descriptor = (0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__._)(_class.prototype, \"router\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = (0,_rollupPluginBabelHelpers_9wjJaosZ_js__WEBPACK_IMPORTED_MODULE_0__._)(_class.prototype, \"document\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class));\n\n\n//# sourceURL=webpack://my-app/../../ember-page-title/dist/services/page-title.js?");

/***/ }),

/***/ "../../ember-welcome-page/dist/_app_/components/welcome-page.js":
/*!**********************************************************************!*\
  !*** ../../ember-welcome-page/dist/_app_/components/welcome-page.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ ember_welcome_page_components_welcome_page__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var ember_welcome_page_components_welcome_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ember-welcome-page/components/welcome-page */ \"../../ember-welcome-page/dist/components/welcome-page.js\");\n\n\n//# sourceURL=webpack://my-app/../../ember-welcome-page/dist/_app_/components/welcome-page.js?");

/***/ }),

/***/ "../../ember-welcome-page/dist/components/welcome-page.js":
/*!****************************************************************!*\
  !*** ../../ember-welcome-page/dist/components/welcome-page.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WelcomePageComponent)\n/* harmony export */ });\n/* harmony import */ var _ember_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ember/component */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fcomponent&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_component__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ember_component__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ember/application */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fapplication&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_application__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ember_application__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ember_version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ember/version */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Fversion&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_version__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ember_version__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _glimmer_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @glimmer/component */ \"../rewritten-packages/@glimmer/component.9a0d5824/node_modules/@glimmer/component/index.js\");\n/* harmony import */ var _welcome_page_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./welcome-page.css */ \"../../ember-welcome-page/dist/components/welcome-page.css\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ember/template-factory */ \"../../@embroider/babel-loader-9/index.js?{\\\"variant\\\":{\\\"name\\\":\\\"dev\\\",\\\"runtime\\\":\\\"browser\\\",\\\"optimizeForProduction\\\":false},\\\"appBabelConfigPath\\\":\\\"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/.embroider/rewritten-app/_babel_config_.js\\\",\\\"cacheDirectory\\\":\\\"/private/var/folders/72/318g9xvj35v1rf1f4rgy4ngr0000gn/T/embroider/webpack-babel-loader\\\"}!../../@embroider/webpack/src/virtual-loader.js?f=%2F%40embroider%2Fext-cjs%2F%40ember%2Ftemplate-factory&a=%2FUsers%2Fpconejo%2FDesktop%2FPROYECTOS%2FinternshipPabloConejo%2FEmber-tutorial!\");\n/* harmony import */ var _ember_template_factory__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_ember_template_factory__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\nvar TEMPLATE = (0,_ember_template_factory__WEBPACK_IMPORTED_MODULE_5__.createTemplateFactory)(\n/*\n  <main id=\"ember-welcome-page-id-selector\">\n  <div class=\"columns\">\n    <div class=\"tomster\">\n      <img src=\"{{this.rootURL}}ember-welcome-page/images/construction.png\" alt=\"Under construction\">\n    </div>\n    <div class=\"welcome\">\n      <h1 id=\"title\">Congratulations, you made it!</h1>\n\n      <p>You&rsquo;ve officially spun up your Ember app. You&rsquo;ve got one more decision to make: what do you want to do next? We&rsquo;d suggest one of the following to help you get going:</p>\n      <ul>\n        <li><a href=\"{{this.urlForEmberGuides}}/getting-started/quick-start/\">Quick Start</a> - a quick introduction to how Ember works. Learn about defining your first route, writing a UI component and deploying your application.</li>\n        <li><a href=\"{{this.urlForEmberGuides}}/tutorial/\">Tutorial</a> - this is our more thorough, hands-on intro to Ember. Your crash course in Ember philosophy, background and some in-depth discussion of how things work (and why they work the way they do).</li>\n      </ul>\n      <p>If you run into problems, please join <a href=\"https://discord.gg/emberjs\">our community's Discord server</a> or visit <a href=\"http://discuss.emberjs.com/\">our forums</a> for ideas and answers— our community is filled with friendly folks who are willing to help! We enjoy helping new Ember developers get started, and our <a href=\"https://emberjs.com/community/\">Ember Community</a> is incredibly supportive.</p>\n    </div>\n  </div>\n  <p class=\"postscript\">To remove this welcome message, remove the\n    <code>\n      &lt;WelcomePage /&gt;\n    </code>\n    component from your\n    <code>\n      app/templates/application.hbs\n    </code>\n    file and save it...you'll see this page update soon after!\n  </p>\n</main>\n\n\n*/\n{\n  \"id\": \"GDK0rhwS\",\n  \"block\": \"[[[10,\\\"main\\\"],[14,1,\\\"ember-welcome-page-id-selector\\\"],[12],[1,\\\"\\\\n  \\\"],[10,0],[14,0,\\\"columns\\\"],[12],[1,\\\"\\\\n    \\\"],[10,0],[14,0,\\\"tomster\\\"],[12],[1,\\\"\\\\n      \\\"],[10,\\\"img\\\"],[15,\\\"src\\\",[29,[[30,0,[\\\"rootURL\\\"]],\\\"ember-welcome-page/images/construction.png\\\"]]],[14,\\\"alt\\\",\\\"Under construction\\\"],[12],[13],[1,\\\"\\\\n    \\\"],[13],[1,\\\"\\\\n    \\\"],[10,0],[14,0,\\\"welcome\\\"],[12],[1,\\\"\\\\n      \\\"],[10,\\\"h1\\\"],[14,1,\\\"title\\\"],[12],[1,\\\"Congratulations, you made it!\\\"],[13],[1,\\\"\\\\n\\\\n      \\\"],[10,2],[12],[1,\\\"You’ve officially spun up your Ember app. You’ve got one more decision to make: what do you want to do next? We’d suggest one of the following to help you get going:\\\"],[13],[1,\\\"\\\\n      \\\"],[10,\\\"ul\\\"],[12],[1,\\\"\\\\n        \\\"],[10,\\\"li\\\"],[12],[10,3],[15,6,[29,[[30,0,[\\\"urlForEmberGuides\\\"]],\\\"/getting-started/quick-start/\\\"]]],[12],[1,\\\"Quick Start\\\"],[13],[1,\\\" - a quick introduction to how Ember works. Learn about defining your first route, writing a UI component and deploying your application.\\\"],[13],[1,\\\"\\\\n        \\\"],[10,\\\"li\\\"],[12],[10,3],[15,6,[29,[[30,0,[\\\"urlForEmberGuides\\\"]],\\\"/tutorial/\\\"]]],[12],[1,\\\"Tutorial\\\"],[13],[1,\\\" - this is our more thorough, hands-on intro to Ember. Your crash course in Ember philosophy, background and some in-depth discussion of how things work (and why they work the way they do).\\\"],[13],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n      \\\"],[10,2],[12],[1,\\\"If you run into problems, please join \\\"],[10,3],[14,6,\\\"https://discord.gg/emberjs\\\"],[12],[1,\\\"our community's Discord server\\\"],[13],[1,\\\" or visit \\\"],[10,3],[14,6,\\\"http://discuss.emberjs.com/\\\"],[12],[1,\\\"our forums\\\"],[13],[1,\\\" for ideas and answers— our community is filled with friendly folks who are willing to help! We enjoy helping new Ember developers get started, and our \\\"],[10,3],[14,6,\\\"https://emberjs.com/community/\\\"],[12],[1,\\\"Ember Community\\\"],[13],[1,\\\" is incredibly supportive.\\\"],[13],[1,\\\"\\\\n    \\\"],[13],[1,\\\"\\\\n  \\\"],[13],[1,\\\"\\\\n  \\\"],[10,2],[14,0,\\\"postscript\\\"],[12],[1,\\\"To remove this welcome message, remove the\\\\n    \\\"],[10,\\\"code\\\"],[12],[1,\\\"\\\\n      <WelcomePage />\\\\n    \\\"],[13],[1,\\\"\\\\n    component from your\\\\n    \\\"],[10,\\\"code\\\"],[12],[1,\\\"\\\\n      app/templates/application.hbs\\\\n    \\\"],[13],[1,\\\"\\\\n    file and save it...you'll see this page update soon after!\\\\n  \\\"],[13],[1,\\\"\\\\n\\\"],[13],[1,\\\"\\\\n\\\\n\\\"]],[],false,[\\\"main\\\",\\\"div\\\",\\\"img\\\",\\\"h1\\\",\\\"p\\\",\\\"ul\\\",\\\"li\\\",\\\"a\\\",\\\"code\\\"]]\",\n  \"moduleName\": \"/Users/pconejo/Desktop/PROYECTOS/internshipPabloConejo/Ember-tutorial/node_modules/ember-welcome-page/dist/components/welcome-page.js\",\n  \"isStrictMode\": false\n});\nfunction isLatestVersion() {\n  const stableRegex = /^\\d+\\.\\d+\\.\\d+$/;\n  return !stableRegex.test(_ember_version__WEBPACK_IMPORTED_MODULE_2__.VERSION);\n}\n\n/* eslint-disable-next-line @typescript-eslint/no-empty-interface */\n\nclass WelcomePageComponent extends _glimmer_component__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\n  get rootURL() {\n    const config = (0,_ember_application__WEBPACK_IMPORTED_MODULE_1__.getOwner)(this).factoryFor('config:environment');\n    if (config) {\n      return config.class.rootURL;\n    }\n    return '/';\n  }\n  get urlForEmberGuides() {\n    if (isLatestVersion()) {\n      return `https://guides.emberjs.com/release`;\n    }\n    const [majorVersion, minorVersion] = _ember_version__WEBPACK_IMPORTED_MODULE_2__.VERSION.split('.');\n    const emberVersion = `${majorVersion}.${minorVersion}.0`;\n    return `https://guides.emberjs.com/v${emberVersion}`;\n  }\n}\n(0,_ember_component__WEBPACK_IMPORTED_MODULE_0__.setComponentTemplate)(TEMPLATE, WelcomePageComponent);\n\n\n//# sourceURL=webpack://my-app/../../ember-welcome-page/dist/components/welcome-page.js?");

/***/ }),

/***/ "../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js":
/*!********************************************************************!*\
  !*** ../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _applyDecoratedDescriptor)\n/* harmony export */ });\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object.keys(descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object.defineProperty(target, property, desc);\n    desc = null;\n  }\n  return desc;\n}\n\n//# sourceURL=webpack://my-app/../../@babel/runtime/helpers/esm/applyDecoratedDescriptor.js?");

/***/ }),

/***/ "../../@babel/runtime/helpers/esm/defineProperty.js":
/*!**********************************************************!*\
  !*** ../../@babel/runtime/helpers/esm/defineProperty.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _defineProperty)\n/* harmony export */ });\n/* harmony import */ var _toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toPropertyKey.js */ \"../../@babel/runtime/helpers/esm/toPropertyKey.js\");\n\nfunction _defineProperty(obj, key, value) {\n  key = (0,_toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n//# sourceURL=webpack://my-app/../../@babel/runtime/helpers/esm/defineProperty.js?");

/***/ }),

/***/ "../../@babel/runtime/helpers/esm/initializerDefineProperty.js":
/*!*********************************************************************!*\
  !*** ../../@babel/runtime/helpers/esm/initializerDefineProperty.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _initializerDefineProperty)\n/* harmony export */ });\nfunction _initializerDefineProperty(target, property, descriptor, context) {\n  if (!descriptor) return;\n  Object.defineProperty(target, property, {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable,\n    writable: descriptor.writable,\n    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0\n  });\n}\n\n//# sourceURL=webpack://my-app/../../@babel/runtime/helpers/esm/initializerDefineProperty.js?");

/***/ }),

/***/ "../../@babel/runtime/helpers/esm/initializerWarningHelper.js":
/*!********************************************************************!*\
  !*** ../../@babel/runtime/helpers/esm/initializerWarningHelper.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _initializerWarningHelper)\n/* harmony export */ });\nfunction _initializerWarningHelper(descriptor, context) {\n  throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.');\n}\n\n//# sourceURL=webpack://my-app/../../@babel/runtime/helpers/esm/initializerWarningHelper.js?");

/***/ }),

/***/ "../../@babel/runtime/helpers/esm/toPrimitive.js":
/*!*******************************************************!*\
  !*** ../../@babel/runtime/helpers/esm/toPrimitive.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ toPrimitive)\n/* harmony export */ });\n/* harmony import */ var _typeof_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typeof.js */ \"../../@babel/runtime/helpers/esm/typeof.js\");\n\nfunction toPrimitive(t, r) {\n  if (\"object\" != (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\n\n//# sourceURL=webpack://my-app/../../@babel/runtime/helpers/esm/toPrimitive.js?");

/***/ }),

/***/ "../../@babel/runtime/helpers/esm/toPropertyKey.js":
/*!*********************************************************!*\
  !*** ../../@babel/runtime/helpers/esm/toPropertyKey.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ toPropertyKey)\n/* harmony export */ });\n/* harmony import */ var _typeof_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typeof.js */ \"../../@babel/runtime/helpers/esm/typeof.js\");\n/* harmony import */ var _toPrimitive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toPrimitive.js */ \"../../@babel/runtime/helpers/esm/toPrimitive.js\");\n\n\nfunction toPropertyKey(t) {\n  var i = (0,_toPrimitive_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(t, \"string\");\n  return \"symbol\" == (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(i) ? i : i + \"\";\n}\n\n//# sourceURL=webpack://my-app/../../@babel/runtime/helpers/esm/toPropertyKey.js?");

/***/ }),

/***/ "../../@babel/runtime/helpers/esm/typeof.js":
/*!**************************************************!*\
  !*** ../../@babel/runtime/helpers/esm/typeof.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _typeof)\n/* harmony export */ });\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\n\n//# sourceURL=webpack://my-app/../../@babel/runtime/helpers/esm/typeof.js?");

/***/ })

}]);