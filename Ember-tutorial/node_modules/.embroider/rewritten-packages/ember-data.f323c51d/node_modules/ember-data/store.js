import JSONAPICache from '@ember-data/json-api';
import { adapterFor, cleanup, LegacyNetworkHandler, normalize, pushPayload, serializeRecord, serializerFor } from '@ember-data/legacy-compat';
import { buildSchema, instantiateRecord, modelFor, teardownRecord } from '@ember-data/model/hooks';
import RequestManager from '@ember-data/request';
import Fetch from '@ember-data/request/fetch';
import BaseStore, { CacheHandler } from '@ember-data/store';
function hasRequestManager(store) {
  return 'requestManager' in store;
}
export default class Store extends BaseStore {
  constructor(args) {
    super(args);
    this.adapterFor = adapterFor;
    this.serializerFor = serializerFor;
    this.pushPayload = pushPayload;
    this.normalize = normalize;
    this.serializeRecord = serializeRecord;
    if (!hasRequestManager(this)) {
      this.requestManager = new RequestManager();
      this.requestManager.use([LegacyNetworkHandler, Fetch]);
    }
    this.requestManager.useCache(CacheHandler);
    this.registerSchema(buildSchema(this));
  }
  createCache(storeWrapper) {
    return new JSONAPICache(storeWrapper);
  }
  instantiateRecord(identifier, createRecordArgs) {
    return instantiateRecord.call(this, identifier, createRecordArgs);
  }
  teardownRecord(record) {
    teardownRecord.call(this, record);
  }
  modelFor(type) {
    return modelFor.call(this, type) || super.modelFor(type);
  }
  destroy() {
    cleanup.call(this);
    super.destroy();
  }
}